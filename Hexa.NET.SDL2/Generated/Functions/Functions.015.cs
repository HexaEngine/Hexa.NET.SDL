// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		public static void GlTexCoord1D(double s)
		{
			GlTexCoord1DNative(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord1FNative(float s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[1035])(s);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[1035])(s);
			#endif
		}

		public static void GlTexCoord1F(float s)
		{
			GlTexCoord1FNative(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord1INative(int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1036])(s);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1036])(s);
			#endif
		}

		public static void GlTexCoord1I(int s)
		{
			GlTexCoord1INative(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord1SNative(short s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, void>)funcTable[1037])(s);
			#else
			((delegate* unmanaged[Cdecl]<short, void>)funcTable[1037])(s);
			#endif
		}

		public static void GlTexCoord1S(short s)
		{
			GlTexCoord1SNative(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2DNative(double s, double t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1038])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1038])(s, t);
			#endif
		}

		public static void GlTexCoord2D(double s, double t)
		{
			GlTexCoord2DNative(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2FNative(float s, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1039])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1039])(s, t);
			#endif
		}

		public static void GlTexCoord2F(float s, float t)
		{
			GlTexCoord2FNative(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2INative(int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[1040])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[1040])(s, t);
			#endif
		}

		public static void GlTexCoord2I(int s, int t)
		{
			GlTexCoord2INative(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2SNative(short s, short t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[1041])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[1041])(s, t);
			#endif
		}

		public static void GlTexCoord2S(short s, short t)
		{
			GlTexCoord2SNative(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3DNative(double s, double t, double r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[1042])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[1042])(s, t, r);
			#endif
		}

		public static void GlTexCoord3D(double s, double t, double r)
		{
			GlTexCoord3DNative(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3FNative(float s, float t, float r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[1043])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[1043])(s, t, r);
			#endif
		}

		public static void GlTexCoord3F(float s, float t, float r)
		{
			GlTexCoord3FNative(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3INative(int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[1044])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[1044])(s, t, r);
			#endif
		}

		public static void GlTexCoord3I(int s, int t, int r)
		{
			GlTexCoord3INative(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3SNative(short s, short t, short r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[1045])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[1045])(s, t, r);
			#endif
		}

		public static void GlTexCoord3S(short s, short t, short r)
		{
			GlTexCoord3SNative(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4DNative(double s, double t, double r, double q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[1046])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[1046])(s, t, r, q);
			#endif
		}

		public static void GlTexCoord4D(double s, double t, double r, double q)
		{
			GlTexCoord4DNative(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4FNative(float s, float t, float r, float q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1047])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1047])(s, t, r, q);
			#endif
		}

		public static void GlTexCoord4F(float s, float t, float r, float q)
		{
			GlTexCoord4FNative(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4INative(int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[1048])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[1048])(s, t, r, q);
			#endif
		}

		public static void GlTexCoord4I(int s, int t, int r, int q)
		{
			GlTexCoord4INative(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4SNative(short s, short t, short r, short q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[1049])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[1049])(s, t, r, q);
			#endif
		}

		public static void GlTexCoord4S(short s, short t, short r, short q)
		{
			GlTexCoord4SNative(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord1DvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1050])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1050])((nint)v);
			#endif
		}

		public static void GlTexCoord1Dv(double* v)
		{
			GlTexCoord1DvNative(v);
		}

		public static void GlTexCoord1Dv(ref double v)
		{
			fixed (double* pv = &v)
			{
				GlTexCoord1DvNative((double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord1FvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1051])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1051])((nint)v);
			#endif
		}

		public static void GlTexCoord1Fv(float* v)
		{
			GlTexCoord1FvNative(v);
		}

		public static void GlTexCoord1Fv(ref float v)
		{
			fixed (float* pv = &v)
			{
				GlTexCoord1FvNative((float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord1IvNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[1052])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1052])((nint)v);
			#endif
		}

		public static void GlTexCoord1Iv(int* v)
		{
			GlTexCoord1IvNative(v);
		}

		public static void GlTexCoord1Iv(ref int v)
		{
			fixed (int* pv = &v)
			{
				GlTexCoord1IvNative((int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord1SvNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[1053])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1053])((nint)v);
			#endif
		}

		public static void GlTexCoord1Sv(short* v)
		{
			GlTexCoord1SvNative(v);
		}

		public static void GlTexCoord1Sv(ref short v)
		{
			fixed (short* pv = &v)
			{
				GlTexCoord1SvNative((short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2DvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1054])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1054])((nint)v);
			#endif
		}

		public static void GlTexCoord2Dv(double* v)
		{
			GlTexCoord2DvNative(v);
		}

		public static void GlTexCoord2Dv(ref double v)
		{
			fixed (double* pv = &v)
			{
				GlTexCoord2DvNative((double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2FvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1055])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1055])((nint)v);
			#endif
		}

		public static void GlTexCoord2Fv(float* v)
		{
			GlTexCoord2FvNative(v);
		}

		public static void GlTexCoord2Fv(ref float v)
		{
			fixed (float* pv = &v)
			{
				GlTexCoord2FvNative((float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2IvNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[1056])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1056])((nint)v);
			#endif
		}

		public static void GlTexCoord2Iv(int* v)
		{
			GlTexCoord2IvNative(v);
		}

		public static void GlTexCoord2Iv(ref int v)
		{
			fixed (int* pv = &v)
			{
				GlTexCoord2IvNative((int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord2SvNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[1057])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1057])((nint)v);
			#endif
		}

		public static void GlTexCoord2Sv(short* v)
		{
			GlTexCoord2SvNative(v);
		}

		public static void GlTexCoord2Sv(ref short v)
		{
			fixed (short* pv = &v)
			{
				GlTexCoord2SvNative((short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3DvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1058])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1058])((nint)v);
			#endif
		}

		public static void GlTexCoord3Dv(double* v)
		{
			GlTexCoord3DvNative(v);
		}

		public static void GlTexCoord3Dv(ref double v)
		{
			fixed (double* pv = &v)
			{
				GlTexCoord3DvNative((double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3FvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1059])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1059])((nint)v);
			#endif
		}

		public static void GlTexCoord3Fv(float* v)
		{
			GlTexCoord3FvNative(v);
		}

		public static void GlTexCoord3Fv(ref float v)
		{
			fixed (float* pv = &v)
			{
				GlTexCoord3FvNative((float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3IvNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[1060])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1060])((nint)v);
			#endif
		}

		public static void GlTexCoord3Iv(int* v)
		{
			GlTexCoord3IvNative(v);
		}

		public static void GlTexCoord3Iv(ref int v)
		{
			fixed (int* pv = &v)
			{
				GlTexCoord3IvNative((int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord3SvNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[1061])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1061])((nint)v);
			#endif
		}

		public static void GlTexCoord3Sv(short* v)
		{
			GlTexCoord3SvNative(v);
		}

		public static void GlTexCoord3Sv(ref short v)
		{
			fixed (short* pv = &v)
			{
				GlTexCoord3SvNative((short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4DvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1062])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1062])((nint)v);
			#endif
		}

		public static void GlTexCoord4Dv(double* v)
		{
			GlTexCoord4DvNative(v);
		}

		public static void GlTexCoord4Dv(ref double v)
		{
			fixed (double* pv = &v)
			{
				GlTexCoord4DvNative((double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4FvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1063])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1063])((nint)v);
			#endif
		}

		public static void GlTexCoord4Fv(float* v)
		{
			GlTexCoord4FvNative(v);
		}

		public static void GlTexCoord4Fv(ref float v)
		{
			fixed (float* pv = &v)
			{
				GlTexCoord4FvNative((float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4IvNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[1064])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1064])((nint)v);
			#endif
		}

		public static void GlTexCoord4Iv(int* v)
		{
			GlTexCoord4IvNative(v);
		}

		public static void GlTexCoord4Iv(ref int v)
		{
			fixed (int* pv = &v)
			{
				GlTexCoord4IvNative((int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoord4SvNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[1065])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1065])((nint)v);
			#endif
		}

		public static void GlTexCoord4Sv(short* v)
		{
			GlTexCoord4SvNative(v);
		}

		public static void GlTexCoord4Sv(ref short v)
		{
			fixed (short* pv = &v)
			{
				GlTexCoord4SvNative((short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2DNative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1066])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1066])(x, y);
			#endif
		}

		public static void GlRasterPos2D(double x, double y)
		{
			GlRasterPos2DNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2FNative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1067])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1067])(x, y);
			#endif
		}

		public static void GlRasterPos2F(float x, float y)
		{
			GlRasterPos2FNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2INative(int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[1068])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[1068])(x, y);
			#endif
		}

		public static void GlRasterPos2I(int x, int y)
		{
			GlRasterPos2INative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2SNative(short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[1069])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[1069])(x, y);
			#endif
		}

		public static void GlRasterPos2S(short x, short y)
		{
			GlRasterPos2SNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3DNative(double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[1070])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[1070])(x, y, z);
			#endif
		}

		public static void GlRasterPos3D(double x, double y, double z)
		{
			GlRasterPos3DNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3FNative(float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[1071])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[1071])(x, y, z);
			#endif
		}

		public static void GlRasterPos3F(float x, float y, float z)
		{
			GlRasterPos3FNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3INative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[1072])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[1072])(x, y, z);
			#endif
		}

		public static void GlRasterPos3I(int x, int y, int z)
		{
			GlRasterPos3INative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3SNative(short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[1073])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[1073])(x, y, z);
			#endif
		}

		public static void GlRasterPos3S(short x, short y, short z)
		{
			GlRasterPos3SNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4DNative(double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[1074])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[1074])(x, y, z, w);
			#endif
		}

		public static void GlRasterPos4D(double x, double y, double z, double w)
		{
			GlRasterPos4DNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4FNative(float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1075])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1075])(x, y, z, w);
			#endif
		}

		public static void GlRasterPos4F(float x, float y, float z, float w)
		{
			GlRasterPos4FNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4INative(int x, int y, int z, int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[1076])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[1076])(x, y, z, w);
			#endif
		}

		public static void GlRasterPos4I(int x, int y, int z, int w)
		{
			GlRasterPos4INative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4SNative(short x, short y, short z, short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[1077])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[1077])(x, y, z, w);
			#endif
		}

		public static void GlRasterPos4S(short x, short y, short z, short w)
		{
			GlRasterPos4SNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2DvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1078])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1078])((nint)v);
			#endif
		}

		public static void GlRasterPos2Dv(double* v)
		{
			GlRasterPos2DvNative(v);
		}

		public static void GlRasterPos2Dv(ref double v)
		{
			fixed (double* pv = &v)
			{
				GlRasterPos2DvNative((double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2FvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1079])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1079])((nint)v);
			#endif
		}

		public static void GlRasterPos2Fv(float* v)
		{
			GlRasterPos2FvNative(v);
		}

		public static void GlRasterPos2Fv(ref float v)
		{
			fixed (float* pv = &v)
			{
				GlRasterPos2FvNative((float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2IvNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[1080])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1080])((nint)v);
			#endif
		}

		public static void GlRasterPos2Iv(int* v)
		{
			GlRasterPos2IvNative(v);
		}

		public static void GlRasterPos2Iv(ref int v)
		{
			fixed (int* pv = &v)
			{
				GlRasterPos2IvNative((int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos2SvNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[1081])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1081])((nint)v);
			#endif
		}

		public static void GlRasterPos2Sv(short* v)
		{
			GlRasterPos2SvNative(v);
		}

		public static void GlRasterPos2Sv(ref short v)
		{
			fixed (short* pv = &v)
			{
				GlRasterPos2SvNative((short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3DvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1082])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1082])((nint)v);
			#endif
		}

		public static void GlRasterPos3Dv(double* v)
		{
			GlRasterPos3DvNative(v);
		}

		public static void GlRasterPos3Dv(ref double v)
		{
			fixed (double* pv = &v)
			{
				GlRasterPos3DvNative((double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3FvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1083])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1083])((nint)v);
			#endif
		}

		public static void GlRasterPos3Fv(float* v)
		{
			GlRasterPos3FvNative(v);
		}

		public static void GlRasterPos3Fv(ref float v)
		{
			fixed (float* pv = &v)
			{
				GlRasterPos3FvNative((float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3IvNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[1084])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1084])((nint)v);
			#endif
		}

		public static void GlRasterPos3Iv(int* v)
		{
			GlRasterPos3IvNative(v);
		}

		public static void GlRasterPos3Iv(ref int v)
		{
			fixed (int* pv = &v)
			{
				GlRasterPos3IvNative((int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos3SvNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[1085])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1085])((nint)v);
			#endif
		}

		public static void GlRasterPos3Sv(short* v)
		{
			GlRasterPos3SvNative(v);
		}

		public static void GlRasterPos3Sv(ref short v)
		{
			fixed (short* pv = &v)
			{
				GlRasterPos3SvNative((short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4DvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1086])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1086])((nint)v);
			#endif
		}

		public static void GlRasterPos4Dv(double* v)
		{
			GlRasterPos4DvNative(v);
		}

		public static void GlRasterPos4Dv(ref double v)
		{
			fixed (double* pv = &v)
			{
				GlRasterPos4DvNative((double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4FvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1087])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1087])((nint)v);
			#endif
		}

		public static void GlRasterPos4Fv(float* v)
		{
			GlRasterPos4FvNative(v);
		}

		public static void GlRasterPos4Fv(ref float v)
		{
			fixed (float* pv = &v)
			{
				GlRasterPos4FvNative((float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4IvNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[1088])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1088])((nint)v);
			#endif
		}

		public static void GlRasterPos4Iv(int* v)
		{
			GlRasterPos4IvNative(v);
		}

		public static void GlRasterPos4Iv(ref int v)
		{
			fixed (int* pv = &v)
			{
				GlRasterPos4IvNative((int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRasterPos4SvNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[1089])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1089])((nint)v);
			#endif
		}

		public static void GlRasterPos4Sv(short* v)
		{
			GlRasterPos4SvNative(v);
		}

		public static void GlRasterPos4Sv(ref short v)
		{
			fixed (short* pv = &v)
			{
				GlRasterPos4SvNative((short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectdNative(double x1, double y1, double x2, double y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[1090])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[1090])(x1, y1, x2, y2);
			#endif
		}

		public static void GlRectd(double x1, double y1, double x2, double y2)
		{
			GlRectdNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectfNative(float x1, float y1, float x2, float y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1091])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1091])(x1, y1, x2, y2);
			#endif
		}

		public static void GlRectf(float x1, float y1, float x2, float y2)
		{
			GlRectfNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectiNative(int x1, int y1, int x2, int y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[1092])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[1092])(x1, y1, x2, y2);
			#endif
		}

		public static void GlRecti(int x1, int y1, int x2, int y2)
		{
			GlRectiNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectsNative(short x1, short y1, short x2, short y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[1093])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[1093])(x1, y1, x2, y2);
			#endif
		}

		public static void GlRects(short x1, short y1, short x2, short y2)
		{
			GlRectsNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectdvNative(double* v1, double* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, double*, void>)funcTable[1094])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1094])((nint)v1, (nint)v2);
			#endif
		}

		public static void GlRectdv(double* v1, double* v2)
		{
			GlRectdvNative(v1, v2);
		}

		public static void GlRectdv(ref double v1, double* v2)
		{
			fixed (double* pv1 = &v1)
			{
				GlRectdvNative((double*)pv1, v2);
			}
		}

		public static void GlRectdv(double* v1, ref double v2)
		{
			fixed (double* pv2 = &v2)
			{
				GlRectdvNative(v1, (double*)pv2);
			}
		}

		public static void GlRectdv(ref double v1, ref double v2)
		{
			fixed (double* pv1 = &v1)
			{
				fixed (double* pv2 = &v2)
				{
					GlRectdvNative((double*)pv1, (double*)pv2);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectfvNative(float* v1, float* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, float*, void>)funcTable[1095])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1095])((nint)v1, (nint)v2);
			#endif
		}

		public static void GlRectfv(float* v1, float* v2)
		{
			GlRectfvNative(v1, v2);
		}

		public static void GlRectfv(ref float v1, float* v2)
		{
			fixed (float* pv1 = &v1)
			{
				GlRectfvNative((float*)pv1, v2);
			}
		}

		public static void GlRectfv(float* v1, ref float v2)
		{
			fixed (float* pv2 = &v2)
			{
				GlRectfvNative(v1, (float*)pv2);
			}
		}

		public static void GlRectfv(ref float v1, ref float v2)
		{
			fixed (float* pv1 = &v1)
			{
				fixed (float* pv2 = &v2)
				{
					GlRectfvNative((float*)pv1, (float*)pv2);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectivNative(int* v1, int* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, int*, void>)funcTable[1096])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1096])((nint)v1, (nint)v2);
			#endif
		}

		public static void GlRectiv(int* v1, int* v2)
		{
			GlRectivNative(v1, v2);
		}

		public static void GlRectiv(ref int v1, int* v2)
		{
			fixed (int* pv1 = &v1)
			{
				GlRectivNative((int*)pv1, v2);
			}
		}

		public static void GlRectiv(int* v1, ref int v2)
		{
			fixed (int* pv2 = &v2)
			{
				GlRectivNative(v1, (int*)pv2);
			}
		}

		public static void GlRectiv(ref int v1, ref int v2)
		{
			fixed (int* pv1 = &v1)
			{
				fixed (int* pv2 = &v2)
				{
					GlRectivNative((int*)pv1, (int*)pv2);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlRectsvNative(short* v1, short* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, short*, void>)funcTable[1097])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1097])((nint)v1, (nint)v2);
			#endif
		}

		public static void GlRectsv(short* v1, short* v2)
		{
			GlRectsvNative(v1, v2);
		}

		public static void GlRectsv(ref short v1, short* v2)
		{
			fixed (short* pv1 = &v1)
			{
				GlRectsvNative((short*)pv1, v2);
			}
		}

		public static void GlRectsv(short* v1, ref short v2)
		{
			fixed (short* pv2 = &v2)
			{
				GlRectsvNative(v1, (short*)pv2);
			}
		}

		public static void GlRectsv(ref short v1, ref short v2)
		{
			fixed (short* pv1 = &v1)
			{
				fixed (short* pv2 = &v2)
				{
					GlRectsvNative((short*)pv1, (short*)pv2);
				}
			}
		}

		/// <summary>
		/// Vertex Arrays  (1.1)<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlVertexPointerNative(int size, uint type, int stride, void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)funcTable[1098])(size, type, stride, ptr);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, int, nint, void>)funcTable[1098])(size, type, stride, (nint)ptr);
			#endif
		}

		/// <summary>
		/// Vertex Arrays  (1.1)<br/>
		/// </summary>
		public static void GlVertexPointer(int size, uint type, int stride, void* ptr)
		{
			GlVertexPointerNative(size, type, stride, ptr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlNormalPointerNative(uint type, int stride, void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void*, void>)funcTable[1099])(type, stride, ptr);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[1099])(type, stride, (nint)ptr);
			#endif
		}

		public static void GlNormalPointer(uint type, int stride, void* ptr)
		{
			GlNormalPointerNative(type, stride, ptr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlColorPointerNative(int size, uint type, int stride, void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)funcTable[1100])(size, type, stride, ptr);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, int, nint, void>)funcTable[1100])(size, type, stride, (nint)ptr);
			#endif
		}

		public static void GlColorPointer(int size, uint type, int stride, void* ptr)
		{
			GlColorPointerNative(size, type, stride, ptr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlIndexPointerNative(uint type, int stride, void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void*, void>)funcTable[1101])(type, stride, ptr);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[1101])(type, stride, (nint)ptr);
			#endif
		}

		public static void GlIndexPointer(uint type, int stride, void* ptr)
		{
			GlIndexPointerNative(type, stride, ptr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexCoordPointerNative(int size, uint type, int stride, void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)funcTable[1102])(size, type, stride, ptr);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, int, nint, void>)funcTable[1102])(size, type, stride, (nint)ptr);
			#endif
		}

		public static void GlTexCoordPointer(int size, uint type, int stride, void* ptr)
		{
			GlTexCoordPointerNative(size, type, stride, ptr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEdgeFlagPointerNative(int stride, void* ptr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, void>)funcTable[1103])(stride, ptr);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[1103])(stride, (nint)ptr);
			#endif
		}

		public static void GlEdgeFlagPointer(int stride, void* ptr)
		{
			GlEdgeFlagPointerNative(stride, ptr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetPointervNative(uint pname, void** @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void**, void>)funcTable[1104])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1104])(pname, (nint)@params);
			#endif
		}

		public static void GlGetPointerv(uint pname, void** @params)
		{
			GlGetPointervNative(pname, @params);
		}

		public static void GlGetPointerv(uint pname, ref void* @params)
		{
			fixed (void** pparams = &@params)
			{
				GlGetPointervNative(pname, (void**)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlArrayElementNative(int i)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1105])(i);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1105])(i);
			#endif
		}

		public static void GlArrayElement(int i)
		{
			GlArrayElementNative(i);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlDrawArraysNative(uint mode, int first, int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1106])(mode, first, count);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1106])(mode, first, count);
			#endif
		}

		public static void GlDrawArrays(uint mode, int first, int count)
		{
			GlDrawArraysNative(mode, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlDrawElementsNative(uint mode, int count, uint type, void* indices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, void*, void>)funcTable[1107])(mode, count, type, indices);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, nint, void>)funcTable[1107])(mode, count, type, (nint)indices);
			#endif
		}

		public static void GlDrawElements(uint mode, int count, uint type, void* indices)
		{
			GlDrawElementsNative(mode, count, type, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlInterleavedArraysNative(uint format, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void*, void>)funcTable[1108])(format, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[1108])(format, stride, (nint)pointer);
			#endif
		}

		public static void GlInterleavedArrays(uint format, int stride, void* pointer)
		{
			GlInterleavedArraysNative(format, stride, pointer);
		}

		/// <summary>
		/// Lighting<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlShadeModelNative(uint mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1109])(mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1109])(mode);
			#endif
		}

		/// <summary>
		/// Lighting<br/>
		/// </summary>
		public static void GlShadeModel(uint mode)
		{
			GlShadeModelNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightfNative(uint light, uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1110])(light, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1110])(light, pname, param);
			#endif
		}

		public static void GlLightf(uint light, uint pname, float param)
		{
			GlLightfNative(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightiNative(uint light, uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1111])(light, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1111])(light, pname, param);
			#endif
		}

		public static void GlLighti(uint light, uint pname, int param)
		{
			GlLightiNative(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightfvNative(uint light, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1112])(light, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1112])(light, pname, (nint)@params);
			#endif
		}

		public static void GlLightfv(uint light, uint pname, float* @params)
		{
			GlLightfvNative(light, pname, @params);
		}

		public static void GlLightfv(uint light, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlLightfvNative(light, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightivNative(uint light, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1113])(light, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1113])(light, pname, (nint)@params);
			#endif
		}

		public static void GlLightiv(uint light, uint pname, int* @params)
		{
			GlLightivNative(light, pname, @params);
		}

		public static void GlLightiv(uint light, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlLightivNative(light, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetLightfvNative(uint light, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1114])(light, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1114])(light, pname, (nint)@params);
			#endif
		}

		public static void GlGetLightfv(uint light, uint pname, float* @params)
		{
			GlGetLightfvNative(light, pname, @params);
		}

		public static void GlGetLightfv(uint light, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetLightfvNative(light, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetLightivNative(uint light, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1115])(light, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1115])(light, pname, (nint)@params);
			#endif
		}

		public static void GlGetLightiv(uint light, uint pname, int* @params)
		{
			GlGetLightivNative(light, pname, @params);
		}

		public static void GlGetLightiv(uint light, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetLightivNative(light, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightModelfNative(uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1116])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1116])(pname, param);
			#endif
		}

		public static void GlLightModelf(uint pname, float param)
		{
			GlLightModelfNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightModeliNative(uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1117])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1117])(pname, param);
			#endif
		}

		public static void GlLightModeli(uint pname, int param)
		{
			GlLightModeliNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightModelfvNative(uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1118])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1118])(pname, (nint)@params);
			#endif
		}

		public static void GlLightModelfv(uint pname, float* @params)
		{
			GlLightModelfvNative(pname, @params);
		}

		public static void GlLightModelfv(uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlLightModelfvNative(pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLightModelivNative(uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1119])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1119])(pname, (nint)@params);
			#endif
		}

		public static void GlLightModeliv(uint pname, int* @params)
		{
			GlLightModelivNative(pname, @params);
		}

		public static void GlLightModeliv(uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlLightModelivNative(pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMaterialfNative(uint face, uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1120])(face, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1120])(face, pname, param);
			#endif
		}

		public static void GlMaterialf(uint face, uint pname, float param)
		{
			GlMaterialfNative(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMaterialiNative(uint face, uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1121])(face, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1121])(face, pname, param);
			#endif
		}

		public static void GlMateriali(uint face, uint pname, int param)
		{
			GlMaterialiNative(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMaterialfvNative(uint face, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1122])(face, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1122])(face, pname, (nint)@params);
			#endif
		}

		public static void GlMaterialfv(uint face, uint pname, float* @params)
		{
			GlMaterialfvNative(face, pname, @params);
		}

		public static void GlMaterialfv(uint face, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlMaterialfvNative(face, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMaterialivNative(uint face, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1123])(face, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1123])(face, pname, (nint)@params);
			#endif
		}

		public static void GlMaterialiv(uint face, uint pname, int* @params)
		{
			GlMaterialivNative(face, pname, @params);
		}

		public static void GlMaterialiv(uint face, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlMaterialivNative(face, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMaterialfvNative(uint face, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1124])(face, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1124])(face, pname, (nint)@params);
			#endif
		}

		public static void GlGetMaterialfv(uint face, uint pname, float* @params)
		{
			GlGetMaterialfvNative(face, pname, @params);
		}

		public static void GlGetMaterialfv(uint face, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetMaterialfvNative(face, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMaterialivNative(uint face, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1125])(face, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1125])(face, pname, (nint)@params);
			#endif
		}

		public static void GlGetMaterialiv(uint face, uint pname, int* @params)
		{
			GlGetMaterialivNative(face, pname, @params);
		}

		public static void GlGetMaterialiv(uint face, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetMaterialivNative(face, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlColorMaterialNative(uint face, uint mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[1126])(face, mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[1126])(face, mode);
			#endif
		}

		public static void GlColorMaterial(uint face, uint mode)
		{
			GlColorMaterialNative(face, mode);
		}

		/// <summary>
		/// Raster functions<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelZoomNative(float xfactor, float yfactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1127])(xfactor, yfactor);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1127])(xfactor, yfactor);
			#endif
		}

		/// <summary>
		/// Raster functions<br/>
		/// </summary>
		public static void GlPixelZoom(float xfactor, float yfactor)
		{
			GlPixelZoomNative(xfactor, yfactor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelStorefNative(uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1128])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1128])(pname, param);
			#endif
		}

		public static void GlPixelStoref(uint pname, float param)
		{
			GlPixelStorefNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelStoreiNative(uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1129])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1129])(pname, param);
			#endif
		}

		public static void GlPixelStorei(uint pname, int param)
		{
			GlPixelStoreiNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelTransferfNative(uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1130])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1130])(pname, param);
			#endif
		}

		public static void GlPixelTransferf(uint pname, float param)
		{
			GlPixelTransferfNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelTransferiNative(uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1131])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1131])(pname, param);
			#endif
		}

		public static void GlPixelTransferi(uint pname, int param)
		{
			GlPixelTransferiNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelMapfvNative(uint map, int mapsize, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[1132])(map, mapsize, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[1132])(map, mapsize, (nint)values);
			#endif
		}

		public static void GlPixelMapfv(uint map, int mapsize, float* values)
		{
			GlPixelMapfvNative(map, mapsize, values);
		}

		public static void GlPixelMapfv(uint map, int mapsize, ref float values)
		{
			fixed (float* pvalues = &values)
			{
				GlPixelMapfvNative(map, mapsize, (float*)pvalues);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelMapuivNative(uint map, int mapsize, uint* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint*, void>)funcTable[1133])(map, mapsize, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[1133])(map, mapsize, (nint)values);
			#endif
		}

		public static void GlPixelMapuiv(uint map, int mapsize, uint* values)
		{
			GlPixelMapuivNative(map, mapsize, values);
		}

		public static void GlPixelMapuiv(uint map, int mapsize, ref uint values)
		{
			fixed (uint* pvalues = &values)
			{
				GlPixelMapuivNative(map, mapsize, (uint*)pvalues);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPixelMapusvNative(uint map, int mapsize, ushort* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ushort*, void>)funcTable[1134])(map, mapsize, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[1134])(map, mapsize, (nint)values);
			#endif
		}

		public static void GlPixelMapusv(uint map, int mapsize, ushort* values)
		{
			GlPixelMapusvNative(map, mapsize, values);
		}

		public static void GlPixelMapusv(uint map, int mapsize, ref ushort values)
		{
			fixed (ushort* pvalues = &values)
			{
				GlPixelMapusvNative(map, mapsize, (ushort*)pvalues);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetPixelMapfvNative(uint map, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1135])(map, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1135])(map, (nint)values);
			#endif
		}

		public static void GlGetPixelMapfv(uint map, float* values)
		{
			GlGetPixelMapfvNative(map, values);
		}

		public static void GlGetPixelMapfv(uint map, ref float values)
		{
			fixed (float* pvalues = &values)
			{
				GlGetPixelMapfvNative(map, (float*)pvalues);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetPixelMapuivNative(uint map, uint* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[1136])(map, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1136])(map, (nint)values);
			#endif
		}

		public static void GlGetPixelMapuiv(uint map, uint* values)
		{
			GlGetPixelMapuivNative(map, values);
		}

		public static void GlGetPixelMapuiv(uint map, ref uint values)
		{
			fixed (uint* pvalues = &values)
			{
				GlGetPixelMapuivNative(map, (uint*)pvalues);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetPixelMapusvNative(uint map, ushort* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[1137])(map, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1137])(map, (nint)values);
			#endif
		}

		public static void GlGetPixelMapusv(uint map, ushort* values)
		{
			GlGetPixelMapusvNative(map, values);
		}

		public static void GlGetPixelMapusv(uint map, ref ushort values)
		{
			fixed (ushort* pvalues = &values)
			{
				GlGetPixelMapusvNative(map, (ushort*)pvalues);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlBitmapNative(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, float, float, float, float, byte*, void>)funcTable[1138])(width, height, xorig, yorig, xmove, ymove, bitmap);
			#else
			((delegate* unmanaged[Cdecl]<int, int, float, float, float, float, nint, void>)funcTable[1138])(width, height, xorig, yorig, xmove, ymove, (nint)bitmap);
			#endif
		}

		public static void GlBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
		{
			GlBitmapNative(width, height, xorig, yorig, xmove, ymove, bitmap);
		}

		public static void GlBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ref byte bitmap)
		{
			fixed (byte* pbitmap = &bitmap)
			{
				GlBitmapNative(width, height, xorig, yorig, xmove, ymove, (byte*)pbitmap);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlReadPixelsNative(int x, int y, int width, int height, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, void*, void>)funcTable[1139])(x, y, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, nint, void>)funcTable[1139])(x, y, width, height, format, type, (nint)pixels);
			#endif
		}

		public static void GlReadPixels(int x, int y, int width, int height, uint format, uint type, void* pixels)
		{
			GlReadPixelsNative(x, y, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlDrawPixelsNative(int width, int height, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, uint, uint, void*, void>)funcTable[1140])(width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<int, int, uint, uint, nint, void>)funcTable[1140])(width, height, format, type, (nint)pixels);
			#endif
		}

		public static void GlDrawPixels(int width, int height, uint format, uint type, void* pixels)
		{
			GlDrawPixelsNative(width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyPixelsNative(int x, int y, int width, int height, uint type)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, uint, void>)funcTable[1141])(x, y, width, height, type);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, uint, void>)funcTable[1141])(x, y, width, height, type);
			#endif
		}

		public static void GlCopyPixels(int x, int y, int width, int height, uint type)
		{
			GlCopyPixelsNative(x, y, width, height, type);
		}

		/// <summary>
		/// Stenciling<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlStencilFuncNative(uint func, int reference, uint mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[1142])(func, reference, mask);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[1142])(func, reference, mask);
			#endif
		}

		/// <summary>
		/// Stenciling<br/>
		/// </summary>
		public static void GlStencilFunc(uint func, int reference, uint mask)
		{
			GlStencilFuncNative(func, reference, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlStencilMaskNative(uint mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1143])(mask);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1143])(mask);
			#endif
		}

		public static void GlStencilMask(uint mask)
		{
			GlStencilMaskNative(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlStencilOpNative(uint fail, uint zfail, uint zpass)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[1144])(fail, zfail, zpass);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[1144])(fail, zfail, zpass);
			#endif
		}

		public static void GlStencilOp(uint fail, uint zfail, uint zpass)
		{
			GlStencilOpNative(fail, zfail, zpass);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlClearStencilNative(int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1145])(s);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1145])(s);
			#endif
		}

		public static void GlClearStencil(int s)
		{
			GlClearStencilNative(s);
		}

		/// <summary>
		/// Texture mapping<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexGendNative(uint coord, uint pname, double param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double, void>)funcTable[1146])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, double, void>)funcTable[1146])(coord, pname, param);
			#endif
		}

		/// <summary>
		/// Texture mapping<br/>
		/// </summary>
		public static void GlTexGend(uint coord, uint pname, double param)
		{
			GlTexGendNative(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexGenfNative(uint coord, uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1147])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1147])(coord, pname, param);
			#endif
		}

		public static void GlTexGenf(uint coord, uint pname, float param)
		{
			GlTexGenfNative(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexGeniNative(uint coord, uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1148])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1148])(coord, pname, param);
			#endif
		}

		public static void GlTexGeni(uint coord, uint pname, int param)
		{
			GlTexGeniNative(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexGendvNative(uint coord, uint pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)funcTable[1149])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1149])(coord, pname, (nint)@params);
			#endif
		}

		public static void GlTexGendv(uint coord, uint pname, double* @params)
		{
			GlTexGendvNative(coord, pname, @params);
		}

		public static void GlTexGendv(uint coord, uint pname, ref double @params)
		{
			fixed (double* pparams = &@params)
			{
				GlTexGendvNative(coord, pname, (double*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexGenfvNative(uint coord, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1150])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1150])(coord, pname, (nint)@params);
			#endif
		}

		public static void GlTexGenfv(uint coord, uint pname, float* @params)
		{
			GlTexGenfvNative(coord, pname, @params);
		}

		public static void GlTexGenfv(uint coord, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlTexGenfvNative(coord, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexGenivNative(uint coord, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1151])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1151])(coord, pname, (nint)@params);
			#endif
		}

		public static void GlTexGeniv(uint coord, uint pname, int* @params)
		{
			GlTexGenivNative(coord, pname, @params);
		}

		public static void GlTexGeniv(uint coord, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlTexGenivNative(coord, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexGendvNative(uint coord, uint pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)funcTable[1152])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1152])(coord, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexGendv(uint coord, uint pname, double* @params)
		{
			GlGetTexGendvNative(coord, pname, @params);
		}

		public static void GlGetTexGendv(uint coord, uint pname, ref double @params)
		{
			fixed (double* pparams = &@params)
			{
				GlGetTexGendvNative(coord, pname, (double*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexGenfvNative(uint coord, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1153])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1153])(coord, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexGenfv(uint coord, uint pname, float* @params)
		{
			GlGetTexGenfvNative(coord, pname, @params);
		}

		public static void GlGetTexGenfv(uint coord, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetTexGenfvNative(coord, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexGenivNative(uint coord, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1154])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1154])(coord, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexGeniv(uint coord, uint pname, int* @params)
		{
			GlGetTexGenivNative(coord, pname, @params);
		}

		public static void GlGetTexGeniv(uint coord, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetTexGenivNative(coord, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexEnvfNative(uint target, uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1155])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1155])(target, pname, param);
			#endif
		}

		public static void GlTexEnvf(uint target, uint pname, float param)
		{
			GlTexEnvfNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexEnviNative(uint target, uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1156])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1156])(target, pname, param);
			#endif
		}

		public static void GlTexEnvi(uint target, uint pname, int param)
		{
			GlTexEnviNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexEnvfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1157])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1157])(target, pname, (nint)@params);
			#endif
		}

		public static void GlTexEnvfv(uint target, uint pname, float* @params)
		{
			GlTexEnvfvNative(target, pname, @params);
		}

		public static void GlTexEnvfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlTexEnvfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexEnvivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1158])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1158])(target, pname, (nint)@params);
			#endif
		}

		public static void GlTexEnviv(uint target, uint pname, int* @params)
		{
			GlTexEnvivNative(target, pname, @params);
		}

		public static void GlTexEnviv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlTexEnvivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexEnvfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1159])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1159])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexEnvfv(uint target, uint pname, float* @params)
		{
			GlGetTexEnvfvNative(target, pname, @params);
		}

		public static void GlGetTexEnvfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetTexEnvfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexEnvivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1160])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1160])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexEnviv(uint target, uint pname, int* @params)
		{
			GlGetTexEnvivNative(target, pname, @params);
		}

		public static void GlGetTexEnviv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetTexEnvivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexParameterfNative(uint target, uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1161])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1161])(target, pname, param);
			#endif
		}

		public static void GlTexParameterf(uint target, uint pname, float param)
		{
			GlTexParameterfNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexParameteriNative(uint target, uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1162])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1162])(target, pname, param);
			#endif
		}

		public static void GlTexParameteri(uint target, uint pname, int param)
		{
			GlTexParameteriNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1163])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1163])(target, pname, (nint)@params);
			#endif
		}

		public static void GlTexParameterfv(uint target, uint pname, float* @params)
		{
			GlTexParameterfvNative(target, pname, @params);
		}

		public static void GlTexParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlTexParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1164])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1164])(target, pname, (nint)@params);
			#endif
		}

		public static void GlTexParameteriv(uint target, uint pname, int* @params)
		{
			GlTexParameterivNative(target, pname, @params);
		}

		public static void GlTexParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlTexParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1165])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1165])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexParameterfv(uint target, uint pname, float* @params)
		{
			GlGetTexParameterfvNative(target, pname, @params);
		}

		public static void GlGetTexParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetTexParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1166])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1166])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexParameteriv(uint target, uint pname, int* @params)
		{
			GlGetTexParameterivNative(target, pname, @params);
		}

		public static void GlGetTexParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetTexParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexLevelParameterfvNative(uint target, int level, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, float*, void>)funcTable[1167])(target, level, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, nint, void>)funcTable[1167])(target, level, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexLevelParameterfv(uint target, int level, uint pname, float* @params)
		{
			GlGetTexLevelParameterfvNative(target, level, pname, @params);
		}

		public static void GlGetTexLevelParameterfv(uint target, int level, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetTexLevelParameterfvNative(target, level, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexLevelParameterivNative(uint target, int level, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, int*, void>)funcTable[1168])(target, level, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, nint, void>)funcTable[1168])(target, level, pname, (nint)@params);
			#endif
		}

		public static void GlGetTexLevelParameteriv(uint target, int level, uint pname, int* @params)
		{
			GlGetTexLevelParameterivNative(target, level, pname, @params);
		}

		public static void GlGetTexLevelParameteriv(uint target, int level, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetTexLevelParameterivNative(target, level, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexImage1DNative(uint target, int level, int internalFormat, int width, int border, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, uint, uint, void*, void>)funcTable[1169])(target, level, internalFormat, width, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, uint, uint, nint, void>)funcTable[1169])(target, level, internalFormat, width, border, format, type, (nint)pixels);
			#endif
		}

		public static void GlTexImage1D(uint target, int level, int internalFormat, int width, int border, uint format, uint type, void* pixels)
		{
			GlTexImage1DNative(target, level, internalFormat, width, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexImage2DNative(uint target, int level, int internalFormat, int width, int height, int border, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)funcTable[1170])(target, level, internalFormat, width, height, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, nint, void>)funcTable[1170])(target, level, internalFormat, width, height, border, format, type, (nint)pixels);
			#endif
		}

		public static void GlTexImage2D(uint target, int level, int internalFormat, int width, int height, int border, uint format, uint type, void* pixels)
		{
			GlTexImage2DNative(target, level, internalFormat, width, height, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetTexImageNative(uint target, int level, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void*, void>)funcTable[1171])(target, level, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, nint, void>)funcTable[1171])(target, level, format, type, (nint)pixels);
			#endif
		}

		public static void GlGetTexImage(uint target, int level, uint format, uint type, void* pixels)
		{
			GlGetTexImageNative(target, level, format, type, pixels);
		}

		/// <summary>
		/// 1.1 functions <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGenTexturesNative(int n, uint* textures)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[1172])(n, textures);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[1172])(n, (nint)textures);
			#endif
		}

		/// <summary>
		/// 1.1 functions <br/>
		/// </summary>
		public static void GlGenTextures(int n, uint* textures)
		{
			GlGenTexturesNative(n, textures);
		}

		/// <summary>
		/// 1.1 functions <br/>
		/// </summary>
		public static void GlGenTextures(int n, ref uint textures)
		{
			fixed (uint* ptextures = &textures)
			{
				GlGenTexturesNative(n, (uint*)ptextures);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlDeleteTexturesNative(int n, uint* textures)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[1173])(n, textures);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[1173])(n, (nint)textures);
			#endif
		}

		public static void GlDeleteTextures(int n, uint* textures)
		{
			GlDeleteTexturesNative(n, textures);
		}

		public static void GlDeleteTextures(int n, ref uint textures)
		{
			fixed (uint* ptextures = &textures)
			{
				GlDeleteTexturesNative(n, (uint*)ptextures);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlBindTextureNative(uint target, uint texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[1174])(target, texture);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[1174])(target, texture);
			#endif
		}

		public static void GlBindTexture(uint target, uint texture)
		{
			GlBindTextureNative(target, texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPrioritizeTexturesNative(int n, uint* textures, float* priorities)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, float*, void>)funcTable[1175])(n, textures, priorities);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, void>)funcTable[1175])(n, (nint)textures, (nint)priorities);
			#endif
		}

		public static void GlPrioritizeTextures(int n, uint* textures, float* priorities)
		{
			GlPrioritizeTexturesNative(n, textures, priorities);
		}

		public static void GlPrioritizeTextures(int n, ref uint textures, float* priorities)
		{
			fixed (uint* ptextures = &textures)
			{
				GlPrioritizeTexturesNative(n, (uint*)ptextures, priorities);
			}
		}

		public static void GlPrioritizeTextures(int n, uint* textures, ref float priorities)
		{
			fixed (float* ppriorities = &priorities)
			{
				GlPrioritizeTexturesNative(n, textures, (float*)ppriorities);
			}
		}

		public static void GlPrioritizeTextures(int n, ref uint textures, ref float priorities)
		{
			fixed (uint* ptextures = &textures)
			{
				fixed (float* ppriorities = &priorities)
				{
					GlPrioritizeTexturesNative(n, (uint*)ptextures, (float*)ppriorities);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GlAreTexturesResidentNative(int n, uint* textures, byte* residences)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, uint*, byte*, byte>)funcTable[1176])(n, textures, residences);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, nint, nint, byte>)funcTable[1176])(n, (nint)textures, (nint)residences);
			#endif
		}

		public static byte GlAreTexturesResident(int n, uint* textures, byte* residences)
		{
			byte ret = GlAreTexturesResidentNative(n, textures, residences);
			return ret;
		}

		public static byte GlAreTexturesResident(int n, ref uint textures, byte* residences)
		{
			fixed (uint* ptextures = &textures)
			{
				byte ret = GlAreTexturesResidentNative(n, (uint*)ptextures, residences);
				return ret;
			}
		}

		public static byte GlAreTexturesResident(int n, uint* textures, ref byte residences)
		{
			fixed (byte* presidences = &residences)
			{
				byte ret = GlAreTexturesResidentNative(n, textures, (byte*)presidences);
				return ret;
			}
		}

		public static byte GlAreTexturesResident(int n, ref uint textures, ref byte residences)
		{
			fixed (uint* ptextures = &textures)
			{
				fixed (byte* presidences = &residences)
				{
					byte ret = GlAreTexturesResidentNative(n, (uint*)ptextures, (byte*)presidences);
					return ret;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GlIsTextureNative(uint texture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[1177])(texture);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[1177])(texture);
			#endif
		}

		public static byte GlIsTexture(uint texture)
		{
			byte ret = GlIsTextureNative(texture);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexSubImage1DNative(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, void*, void>)funcTable[1178])(target, level, xoffset, width, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, nint, void>)funcTable[1178])(target, level, xoffset, width, format, type, (nint)pixels);
			#endif
		}

		public static void GlTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
		{
			GlTexSubImage1DNative(target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexSubImage2DNative(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)funcTable[1179])(target, level, xoffset, yoffset, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, nint, void>)funcTable[1179])(target, level, xoffset, yoffset, width, height, format, type, (nint)pixels);
			#endif
		}

		public static void GlTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
		{
			GlTexSubImage2DNative(target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyTexImage1DNative(uint target, int level, uint internalformat, int x, int y, int width, int border)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, void>)funcTable[1180])(target, level, internalformat, x, y, width, border);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, void>)funcTable[1180])(target, level, internalformat, x, y, width, border);
			#endif
		}

		public static void GlCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border)
		{
			GlCopyTexImage1DNative(target, level, internalformat, x, y, width, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyTexImage2DNative(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void>)funcTable[1181])(target, level, internalformat, x, y, width, height, border);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void>)funcTable[1181])(target, level, internalformat, x, y, width, height, border);
			#endif
		}

		public static void GlCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
		{
			GlCopyTexImage2DNative(target, level, internalformat, x, y, width, height, border);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyTexSubImage1DNative(uint target, int level, int xoffset, int x, int y, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[1182])(target, level, xoffset, x, y, width);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[1182])(target, level, xoffset, x, y, width);
			#endif
		}

		public static void GlCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width)
		{
			GlCopyTexSubImage1DNative(target, level, xoffset, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyTexSubImage2DNative(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)funcTable[1183])(target, level, xoffset, yoffset, x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)funcTable[1183])(target, level, xoffset, yoffset, x, y, width, height);
			#endif
		}

		public static void GlCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			GlCopyTexSubImage2DNative(target, level, xoffset, yoffset, x, y, width, height);
		}

		/// <summary>
		/// Evaluators<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMap1DNative(uint target, double u1, double u2, int stride, int order, double* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, int, int, double*, void>)funcTable[1184])(target, u1, u2, stride, order, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, int, int, nint, void>)funcTable[1184])(target, u1, u2, stride, order, (nint)points);
			#endif
		}

		/// <summary>
		/// Evaluators<br/>
		/// </summary>
		public static void GlMap1D(uint target, double u1, double u2, int stride, int order, double* points)
		{
			GlMap1DNative(target, u1, u2, stride, order, points);
		}

		/// <summary>
		/// Evaluators<br/>
		/// </summary>
		public static void GlMap1D(uint target, double u1, double u2, int stride, int order, ref double points)
		{
			fixed (double* ppoints = &points)
			{
				GlMap1DNative(target, u1, u2, stride, order, (double*)ppoints);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMap1FNative(uint target, float u1, float u2, int stride, int order, float* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, int, int, float*, void>)funcTable[1185])(target, u1, u2, stride, order, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, int, int, nint, void>)funcTable[1185])(target, u1, u2, stride, order, (nint)points);
			#endif
		}

		public static void GlMap1F(uint target, float u1, float u2, int stride, int order, float* points)
		{
			GlMap1FNative(target, u1, u2, stride, order, points);
		}

		public static void GlMap1F(uint target, float u1, float u2, int stride, int order, ref float points)
		{
			fixed (float* ppoints = &points)
			{
				GlMap1FNative(target, u1, u2, stride, order, (float*)ppoints);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMap2DNative(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, int, int, double, double, int, int, double*, void>)funcTable[1186])(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, int, int, double, double, int, int, nint, void>)funcTable[1186])(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (nint)points);
			#endif
		}

		public static void GlMap2D(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
		{
			GlMap2DNative(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		public static void GlMap2D(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
		{
			fixed (double* ppoints = &points)
			{
				GlMap2DNative(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (double*)ppoints);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMap2FNative(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, int, int, float, float, int, int, float*, void>)funcTable[1187])(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, int, int, float, float, int, int, nint, void>)funcTable[1187])(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (nint)points);
			#endif
		}

		public static void GlMap2F(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
		{
			GlMap2FNative(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		public static void GlMap2F(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
		{
			fixed (float* ppoints = &points)
			{
				GlMap2FNative(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (float*)ppoints);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMapdvNative(uint target, uint query, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)funcTable[1188])(target, query, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1188])(target, query, (nint)v);
			#endif
		}

		public static void GlGetMapdv(uint target, uint query, double* v)
		{
			GlGetMapdvNative(target, query, v);
		}

		public static void GlGetMapdv(uint target, uint query, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlGetMapdvNative(target, query, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMapfvNative(uint target, uint query, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1189])(target, query, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1189])(target, query, (nint)v);
			#endif
		}

		public static void GlGetMapfv(uint target, uint query, float* v)
		{
			GlGetMapfvNative(target, query, v);
		}

		public static void GlGetMapfv(uint target, uint query, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlGetMapfvNative(target, query, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMapivNative(uint target, uint query, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1190])(target, query, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1190])(target, query, (nint)v);
			#endif
		}

		public static void GlGetMapiv(uint target, uint query, int* v)
		{
			GlGetMapivNative(target, query, v);
		}

		public static void GlGetMapiv(uint target, uint query, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlGetMapivNative(target, query, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord1DNative(double u)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, void>)funcTable[1191])(u);
			#else
			((delegate* unmanaged[Cdecl]<double, void>)funcTable[1191])(u);
			#endif
		}

		public static void GlEvalCoord1D(double u)
		{
			GlEvalCoord1DNative(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord1FNative(float u)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[1192])(u);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[1192])(u);
			#endif
		}

		public static void GlEvalCoord1F(float u)
		{
			GlEvalCoord1FNative(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord1DvNative(double* u)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1193])(u);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1193])((nint)u);
			#endif
		}

		public static void GlEvalCoord1Dv(double* u)
		{
			GlEvalCoord1DvNative(u);
		}

		public static void GlEvalCoord1Dv(ref double u)
		{
			fixed (double* pu = &u)
			{
				GlEvalCoord1DvNative((double*)pu);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord1FvNative(float* u)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1194])(u);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1194])((nint)u);
			#endif
		}

		public static void GlEvalCoord1Fv(float* u)
		{
			GlEvalCoord1FvNative(u);
		}

		public static void GlEvalCoord1Fv(ref float u)
		{
			fixed (float* pu = &u)
			{
				GlEvalCoord1FvNative((float*)pu);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord2DNative(double u, double v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1195])(u, v);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1195])(u, v);
			#endif
		}

		public static void GlEvalCoord2D(double u, double v)
		{
			GlEvalCoord2DNative(u, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord2FNative(float u, float v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1196])(u, v);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[1196])(u, v);
			#endif
		}

		public static void GlEvalCoord2F(float u, float v)
		{
			GlEvalCoord2FNative(u, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord2DvNative(double* u)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1197])(u);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1197])((nint)u);
			#endif
		}

		public static void GlEvalCoord2Dv(double* u)
		{
			GlEvalCoord2DvNative(u);
		}

		public static void GlEvalCoord2Dv(ref double u)
		{
			fixed (double* pu = &u)
			{
				GlEvalCoord2DvNative((double*)pu);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalCoord2FvNative(float* u)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1198])(u);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1198])((nint)u);
			#endif
		}

		public static void GlEvalCoord2Fv(float* u)
		{
			GlEvalCoord2FvNative(u);
		}

		public static void GlEvalCoord2Fv(ref float u)
		{
			fixed (float* pu = &u)
			{
				GlEvalCoord2FvNative((float*)pu);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMapGrid1DNative(int un, double u1, double u2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double, double, void>)funcTable[1199])(un, u1, u2);
			#else
			((delegate* unmanaged[Cdecl]<int, double, double, void>)funcTable[1199])(un, u1, u2);
			#endif
		}

		public static void GlMapGrid1D(int un, double u1, double u2)
		{
			GlMapGrid1DNative(un, u1, u2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMapGrid1FNative(int un, float u1, float u2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, float, void>)funcTable[1200])(un, u1, u2);
			#else
			((delegate* unmanaged[Cdecl]<int, float, float, void>)funcTable[1200])(un, u1, u2);
			#endif
		}

		public static void GlMapGrid1F(int un, float u1, float u2)
		{
			GlMapGrid1FNative(un, u1, u2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMapGrid2DNative(int un, double u1, double u2, int vn, double v1, double v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double, double, int, double, double, void>)funcTable[1201])(un, u1, u2, vn, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<int, double, double, int, double, double, void>)funcTable[1201])(un, u1, u2, vn, v1, v2);
			#endif
		}

		public static void GlMapGrid2D(int un, double u1, double u2, int vn, double v1, double v2)
		{
			GlMapGrid2DNative(un, u1, u2, vn, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMapGrid2FNative(int un, float u1, float u2, int vn, float v1, float v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, float, int, float, float, void>)funcTable[1202])(un, u1, u2, vn, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<int, float, float, int, float, float, void>)funcTable[1202])(un, u1, u2, vn, v1, v2);
			#endif
		}

		public static void GlMapGrid2F(int un, float u1, float u2, int vn, float v1, float v2)
		{
			GlMapGrid2FNative(un, u1, u2, vn, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalPoint1Native(int i)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1203])(i);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[1203])(i);
			#endif
		}

		public static void GlEvalPoint1(int i)
		{
			GlEvalPoint1Native(i);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalPoint2Native(int i, int j)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[1204])(i, j);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[1204])(i, j);
			#endif
		}

		public static void GlEvalPoint2(int i, int j)
		{
			GlEvalPoint2Native(i, j);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalMesh1Native(uint mode, int i1, int i2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1205])(mode, i1, i2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1205])(mode, i1, i2);
			#endif
		}

		public static void GlEvalMesh1(uint mode, int i1, int i2)
		{
			GlEvalMesh1Native(mode, i1, i2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlEvalMesh2Native(uint mode, int i1, int i2, int j1, int j2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1206])(mode, i1, i2, j1, j2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1206])(mode, i1, i2, j1, j2);
			#endif
		}

		public static void GlEvalMesh2(uint mode, int i1, int i2, int j1, int j2)
		{
			GlEvalMesh2Native(mode, i1, i2, j1, j2);
		}

		/// <summary>
		/// Fog<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlFogfNative(uint pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1207])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1207])(pname, param);
			#endif
		}

		/// <summary>
		/// Fog<br/>
		/// </summary>
		public static void GlFogf(uint pname, float param)
		{
			GlFogfNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlFogiNative(uint pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1208])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1208])(pname, param);
			#endif
		}

		public static void GlFogi(uint pname, int param)
		{
			GlFogiNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlFogfvNative(uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1209])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1209])(pname, (nint)@params);
			#endif
		}

		public static void GlFogfv(uint pname, float* @params)
		{
			GlFogfvNative(pname, @params);
		}

		public static void GlFogfv(uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlFogfvNative(pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlFogivNative(uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1210])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1210])(pname, (nint)@params);
			#endif
		}

		public static void GlFogiv(uint pname, int* @params)
		{
			GlFogivNative(pname, @params);
		}

		public static void GlFogiv(uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlFogivNative(pname, (int*)pparams);
			}
		}

		/// <summary>
		/// Selection and Feedback<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlFeedbackBufferNative(int size, uint type, float* buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, float*, void>)funcTable[1211])(size, type, buffer);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, nint, void>)funcTable[1211])(size, type, (nint)buffer);
			#endif
		}

		/// <summary>
		/// Selection and Feedback<br/>
		/// </summary>
		public static void GlFeedbackBuffer(int size, uint type, float* buffer)
		{
			GlFeedbackBufferNative(size, type, buffer);
		}

		/// <summary>
		/// Selection and Feedback<br/>
		/// </summary>
		public static void GlFeedbackBuffer(int size, uint type, ref float buffer)
		{
			fixed (float* pbuffer = &buffer)
			{
				GlFeedbackBufferNative(size, type, (float*)pbuffer);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPassThroughNative(float token)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[1212])(token);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[1212])(token);
			#endif
		}

		public static void GlPassThrough(float token)
		{
			GlPassThroughNative(token);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlSelectBufferNative(int size, uint* buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[1213])(size, buffer);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[1213])(size, (nint)buffer);
			#endif
		}

		public static void GlSelectBuffer(int size, uint* buffer)
		{
			GlSelectBufferNative(size, buffer);
		}

		public static void GlSelectBuffer(int size, ref uint buffer)
		{
			fixed (uint* pbuffer = &buffer)
			{
				GlSelectBufferNative(size, (uint*)pbuffer);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlInitNamesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1214])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1214])();
			#endif
		}

		public static void GlInitNames()
		{
			GlInitNamesNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLoadNameNative(uint name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1215])(name);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1215])(name);
			#endif
		}

		public static void GlLoadName(uint name)
		{
			GlLoadNameNative(name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPushNameNative(uint name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1216])(name);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1216])(name);
			#endif
		}

		public static void GlPushName(uint name)
		{
			GlPushNameNative(name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlPopNameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1217])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1217])();
			#endif
		}

		public static void GlPopName()
		{
			GlPopNameNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlDrawRangeElementsNative(uint mode, uint start, uint end, int count, uint type, void* indices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, void*, void>)funcTable[1218])(mode, start, end, count, type, indices);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, int, uint, nint, void>)funcTable[1218])(mode, start, end, count, type, (nint)indices);
			#endif
		}

		public static void GlDrawRangeElements(uint mode, uint start, uint end, int count, uint type, void* indices)
		{
			GlDrawRangeElementsNative(mode, start, end, count, type, indices);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexImage3DNative(uint target, int level, int internalFormat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, uint, uint, void*, void>)funcTable[1219])(target, level, internalFormat, width, height, depth, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, uint, uint, nint, void>)funcTable[1219])(target, level, internalFormat, width, height, depth, border, format, type, (nint)pixels);
			#endif
		}

		public static void GlTexImage3D(uint target, int level, int internalFormat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
		{
			GlTexImage3DNative(target, level, internalFormat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlTexSubImage3DNative(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)funcTable[1220])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, uint, nint, void>)funcTable[1220])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (nint)pixels);
			#endif
		}

		public static void GlTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
		{
			GlTexSubImage3DNative(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyTexSubImage3DNative(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, void>)funcTable[1221])(target, level, xoffset, yoffset, zoffset, x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, int, void>)funcTable[1221])(target, level, xoffset, yoffset, zoffset, x, y, width, height);
			#endif
		}

		public static void GlCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			GlCopyTexSubImage3DNative(target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlColorTableNative(uint target, uint internalformat, int width, uint format, uint type, void* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)funcTable[1222])(target, internalformat, width, format, type, table);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, nint, void>)funcTable[1222])(target, internalformat, width, format, type, (nint)table);
			#endif
		}

		public static void GlColorTable(uint target, uint internalformat, int width, uint format, uint type, void* table)
		{
			GlColorTableNative(target, internalformat, width, format, type, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlColorSubTableNative(uint target, int start, int count, uint format, uint type, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint, uint, void*, void>)funcTable[1223])(target, start, count, format, type, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, uint, uint, nint, void>)funcTable[1223])(target, start, count, format, type, (nint)data);
			#endif
		}

		public static void GlColorSubTable(uint target, int start, int count, uint format, uint type, void* data)
		{
			GlColorSubTableNative(target, start, count, format, type, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlColorTableParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1224])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1224])(target, pname, (nint)@params);
			#endif
		}

		public static void GlColorTableParameteriv(uint target, uint pname, int* @params)
		{
			GlColorTableParameterivNative(target, pname, @params);
		}

		public static void GlColorTableParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlColorTableParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlColorTableParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1225])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1225])(target, pname, (nint)@params);
			#endif
		}

		public static void GlColorTableParameterfv(uint target, uint pname, float* @params)
		{
			GlColorTableParameterfvNative(target, pname, @params);
		}

		public static void GlColorTableParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlColorTableParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyColorSubTableNative(uint target, int start, int x, int y, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1226])(target, start, x, y, width);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1226])(target, start, x, y, width);
			#endif
		}

		public static void GlCopyColorSubTable(uint target, int start, int x, int y, int width)
		{
			GlCopyColorSubTableNative(target, start, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyColorTableNative(uint target, uint internalformat, int x, int y, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)funcTable[1227])(target, internalformat, x, y, width);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)funcTable[1227])(target, internalformat, x, y, width);
			#endif
		}

		public static void GlCopyColorTable(uint target, uint internalformat, int x, int y, int width)
		{
			GlCopyColorTableNative(target, internalformat, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetColorTableNative(uint target, uint format, uint type, void* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)funcTable[1228])(target, format, type, table);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)funcTable[1228])(target, format, type, (nint)table);
			#endif
		}

		public static void GlGetColorTable(uint target, uint format, uint type, void* table)
		{
			GlGetColorTableNative(target, format, type, table);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetColorTableParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1229])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1229])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetColorTableParameterfv(uint target, uint pname, float* @params)
		{
			GlGetColorTableParameterfvNative(target, pname, @params);
		}

		public static void GlGetColorTableParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetColorTableParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetColorTableParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1230])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1230])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetColorTableParameteriv(uint target, uint pname, int* @params)
		{
			GlGetColorTableParameterivNative(target, pname, @params);
		}

		public static void GlGetColorTableParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetColorTableParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlBlendEquationNative(uint mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1231])(mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1231])(mode);
			#endif
		}

		public static void GlBlendEquation(uint mode)
		{
			GlBlendEquationNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlBlendColorNative(float red, float green, float blue, float alpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1232])(red, green, blue, alpha);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[1232])(red, green, blue, alpha);
			#endif
		}

		public static void GlBlendColor(float red, float green, float blue, float alpha)
		{
			GlBlendColorNative(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlHistogramNative(uint target, int width, uint internalformat, byte sink)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, byte, void>)funcTable[1233])(target, width, internalformat, sink);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, byte, void>)funcTable[1233])(target, width, internalformat, sink);
			#endif
		}

		public static void GlHistogram(uint target, int width, uint internalformat, byte sink)
		{
			GlHistogramNative(target, width, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlResetHistogramNative(uint target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1234])(target);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1234])(target);
			#endif
		}

		public static void GlResetHistogram(uint target)
		{
			GlResetHistogramNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetHistogramNative(uint target, byte reset, uint format, uint type, void* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, void*, void>)funcTable[1235])(target, reset, format, type, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, nint, void>)funcTable[1235])(target, reset, format, type, (nint)values);
			#endif
		}

		public static void GlGetHistogram(uint target, byte reset, uint format, uint type, void* values)
		{
			GlGetHistogramNative(target, reset, format, type, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetHistogramParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1236])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1236])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetHistogramParameterfv(uint target, uint pname, float* @params)
		{
			GlGetHistogramParameterfvNative(target, pname, @params);
		}

		public static void GlGetHistogramParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetHistogramParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetHistogramParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1237])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1237])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetHistogramParameteriv(uint target, uint pname, int* @params)
		{
			GlGetHistogramParameterivNative(target, pname, @params);
		}

		public static void GlGetHistogramParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetHistogramParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMinmaxNative(uint target, uint internalformat, byte sink)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, byte, void>)funcTable[1238])(target, internalformat, sink);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, byte, void>)funcTable[1238])(target, internalformat, sink);
			#endif
		}

		public static void GlMinmax(uint target, uint internalformat, byte sink)
		{
			GlMinmaxNative(target, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlResetMinmaxNative(uint target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1239])(target);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1239])(target);
			#endif
		}

		public static void GlResetMinmax(uint target)
		{
			GlResetMinmaxNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMinmaxNative(uint target, byte reset, uint format, uint types, void* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, void*, void>)funcTable[1240])(target, reset, format, types, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, uint, uint, nint, void>)funcTable[1240])(target, reset, format, types, (nint)values);
			#endif
		}

		public static void GlGetMinmax(uint target, byte reset, uint format, uint types, void* values)
		{
			GlGetMinmaxNative(target, reset, format, types, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMinmaxParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1241])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1241])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetMinmaxParameterfv(uint target, uint pname, float* @params)
		{
			GlGetMinmaxParameterfvNative(target, pname, @params);
		}

		public static void GlGetMinmaxParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetMinmaxParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetMinmaxParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1242])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1242])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetMinmaxParameteriv(uint target, uint pname, int* @params)
		{
			GlGetMinmaxParameterivNative(target, pname, @params);
		}

		public static void GlGetMinmaxParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetMinmaxParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlConvolutionFilter1DNative(uint target, uint internalformat, int width, uint format, uint type, void* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, void*, void>)funcTable[1243])(target, internalformat, width, format, type, image);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, uint, uint, nint, void>)funcTable[1243])(target, internalformat, width, format, type, (nint)image);
			#endif
		}

		public static void GlConvolutionFilter1D(uint target, uint internalformat, int width, uint format, uint type, void* image)
		{
			GlConvolutionFilter1DNative(target, internalformat, width, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlConvolutionFilter2DNative(uint target, uint internalformat, int width, int height, uint format, uint type, void* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, void*, void>)funcTable[1244])(target, internalformat, width, height, format, type, image);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, nint, void>)funcTable[1244])(target, internalformat, width, height, format, type, (nint)image);
			#endif
		}

		public static void GlConvolutionFilter2D(uint target, uint internalformat, int width, int height, uint format, uint type, void* image)
		{
			GlConvolutionFilter2DNative(target, internalformat, width, height, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlConvolutionParameterfNative(uint target, uint pname, float @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1245])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[1245])(target, pname, @params);
			#endif
		}

		public static void GlConvolutionParameterf(uint target, uint pname, float @params)
		{
			GlConvolutionParameterfNative(target, pname, @params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlConvolutionParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1246])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1246])(target, pname, (nint)@params);
			#endif
		}

		public static void GlConvolutionParameterfv(uint target, uint pname, float* @params)
		{
			GlConvolutionParameterfvNative(target, pname, @params);
		}

		public static void GlConvolutionParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlConvolutionParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlConvolutionParameteriNative(uint target, uint pname, int @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1247])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[1247])(target, pname, @params);
			#endif
		}

		public static void GlConvolutionParameteri(uint target, uint pname, int @params)
		{
			GlConvolutionParameteriNative(target, pname, @params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlConvolutionParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1248])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1248])(target, pname, (nint)@params);
			#endif
		}

		public static void GlConvolutionParameteriv(uint target, uint pname, int* @params)
		{
			GlConvolutionParameterivNative(target, pname, @params);
		}

		public static void GlConvolutionParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlConvolutionParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyConvolutionFilter1DNative(uint target, uint internalformat, int x, int y, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)funcTable[1249])(target, internalformat, x, y, width);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, void>)funcTable[1249])(target, internalformat, x, y, width);
			#endif
		}

		public static void GlCopyConvolutionFilter1D(uint target, uint internalformat, int x, int y, int width)
		{
			GlCopyConvolutionFilter1DNative(target, internalformat, x, y, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCopyConvolutionFilter2DNative(uint target, uint internalformat, int x, int y, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, void>)funcTable[1250])(target, internalformat, x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, int, void>)funcTable[1250])(target, internalformat, x, y, width, height);
			#endif
		}

		public static void GlCopyConvolutionFilter2D(uint target, uint internalformat, int x, int y, int width, int height)
		{
			GlCopyConvolutionFilter2DNative(target, internalformat, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetConvolutionFilterNative(uint target, uint format, uint type, void* image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void>)funcTable[1251])(target, format, type, image);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)funcTable[1251])(target, format, type, (nint)image);
			#endif
		}

		public static void GlGetConvolutionFilter(uint target, uint format, uint type, void* image)
		{
			GlGetConvolutionFilterNative(target, format, type, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetConvolutionParameterfvNative(uint target, uint pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[1252])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1252])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetConvolutionParameterfv(uint target, uint pname, float* @params)
		{
			GlGetConvolutionParameterfvNative(target, pname, @params);
		}

		public static void GlGetConvolutionParameterfv(uint target, uint pname, ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				GlGetConvolutionParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetConvolutionParameterivNative(uint target, uint pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[1253])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[1253])(target, pname, (nint)@params);
			#endif
		}

		public static void GlGetConvolutionParameteriv(uint target, uint pname, int* @params)
		{
			GlGetConvolutionParameterivNative(target, pname, @params);
		}

		public static void GlGetConvolutionParameteriv(uint target, uint pname, ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				GlGetConvolutionParameterivNative(target, pname, (int*)pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlSeparableFilter2DNative(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, void*, void*, void>)funcTable[1254])(target, internalformat, width, height, format, type, row, column);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, uint, uint, nint, nint, void>)funcTable[1254])(target, internalformat, width, height, format, type, (nint)row, (nint)column);
			#endif
		}

		public static void GlSeparableFilter2D(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column)
		{
			GlSeparableFilter2DNative(target, internalformat, width, height, format, type, row, column);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetSeparableFilterNative(uint target, uint format, uint type, void* row, void* column, void* span)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void*, void*, void*, void>)funcTable[1255])(target, format, type, row, column, span);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, nint, void>)funcTable[1255])(target, format, type, (nint)row, (nint)column, (nint)span);
			#endif
		}

		public static void GlGetSeparableFilter(uint target, uint format, uint type, void* row, void* column, void* span)
		{
			GlGetSeparableFilterNative(target, format, type, row, column, span);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlActiveTextureNative(uint texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1256])(texture);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1256])(texture);
			#endif
		}

		public static void GlActiveTexture(uint texture)
		{
			GlActiveTextureNative(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlClientActiveTextureNative(uint texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1257])(texture);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1257])(texture);
			#endif
		}

		public static void GlClientActiveTexture(uint texture)
		{
			GlClientActiveTextureNative(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCompressedTexImage1DNative(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, void*, void>)funcTable[1258])(target, level, internalformat, width, border, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, nint, void>)funcTable[1258])(target, level, internalformat, width, border, imageSize, (nint)data);
			#endif
		}

		public static void GlCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data)
		{
			GlCompressedTexImage1DNative(target, level, internalformat, width, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCompressedTexImage2DNative(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, void*, void>)funcTable[1259])(target, level, internalformat, width, height, border, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, nint, void>)funcTable[1259])(target, level, internalformat, width, height, border, imageSize, (nint)data);
			#endif
		}

		public static void GlCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data)
		{
			GlCompressedTexImage2DNative(target, level, internalformat, width, height, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCompressedTexImage3DNative(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, void*, void>)funcTable[1260])(target, level, internalformat, width, height, depth, border, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, int, int, int, int, int, nint, void>)funcTable[1260])(target, level, internalformat, width, height, depth, border, imageSize, (nint)data);
			#endif
		}

		public static void GlCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
		{
			GlCompressedTexImage3DNative(target, level, internalformat, width, height, depth, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCompressedTexSubImage1DNative(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, int, void*, void>)funcTable[1261])(target, level, xoffset, width, format, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, int, nint, void>)funcTable[1261])(target, level, xoffset, width, format, imageSize, (nint)data);
			#endif
		}

		public static void GlCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data)
		{
			GlCompressedTexSubImage1DNative(target, level, xoffset, width, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCompressedTexSubImage2DNative(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, int, void*, void>)funcTable[1262])(target, level, xoffset, yoffset, width, height, format, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, int, nint, void>)funcTable[1262])(target, level, xoffset, yoffset, width, height, format, imageSize, (nint)data);
			#endif
		}

		public static void GlCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
		{
			GlCompressedTexSubImage2DNative(target, level, xoffset, yoffset, width, height, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlCompressedTexSubImage3DNative(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, int, void*, void>)funcTable[1263])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, uint, int, nint, void>)funcTable[1263])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (nint)data);
			#endif
		}

		public static void GlCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
		{
			GlCompressedTexSubImage3DNative(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlGetCompressedTexImageNative(uint target, int lod, void* img)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void*, void>)funcTable[1264])(target, lod, img);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[1264])(target, lod, (nint)img);
			#endif
		}

		public static void GlGetCompressedTexImage(uint target, int lod, void* img)
		{
			GlGetCompressedTexImageNative(target, lod, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1DNative(uint target, double s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1265])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1265])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1D(uint target, double s)
		{
			GlMultiTexCoord1DNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1266])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1266])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Dv(uint target, double* v)
		{
			GlMultiTexCoord1DvNative(target, v);
		}

		public static void GlMultiTexCoord1Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord1DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1FNative(uint target, float s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1267])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1267])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1F(uint target, float s)
		{
			GlMultiTexCoord1FNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1268])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1268])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Fv(uint target, float* v)
		{
			GlMultiTexCoord1FvNative(target, v);
		}

		public static void GlMultiTexCoord1Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord1FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1INative(uint target, int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1269])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1269])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1I(uint target, int s)
		{
			GlMultiTexCoord1INative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1270])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1270])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Iv(uint target, int* v)
		{
			GlMultiTexCoord1IvNative(target, v);
		}

		public static void GlMultiTexCoord1Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord1IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1SNative(uint target, short s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[1271])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[1271])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1S(uint target, short s)
		{
			GlMultiTexCoord1SNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1272])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1272])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Sv(uint target, short* v)
		{
			GlMultiTexCoord1SvNative(target, v);
		}

		public static void GlMultiTexCoord1Sv(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord1SvNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2DNative(uint target, double s, double t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[1273])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[1273])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2D(uint target, double s, double t)
		{
			GlMultiTexCoord2DNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1274])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1274])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Dv(uint target, double* v)
		{
			GlMultiTexCoord2DvNative(target, v);
		}

		public static void GlMultiTexCoord2Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord2DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2FNative(uint target, float s, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[1275])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[1275])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2F(uint target, float s, float t)
		{
			GlMultiTexCoord2FNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1276])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1276])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Fv(uint target, float* v)
		{
			GlMultiTexCoord2FvNative(target, v);
		}

		public static void GlMultiTexCoord2Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord2FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2INative(uint target, int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1277])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1277])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2I(uint target, int s, int t)
		{
			GlMultiTexCoord2INative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1278])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1278])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Iv(uint target, int* v)
		{
			GlMultiTexCoord2IvNative(target, v);
		}

		public static void GlMultiTexCoord2Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord2IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2SNative(uint target, short s, short t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[1279])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[1279])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2S(uint target, short s, short t)
		{
			GlMultiTexCoord2SNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1280])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1280])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Sv(uint target, short* v)
		{
			GlMultiTexCoord2SvNative(target, v);
		}

		public static void GlMultiTexCoord2Sv(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord2SvNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3DNative(uint target, double s, double t, double r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[1281])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[1281])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3D(uint target, double s, double t, double r)
		{
			GlMultiTexCoord3DNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1282])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1282])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Dv(uint target, double* v)
		{
			GlMultiTexCoord3DvNative(target, v);
		}

		public static void GlMultiTexCoord3Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord3DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3FNative(uint target, float s, float t, float r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[1283])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[1283])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3F(uint target, float s, float t, float r)
		{
			GlMultiTexCoord3FNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1284])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1284])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Fv(uint target, float* v)
		{
			GlMultiTexCoord3FvNative(target, v);
		}

		public static void GlMultiTexCoord3Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord3FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3INative(uint target, int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[1285])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[1285])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3I(uint target, int s, int t, int r)
		{
			GlMultiTexCoord3INative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1286])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1286])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Iv(uint target, int* v)
		{
			GlMultiTexCoord3IvNative(target, v);
		}

		public static void GlMultiTexCoord3Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord3IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3SNative(uint target, short s, short t, short r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[1287])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[1287])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3S(uint target, short s, short t, short r)
		{
			GlMultiTexCoord3SNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1288])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1288])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Sv(uint target, short* v)
		{
			GlMultiTexCoord3SvNative(target, v);
		}

		public static void GlMultiTexCoord3Sv(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord3SvNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4DNative(uint target, double s, double t, double r, double q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[1289])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[1289])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4D(uint target, double s, double t, double r, double q)
		{
			GlMultiTexCoord4DNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1290])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1290])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4Dv(uint target, double* v)
		{
			GlMultiTexCoord4DvNative(target, v);
		}

		public static void GlMultiTexCoord4Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord4DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4FNative(uint target, float s, float t, float r, float q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[1291])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[1291])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4F(uint target, float s, float t, float r, float q)
		{
			GlMultiTexCoord4FNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1292])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1292])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4Fv(uint target, float* v)
		{
			GlMultiTexCoord4FvNative(target, v);
		}

		public static void GlMultiTexCoord4Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord4FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4INative(uint target, int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1293])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1293])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4I(uint target, int s, int t, int r, int q)
		{
			GlMultiTexCoord4INative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1294])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1294])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4Iv(uint target, int* v)
		{
			GlMultiTexCoord4IvNative(target, v);
		}

		public static void GlMultiTexCoord4Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord4IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4SNative(uint target, short s, short t, short r, short q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[1295])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[1295])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4S(uint target, short s, short t, short r, short q)
		{
			GlMultiTexCoord4SNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1296])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1296])(target, (nint)v);
			#endif
		}
	}
}
