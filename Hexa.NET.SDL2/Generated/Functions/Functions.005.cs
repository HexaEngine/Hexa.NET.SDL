// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, int* x1, ref int y1, ref int x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, x1, (int*)py1, (int*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, ref int x1, ref int y1, ref int x2, int* y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						SDLBool ret = IntersectRectAndLineNative(rect, (int*)px1, (int*)py1, (int*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, ref int x1, ref int y1, ref int x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* px2 = &x2)
						{
							SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, (int*)px1, (int*)py1, (int*)px2, y2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, int* x1, int* y1, int* x2, ref int y2)
		{
			fixed (int* py2 = &y2)
			{
				SDLBool ret = IntersectRectAndLineNative(rect, x1, y1, x2, (int*)py2);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, int* x1, int* y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, x1, y1, x2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, ref int x1, int* y1, int* x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = IntersectRectAndLineNative(rect, (int*)px1, y1, x2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, ref int x1, int* y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, (int*)px1, y1, x2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, int* x1, ref int y1, int* x2, ref int y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = IntersectRectAndLineNative(rect, x1, (int*)py1, x2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, int* x1, ref int y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, x1, (int*)py1, x2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, ref int x1, ref int y1, int* x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = IntersectRectAndLineNative(rect, (int*)px1, (int*)py1, x2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, ref int x1, ref int y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, (int*)px1, (int*)py1, x2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, int* x1, int* y1, ref int x2, ref int y2)
		{
			fixed (int* px2 = &x2)
			{
				fixed (int* py2 = &y2)
				{
					SDLBool ret = IntersectRectAndLineNative(rect, x1, y1, (int*)px2, (int*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, int* x1, int* y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, x1, y1, (int*)px2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, ref int x1, int* y1, ref int x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = IntersectRectAndLineNative(rect, (int*)px1, y1, (int*)px2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, ref int x1, int* y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, (int*)px1, y1, (int*)px2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, int* x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						SDLBool ret = IntersectRectAndLineNative(rect, x1, (int*)py1, (int*)px2, (int*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, int* x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, x1, (int*)py1, (int*)px2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(SDLRect* rect, ref int x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							SDLBool ret = IntersectRectAndLineNative(rect, (int*)px1, (int*)py1, (int*)px2, (int*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectRectAndLine(ref SDLRect rect, ref int x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* px2 = &x2)
						{
							fixed (int* py2 = &y2)
							{
								SDLBool ret = IntersectRectAndLineNative((SDLRect*)prect, (int*)px1, (int*)py1, (int*)px2, (int*)py2);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool HasIntersectionFNative(SDLFRect* a, SDLFRect* b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFRect*, SDLFRect*, SDLBool>)funcTable[298])(a, b);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, nint, SDLBool>)funcTable[298])((nint)a, (nint)b);
			#endif
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasIntersectionF(SDLFRect* a, SDLFRect* b)
		{
			SDLBool ret = HasIntersectionFNative(a, b);
			return ret;
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasIntersectionF(ref SDLFRect a, SDLFRect* b)
		{
			fixed (SDLFRect* pa = &a)
			{
				SDLBool ret = HasIntersectionFNative((SDLFRect*)pa, b);
				return ret;
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasIntersectionF(SDLFRect* a, ref SDLFRect b)
		{
			fixed (SDLFRect* pb = &b)
			{
				SDLBool ret = HasIntersectionFNative(a, (SDLFRect*)pb);
				return ret;
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasIntersectionF(ref SDLFRect a, ref SDLFRect b)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					SDLBool ret = HasIntersectionFNative((SDLFRect*)pa, (SDLFRect*)pb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool IntersectFRectNative(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFRect*, SDLFRect*, SDLFRect*, SDLBool>)funcTable[299])(a, b, result);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, nint, nint, SDLBool>)funcTable[299])((nint)a, (nint)b, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			SDLBool ret = IntersectFRectNative(a, b, result);
			return ret;
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(ref SDLFRect a, SDLFRect* b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				SDLBool ret = IntersectFRectNative((SDLFRect*)pa, b, result);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(SDLFRect* a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pb = &b)
			{
				SDLBool ret = IntersectFRectNative(a, (SDLFRect*)pb, result);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(ref SDLFRect a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					SDLBool ret = IntersectFRectNative((SDLFRect*)pa, (SDLFRect*)pb, result);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(SDLFRect* a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				SDLBool ret = IntersectFRectNative(a, b, (SDLFRect*)presult);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(ref SDLFRect a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = IntersectFRectNative((SDLFRect*)pa, b, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(SDLFRect* a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pb = &b)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = IntersectFRectNative(a, (SDLFRect*)pb, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRect(ref SDLFRect a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					fixed (SDLFRect* presult = &result)
					{
						SDLBool ret = IntersectFRectNative((SDLFRect*)pa, (SDLFRect*)pb, (SDLFRect*)presult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnionFRectNative(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLFRect*, SDLFRect*, SDLFRect*, void>)funcTable[300])(a, b, result);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[300])((nint)a, (nint)b, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			UnionFRectNative(a, b, result);
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(ref SDLFRect a, SDLFRect* b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				UnionFRectNative((SDLFRect*)pa, b, result);
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(SDLFRect* a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pb = &b)
			{
				UnionFRectNative(a, (SDLFRect*)pb, result);
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(ref SDLFRect a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					UnionFRectNative((SDLFRect*)pa, (SDLFRect*)pb, result);
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(SDLFRect* a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				UnionFRectNative(a, b, (SDLFRect*)presult);
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(ref SDLFRect a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* presult = &result)
				{
					UnionFRectNative((SDLFRect*)pa, b, (SDLFRect*)presult);
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(SDLFRect* a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pb = &b)
			{
				fixed (SDLFRect* presult = &result)
				{
					UnionFRectNative(a, (SDLFRect*)pb, (SDLFRect*)presult);
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnionFRect(ref SDLFRect a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					fixed (SDLFRect* presult = &result)
					{
						UnionFRectNative((SDLFRect*)pa, (SDLFRect*)pb, (SDLFRect*)presult);
					}
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool EncloseFPointsNative(SDLFPoint* points, int count, SDLFRect* clip, SDLFRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFPoint*, int, SDLFRect*, SDLFRect*, SDLBool>)funcTable[301])(points, count, clip, result);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, SDLBool>)funcTable[301])((nint)points, count, (nint)clip, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(SDLFPoint* points, int count, SDLFRect* clip, SDLFRect* result)
		{
			SDLBool ret = EncloseFPointsNative(points, count, clip, result);
			return ret;
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(ref SDLFPoint points, int count, SDLFRect* clip, SDLFRect* result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				SDLBool ret = EncloseFPointsNative((SDLFPoint*)ppoints, count, clip, result);
				return ret;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(SDLFPoint* points, int count, ref SDLFRect clip, SDLFRect* result)
		{
			fixed (SDLFRect* pclip = &clip)
			{
				SDLBool ret = EncloseFPointsNative(points, count, (SDLFRect*)pclip, result);
				return ret;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(ref SDLFPoint points, int count, ref SDLFRect clip, SDLFRect* result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* pclip = &clip)
				{
					SDLBool ret = EncloseFPointsNative((SDLFPoint*)ppoints, count, (SDLFRect*)pclip, result);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(SDLFPoint* points, int count, SDLFRect* clip, ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				SDLBool ret = EncloseFPointsNative(points, count, clip, (SDLFRect*)presult);
				return ret;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(ref SDLFPoint points, int count, SDLFRect* clip, ref SDLFRect result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = EncloseFPointsNative((SDLFPoint*)ppoints, count, clip, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(SDLFPoint* points, int count, ref SDLFRect clip, ref SDLFRect result)
		{
			fixed (SDLFRect* pclip = &clip)
			{
				fixed (SDLFRect* presult = &result)
				{
					SDLBool ret = EncloseFPointsNative(points, count, (SDLFRect*)pclip, (SDLFRect*)presult);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool EncloseFPoints(ref SDLFPoint points, int count, ref SDLFRect clip, ref SDLFRect result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* pclip = &clip)
				{
					fixed (SDLFRect* presult = &result)
					{
						SDLBool ret = EncloseFPointsNative((SDLFPoint*)ppoints, count, (SDLFRect*)pclip, (SDLFRect*)presult);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool IntersectFRectAndLineNative(SDLFRect* rect, float* x1, float* y1, float* x2, float* y2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFRect*, float*, float*, float*, float*, SDLBool>)funcTable[302])(rect, x1, y1, x2, y2);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, SDLBool>)funcTable[302])((nint)rect, (nint)x1, (nint)y1, (nint)x2, (nint)y2);
			#endif
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, float* y1, float* x2, float* y2)
		{
			SDLBool ret = IntersectFRectAndLineNative(rect, x1, y1, x2, y2);
			return ret;
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, float* y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, float* y1, float* x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, y1, x2, y2);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, float* y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, ref float y1, float* x2, float* y2)
		{
			fixed (float* py1 = &y1)
			{
				SDLBool ret = IntersectFRectAndLineNative(rect, x1, (float*)py1, x2, y2);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, ref float y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, ref float y1, float* x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, x2, y2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, ref float y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, x2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, float* y1, ref float x2, float* y2)
		{
			fixed (float* px2 = &x2)
			{
				SDLBool ret = IntersectFRectAndLineNative(rect, x1, y1, (float*)px2, y2);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, float* y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px2 = &x2)
				{
					SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, (float*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, float* y1, ref float x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* px2 = &x2)
				{
					SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, y1, (float*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, float* y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* px2 = &x2)
					{
						SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, (float*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, ref float y1, ref float x2, float* y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* px2 = &x2)
				{
					SDLBool ret = IntersectFRectAndLineNative(rect, x1, (float*)py1, (float*)px2, y2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, ref float y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, (float*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, ref float y1, ref float x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, (float*)px2, y2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, ref float y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* px2 = &x2)
						{
							SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, (float*)px2, y2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, float* y1, float* x2, ref float y2)
		{
			fixed (float* py2 = &y2)
			{
				SDLBool ret = IntersectFRectAndLineNative(rect, x1, y1, x2, (float*)py2);
				return ret;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, float* y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, x2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, float* y1, float* x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, y1, x2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, float* y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, x2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, ref float y1, float* x2, ref float y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = IntersectFRectAndLineNative(rect, x1, (float*)py1, x2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, ref float y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, x2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, ref float y1, float* x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, x2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, ref float y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, x2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, float* y1, ref float x2, ref float y2)
		{
			fixed (float* px2 = &x2)
			{
				fixed (float* py2 = &y2)
				{
					SDLBool ret = IntersectFRectAndLineNative(rect, x1, y1, (float*)px2, (float*)py2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, float* y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, y1, (float*)px2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, float* y1, ref float x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, y1, (float*)px2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, float* y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, y1, (float*)px2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, float* x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						SDLBool ret = IntersectFRectAndLineNative(rect, x1, (float*)py1, (float*)px2, (float*)py2);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, float* x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, x1, (float*)py1, (float*)px2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(SDLFRect* rect, ref float x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							SDLBool ret = IntersectFRectAndLineNative(rect, (float*)px1, (float*)py1, (float*)px2, (float*)py2);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IntersectFRectAndLine(ref SDLFRect rect, ref float x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* px2 = &x2)
						{
							fixed (float* py2 = &y2)
							{
								SDLBool ret = IntersectFRectAndLineNative((SDLFRect*)prect, (float*)px1, (float*)py1, (float*)px2, (float*)py2);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Compose a custom blend mode for renderers.<br/>
		/// The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept<br/>
		/// the SDL_BlendMode returned by this function if the renderer supports it.<br/>
		/// A blend mode controls how the pixels from a drawing operation (source) get<br/>
		/// combined with the pixels from the render target (destination). First, the<br/>
		/// components of the source and destination pixels get multiplied with their<br/>
		/// blend factors. Then, the blend operation takes the two products and<br/>
		/// calculates the result that will get stored in the render target.<br/>
		/// Expressed in pseudocode, it would look like this:<br/>
		/// ```c<br/>
		/// dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);<br/>
		/// dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);<br/>
		/// ```<br/>
		/// Where the functions `colorOperation(src, dst)` and `alphaOperation(src,<br/>
		/// dst)` can return one of the following:<br/>
		/// - `src + dst`<br/>
		/// - `src - dst`<br/>
		/// - `dst - src`<br/>
		/// - `min(src, dst)`<br/>
		/// - `max(src, dst)`<br/>
		/// The red, green, and blue components are always multiplied with the first,<br/>
		/// second, and third components of the SDL_BlendFactor, respectively. The<br/>
		/// fourth component is not used.<br/>
		/// The alpha component is always multiplied with the fourth component of the<br/>
		/// SDL_BlendFactor. The other components are not used in the alpha<br/>
		/// calculation.<br/>
		/// Support for these blend modes varies for each renderer. To check if a<br/>
		/// specific SDL_BlendMode is supported, create a renderer and pass it to<br/>
		/// either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will<br/>
		/// return with an error if the blend mode is not supported.<br/>
		/// This list describes the support of custom blend modes for each renderer in<br/>
		/// SDL 2.0.6. All renderers support the four blend modes listed in the<br/>
		/// SDL_BlendMode enumeration.<br/>
		/// - **direct3d**: Supports all operations with all factors. However, some<br/>
		/// factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and<br/>
		/// `SDL_BLENDOPERATION_MAXIMUM`.<br/>
		/// - **direct3d11**: Same as Direct3D 9.<br/>
		/// - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>
		/// factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL<br/>
		/// 2.0.6.<br/>
		/// - **opengles**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>
		/// factors. Color and alpha factors need to be the same. OpenGL ES 1<br/>
		/// implementation specific: May also support `SDL_BLENDOPERATION_SUBTRACT`<br/>
		/// and `SDL_BLENDOPERATION_REV_SUBTRACT`. May support color and alpha<br/>
		/// operations being different from each other. May support color and alpha<br/>
		/// factors being different from each other.<br/>
		/// - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,<br/>
		/// `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`<br/>
		/// operations with all factors.<br/>
		/// - **psp**: No custom blend mode support.<br/>
		/// - **software**: No custom blend mode support.<br/>
		/// Some renderers do not provide an alpha component for the default render<br/>
		/// target. The `SDL_BLENDFACTOR_DST_ALPHA` and<br/>
		/// `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this<br/>
		/// case.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBlendMode ComposeCustomBlendModeNative(SDLBlendFactor srcColorFactor, SDLBlendFactor dstColorFactor, SDLBlendOperation colorOperation, SDLBlendFactor srcAlphaFactor, SDLBlendFactor dstAlphaFactor, SDLBlendOperation alphaOperation)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLBlendFactor, SDLBlendFactor, SDLBlendOperation, SDLBlendFactor, SDLBlendFactor, SDLBlendOperation, SDLBlendMode>)funcTable[303])(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation);
			#else
			return (SDLBlendMode)((delegate* unmanaged[Cdecl]<SDLBlendFactor, SDLBlendFactor, SDLBlendOperation, SDLBlendFactor, SDLBlendFactor, SDLBlendOperation, SDLBlendMode>)funcTable[303])(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation);
			#endif
		}

		/// <summary>
		/// Compose a custom blend mode for renderers.<br/>
		/// The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept<br/>
		/// the SDL_BlendMode returned by this function if the renderer supports it.<br/>
		/// A blend mode controls how the pixels from a drawing operation (source) get<br/>
		/// combined with the pixels from the render target (destination). First, the<br/>
		/// components of the source and destination pixels get multiplied with their<br/>
		/// blend factors. Then, the blend operation takes the two products and<br/>
		/// calculates the result that will get stored in the render target.<br/>
		/// Expressed in pseudocode, it would look like this:<br/>
		/// ```c<br/>
		/// dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);<br/>
		/// dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);<br/>
		/// ```<br/>
		/// Where the functions `colorOperation(src, dst)` and `alphaOperation(src,<br/>
		/// dst)` can return one of the following:<br/>
		/// - `src + dst`<br/>
		/// - `src - dst`<br/>
		/// - `dst - src`<br/>
		/// - `min(src, dst)`<br/>
		/// - `max(src, dst)`<br/>
		/// The red, green, and blue components are always multiplied with the first,<br/>
		/// second, and third components of the SDL_BlendFactor, respectively. The<br/>
		/// fourth component is not used.<br/>
		/// The alpha component is always multiplied with the fourth component of the<br/>
		/// SDL_BlendFactor. The other components are not used in the alpha<br/>
		/// calculation.<br/>
		/// Support for these blend modes varies for each renderer. To check if a<br/>
		/// specific SDL_BlendMode is supported, create a renderer and pass it to<br/>
		/// either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will<br/>
		/// return with an error if the blend mode is not supported.<br/>
		/// This list describes the support of custom blend modes for each renderer in<br/>
		/// SDL 2.0.6. All renderers support the four blend modes listed in the<br/>
		/// SDL_BlendMode enumeration.<br/>
		/// - **direct3d**: Supports all operations with all factors. However, some<br/>
		/// factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and<br/>
		/// `SDL_BLENDOPERATION_MAXIMUM`.<br/>
		/// - **direct3d11**: Same as Direct3D 9.<br/>
		/// - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>
		/// factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL<br/>
		/// 2.0.6.<br/>
		/// - **opengles**: Supports the `SDL_BLENDOPERATION_ADD` operation with all<br/>
		/// factors. Color and alpha factors need to be the same. OpenGL ES 1<br/>
		/// implementation specific: May also support `SDL_BLENDOPERATION_SUBTRACT`<br/>
		/// and `SDL_BLENDOPERATION_REV_SUBTRACT`. May support color and alpha<br/>
		/// operations being different from each other. May support color and alpha<br/>
		/// factors being different from each other.<br/>
		/// - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,<br/>
		/// `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`<br/>
		/// operations with all factors.<br/>
		/// - **psp**: No custom blend mode support.<br/>
		/// - **software**: No custom blend mode support.<br/>
		/// Some renderers do not provide an alpha component for the default render<br/>
		/// target. The `SDL_BLENDFACTOR_DST_ALPHA` and<br/>
		/// `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this<br/>
		/// case.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBlendMode ComposeCustomBlendMode(SDLBlendFactor srcColorFactor, SDLBlendFactor dstColorFactor, SDLBlendOperation colorOperation, SDLBlendFactor srcAlphaFactor, SDLBlendFactor dstAlphaFactor, SDLBlendOperation alphaOperation)
		{
			SDLBlendMode ret = ComposeCustomBlendModeNative(srcColorFactor, dstColorFactor, colorOperation, srcAlphaFactor, dstAlphaFactor, alphaOperation);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface.<br/>
		/// If `depth` is 4 or 8 bits, an empty palette is allocated for the surface.<br/>
		/// If `depth` is greater than 8 bits, the pixel format is set using the<br/>
		/// [RGBA]mask parameters.<br/>
		/// The [RGBA]mask parameters are the bitmasks used to extract that color from<br/>
		/// a pixel. For instance, `Rmask` being 0xFF000000 means the red data is<br/>
		/// stored in the most significant byte. Using zeros for the RGB masks sets a<br/>
		/// default value, based on the depth. For example:<br/>
		/// ```c++<br/>
		/// SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);<br/>
		/// ```<br/>
		/// However, using zero for the Amask results in an Amask of 0.<br/>
		/// By default surfaces with an alpha mask are set up for blending as with:<br/>
		/// ```c++<br/>
		/// SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)<br/>
		/// ```<br/>
		/// You can change this by calling SDL_SetSurfaceBlendMode() and selecting a<br/>
		/// different `blendMode`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* CreateRGBSurfaceNative(uint flags, int width, int height, int depth, uint rmask, uint gmask, uint bmask, uint amask)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, uint, uint, SDLSurface*>)funcTable[304])(flags, width, height, depth, rmask, gmask, bmask, amask);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, uint, uint, nint>)funcTable[304])(flags, width, height, depth, rmask, gmask, bmask, amask);
			#endif
		}

		/// <summary>
		/// Allocate a new RGB surface.<br/>
		/// If `depth` is 4 or 8 bits, an empty palette is allocated for the surface.<br/>
		/// If `depth` is greater than 8 bits, the pixel format is set using the<br/>
		/// [RGBA]mask parameters.<br/>
		/// The [RGBA]mask parameters are the bitmasks used to extract that color from<br/>
		/// a pixel. For instance, `Rmask` being 0xFF000000 means the red data is<br/>
		/// stored in the most significant byte. Using zeros for the RGB masks sets a<br/>
		/// default value, based on the depth. For example:<br/>
		/// ```c++<br/>
		/// SDL_CreateRGBSurface(0,w,h,32,0,0,0,0);<br/>
		/// ```<br/>
		/// However, using zero for the Amask results in an Amask of 0.<br/>
		/// By default surfaces with an alpha mask are set up for blending as with:<br/>
		/// ```c++<br/>
		/// SDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)<br/>
		/// ```<br/>
		/// You can change this by calling SDL_SetSurfaceBlendMode() and selecting a<br/>
		/// different `blendMode`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* CreateRGBSurface(uint flags, int width, int height, int depth, uint rmask, uint gmask, uint bmask, uint amask)
		{
			SDLSurface* ret = CreateRGBSurfaceNative(flags, width, height, depth, rmask, gmask, bmask, amask);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface with a specific pixel format.<br/>
		/// This function operates mostly like SDL_CreateRGBSurface(), except instead<br/>
		/// of providing pixel color masks, you provide it with a predefined format<br/>
		/// from SDL_PixelFormatEnum.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* CreateRGBSurfaceWithFormatNative(uint flags, int width, int height, int depth, uint format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, SDLSurface*>)funcTable[305])(flags, width, height, depth, format);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, nint>)funcTable[305])(flags, width, height, depth, format);
			#endif
		}

		/// <summary>
		/// Allocate a new RGB surface with a specific pixel format.<br/>
		/// This function operates mostly like SDL_CreateRGBSurface(), except instead<br/>
		/// of providing pixel color masks, you provide it with a predefined format<br/>
		/// from SDL_PixelFormatEnum.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* CreateRGBSurfaceWithFormat(uint flags, int width, int height, int depth, uint format)
		{
			SDLSurface* ret = CreateRGBSurfaceWithFormatNative(flags, width, height, depth, format);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface with existing pixel data.<br/>
		/// This function operates mostly like SDL_CreateRGBSurface(), except it does<br/>
		/// not allocate memory for the pixel data, instead the caller provides an<br/>
		/// existing buffer of data for the surface to use.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* CreateRGBSurfaceFromNative(void* pixels, int width, int height, int depth, int pitch, uint rmask, uint gmask, uint bmask, uint amask)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, int, int, uint, uint, uint, uint, SDLSurface*>)funcTable[306])(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, uint, uint, uint, uint, nint>)funcTable[306])((nint)pixels, width, height, depth, pitch, rmask, gmask, bmask, amask);
			#endif
		}

		/// <summary>
		/// Allocate a new RGB surface with existing pixel data.<br/>
		/// This function operates mostly like SDL_CreateRGBSurface(), except it does<br/>
		/// not allocate memory for the pixel data, instead the caller provides an<br/>
		/// existing buffer of data for the surface to use.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* CreateRGBSurfaceFrom(void* pixels, int width, int height, int depth, int pitch, uint rmask, uint gmask, uint bmask, uint amask)
		{
			SDLSurface* ret = CreateRGBSurfaceFromNative(pixels, width, height, depth, pitch, rmask, gmask, bmask, amask);
			return ret;
		}

		/// <summary>
		/// Allocate a new RGB surface with with a specific pixel format and existing<br/>
		/// pixel data.<br/>
		/// This function operates mostly like SDL_CreateRGBSurfaceFrom(), except<br/>
		/// instead of providing pixel color masks, you provide it with a predefined<br/>
		/// format from SDL_PixelFormatEnum.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* CreateRGBSurfaceWithFormatFromNative(void* pixels, int width, int height, int depth, int pitch, uint format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, int, int, int, uint, SDLSurface*>)funcTable[307])(pixels, width, height, depth, pitch, format);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, uint, nint>)funcTable[307])((nint)pixels, width, height, depth, pitch, format);
			#endif
		}

		/// <summary>
		/// Allocate a new RGB surface with with a specific pixel format and existing<br/>
		/// pixel data.<br/>
		/// This function operates mostly like SDL_CreateRGBSurfaceFrom(), except<br/>
		/// instead of providing pixel color masks, you provide it with a predefined<br/>
		/// format from SDL_PixelFormatEnum.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* CreateRGBSurfaceWithFormatFrom(void* pixels, int width, int height, int depth, int pitch, uint format)
		{
			SDLSurface* ret = CreateRGBSurfaceWithFormatFromNative(pixels, width, height, depth, pitch, format);
			return ret;
		}

		/// <summary>
		/// Free an RGB surface.<br/>
		/// It is safe to pass NULL to this function.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FreeSurfaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSurface*, void>)funcTable[308])(surface);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[308])((nint)surface);
			#endif
		}

		/// <summary>
		/// Free an RGB surface.<br/>
		/// It is safe to pass NULL to this function.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void FreeSurface(SDLSurface* surface)
		{
			FreeSurfaceNative(surface);
		}

		/// <summary>
		/// Free an RGB surface.<br/>
		/// It is safe to pass NULL to this function.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void FreeSurface(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				FreeSurfaceNative((SDLSurface*)psurface);
			}
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetSurfacePaletteNative(SDLSurface* surface, SDLPalette* palette)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLPalette*, int>)funcTable[309])(surface, palette);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[309])((nint)surface, (nint)palette);
			#endif
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfacePalette(SDLSurface* surface, SDLPalette* palette)
		{
			int ret = SetSurfacePaletteNative(surface, palette);
			return ret;
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfacePalette(ref SDLSurface surface, SDLPalette* palette)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SetSurfacePaletteNative((SDLSurface*)psurface, palette);
				return ret;
			}
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfacePalette(SDLSurface* surface, ref SDLPalette palette)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				int ret = SetSurfacePaletteNative(surface, (SDLPalette*)ppalette);
				return ret;
			}
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfacePalette(ref SDLSurface surface, ref SDLPalette palette)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					int ret = SetSurfacePaletteNative((SDLSurface*)psurface, (SDLPalette*)ppalette);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set up a surface for directly accessing the pixels.<br/>
		/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>
		/// and read from `surface->pixels`, using the pixel format stored in<br/>
		/// `surface->format`. Once you are done accessing the surface, you should use<br/>
		/// SDL_UnlockSurface() to release it.<br/>
		/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>
		/// 0, then you can read and write to the surface at any time, and the pixel<br/>
		/// format of the surface will not change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LockSurfaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, int>)funcTable[310])(surface);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[310])((nint)surface);
			#endif
		}

		/// <summary>
		/// Set up a surface for directly accessing the pixels.<br/>
		/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>
		/// and read from `surface->pixels`, using the pixel format stored in<br/>
		/// `surface->format`. Once you are done accessing the surface, you should use<br/>
		/// SDL_UnlockSurface() to release it.<br/>
		/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>
		/// 0, then you can read and write to the surface at any time, and the pixel<br/>
		/// format of the surface will not change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LockSurface(SDLSurface* surface)
		{
			int ret = LockSurfaceNative(surface);
			return ret;
		}

		/// <summary>
		/// Set up a surface for directly accessing the pixels.<br/>
		/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>
		/// and read from `surface->pixels`, using the pixel format stored in<br/>
		/// `surface->format`. Once you are done accessing the surface, you should use<br/>
		/// SDL_UnlockSurface() to release it.<br/>
		/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>
		/// 0, then you can read and write to the surface at any time, and the pixel<br/>
		/// format of the surface will not change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LockSurface(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = LockSurfaceNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Release a surface after directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnlockSurfaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSurface*, void>)funcTable[311])(surface);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[311])((nint)surface);
			#endif
		}

		/// <summary>
		/// Release a surface after directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnlockSurface(SDLSurface* surface)
		{
			UnlockSurfaceNative(surface);
		}

		/// <summary>
		/// Release a surface after directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnlockSurface(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				UnlockSurfaceNative((SDLSurface*)psurface);
			}
		}

		/// <summary>
		/// Load a BMP image from a seekable SDL data stream.<br/>
		/// The new surface should be freed with SDL_FreeSurface(). Not doing so will<br/>
		/// result in a memory leak.<br/>
		/// src is an open SDL_RWops buffer, typically loaded with SDL_RWFromFile.<br/>
		/// Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap<br/>
		/// from a file, convert it to an SDL_Surface and then close the file.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* LoadBMPRWNative(SDLRWops* src, int freesrc)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRWops*, int, SDLSurface*>)funcTable[312])(src, freesrc);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, int, nint>)funcTable[312])((nint)src, freesrc);
			#endif
		}

		/// <summary>
		/// Load a BMP image from a seekable SDL data stream.<br/>
		/// The new surface should be freed with SDL_FreeSurface(). Not doing so will<br/>
		/// result in a memory leak.<br/>
		/// src is an open SDL_RWops buffer, typically loaded with SDL_RWFromFile.<br/>
		/// Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap<br/>
		/// from a file, convert it to an SDL_Surface and then close the file.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMPRW(SDLRWops* src, int freesrc)
		{
			SDLSurface* ret = LoadBMPRWNative(src, freesrc);
			return ret;
		}

		/// <summary>
		/// Load a BMP image from a seekable SDL data stream.<br/>
		/// The new surface should be freed with SDL_FreeSurface(). Not doing so will<br/>
		/// result in a memory leak.<br/>
		/// src is an open SDL_RWops buffer, typically loaded with SDL_RWFromFile.<br/>
		/// Alternitavely, you might also use the macro SDL_LoadBMP to load a bitmap<br/>
		/// from a file, convert it to an SDL_Surface and then close the file.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMPRW(ref SDLRWops src, int freesrc)
		{
			fixed (SDLRWops* psrc = &src)
			{
				SDLSurface* ret = LoadBMPRWNative((SDLRWops*)psrc, freesrc);
				return ret;
			}
		}

		/// <summary>
		/// Save a surface to a seekable SDL data stream in BMP format.<br/>
		/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>
		/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>
		/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>
		/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>
		/// not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SaveBMPRWNative(SDLSurface* surface, SDLRWops* dst, int freedst)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRWops*, int, int>)funcTable[313])(surface, dst, freedst);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[313])((nint)surface, (nint)dst, freedst);
			#endif
		}

		/// <summary>
		/// Save a surface to a seekable SDL data stream in BMP format.<br/>
		/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>
		/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>
		/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>
		/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>
		/// not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveBMPRW(SDLSurface* surface, SDLRWops* dst, int freedst)
		{
			int ret = SaveBMPRWNative(surface, dst, freedst);
			return ret;
		}

		/// <summary>
		/// Save a surface to a seekable SDL data stream in BMP format.<br/>
		/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>
		/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>
		/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>
		/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>
		/// not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveBMPRW(ref SDLSurface surface, SDLRWops* dst, int freedst)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SaveBMPRWNative((SDLSurface*)psurface, dst, freedst);
				return ret;
			}
		}

		/// <summary>
		/// Save a surface to a seekable SDL data stream in BMP format.<br/>
		/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>
		/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>
		/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>
		/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>
		/// not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveBMPRW(SDLSurface* surface, ref SDLRWops dst, int freedst)
		{
			fixed (SDLRWops* pdst = &dst)
			{
				int ret = SaveBMPRWNative(surface, (SDLRWops*)pdst, freedst);
				return ret;
			}
		}

		/// <summary>
		/// Save a surface to a seekable SDL data stream in BMP format.<br/>
		/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>
		/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>
		/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>
		/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>
		/// not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveBMPRW(ref SDLSurface surface, ref SDLRWops dst, int freedst)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLRWops* pdst = &dst)
				{
					int ret = SaveBMPRWNative((SDLSurface*)psurface, (SDLRWops*)pdst, freedst);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the RLE acceleration hint for a surface.<br/>
		/// If RLE is enabled, color key and alpha blending blits are much faster, but<br/>
		/// the surface must be locked before directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetSurfaceRLENative(SDLSurface* surface, int flag)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, int, int>)funcTable[314])(surface, flag);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[314])((nint)surface, flag);
			#endif
		}

		/// <summary>
		/// Set the RLE acceleration hint for a surface.<br/>
		/// If RLE is enabled, color key and alpha blending blits are much faster, but<br/>
		/// the surface must be locked before directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceRLE(SDLSurface* surface, int flag)
		{
			int ret = SetSurfaceRLENative(surface, flag);
			return ret;
		}

		/// <summary>
		/// Set the RLE acceleration hint for a surface.<br/>
		/// If RLE is enabled, color key and alpha blending blits are much faster, but<br/>
		/// the surface must be locked before directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceRLE(ref SDLSurface surface, int flag)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SetSurfaceRLENative((SDLSurface*)psurface, flag);
				return ret;
			}
		}

		/// <summary>
		/// Returns whether the surface is RLE enabled<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool HasSurfaceRLENative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLBool>)funcTable[315])(surface);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[315])((nint)surface);
			#endif
		}

		/// <summary>
		/// Returns whether the surface is RLE enabled<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasSurfaceRLE(SDLSurface* surface)
		{
			SDLBool ret = HasSurfaceRLENative(surface);
			return ret;
		}

		/// <summary>
		/// Returns whether the surface is RLE enabled<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasSurfaceRLE(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLBool ret = HasSurfaceRLENative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Set the color key (transparent pixel) in a surface.<br/>
		/// The color key defines a pixel value that will be treated as transparent in<br/>
		/// a blit. For example, one can use this to specify that cyan pixels should be<br/>
		/// considered transparent, and therefore not rendered.<br/>
		/// It is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// RLE acceleration can substantially speed up blitting of images with large<br/>
		/// horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetColorKeyNative(SDLSurface* surface, int flag, uint key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, int, uint, int>)funcTable[316])(surface, flag, key);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, uint, int>)funcTable[316])((nint)surface, flag, key);
			#endif
		}

		/// <summary>
		/// Set the color key (transparent pixel) in a surface.<br/>
		/// The color key defines a pixel value that will be treated as transparent in<br/>
		/// a blit. For example, one can use this to specify that cyan pixels should be<br/>
		/// considered transparent, and therefore not rendered.<br/>
		/// It is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// RLE acceleration can substantially speed up blitting of images with large<br/>
		/// horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetColorKey(SDLSurface* surface, int flag, uint key)
		{
			int ret = SetColorKeyNative(surface, flag, key);
			return ret;
		}

		/// <summary>
		/// Set the color key (transparent pixel) in a surface.<br/>
		/// The color key defines a pixel value that will be treated as transparent in<br/>
		/// a blit. For example, one can use this to specify that cyan pixels should be<br/>
		/// considered transparent, and therefore not rendered.<br/>
		/// It is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// RLE acceleration can substantially speed up blitting of images with large<br/>
		/// horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetColorKey(ref SDLSurface surface, int flag, uint key)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SetColorKeyNative((SDLSurface*)psurface, flag, key);
				return ret;
			}
		}

		/// <summary>
		/// Returns whether the surface has a color key<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool HasColorKeyNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLBool>)funcTable[317])(surface);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[317])((nint)surface);
			#endif
		}

		/// <summary>
		/// Returns whether the surface has a color key<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasColorKey(SDLSurface* surface)
		{
			SDLBool ret = HasColorKeyNative(surface);
			return ret;
		}

		/// <summary>
		/// Returns whether the surface has a color key<br/>
		/// It is safe to pass a NULL `surface` here; it will return SDL_FALSE.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasColorKey(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLBool ret = HasColorKeyNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Get the color key (transparent pixel) for a surface.<br/>
		/// The color key is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// If the surface doesn't have color key enabled this function returns -1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetColorKeyNative(SDLSurface* surface, uint* key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, uint*, int>)funcTable[318])(surface, key);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[318])((nint)surface, (nint)key);
			#endif
		}

		/// <summary>
		/// Get the color key (transparent pixel) for a surface.<br/>
		/// The color key is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// If the surface doesn't have color key enabled this function returns -1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetColorKey(SDLSurface* surface, uint* key)
		{
			int ret = GetColorKeyNative(surface, key);
			return ret;
		}

		/// <summary>
		/// Get the color key (transparent pixel) for a surface.<br/>
		/// The color key is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// If the surface doesn't have color key enabled this function returns -1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetColorKey(ref SDLSurface surface, uint* key)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = GetColorKeyNative((SDLSurface*)psurface, key);
				return ret;
			}
		}

		/// <summary>
		/// Get the color key (transparent pixel) for a surface.<br/>
		/// The color key is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// If the surface doesn't have color key enabled this function returns -1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetColorKey(SDLSurface* surface, ref uint key)
		{
			fixed (uint* pkey = &key)
			{
				int ret = GetColorKeyNative(surface, (uint*)pkey);
				return ret;
			}
		}

		/// <summary>
		/// Get the color key (transparent pixel) for a surface.<br/>
		/// The color key is a pixel of the format used by the surface, as generated by<br/>
		/// SDL_MapRGB().<br/>
		/// If the surface doesn't have color key enabled this function returns -1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetColorKey(ref SDLSurface surface, ref uint key)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (uint* pkey = &key)
				{
					int ret = GetColorKeyNative((SDLSurface*)psurface, (uint*)pkey);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set an additional color value multiplied into blit operations.<br/>
		/// When this surface is blitted, during the blit operation each source color<br/>
		/// channel is modulated by the appropriate color value according to the<br/>
		/// following formula:<br/>
		/// `srcC = srcC * (color / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetSurfaceColorModNative(SDLSurface* surface, byte r, byte g, byte b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte, byte, byte, int>)funcTable[319])(surface, r, g, b);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, byte, byte, byte, int>)funcTable[319])((nint)surface, r, g, b);
			#endif
		}

		/// <summary>
		/// Set an additional color value multiplied into blit operations.<br/>
		/// When this surface is blitted, during the blit operation each source color<br/>
		/// channel is modulated by the appropriate color value according to the<br/>
		/// following formula:<br/>
		/// `srcC = srcC * (color / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceColorMod(SDLSurface* surface, byte r, byte g, byte b)
		{
			int ret = SetSurfaceColorModNative(surface, r, g, b);
			return ret;
		}

		/// <summary>
		/// Set an additional color value multiplied into blit operations.<br/>
		/// When this surface is blitted, during the blit operation each source color<br/>
		/// channel is modulated by the appropriate color value according to the<br/>
		/// following formula:<br/>
		/// `srcC = srcC * (color / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceColorMod(ref SDLSurface surface, byte r, byte g, byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SetSurfaceColorModNative((SDLSurface*)psurface, r, g, b);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetSurfaceColorModNative(SDLSurface* surface, byte* r, byte* g, byte* b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte*, byte*, byte*, int>)funcTable[320])(surface, r, g, b);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[320])((nint)surface, (nint)r, (nint)g, (nint)b);
			#endif
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, byte* r, byte* g, byte* b)
		{
			int ret = GetSurfaceColorModNative(surface, r, g, b);
			return ret;
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, byte* r, byte* g, byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = GetSurfaceColorModNative((SDLSurface*)psurface, r, g, b);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, ref byte r, byte* g, byte* b)
		{
			fixed (byte* pr = &r)
			{
				int ret = GetSurfaceColorModNative(surface, (byte*)pr, g, b);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, ref byte r, byte* g, byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					int ret = GetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, g, b);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, byte* r, ref byte g, byte* b)
		{
			fixed (byte* pg = &g)
			{
				int ret = GetSurfaceColorModNative(surface, r, (byte*)pg, b);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, byte* r, ref byte g, byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pg = &g)
				{
					int ret = GetSurfaceColorModNative((SDLSurface*)psurface, r, (byte*)pg, b);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, ref byte r, ref byte g, byte* b)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					int ret = GetSurfaceColorModNative(surface, (byte*)pr, (byte*)pg, b);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, ref byte r, ref byte g, byte* b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						int ret = GetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, (byte*)pg, b);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, byte* r, byte* g, ref byte b)
		{
			fixed (byte* pb = &b)
			{
				int ret = GetSurfaceColorModNative(surface, r, g, (byte*)pb);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, byte* r, byte* g, ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pb = &b)
				{
					int ret = GetSurfaceColorModNative((SDLSurface*)psurface, r, g, (byte*)pb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, ref byte r, byte* g, ref byte b)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					int ret = GetSurfaceColorModNative(surface, (byte*)pr, g, (byte*)pb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, ref byte r, byte* g, ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						int ret = GetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, g, (byte*)pb);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, byte* r, ref byte g, ref byte b)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pb = &b)
				{
					int ret = GetSurfaceColorModNative(surface, r, (byte*)pg, (byte*)pb);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, byte* r, ref byte g, ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						int ret = GetSurfaceColorModNative((SDLSurface*)psurface, r, (byte*)pg, (byte*)pb);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(SDLSurface* surface, ref byte r, ref byte g, ref byte b)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						int ret = GetSurfaceColorModNative(surface, (byte*)pr, (byte*)pg, (byte*)pb);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the additional color value multiplied into blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceColorMod(ref SDLSurface surface, ref byte r, ref byte g, ref byte b)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							int ret = GetSurfaceColorModNative((SDLSurface*)psurface, (byte*)pr, (byte*)pg, (byte*)pb);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Set an additional alpha value used in blit operations.<br/>
		/// When this surface is blitted, during the blit operation the source alpha<br/>
		/// value is modulated by this alpha value according to the following formula:<br/>
		/// `srcA = srcA * (alpha / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetSurfaceAlphaModNative(SDLSurface* surface, byte alpha)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte, int>)funcTable[321])(surface, alpha);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, byte, int>)funcTable[321])((nint)surface, alpha);
			#endif
		}

		/// <summary>
		/// Set an additional alpha value used in blit operations.<br/>
		/// When this surface is blitted, during the blit operation the source alpha<br/>
		/// value is modulated by this alpha value according to the following formula:<br/>
		/// `srcA = srcA * (alpha / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceAlphaMod(SDLSurface* surface, byte alpha)
		{
			int ret = SetSurfaceAlphaModNative(surface, alpha);
			return ret;
		}

		/// <summary>
		/// Set an additional alpha value used in blit operations.<br/>
		/// When this surface is blitted, during the blit operation the source alpha<br/>
		/// value is modulated by this alpha value according to the following formula:<br/>
		/// `srcA = srcA * (alpha / 255)`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceAlphaMod(ref SDLSurface surface, byte alpha)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SetSurfaceAlphaModNative((SDLSurface*)psurface, alpha);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional alpha value used in blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetSurfaceAlphaModNative(SDLSurface* surface, byte* alpha)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte*, int>)funcTable[322])(surface, alpha);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[322])((nint)surface, (nint)alpha);
			#endif
		}

		/// <summary>
		/// Get the additional alpha value used in blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceAlphaMod(SDLSurface* surface, byte* alpha)
		{
			int ret = GetSurfaceAlphaModNative(surface, alpha);
			return ret;
		}

		/// <summary>
		/// Get the additional alpha value used in blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceAlphaMod(ref SDLSurface surface, byte* alpha)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = GetSurfaceAlphaModNative((SDLSurface*)psurface, alpha);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional alpha value used in blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceAlphaMod(SDLSurface* surface, ref byte alpha)
		{
			fixed (byte* palpha = &alpha)
			{
				int ret = GetSurfaceAlphaModNative(surface, (byte*)palpha);
				return ret;
			}
		}

		/// <summary>
		/// Get the additional alpha value used in blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceAlphaMod(ref SDLSurface surface, ref byte alpha)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (byte* palpha = &alpha)
				{
					int ret = GetSurfaceAlphaModNative((SDLSurface*)psurface, (byte*)palpha);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the blend mode used for blit operations.<br/>
		/// To copy a surface to another surface (or texture) without blending with the<br/>
		/// existing data, the blendmode of the SOURCE surface should be set to<br/>
		/// `SDL_BLENDMODE_NONE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetSurfaceBlendModeNative(SDLSurface* surface, SDLBlendMode blendMode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLBlendMode, int>)funcTable[323])(surface, blendMode);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, SDLBlendMode, int>)funcTable[323])((nint)surface, blendMode);
			#endif
		}

		/// <summary>
		/// Set the blend mode used for blit operations.<br/>
		/// To copy a surface to another surface (or texture) without blending with the<br/>
		/// existing data, the blendmode of the SOURCE surface should be set to<br/>
		/// `SDL_BLENDMODE_NONE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceBlendMode(SDLSurface* surface, SDLBlendMode blendMode)
		{
			int ret = SetSurfaceBlendModeNative(surface, blendMode);
			return ret;
		}

		/// <summary>
		/// Set the blend mode used for blit operations.<br/>
		/// To copy a surface to another surface (or texture) without blending with the<br/>
		/// existing data, the blendmode of the SOURCE surface should be set to<br/>
		/// `SDL_BLENDMODE_NONE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SetSurfaceBlendMode(ref SDLSurface surface, SDLBlendMode blendMode)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = SetSurfaceBlendModeNative((SDLSurface*)psurface, blendMode);
				return ret;
			}
		}

		/// <summary>
		/// Get the blend mode used for blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetSurfaceBlendModeNative(SDLSurface* surface, SDLBlendMode* blendMode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLBlendMode*, int>)funcTable[324])(surface, blendMode);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[324])((nint)surface, (nint)blendMode);
			#endif
		}

		/// <summary>
		/// Get the blend mode used for blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceBlendMode(SDLSurface* surface, SDLBlendMode* blendMode)
		{
			int ret = GetSurfaceBlendModeNative(surface, blendMode);
			return ret;
		}

		/// <summary>
		/// Get the blend mode used for blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceBlendMode(ref SDLSurface surface, SDLBlendMode* blendMode)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = GetSurfaceBlendModeNative((SDLSurface*)psurface, blendMode);
				return ret;
			}
		}

		/// <summary>
		/// Get the blend mode used for blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceBlendMode(SDLSurface* surface, ref SDLBlendMode blendMode)
		{
			fixed (SDLBlendMode* pblendMode = &blendMode)
			{
				int ret = GetSurfaceBlendModeNative(surface, (SDLBlendMode*)pblendMode);
				return ret;
			}
		}

		/// <summary>
		/// Get the blend mode used for blit operations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetSurfaceBlendMode(ref SDLSurface surface, ref SDLBlendMode blendMode)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLBlendMode* pblendMode = &blendMode)
				{
					int ret = GetSurfaceBlendModeNative((SDLSurface*)psurface, (SDLBlendMode*)pblendMode);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// Note that blits are automatically clipped to the edges of the source and<br/>
		/// destination surfaces.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool SetClipRectNative(SDLSurface* surface, SDLRect* rect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLBool>)funcTable[325])(surface, rect);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, nint, SDLBool>)funcTable[325])((nint)surface, (nint)rect);
			#endif
		}

		/// <summary>
		/// Set the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// Note that blits are automatically clipped to the edges of the source and<br/>
		/// destination surfaces.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool SetClipRect(SDLSurface* surface, SDLRect* rect)
		{
			SDLBool ret = SetClipRectNative(surface, rect);
			return ret;
		}

		/// <summary>
		/// Set the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// Note that blits are automatically clipped to the edges of the source and<br/>
		/// destination surfaces.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool SetClipRect(ref SDLSurface surface, SDLRect* rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLBool ret = SetClipRectNative((SDLSurface*)psurface, rect);
				return ret;
			}
		}

		/// <summary>
		/// Set the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// Note that blits are automatically clipped to the edges of the source and<br/>
		/// destination surfaces.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool SetClipRect(SDLSurface* surface, ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				SDLBool ret = SetClipRectNative(surface, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Set the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// Note that blits are automatically clipped to the edges of the source and<br/>
		/// destination surfaces.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool SetClipRect(ref SDLSurface surface, ref SDLRect rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLRect* prect = &rect)
				{
					SDLBool ret = SetClipRectNative((SDLSurface*)psurface, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetClipRectNative(SDLSurface* surface, SDLRect* rect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, void>)funcTable[326])(surface, rect);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[326])((nint)surface, (nint)rect);
			#endif
		}

		/// <summary>
		/// Get the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetClipRect(SDLSurface* surface, SDLRect* rect)
		{
			GetClipRectNative(surface, rect);
		}

		/// <summary>
		/// Get the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetClipRect(ref SDLSurface surface, SDLRect* rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				GetClipRectNative((SDLSurface*)psurface, rect);
			}
		}

		/// <summary>
		/// Get the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetClipRect(SDLSurface* surface, ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				GetClipRectNative(surface, (SDLRect*)prect);
			}
		}

		/// <summary>
		/// Get the clipping rectangle for a surface.<br/>
		/// When `surface` is the destination of a blit, only the area within the clip<br/>
		/// rectangle is drawn into.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetClipRect(ref SDLSurface surface, ref SDLRect rect)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLRect* prect = &rect)
				{
					GetClipRectNative((SDLSurface*)psurface, (SDLRect*)prect);
				}
			}
		}

		/// <summary>
		/// Creates a new surface identical to the existing surface.<br/>
		/// The returned surface should be freed with SDL_FreeSurface().<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* DuplicateSurfaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLSurface*>)funcTable[327])(surface);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[327])((nint)surface);
			#endif
		}

		/// <summary>
		/// Creates a new surface identical to the existing surface.<br/>
		/// The returned surface should be freed with SDL_FreeSurface().<br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* DuplicateSurface(SDLSurface* surface)
		{
			SDLSurface* ret = DuplicateSurfaceNative(surface);
			return ret;
		}

		/// <summary>
		/// Creates a new surface identical to the existing surface.<br/>
		/// The returned surface should be freed with SDL_FreeSurface().<br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* DuplicateSurface(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLSurface* ret = DuplicateSurfaceNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format.<br/>
		/// This function is used to optimize images for faster *repeat* blitting. This<br/>
		/// is accomplished by converting the original and storing the result as a new<br/>
		/// surface. The new, optimized surface can then be used as the source for<br/>
		/// future blits, making them faster.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* ConvertSurfaceNative(SDLSurface* src, SDLPixelFormat* fmt, uint flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLPixelFormat*, uint, SDLSurface*>)funcTable[328])(src, fmt, flags);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint>)funcTable[328])((nint)src, (nint)fmt, flags);
			#endif
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format.<br/>
		/// This function is used to optimize images for faster *repeat* blitting. This<br/>
		/// is accomplished by converting the original and storing the result as a new<br/>
		/// surface. The new, optimized surface can then be used as the source for<br/>
		/// future blits, making them faster.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* ConvertSurface(SDLSurface* src, SDLPixelFormat* fmt, uint flags)
		{
			SDLSurface* ret = ConvertSurfaceNative(src, fmt, flags);
			return ret;
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format.<br/>
		/// This function is used to optimize images for faster *repeat* blitting. This<br/>
		/// is accomplished by converting the original and storing the result as a new<br/>
		/// surface. The new, optimized surface can then be used as the source for<br/>
		/// future blits, making them faster.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* ConvertSurface(ref SDLSurface src, SDLPixelFormat* fmt, uint flags)
		{
			fixed (SDLSurface* psrc = &src)
			{
				SDLSurface* ret = ConvertSurfaceNative((SDLSurface*)psrc, fmt, flags);
				return ret;
			}
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format.<br/>
		/// This function is used to optimize images for faster *repeat* blitting. This<br/>
		/// is accomplished by converting the original and storing the result as a new<br/>
		/// surface. The new, optimized surface can then be used as the source for<br/>
		/// future blits, making them faster.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* ConvertSurface(SDLSurface* src, ref SDLPixelFormat fmt, uint flags)
		{
			fixed (SDLPixelFormat* pfmt = &fmt)
			{
				SDLSurface* ret = ConvertSurfaceNative(src, (SDLPixelFormat*)pfmt, flags);
				return ret;
			}
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format.<br/>
		/// This function is used to optimize images for faster *repeat* blitting. This<br/>
		/// is accomplished by converting the original and storing the result as a new<br/>
		/// surface. The new, optimized surface can then be used as the source for<br/>
		/// future blits, making them faster.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* ConvertSurface(ref SDLSurface src, ref SDLPixelFormat fmt, uint flags)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLPixelFormat* pfmt = &fmt)
				{
					SDLSurface* ret = ConvertSurfaceNative((SDLSurface*)psrc, (SDLPixelFormat*)pfmt, flags);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format enum.<br/>
		/// This function operates just like SDL_ConvertSurface(), but accepts an<br/>
		/// SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,<br/>
		/// it might be easier to call but it doesn't have access to palette<br/>
		/// information for the destination surface, in case that would be important.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* ConvertSurfaceFormatNative(SDLSurface* src, uint pixelFormat, uint flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, uint, uint, SDLSurface*>)funcTable[329])(src, pixelFormat, flags);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, uint, uint, nint>)funcTable[329])((nint)src, pixelFormat, flags);
			#endif
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format enum.<br/>
		/// This function operates just like SDL_ConvertSurface(), but accepts an<br/>
		/// SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,<br/>
		/// it might be easier to call but it doesn't have access to palette<br/>
		/// information for the destination surface, in case that would be important.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* ConvertSurfaceFormat(SDLSurface* src, uint pixelFormat, uint flags)
		{
			SDLSurface* ret = ConvertSurfaceFormatNative(src, pixelFormat, flags);
			return ret;
		}

		/// <summary>
		/// Copy an existing surface to a new surface of the specified format enum.<br/>
		/// This function operates just like SDL_ConvertSurface(), but accepts an<br/>
		/// SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,<br/>
		/// it might be easier to call but it doesn't have access to palette<br/>
		/// information for the destination surface, in case that would be important.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* ConvertSurfaceFormat(ref SDLSurface src, uint pixelFormat, uint flags)
		{
			fixed (SDLSurface* psrc = &src)
			{
				SDLSurface* ret = ConvertSurfaceFormatNative((SDLSurface*)psrc, pixelFormat, flags);
				return ret;
			}
		}

		/// <summary>
		/// Copy a block of pixels of one format to another format.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ConvertPixelsNative(int width, int height, uint srcFormat, void* src, int srcPitch, uint dstFormat, void* dst, int dstPitch)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, uint, void*, int, uint, void*, int, int>)funcTable[330])(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, uint, nint, int, uint, nint, int, int>)funcTable[330])(width, height, srcFormat, (nint)src, srcPitch, dstFormat, (nint)dst, dstPitch);
			#endif
		}

		/// <summary>
		/// Copy a block of pixels of one format to another format.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int ConvertPixels(int width, int height, uint srcFormat, void* src, int srcPitch, uint dstFormat, void* dst, int dstPitch)
		{
			int ret = ConvertPixelsNative(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
			return ret;
		}

		/// <summary>
		/// Premultiply the alpha on a block of pixels.<br/>
		/// This is safe to use with src == dst, but not for other overlapping areas.<br/>
		/// This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PremultiplyAlphaNative(int width, int height, uint srcFormat, void* src, int srcPitch, uint dstFormat, void* dst, int dstPitch)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, uint, void*, int, uint, void*, int, int>)funcTable[331])(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, uint, nint, int, uint, nint, int, int>)funcTable[331])(width, height, srcFormat, (nint)src, srcPitch, dstFormat, (nint)dst, dstPitch);
			#endif
		}

		/// <summary>
		/// Premultiply the alpha on a block of pixels.<br/>
		/// This is safe to use with src == dst, but not for other overlapping areas.<br/>
		/// This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int PremultiplyAlpha(int width, int height, uint srcFormat, void* src, int srcPitch, uint dstFormat, void* dst, int dstPitch)
		{
			int ret = PremultiplyAlphaNative(width, height, srcFormat, src, srcPitch, dstFormat, dst, dstPitch);
			return ret;
		}

		/// <summary>
		/// Perform a fast fill of a rectangle with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int FillRectNative(SDLSurface* dst, SDLRect* rect, uint color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, uint, int>)funcTable[332])(dst, rect, color);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, int>)funcTable[332])((nint)dst, (nint)rect, color);
			#endif
		}

		/// <summary>
		/// Perform a fast fill of a rectangle with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRect(SDLSurface* dst, SDLRect* rect, uint color)
		{
			int ret = FillRectNative(dst, rect, color);
			return ret;
		}

		/// <summary>
		/// Perform a fast fill of a rectangle with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRect(ref SDLSurface dst, SDLRect* rect, uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = FillRectNative((SDLSurface*)pdst, rect, color);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast fill of a rectangle with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRect(SDLSurface* dst, ref SDLRect rect, uint color)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = FillRectNative(dst, (SDLRect*)prect, color);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast fill of a rectangle with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRect(ref SDLSurface dst, ref SDLRect rect, uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = FillRectNative((SDLSurface*)pdst, (SDLRect*)prect, color);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast fill of a set of rectangles with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int FillRectsNative(SDLSurface* dst, SDLRect* rects, int count, uint color)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, int, uint, int>)funcTable[333])(dst, rects, count, color);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, uint, int>)funcTable[333])((nint)dst, (nint)rects, count, color);
			#endif
		}

		/// <summary>
		/// Perform a fast fill of a set of rectangles with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRects(SDLSurface* dst, SDLRect* rects, int count, uint color)
		{
			int ret = FillRectsNative(dst, rects, count, color);
			return ret;
		}

		/// <summary>
		/// Perform a fast fill of a set of rectangles with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRects(ref SDLSurface dst, SDLRect* rects, int count, uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = FillRectsNative((SDLSurface*)pdst, rects, count, color);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast fill of a set of rectangles with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRects(SDLSurface* dst, ref SDLRect rects, int count, uint color)
		{
			fixed (SDLRect* prects = &rects)
			{
				int ret = FillRectsNative(dst, (SDLRect*)prects, count, color);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast fill of a set of rectangles with a specific color.<br/>
		/// `color` should be a pixel of the format used by the surface, and can be<br/>
		/// generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an<br/>
		/// alpha component then the destination is simply filled with that alpha<br/>
		/// information, no blending takes place.<br/>
		/// If there is a clip rectangle set on the destination (set via<br/>
		/// SDL_SetClipRect()), then this function will fill based on the intersection<br/>
		/// of the clip rectangle and `rect`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int FillRects(ref SDLSurface dst, ref SDLRect rects, int count, uint color)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* prects = &rects)
				{
					int ret = FillRectsNative((SDLSurface*)pdst, (SDLRect*)prects, count, color);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int UpperBlitNative(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)funcTable[334])(src, srcrect, dst, dstrect);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[334])((nint)src, (nint)srcrect, (nint)dst, (nint)dstrect);
			#endif
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			int ret = UpperBlitNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = UpperBlitNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, ref SDLRect srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = UpperBlitNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, ref SDLRect srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = UpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, SDLRect* srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = UpperBlitNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, SDLRect* srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = UpperBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, ref SDLRect srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = UpperBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, ref SDLRect srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = UpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = UpperBlitNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, SDLRect* srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = UpperBlitNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, ref SDLRect srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = UpperBlitNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, ref SDLRect srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = UpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, SDLRect* srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = UpperBlitNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, SDLRect* srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = UpperBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(SDLSurface* src, ref SDLRect srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = UpperBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast blit from the source surface to the destination surface.<br/>
		/// SDL_UpperBlit() has been replaced by SDL_BlitSurface(), which is merely a<br/>
		/// macro for this function with a less confusing name.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int UpperBlit(ref SDLSurface src, ref SDLRect srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = UpperBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LowerBlitNative(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)funcTable[335])(src, srcrect, dst, dstrect);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[335])((nint)src, (nint)srcrect, (nint)dst, (nint)dstrect);
			#endif
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			int ret = LowerBlitNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = LowerBlitNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, ref SDLRect srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = LowerBlitNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, ref SDLRect srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = LowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, SDLRect* srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = LowerBlitNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, SDLRect* srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = LowerBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, ref SDLRect srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = LowerBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, ref SDLRect srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = LowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = LowerBlitNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, SDLRect* srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = LowerBlitNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, ref SDLRect srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = LowerBlitNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, ref SDLRect srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = LowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, SDLRect* srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = LowerBlitNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, SDLRect* srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = LowerBlitNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(SDLSurface* src, ref SDLRect srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = LowerBlitNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform low-level surface blitting only.<br/>
		/// This is a semi-private blit function and it performs low-level surface<br/>
		/// blitting, assuming the input rectangles have already been clipped.<br/>
		/// Unless you know what you're doing, you should be using SDL_BlitSurface()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LowerBlit(ref SDLSurface src, ref SDLRect srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						fixed (SDLRect* pdstrect = &dstrect)
						{
							int ret = LowerBlitNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SoftStretchNative(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLRect*, SDLSurface*, SDLRect*, int>)funcTable[336])(src, srcrect, dst, dstrect);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[336])((nint)src, (nint)srcrect, (nint)dst, (nint)dstrect);
			#endif
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			int ret = SoftStretchNative(src, srcrect, dst, dstrect);
			return ret;
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(ref SDLSurface src, SDLRect* srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				int ret = SoftStretchNative((SDLSurface*)psrc, srcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(SDLSurface* src, ref SDLRect srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				int ret = SoftStretchNative(src, (SDLRect*)psrcrect, dst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(ref SDLSurface src, ref SDLRect srcrect, SDLSurface* dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					int ret = SoftStretchNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(SDLSurface* src, SDLRect* srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				int ret = SoftStretchNative(src, srcrect, (SDLSurface*)pdst, dstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(ref SDLSurface src, SDLRect* srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SoftStretchNative((SDLSurface*)psrc, srcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(SDLSurface* src, ref SDLRect srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLSurface* pdst = &dst)
				{
					int ret = SoftStretchNative(src, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(ref SDLSurface src, ref SDLRect srcrect, ref SDLSurface dst, SDLRect* dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLSurface* pdst = &dst)
					{
						int ret = SoftStretchNative((SDLSurface*)psrc, (SDLRect*)psrcrect, (SDLSurface*)pdst, dstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(SDLSurface* src, SDLRect* srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* pdstrect = &dstrect)
			{
				int ret = SoftStretchNative(src, srcrect, dst, (SDLRect*)pdstrect);
				return ret;
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(ref SDLSurface src, SDLRect* srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SoftStretchNative((SDLSurface*)psrc, srcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(SDLSurface* src, ref SDLRect srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLRect* psrcrect = &srcrect)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SoftStretchNative(src, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(ref SDLSurface src, ref SDLRect srcrect, SDLSurface* dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* psrc = &src)
			{
				fixed (SDLRect* psrcrect = &srcrect)
				{
					fixed (SDLRect* pdstrect = &dstrect)
					{
						int ret = SoftStretchNative((SDLSurface*)psrc, (SDLRect*)psrcrect, dst, (SDLRect*)pdstrect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Perform a fast, low quality, stretch blit between two surfaces of the same<br/>
		/// format.<br/>
		/// Please use SDL_BlitScaled() instead.<br/>
		/// <br/>
		/// </summary>
		public static int SoftStretch(SDLSurface* src, SDLRect* srcrect, ref SDLSurface dst, ref SDLRect dstrect)
		{
			fixed (SDLSurface* pdst = &dst)
			{
				fixed (SDLRect* pdstrect = &dstrect)
				{
					int ret = SoftStretchNative(src, srcrect, (SDLSurface*)pdst, (SDLRect*)pdstrect);
					return ret;
				}
			}
		}
	}
}
