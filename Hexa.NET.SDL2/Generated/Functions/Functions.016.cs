// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		public static void GlGetCompressedTexImage(uint target, int lod, void* img)
		{
			GlGetCompressedTexImageNative(target, lod, img);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1DNative(uint target, double s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1265])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1265])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1D(uint target, double s)
		{
			GlMultiTexCoord1DNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1266])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1266])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Dv(uint target, double* v)
		{
			GlMultiTexCoord1DvNative(target, v);
		}

		public static void GlMultiTexCoord1Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord1DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1FNative(uint target, float s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1267])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1267])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1F(uint target, float s)
		{
			GlMultiTexCoord1FNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1268])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1268])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Fv(uint target, float* v)
		{
			GlMultiTexCoord1FvNative(target, v);
		}

		public static void GlMultiTexCoord1Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord1FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1INative(uint target, int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1269])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1269])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1I(uint target, int s)
		{
			GlMultiTexCoord1INative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1270])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1270])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Iv(uint target, int* v)
		{
			GlMultiTexCoord1IvNative(target, v);
		}

		public static void GlMultiTexCoord1Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord1IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1SNative(uint target, short s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[1271])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[1271])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1S(uint target, short s)
		{
			GlMultiTexCoord1SNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1272])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1272])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1Sv(uint target, short* v)
		{
			GlMultiTexCoord1SvNative(target, v);
		}

		public static void GlMultiTexCoord1Sv(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord1SvNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2DNative(uint target, double s, double t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[1273])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[1273])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2D(uint target, double s, double t)
		{
			GlMultiTexCoord2DNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1274])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1274])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Dv(uint target, double* v)
		{
			GlMultiTexCoord2DvNative(target, v);
		}

		public static void GlMultiTexCoord2Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord2DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2FNative(uint target, float s, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[1275])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[1275])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2F(uint target, float s, float t)
		{
			GlMultiTexCoord2FNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1276])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1276])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Fv(uint target, float* v)
		{
			GlMultiTexCoord2FvNative(target, v);
		}

		public static void GlMultiTexCoord2Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord2FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2INative(uint target, int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1277])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1277])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2I(uint target, int s, int t)
		{
			GlMultiTexCoord2INative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1278])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1278])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Iv(uint target, int* v)
		{
			GlMultiTexCoord2IvNative(target, v);
		}

		public static void GlMultiTexCoord2Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord2IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2SNative(uint target, short s, short t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[1279])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[1279])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2S(uint target, short s, short t)
		{
			GlMultiTexCoord2SNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1280])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1280])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2Sv(uint target, short* v)
		{
			GlMultiTexCoord2SvNative(target, v);
		}

		public static void GlMultiTexCoord2Sv(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord2SvNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3DNative(uint target, double s, double t, double r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[1281])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[1281])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3D(uint target, double s, double t, double r)
		{
			GlMultiTexCoord3DNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1282])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1282])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Dv(uint target, double* v)
		{
			GlMultiTexCoord3DvNative(target, v);
		}

		public static void GlMultiTexCoord3Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord3DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3FNative(uint target, float s, float t, float r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[1283])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[1283])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3F(uint target, float s, float t, float r)
		{
			GlMultiTexCoord3FNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1284])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1284])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Fv(uint target, float* v)
		{
			GlMultiTexCoord3FvNative(target, v);
		}

		public static void GlMultiTexCoord3Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord3FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3INative(uint target, int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[1285])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[1285])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3I(uint target, int s, int t, int r)
		{
			GlMultiTexCoord3INative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1286])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1286])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Iv(uint target, int* v)
		{
			GlMultiTexCoord3IvNative(target, v);
		}

		public static void GlMultiTexCoord3Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord3IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3SNative(uint target, short s, short t, short r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[1287])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[1287])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3S(uint target, short s, short t, short r)
		{
			GlMultiTexCoord3SNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1288])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1288])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3Sv(uint target, short* v)
		{
			GlMultiTexCoord3SvNative(target, v);
		}

		public static void GlMultiTexCoord3Sv(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord3SvNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4DNative(uint target, double s, double t, double r, double q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[1289])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[1289])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4D(uint target, double s, double t, double r, double q)
		{
			GlMultiTexCoord4DNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4DvNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1290])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1290])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4Dv(uint target, double* v)
		{
			GlMultiTexCoord4DvNative(target, v);
		}

		public static void GlMultiTexCoord4Dv(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord4DvNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4FNative(uint target, float s, float t, float r, float q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[1291])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[1291])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4F(uint target, float s, float t, float r, float q)
		{
			GlMultiTexCoord4FNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4FvNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1292])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1292])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4Fv(uint target, float* v)
		{
			GlMultiTexCoord4FvNative(target, v);
		}

		public static void GlMultiTexCoord4Fv(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord4FvNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4INative(uint target, int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1293])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1293])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4I(uint target, int s, int t, int r, int q)
		{
			GlMultiTexCoord4INative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4IvNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1294])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1294])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4Iv(uint target, int* v)
		{
			GlMultiTexCoord4IvNative(target, v);
		}

		public static void GlMultiTexCoord4Iv(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord4IvNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4SNative(uint target, short s, short t, short r, short q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[1295])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[1295])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4S(uint target, short s, short t, short r, short q)
		{
			GlMultiTexCoord4SNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4SvNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1296])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1296])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4Sv(uint target, short* v)
		{
			GlMultiTexCoord4SvNative(target, v);
		}

		public static void GlMultiTexCoord4Sv(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord4SvNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLoadTransposeMatrixdNative(double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1297])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1297])((nint)m);
			#endif
		}

		public static void GlLoadTransposeMatrixd(double* m)
		{
			GlLoadTransposeMatrixdNative(m);
		}

		public static void GlLoadTransposeMatrixd(ref double m)
		{
			fixed (double* pm = &m)
			{
				GlLoadTransposeMatrixdNative((double*)pm);
			}
		}

		public static void GlLoadTransposeMatrixd(ReadOnlySpan<double> m)
		{
			fixed (double* pm = m)
			{
				GlLoadTransposeMatrixdNative((double*)pm);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlLoadTransposeMatrixfNative(float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1298])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1298])((nint)m);
			#endif
		}

		public static void GlLoadTransposeMatrixf(float* m)
		{
			GlLoadTransposeMatrixfNative(m);
		}

		public static void GlLoadTransposeMatrixf(ref float m)
		{
			fixed (float* pm = &m)
			{
				GlLoadTransposeMatrixfNative((float*)pm);
			}
		}

		public static void GlLoadTransposeMatrixf(ReadOnlySpan<float> m)
		{
			fixed (float* pm = m)
			{
				GlLoadTransposeMatrixfNative((float*)pm);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultTransposeMatrixdNative(double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[1299])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1299])((nint)m);
			#endif
		}

		public static void GlMultTransposeMatrixd(double* m)
		{
			GlMultTransposeMatrixdNative(m);
		}

		public static void GlMultTransposeMatrixd(ref double m)
		{
			fixed (double* pm = &m)
			{
				GlMultTransposeMatrixdNative((double*)pm);
			}
		}

		public static void GlMultTransposeMatrixd(ReadOnlySpan<double> m)
		{
			fixed (double* pm = m)
			{
				GlMultTransposeMatrixdNative((double*)pm);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultTransposeMatrixfNative(float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1300])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1300])((nint)m);
			#endif
		}

		public static void GlMultTransposeMatrixf(float* m)
		{
			GlMultTransposeMatrixfNative(m);
		}

		public static void GlMultTransposeMatrixf(ref float m)
		{
			fixed (float* pm = &m)
			{
				GlMultTransposeMatrixfNative((float*)pm);
			}
		}

		public static void GlMultTransposeMatrixf(ReadOnlySpan<float> m)
		{
			fixed (float* pm = m)
			{
				GlMultTransposeMatrixfNative((float*)pm);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlSampleCoverageNative(float value, byte invert)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[1301])(value, invert);
			#else
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[1301])(value, invert);
			#endif
		}

		public static void GlSampleCoverage(float value, byte invert)
		{
			GlSampleCoverageNative(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlActiveTextureARBNative(uint texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1302])(texture);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1302])(texture);
			#endif
		}

		public static void GlActiveTextureARB(uint texture)
		{
			GlActiveTextureARBNative(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlClientActiveTextureARBNative(uint texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1303])(texture);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1303])(texture);
			#endif
		}

		public static void GlClientActiveTextureARB(uint texture)
		{
			GlClientActiveTextureARBNative(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1DARBNative(uint target, double s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1304])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1304])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1DARB(uint target, double s)
		{
			GlMultiTexCoord1DARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1DvARBNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1305])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1305])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1DvARB(uint target, double* v)
		{
			GlMultiTexCoord1DvARBNative(target, v);
		}

		public static void GlMultiTexCoord1DvARB(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord1DvARBNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1FARBNative(uint target, float s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1306])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[1306])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1FARB(uint target, float s)
		{
			GlMultiTexCoord1FARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1FvARBNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1307])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1307])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1FvARB(uint target, float* v)
		{
			GlMultiTexCoord1FvARBNative(target, v);
		}

		public static void GlMultiTexCoord1FvARB(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord1FvARBNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1IARBNative(uint target, int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1308])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1308])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1IARB(uint target, int s)
		{
			GlMultiTexCoord1IARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1IvARBNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1309])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1309])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1IvARB(uint target, int* v)
		{
			GlMultiTexCoord1IvARBNative(target, v);
		}

		public static void GlMultiTexCoord1IvARB(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord1IvARBNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1SARBNative(uint target, short s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[1310])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[1310])(target, s);
			#endif
		}

		public static void GlMultiTexCoord1SARB(uint target, short s)
		{
			GlMultiTexCoord1SARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord1SvARBNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1311])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1311])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord1SvARB(uint target, short* v)
		{
			GlMultiTexCoord1SvARBNative(target, v);
		}

		public static void GlMultiTexCoord1SvARB(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord1SvARBNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2DARBNative(uint target, double s, double t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[1312])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[1312])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2DARB(uint target, double s, double t)
		{
			GlMultiTexCoord2DARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2DvARBNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1313])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1313])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2DvARB(uint target, double* v)
		{
			GlMultiTexCoord2DvARBNative(target, v);
		}

		public static void GlMultiTexCoord2DvARB(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord2DvARBNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2FARBNative(uint target, float s, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[1314])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[1314])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2FARB(uint target, float s, float t)
		{
			GlMultiTexCoord2FARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2FvARBNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1315])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1315])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2FvARB(uint target, float* v)
		{
			GlMultiTexCoord2FvARBNative(target, v);
		}

		public static void GlMultiTexCoord2FvARB(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord2FvARBNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2IARBNative(uint target, int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1316])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[1316])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2IARB(uint target, int s, int t)
		{
			GlMultiTexCoord2IARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2IvARBNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1317])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1317])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2IvARB(uint target, int* v)
		{
			GlMultiTexCoord2IvARBNative(target, v);
		}

		public static void GlMultiTexCoord2IvARB(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord2IvARBNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2SARBNative(uint target, short s, short t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[1318])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[1318])(target, s, t);
			#endif
		}

		public static void GlMultiTexCoord2SARB(uint target, short s, short t)
		{
			GlMultiTexCoord2SARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord2SvARBNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1319])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1319])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord2SvARB(uint target, short* v)
		{
			GlMultiTexCoord2SvARBNative(target, v);
		}

		public static void GlMultiTexCoord2SvARB(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord2SvARBNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3DARBNative(uint target, double s, double t, double r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[1320])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[1320])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3DARB(uint target, double s, double t, double r)
		{
			GlMultiTexCoord3DARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3DvARBNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1321])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1321])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3DvARB(uint target, double* v)
		{
			GlMultiTexCoord3DvARBNative(target, v);
		}

		public static void GlMultiTexCoord3DvARB(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord3DvARBNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3FARBNative(uint target, float s, float t, float r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[1322])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[1322])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3FARB(uint target, float s, float t, float r)
		{
			GlMultiTexCoord3FARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3FvARBNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1323])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1323])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3FvARB(uint target, float* v)
		{
			GlMultiTexCoord3FvARBNative(target, v);
		}

		public static void GlMultiTexCoord3FvARB(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord3FvARBNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3IARBNative(uint target, int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[1324])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[1324])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3IARB(uint target, int s, int t, int r)
		{
			GlMultiTexCoord3IARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3IvARBNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1325])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1325])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3IvARB(uint target, int* v)
		{
			GlMultiTexCoord3IvARBNative(target, v);
		}

		public static void GlMultiTexCoord3IvARB(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord3IvARBNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3SARBNative(uint target, short s, short t, short r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[1326])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[1326])(target, s, t, r);
			#endif
		}

		public static void GlMultiTexCoord3SARB(uint target, short s, short t, short r)
		{
			GlMultiTexCoord3SARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord3SvARBNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1327])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1327])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord3SvARB(uint target, short* v)
		{
			GlMultiTexCoord3SvARBNative(target, v);
		}

		public static void GlMultiTexCoord3SvARB(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord3SvARBNative(target, (short*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4DARBNative(uint target, double s, double t, double r, double q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[1328])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[1328])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4DARB(uint target, double s, double t, double r, double q)
		{
			GlMultiTexCoord4DARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4DvARBNative(uint target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[1329])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1329])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4DvARB(uint target, double* v)
		{
			GlMultiTexCoord4DvARBNative(target, v);
		}

		public static void GlMultiTexCoord4DvARB(uint target, ref double v)
		{
			fixed (double* pv = &v)
			{
				GlMultiTexCoord4DvARBNative(target, (double*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4FARBNative(uint target, float s, float t, float r, float q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[1330])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[1330])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4FARB(uint target, float s, float t, float r, float q)
		{
			GlMultiTexCoord4FARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4FvARBNative(uint target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[1331])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1331])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4FvARB(uint target, float* v)
		{
			GlMultiTexCoord4FvARBNative(target, v);
		}

		public static void GlMultiTexCoord4FvARB(uint target, ref float v)
		{
			fixed (float* pv = &v)
			{
				GlMultiTexCoord4FvARBNative(target, (float*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4IARBNative(uint target, int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1332])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[1332])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4IARB(uint target, int s, int t, int r, int q)
		{
			GlMultiTexCoord4IARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4IvARBNative(uint target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[1333])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1333])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4IvARB(uint target, int* v)
		{
			GlMultiTexCoord4IvARBNative(target, v);
		}

		public static void GlMultiTexCoord4IvARB(uint target, ref int v)
		{
			fixed (int* pv = &v)
			{
				GlMultiTexCoord4IvARBNative(target, (int*)pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4SARBNative(uint target, short s, short t, short r, short q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[1334])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[1334])(target, s, t, r, q);
			#endif
		}

		public static void GlMultiTexCoord4SARB(uint target, short s, short t, short r, short q)
		{
			GlMultiTexCoord4SARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GlMultiTexCoord4SvARBNative(uint target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[1335])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1335])(target, (nint)v);
			#endif
		}

		public static void GlMultiTexCoord4SvARB(uint target, short* v)
		{
			GlMultiTexCoord4SvARBNative(target, v);
		}

		public static void GlMultiTexCoord4SvARB(uint target, ref short v)
		{
			fixed (short* pv = &v)
			{
				GlMultiTexCoord4SvARBNative(target, (short*)pv);
			}
		}

		/// <summary>
		/// Get driver-specific information about a window.<br/>
		/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>
		/// The caller must initialize the `info` structure's version by using<br/>
		/// `SDL_VERSION(<br/>
		/// &info<br/>
		/// .version)`, and then this function will fill in the rest<br/>
		/// of the structure with information about the given window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GetWindowWMInfoNative(SDLWindow* window, SDLSysWMInfo* info)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLSysWMInfo*, SDLBool>)funcTable[1336])(window, info);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, nint, SDLBool>)funcTable[1336])((nint)window, (nint)info);
			#endif
		}

		/// <summary>
		/// Get driver-specific information about a window.<br/>
		/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>
		/// The caller must initialize the `info` structure's version by using<br/>
		/// `SDL_VERSION(<br/>
		/// &info<br/>
		/// .version)`, and then this function will fill in the rest<br/>
		/// of the structure with information about the given window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GetWindowWMInfo(SDLWindow* window, SDLSysWMInfo* info)
		{
			SDLBool ret = GetWindowWMInfoNative(window, info);
			return ret;
		}

		/// <summary>
		/// Get driver-specific information about a window.<br/>
		/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>
		/// The caller must initialize the `info` structure's version by using<br/>
		/// `SDL_VERSION(<br/>
		/// &info<br/>
		/// .version)`, and then this function will fill in the rest<br/>
		/// of the structure with information about the given window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GetWindowWMInfo(ref SDLWindow window, SDLSysWMInfo* info)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLBool ret = GetWindowWMInfoNative((SDLWindow*)pwindow, info);
				return ret;
			}
		}

		/// <summary>
		/// Get driver-specific information about a window.<br/>
		/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>
		/// The caller must initialize the `info` structure's version by using<br/>
		/// `SDL_VERSION(<br/>
		/// &info<br/>
		/// .version)`, and then this function will fill in the rest<br/>
		/// of the structure with information about the given window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GetWindowWMInfo(SDLWindow* window, ref SDLSysWMInfo info)
		{
			fixed (SDLSysWMInfo* pinfo = &info)
			{
				SDLBool ret = GetWindowWMInfoNative(window, (SDLSysWMInfo*)pinfo);
				return ret;
			}
		}

		/// <summary>
		/// Get driver-specific information about a window.<br/>
		/// You must include SDL_syswm.h for the declaration of SDL_SysWMinfo.<br/>
		/// The caller must initialize the `info` structure's version by using<br/>
		/// `SDL_VERSION(<br/>
		/// &info<br/>
		/// .version)`, and then this function will fill in the rest<br/>
		/// of the structure with information about the given window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GetWindowWMInfo(ref SDLWindow window, ref SDLSysWMInfo info)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLSysWMInfo* pinfo = &info)
				{
					SDLBool ret = GetWindowWMInfoNative((SDLWindow*)pwindow, (SDLSysWMInfo*)pinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestAssertNative(int assertCondition, byte* assertDescription)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, void>)funcTable[1337])(assertCondition, assertDescription);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[1337])(assertCondition, (nint)assertDescription);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssert(int assertCondition, byte* assertDescription)
		{
			TestAssertNative(assertCondition, assertDescription);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssert(int assertCondition, ref byte assertDescription)
		{
			fixed (byte* passertDescription = &assertDescription)
			{
				TestAssertNative(assertCondition, (byte*)passertDescription);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssert(int assertCondition, ReadOnlySpan<byte> assertDescription)
		{
			fixed (byte* passertDescription = assertDescription)
			{
				TestAssertNative(assertCondition, (byte*)passertDescription);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssert(int assertCondition, string assertDescription)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (assertDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(assertDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(assertDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestAssertNative(assertCondition, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestAssertCheckNative(int assertCondition, byte* assertDescription)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*, int>)funcTable[1338])(assertCondition, assertDescription);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, nint, int>)funcTable[1338])(assertCondition, (nint)assertDescription);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestAssertCheck(int assertCondition, byte* assertDescription)
		{
			int ret = TestAssertCheckNative(assertCondition, assertDescription);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestAssertCheck(int assertCondition, ref byte assertDescription)
		{
			fixed (byte* passertDescription = &assertDescription)
			{
				int ret = TestAssertCheckNative(assertCondition, (byte*)passertDescription);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestAssertCheck(int assertCondition, ReadOnlySpan<byte> assertDescription)
		{
			fixed (byte* passertDescription = assertDescription)
			{
				int ret = TestAssertCheckNative(assertCondition, (byte*)passertDescription);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestAssertCheck(int assertCondition, string assertDescription)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (assertDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(assertDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(assertDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = TestAssertCheckNative(assertCondition, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestAssertPassNative(byte* assertDescription)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)funcTable[1339])(assertDescription);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1339])((nint)assertDescription);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssertPass(byte* assertDescription)
		{
			TestAssertPassNative(assertDescription);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssertPass(ref byte assertDescription)
		{
			fixed (byte* passertDescription = &assertDescription)
			{
				TestAssertPassNative((byte*)passertDescription);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssertPass(ReadOnlySpan<byte> assertDescription)
		{
			fixed (byte* passertDescription = assertDescription)
			{
				TestAssertPassNative((byte*)passertDescription);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestAssertPass(string assertDescription)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (assertDescription != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(assertDescription);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(assertDescription, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestAssertPassNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestResetAssertSummaryNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1340])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1340])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// </summary>
		public static void TestResetAssertSummary()
		{
			TestResetAssertSummaryNative();
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestLogAssertSummaryNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1341])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1341])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// </summary>
		public static void TestLogAssertSummary()
		{
			TestLogAssertSummaryNative();
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestAssertSummaryToTestResultNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[1342])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[1342])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestAssertSummaryToTestResult()
		{
			int ret = TestAssertSummaryToTestResultNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLTestCommonState* TestCommonCreateStateNative(byte** argv, uint flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte**, uint, SDLTestCommonState*>)funcTable[1343])(argv, flags);
			#else
			return (SDLTestCommonState*)((delegate* unmanaged[Cdecl]<nint, uint, nint>)funcTable[1343])((nint)argv, flags);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLTestCommonState* TestCommonCreateState(byte** argv, uint flags)
		{
			SDLTestCommonState* ret = TestCommonCreateStateNative(argv, flags);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLTestCommonState* TestCommonCreateState(ref byte* argv, uint flags)
		{
			fixed (byte** pargv = &argv)
			{
				SDLTestCommonState* ret = TestCommonCreateStateNative((byte**)pargv, flags);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCommonArgNative(SDLTestCommonState* state, int index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCommonState*, int, int>)funcTable[1344])(state, index);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[1344])((nint)state, index);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCommonArg(SDLTestCommonState* state, int index)
		{
			int ret = TestCommonArgNative(state, index);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCommonArg(ref SDLTestCommonState state, int index)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				int ret = TestCommonArgNative((SDLTestCommonState*)pstate, index);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestCommonLogUsageNative(SDLTestCommonState* state, byte* argv0, byte** options)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestCommonState*, byte*, byte**, void>)funcTable[1345])(state, argv0, options);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[1345])((nint)state, (nint)argv0, (nint)options);
			#endif
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, byte* argv0, byte** options)
		{
			TestCommonLogUsageNative(state, argv0, options);
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, byte* argv0, byte** options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				TestCommonLogUsageNative((SDLTestCommonState*)pstate, argv0, options);
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, ref byte argv0, byte** options)
		{
			fixed (byte* pargv0 = &argv0)
			{
				TestCommonLogUsageNative(state, (byte*)pargv0, options);
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, ReadOnlySpan<byte> argv0, byte** options)
		{
			fixed (byte* pargv0 = argv0)
			{
				TestCommonLogUsageNative(state, (byte*)pargv0, options);
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, string argv0, byte** options)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argv0 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argv0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argv0, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestCommonLogUsageNative(state, pStr0, options);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, ref byte argv0, byte** options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (byte* pargv0 = &argv0)
				{
					TestCommonLogUsageNative((SDLTestCommonState*)pstate, (byte*)pargv0, options);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, ReadOnlySpan<byte> argv0, byte** options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (byte* pargv0 = argv0)
				{
					TestCommonLogUsageNative((SDLTestCommonState*)pstate, (byte*)pargv0, options);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, string argv0, byte** options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (argv0 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(argv0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(argv0, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				TestCommonLogUsageNative((SDLTestCommonState*)pstate, pStr0, options);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, byte* argv0, ref byte* options)
		{
			fixed (byte** poptions = &options)
			{
				TestCommonLogUsageNative(state, argv0, (byte**)poptions);
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, byte* argv0, ref byte* options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (byte** poptions = &options)
				{
					TestCommonLogUsageNative((SDLTestCommonState*)pstate, argv0, (byte**)poptions);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, ref byte argv0, ref byte* options)
		{
			fixed (byte* pargv0 = &argv0)
			{
				fixed (byte** poptions = &options)
				{
					TestCommonLogUsageNative(state, (byte*)pargv0, (byte**)poptions);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, ReadOnlySpan<byte> argv0, ref byte* options)
		{
			fixed (byte* pargv0 = argv0)
			{
				fixed (byte** poptions = &options)
				{
					TestCommonLogUsageNative(state, (byte*)pargv0, (byte**)poptions);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(SDLTestCommonState* state, string argv0, ref byte* options)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (argv0 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(argv0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(argv0, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** poptions = &options)
			{
				TestCommonLogUsageNative(state, pStr0, (byte**)poptions);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, ref byte argv0, ref byte* options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (byte* pargv0 = &argv0)
				{
					fixed (byte** poptions = &options)
					{
						TestCommonLogUsageNative((SDLTestCommonState*)pstate, (byte*)pargv0, (byte**)poptions);
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, ReadOnlySpan<byte> argv0, ref byte* options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (byte* pargv0 = argv0)
				{
					fixed (byte** poptions = &options)
					{
						TestCommonLogUsageNative((SDLTestCommonState*)pstate, (byte*)pargv0, (byte**)poptions);
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// This logs the appropriate command line options for the subsystems in use<br/>
		/// plus other common options, and then any application-specific options.<br/>
		/// This uses the SDL_Log() function and splits up output to be friendly to<br/>
		/// 80-character-wide terminals.<br/>
		/// <br/>
		/// </summary>
		public static void TestCommonLogUsage(ref SDLTestCommonState state, string argv0, ref byte* options)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (argv0 != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(argv0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(argv0, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte** poptions = &options)
				{
					TestCommonLogUsageNative((SDLTestCommonState*)pstate, pStr0, (byte**)poptions);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// You should (probably) be using SDLTest_CommonLogUsage() instead, but this<br/>
		/// function remains for binary compatibility. Strings returned from this<br/>
		/// function are valid until SDLTest_CommonQuit() is called, in which case<br/>
		/// those strings' memory is freed and can no longer be used.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* TestCommonUsageNative(SDLTestCommonState* state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCommonState*, byte*>)funcTable[1346])(state);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[1346])((nint)state);
			#endif
		}

		/// <summary>
		/// <br/>
		/// You should (probably) be using SDLTest_CommonLogUsage() instead, but this<br/>
		/// function remains for binary compatibility. Strings returned from this<br/>
		/// function are valid until SDLTest_CommonQuit() is called, in which case<br/>
		/// those strings' memory is freed and can no longer be used.<br/>
		/// <br/>
		/// </summary>
		public static byte* TestCommonUsage(SDLTestCommonState* state)
		{
			byte* ret = TestCommonUsageNative(state);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// You should (probably) be using SDLTest_CommonLogUsage() instead, but this<br/>
		/// function remains for binary compatibility. Strings returned from this<br/>
		/// function are valid until SDLTest_CommonQuit() is called, in which case<br/>
		/// those strings' memory is freed and can no longer be used.<br/>
		/// <br/>
		/// </summary>
		public static string TestCommonUsageS(SDLTestCommonState* state)
		{
			string ret = Utils.DecodeStringUTF8(TestCommonUsageNative(state));
			return ret;
		}

		/// <summary>
		/// <br/>
		/// You should (probably) be using SDLTest_CommonLogUsage() instead, but this<br/>
		/// function remains for binary compatibility. Strings returned from this<br/>
		/// function are valid until SDLTest_CommonQuit() is called, in which case<br/>
		/// those strings' memory is freed and can no longer be used.<br/>
		/// <br/>
		/// </summary>
		public static byte* TestCommonUsage(ref SDLTestCommonState state)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				byte* ret = TestCommonUsageNative((SDLTestCommonState*)pstate);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// You should (probably) be using SDLTest_CommonLogUsage() instead, but this<br/>
		/// function remains for binary compatibility. Strings returned from this<br/>
		/// function are valid until SDLTest_CommonQuit() is called, in which case<br/>
		/// those strings' memory is freed and can no longer be used.<br/>
		/// <br/>
		/// </summary>
		public static string TestCommonUsageS(ref SDLTestCommonState state)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				string ret = Utils.DecodeStringUTF8(TestCommonUsageNative((SDLTestCommonState*)pstate));
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool TestCommonInitNative(SDLTestCommonState* state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCommonState*, SDLBool>)funcTable[1347])(state);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[1347])((nint)state);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool TestCommonInit(SDLTestCommonState* state)
		{
			SDLBool ret = TestCommonInitNative(state);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool TestCommonInit(ref SDLTestCommonState state)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				SDLBool ret = TestCommonInitNative((SDLTestCommonState*)pstate);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool TestCommonDefaultArgsNative(SDLTestCommonState* state, int argc, byte** argv)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCommonState*, int, byte**, SDLBool>)funcTable[1348])(state, argc, argv);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, int, nint, SDLBool>)funcTable[1348])((nint)state, argc, (nint)argv);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool TestCommonDefaultArgs(SDLTestCommonState* state, int argc, byte** argv)
		{
			SDLBool ret = TestCommonDefaultArgsNative(state, argc, argv);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool TestCommonDefaultArgs(ref SDLTestCommonState state, int argc, byte** argv)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				SDLBool ret = TestCommonDefaultArgsNative((SDLTestCommonState*)pstate, argc, argv);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool TestCommonDefaultArgs(SDLTestCommonState* state, int argc, ref byte* argv)
		{
			fixed (byte** pargv = &argv)
			{
				SDLBool ret = TestCommonDefaultArgsNative(state, argc, (byte**)pargv);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool TestCommonDefaultArgs(ref SDLTestCommonState state, int argc, ref byte* argv)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (byte** pargv = &argv)
				{
					SDLBool ret = TestCommonDefaultArgsNative((SDLTestCommonState*)pstate, argc, (byte**)pargv);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestCommonEventNative(SDLTestCommonState* state, SDLEvent* evnt, int* done)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestCommonState*, SDLEvent*, int*, void>)funcTable[1349])(state, evnt, done);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[1349])((nint)state, (nint)evnt, (nint)done);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(SDLTestCommonState* state, SDLEvent* evnt, int* done)
		{
			TestCommonEventNative(state, evnt, done);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(ref SDLTestCommonState state, SDLEvent* evnt, int* done)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				TestCommonEventNative((SDLTestCommonState*)pstate, evnt, done);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(SDLTestCommonState* state, ref SDLEvent evnt, int* done)
		{
			fixed (SDLEvent* pevnt = &evnt)
			{
				TestCommonEventNative(state, (SDLEvent*)pevnt, done);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(ref SDLTestCommonState state, ref SDLEvent evnt, int* done)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (SDLEvent* pevnt = &evnt)
				{
					TestCommonEventNative((SDLTestCommonState*)pstate, (SDLEvent*)pevnt, done);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(SDLTestCommonState* state, SDLEvent* evnt, ref int done)
		{
			fixed (int* pdone = &done)
			{
				TestCommonEventNative(state, evnt, (int*)pdone);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(ref SDLTestCommonState state, SDLEvent* evnt, ref int done)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (int* pdone = &done)
				{
					TestCommonEventNative((SDLTestCommonState*)pstate, evnt, (int*)pdone);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(SDLTestCommonState* state, ref SDLEvent evnt, ref int done)
		{
			fixed (SDLEvent* pevnt = &evnt)
			{
				fixed (int* pdone = &done)
				{
					TestCommonEventNative(state, (SDLEvent*)pevnt, (int*)pdone);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonEvent(ref SDLTestCommonState state, ref SDLEvent evnt, ref int done)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				fixed (SDLEvent* pevnt = &evnt)
				{
					fixed (int* pdone = &done)
					{
						TestCommonEventNative((SDLTestCommonState*)pstate, (SDLEvent*)pevnt, (int*)pdone);
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestCommonQuitNative(SDLTestCommonState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestCommonState*, void>)funcTable[1350])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1350])((nint)state);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonQuit(SDLTestCommonState* state)
		{
			TestCommonQuitNative(state);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonQuit(ref SDLTestCommonState state)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				TestCommonQuitNative((SDLTestCommonState*)pstate);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestCommonDrawWindowInfoNative(SDLRenderer* renderer, SDLWindow* window, int* usedHeight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLRenderer*, SDLWindow*, int*, void>)funcTable[1351])(renderer, window, usedHeight);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[1351])((nint)renderer, (nint)window, (nint)usedHeight);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(SDLRenderer* renderer, SDLWindow* window, int* usedHeight)
		{
			TestCommonDrawWindowInfoNative(renderer, window, usedHeight);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(ref SDLRenderer renderer, SDLWindow* window, int* usedHeight)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				TestCommonDrawWindowInfoNative((SDLRenderer*)prenderer, window, usedHeight);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(SDLRenderer* renderer, ref SDLWindow window, int* usedHeight)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				TestCommonDrawWindowInfoNative(renderer, (SDLWindow*)pwindow, usedHeight);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(ref SDLRenderer renderer, ref SDLWindow window, int* usedHeight)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLWindow* pwindow = &window)
				{
					TestCommonDrawWindowInfoNative((SDLRenderer*)prenderer, (SDLWindow*)pwindow, usedHeight);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(SDLRenderer* renderer, SDLWindow* window, ref int usedHeight)
		{
			fixed (int* pusedHeight = &usedHeight)
			{
				TestCommonDrawWindowInfoNative(renderer, window, (int*)pusedHeight);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(ref SDLRenderer renderer, SDLWindow* window, ref int usedHeight)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (int* pusedHeight = &usedHeight)
				{
					TestCommonDrawWindowInfoNative((SDLRenderer*)prenderer, window, (int*)pusedHeight);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(SDLRenderer* renderer, ref SDLWindow window, ref int usedHeight)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pusedHeight = &usedHeight)
				{
					TestCommonDrawWindowInfoNative(renderer, (SDLWindow*)pwindow, (int*)pusedHeight);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestCommonDrawWindowInfo(ref SDLRenderer renderer, ref SDLWindow window, ref int usedHeight)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (SDLWindow* pwindow = &window)
				{
					fixed (int* pusedHeight = &usedHeight)
					{
						TestCommonDrawWindowInfoNative((SDLRenderer*)prenderer, (SDLWindow*)pwindow, (int*)pusedHeight);
					}
				}
			}
		}

		/// <summary>
		/// Test images <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1352])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1352])();
			#endif
		}

		/// <summary>
		/// Test images <br/>
		/// </summary>
		public static SDLSurface* TestImageBlit()
		{
			SDLSurface* ret = TestImageBlitNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitColorNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1353])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1353])();
			#endif
		}

		public static SDLSurface* TestImageBlitColor()
		{
			SDLSurface* ret = TestImageBlitColorNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitAlphaNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1354])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1354])();
			#endif
		}

		public static SDLSurface* TestImageBlitAlpha()
		{
			SDLSurface* ret = TestImageBlitAlphaNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitBlendAddNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1355])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1355])();
			#endif
		}

		public static SDLSurface* TestImageBlitBlendAdd()
		{
			SDLSurface* ret = TestImageBlitBlendAddNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitBlendNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1356])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1356])();
			#endif
		}

		public static SDLSurface* TestImageBlitBlend()
		{
			SDLSurface* ret = TestImageBlitBlendNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitBlendModNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1357])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1357])();
			#endif
		}

		public static SDLSurface* TestImageBlitBlendMod()
		{
			SDLSurface* ret = TestImageBlitBlendModNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitBlendNoneNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1358])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1358])();
			#endif
		}

		public static SDLSurface* TestImageBlitBlendNone()
		{
			SDLSurface* ret = TestImageBlitBlendNoneNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageBlitBlendAllNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1359])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1359])();
			#endif
		}

		public static SDLSurface* TestImageBlitBlendAll()
		{
			SDLSurface* ret = TestImageBlitBlendAllNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImageFaceNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1360])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1360])();
			#endif
		}

		public static SDLSurface* TestImageFace()
		{
			SDLSurface* ret = TestImageFaceNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImagePrimitivesNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1361])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1361])();
			#endif
		}

		public static SDLSurface* TestImagePrimitives()
		{
			SDLSurface* ret = TestImagePrimitivesNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* TestImagePrimitivesBlendNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*>)funcTable[1362])();
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1362])();
			#endif
		}

		public static SDLSurface* TestImagePrimitivesBlend()
		{
			SDLSurface* ret = TestImagePrimitivesBlendNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCompareSurfacesNative(SDLSurface* surface, SDLSurface* referenceSurface, int allowableError)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLSurface*, int, int>)funcTable[1363])(surface, referenceSurface, allowableError);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[1363])((nint)surface, (nint)referenceSurface, allowableError);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCompareSurfaces(SDLSurface* surface, SDLSurface* referenceSurface, int allowableError)
		{
			int ret = TestCompareSurfacesNative(surface, referenceSurface, allowableError);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCompareSurfaces(ref SDLSurface surface, SDLSurface* referenceSurface, int allowableError)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				int ret = TestCompareSurfacesNative((SDLSurface*)psurface, referenceSurface, allowableError);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCompareSurfaces(SDLSurface* surface, ref SDLSurface referenceSurface, int allowableError)
		{
			fixed (SDLSurface* preferenceSurface = &referenceSurface)
			{
				int ret = TestCompareSurfacesNative(surface, (SDLSurface*)preferenceSurface, allowableError);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCompareSurfaces(ref SDLSurface surface, ref SDLSurface referenceSurface, int allowableError)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLSurface* preferenceSurface = &referenceSurface)
				{
					int ret = TestCompareSurfacesNative((SDLSurface*)psurface, (SDLSurface*)preferenceSurface, allowableError);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Note: The function initializes the crc table required for all crc calculations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCrc32InitNative(SDLTestCrc32Context* crcContext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, int>)funcTable[1364])(crcContext);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[1364])((nint)crcContext);
			#endif
		}

		/// <summary>
		/// <br/>
		/// Note: The function initializes the crc table required for all crc calculations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Init(SDLTestCrc32Context* crcContext)
		{
			int ret = TestCrc32InitNative(crcContext);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// Note: The function initializes the crc table required for all crc calculations.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Init(ref SDLTestCrc32Context crcContext)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = TestCrc32InitNative((SDLTestCrc32Context*)pcrcContext);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCrc32CalcNative(SDLTestCrc32Context* crcContext, byte* inBuf, uint inLen, uint* crc32)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, byte*, uint, uint*, int>)funcTable[1365])(crcContext, inBuf, inLen, crc32);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, int>)funcTable[1365])((nint)crcContext, (nint)inBuf, inLen, (nint)crc32);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(SDLTestCrc32Context* crcContext, byte* inBuf, uint inLen, uint* crc32)
		{
			int ret = TestCrc32CalcNative(crcContext, inBuf, inLen, crc32);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(ref SDLTestCrc32Context crcContext, byte* inBuf, uint inLen, uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = TestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, crc32);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(SDLTestCrc32Context* crcContext, ref byte inBuf, uint inLen, uint* crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				int ret = TestCrc32CalcNative(crcContext, (byte*)pinBuf, inLen, crc32);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(ref SDLTestCrc32Context crcContext, ref byte inBuf, uint inLen, uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					int ret = TestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, crc32);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(SDLTestCrc32Context* crcContext, byte* inBuf, uint inLen, ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = TestCrc32CalcNative(crcContext, inBuf, inLen, (uint*)pcrc32);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(ref SDLTestCrc32Context crcContext, byte* inBuf, uint inLen, ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = TestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(SDLTestCrc32Context* crcContext, ref byte inBuf, uint inLen, ref uint crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = TestCrc32CalcNative(crcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Calc(ref SDLTestCrc32Context crcContext, ref byte inBuf, uint inLen, ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					fixed (uint* pcrc32 = &crc32)
					{
						int ret = TestCrc32CalcNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Same routine broken down into three steps <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCrc32CalcStartNative(SDLTestCrc32Context* crcContext, uint* crc32)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, uint*, int>)funcTable[1366])(crcContext, crc32);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[1366])((nint)crcContext, (nint)crc32);
			#endif
		}

		/// <summary>
		/// Same routine broken down into three steps <br/>
		/// </summary>
		public static int TestCrc32CalcStart(SDLTestCrc32Context* crcContext, uint* crc32)
		{
			int ret = TestCrc32CalcStartNative(crcContext, crc32);
			return ret;
		}

		/// <summary>
		/// Same routine broken down into three steps <br/>
		/// </summary>
		public static int TestCrc32CalcStart(ref SDLTestCrc32Context crcContext, uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = TestCrc32CalcStartNative((SDLTestCrc32Context*)pcrcContext, crc32);
				return ret;
			}
		}

		/// <summary>
		/// Same routine broken down into three steps <br/>
		/// </summary>
		public static int TestCrc32CalcStart(SDLTestCrc32Context* crcContext, ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = TestCrc32CalcStartNative(crcContext, (uint*)pcrc32);
				return ret;
			}
		}

		/// <summary>
		/// Same routine broken down into three steps <br/>
		/// </summary>
		public static int TestCrc32CalcStart(ref SDLTestCrc32Context crcContext, ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = TestCrc32CalcStartNative((SDLTestCrc32Context*)pcrcContext, (uint*)pcrc32);
					return ret;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCrc32CalcEndNative(SDLTestCrc32Context* crcContext, uint* crc32)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, uint*, int>)funcTable[1367])(crcContext, crc32);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[1367])((nint)crcContext, (nint)crc32);
			#endif
		}

		public static int TestCrc32CalcEnd(SDLTestCrc32Context* crcContext, uint* crc32)
		{
			int ret = TestCrc32CalcEndNative(crcContext, crc32);
			return ret;
		}

		public static int TestCrc32CalcEnd(ref SDLTestCrc32Context crcContext, uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = TestCrc32CalcEndNative((SDLTestCrc32Context*)pcrcContext, crc32);
				return ret;
			}
		}

		public static int TestCrc32CalcEnd(SDLTestCrc32Context* crcContext, ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = TestCrc32CalcEndNative(crcContext, (uint*)pcrc32);
				return ret;
			}
		}

		public static int TestCrc32CalcEnd(ref SDLTestCrc32Context crcContext, ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = TestCrc32CalcEndNative((SDLTestCrc32Context*)pcrcContext, (uint*)pcrc32);
					return ret;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCrc32CalcBufferNative(SDLTestCrc32Context* crcContext, byte* inBuf, uint inLen, uint* crc32)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, byte*, uint, uint*, int>)funcTable[1368])(crcContext, inBuf, inLen, crc32);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, uint, nint, int>)funcTable[1368])((nint)crcContext, (nint)inBuf, inLen, (nint)crc32);
			#endif
		}

		public static int TestCrc32CalcBuffer(SDLTestCrc32Context* crcContext, byte* inBuf, uint inLen, uint* crc32)
		{
			int ret = TestCrc32CalcBufferNative(crcContext, inBuf, inLen, crc32);
			return ret;
		}

		public static int TestCrc32CalcBuffer(ref SDLTestCrc32Context crcContext, byte* inBuf, uint inLen, uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = TestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, crc32);
				return ret;
			}
		}

		public static int TestCrc32CalcBuffer(SDLTestCrc32Context* crcContext, ref byte inBuf, uint inLen, uint* crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				int ret = TestCrc32CalcBufferNative(crcContext, (byte*)pinBuf, inLen, crc32);
				return ret;
			}
		}

		public static int TestCrc32CalcBuffer(ref SDLTestCrc32Context crcContext, ref byte inBuf, uint inLen, uint* crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					int ret = TestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, crc32);
					return ret;
				}
			}
		}

		public static int TestCrc32CalcBuffer(SDLTestCrc32Context* crcContext, byte* inBuf, uint inLen, ref uint crc32)
		{
			fixed (uint* pcrc32 = &crc32)
			{
				int ret = TestCrc32CalcBufferNative(crcContext, inBuf, inLen, (uint*)pcrc32);
				return ret;
			}
		}

		public static int TestCrc32CalcBuffer(ref SDLTestCrc32Context crcContext, byte* inBuf, uint inLen, ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = TestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, inBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		public static int TestCrc32CalcBuffer(SDLTestCrc32Context* crcContext, ref byte inBuf, uint inLen, ref uint crc32)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				fixed (uint* pcrc32 = &crc32)
				{
					int ret = TestCrc32CalcBufferNative(crcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
					return ret;
				}
			}
		}

		public static int TestCrc32CalcBuffer(ref SDLTestCrc32Context crcContext, ref byte inBuf, uint inLen, ref uint crc32)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					fixed (uint* pcrc32 = &crc32)
					{
						int ret = TestCrc32CalcBufferNative((SDLTestCrc32Context*)pcrcContext, (byte*)pinBuf, inLen, (uint*)pcrc32);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestCrc32DoneNative(SDLTestCrc32Context* crcContext)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCrc32Context*, int>)funcTable[1369])(crcContext);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[1369])((nint)crcContext);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Done(SDLTestCrc32Context* crcContext)
		{
			int ret = TestCrc32DoneNative(crcContext);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestCrc32Done(ref SDLTestCrc32Context crcContext)
		{
			fixed (SDLTestCrc32Context* pcrcContext = &crcContext)
			{
				int ret = TestCrc32DoneNative((SDLTestCrc32Context*)pcrcContext);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestDrawCharacterNative(SDLRenderer* renderer, int x, int y, uint c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, uint, int>)funcTable[1370])(renderer, x, y, c);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, uint, int>)funcTable[1370])((nint)renderer, x, y, c);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawCharacter(SDLRenderer* renderer, int x, int y, uint c)
		{
			int ret = TestDrawCharacterNative(renderer, x, y, c);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawCharacter(ref SDLRenderer renderer, int x, int y, uint c)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = TestDrawCharacterNative((SDLRenderer*)prenderer, x, y, c);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestDrawStringNative(SDLRenderer* renderer, int x, int y, byte* s)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRenderer*, int, int, byte*, int>)funcTable[1371])(renderer, x, y, s);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, nint, int>)funcTable[1371])((nint)renderer, x, y, (nint)s);
			#endif
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(SDLRenderer* renderer, int x, int y, byte* s)
		{
			int ret = TestDrawStringNative(renderer, x, y, s);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(ref SDLRenderer renderer, int x, int y, byte* s)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				int ret = TestDrawStringNative((SDLRenderer*)prenderer, x, y, s);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(SDLRenderer* renderer, int x, int y, ref byte s)
		{
			fixed (byte* ps = &s)
			{
				int ret = TestDrawStringNative(renderer, x, y, (byte*)ps);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(SDLRenderer* renderer, int x, int y, ReadOnlySpan<byte> s)
		{
			fixed (byte* ps = s)
			{
				int ret = TestDrawStringNative(renderer, x, y, (byte*)ps);
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(SDLRenderer* renderer, int x, int y, string s)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (s != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(s);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(s, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = TestDrawStringNative(renderer, x, y, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(ref SDLRenderer renderer, int x, int y, ref byte s)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* ps = &s)
				{
					int ret = TestDrawStringNative((SDLRenderer*)prenderer, x, y, (byte*)ps);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(ref SDLRenderer renderer, int x, int y, ReadOnlySpan<byte> s)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				fixed (byte* ps = s)
				{
					int ret = TestDrawStringNative((SDLRenderer*)prenderer, x, y, (byte*)ps);
					return ret;
				}
			}
		}

		/// <summary>
		/// <br/>
		/// The font currently only supports characters in the Basic Latin and Latin-1 Supplement sets.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestDrawString(ref SDLRenderer renderer, int x, int y, string s)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (s != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(s);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(s, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = TestDrawStringNative((SDLRenderer*)prenderer, x, y, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLTestTextWindow* TestTextWindowCreateNative(int x, int y, int w, int h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int, int, SDLTestTextWindow*>)funcTable[1372])(x, y, w, h);
			#else
			return (SDLTestTextWindow*)((delegate* unmanaged[Cdecl]<int, int, int, int, nint>)funcTable[1372])(x, y, w, h);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLTestTextWindow* TestTextWindowCreate(int x, int y, int w, int h)
		{
			SDLTestTextWindow* ret = TestTextWindowCreateNative(x, y, w, h);
			return ret;
		}

		/// <summary>
		/// <br/>
		/// This function should be called every frame to display the text<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestTextWindowDisplayNative(SDLTestTextWindow* textwin, SDLRenderer* renderer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, SDLRenderer*, void>)funcTable[1373])(textwin, renderer);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1373])((nint)textwin, (nint)renderer);
			#endif
		}

		/// <summary>
		/// <br/>
		/// This function should be called every frame to display the text<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowDisplay(SDLTestTextWindow* textwin, SDLRenderer* renderer)
		{
			TestTextWindowDisplayNative(textwin, renderer);
		}

		/// <summary>
		/// <br/>
		/// This function should be called every frame to display the text<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowDisplay(ref SDLTestTextWindow textwin, SDLRenderer* renderer)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				TestTextWindowDisplayNative((SDLTestTextWindow*)ptextwin, renderer);
			}
		}

		/// <summary>
		/// <br/>
		/// This function should be called every frame to display the text<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowDisplay(SDLTestTextWindow* textwin, ref SDLRenderer renderer)
		{
			fixed (SDLRenderer* prenderer = &renderer)
			{
				TestTextWindowDisplayNative(textwin, (SDLRenderer*)prenderer);
			}
		}

		/// <summary>
		/// <br/>
		/// This function should be called every frame to display the text<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowDisplay(ref SDLTestTextWindow textwin, ref SDLRenderer renderer)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (SDLRenderer* prenderer = &renderer)
				{
					TestTextWindowDisplayNative((SDLTestTextWindow*)ptextwin, (SDLRenderer*)prenderer);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestTextWindowAddTextNative(SDLTestTextWindow* textwin, byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, byte*, void>)funcTable[1374])(textwin, fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1374])((nint)textwin, (nint)fmt);
			#endif
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(SDLTestTextWindow* textwin, byte* fmt)
		{
			TestTextWindowAddTextNative(textwin, fmt);
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(ref SDLTestTextWindow textwin, byte* fmt)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				TestTextWindowAddTextNative((SDLTestTextWindow*)ptextwin, fmt);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(SDLTestTextWindow* textwin, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TestTextWindowAddTextNative(textwin, (byte*)pfmt);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(SDLTestTextWindow* textwin, ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TestTextWindowAddTextNative(textwin, (byte*)pfmt);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(SDLTestTextWindow* textwin, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestTextWindowAddTextNative(textwin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(ref SDLTestTextWindow textwin, ref byte fmt)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (byte* pfmt = &fmt)
				{
					TestTextWindowAddTextNative((SDLTestTextWindow*)ptextwin, (byte*)pfmt);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(ref SDLTestTextWindow textwin, ReadOnlySpan<byte> fmt)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (byte* pfmt = fmt)
				{
					TestTextWindowAddTextNative((SDLTestTextWindow*)ptextwin, (byte*)pfmt);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddText(ref SDLTestTextWindow textwin, string fmt)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				TestTextWindowAddTextNative((SDLTestTextWindow*)ptextwin, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestTextWindowAddTextWithLengthNative(SDLTestTextWindow* textwin, byte* text, nuint len)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, byte*, nuint, void>)funcTable[1375])(textwin, text, len);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nuint, void>)funcTable[1375])((nint)textwin, (nint)text, len);
			#endif
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(SDLTestTextWindow* textwin, byte* text, nuint len)
		{
			TestTextWindowAddTextWithLengthNative(textwin, text, len);
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(ref SDLTestTextWindow textwin, byte* text, nuint len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				TestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, text, len);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(SDLTestTextWindow* textwin, ref byte text, nuint len)
		{
			fixed (byte* ptext = &text)
			{
				TestTextWindowAddTextWithLengthNative(textwin, (byte*)ptext, len);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(SDLTestTextWindow* textwin, ReadOnlySpan<byte> text, nuint len)
		{
			fixed (byte* ptext = text)
			{
				TestTextWindowAddTextWithLengthNative(textwin, (byte*)ptext, len);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(SDLTestTextWindow* textwin, string text, nuint len)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestTextWindowAddTextWithLengthNative(textwin, pStr0, len);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(ref SDLTestTextWindow textwin, ref byte text, nuint len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (byte* ptext = &text)
				{
					TestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, (byte*)ptext, len);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(ref SDLTestTextWindow textwin, ReadOnlySpan<byte> text, nuint len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				fixed (byte* ptext = text)
				{
					TestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, (byte*)ptext, len);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// Adds UTF-8 text to the end of the current text. The newline character starts a<br/>
		/// new line of text. The backspace character deletes the last character or, if the<br/>
		/// line is empty, deletes the line and goes to the end of the previous line.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowAddTextWithLength(ref SDLTestTextWindow textwin, string text, nuint len)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (text != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(text);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				TestTextWindowAddTextWithLengthNative((SDLTestTextWindow*)ptextwin, pStr0, len);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestTextWindowClearNative(SDLTestTextWindow* textwin)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, void>)funcTable[1376])(textwin);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1376])((nint)textwin);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowClear(SDLTestTextWindow* textwin)
		{
			TestTextWindowClearNative(textwin);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowClear(ref SDLTestTextWindow textwin)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				TestTextWindowClearNative((SDLTestTextWindow*)ptextwin);
			}
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestTextWindowDestroyNative(SDLTestTextWindow* textwin)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestTextWindow*, void>)funcTable[1377])(textwin);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1377])((nint)textwin);
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowDestroy(SDLTestTextWindow* textwin)
		{
			TestTextWindowDestroyNative(textwin);
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestTextWindowDestroy(ref SDLTestTextWindow textwin)
		{
			fixed (SDLTestTextWindow* ptextwin = &textwin)
			{
				TestTextWindowDestroyNative((SDLTestTextWindow*)ptextwin);
			}
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestCleanupTextDrawingNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1378])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1378])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// </summary>
		public static void TestCleanupTextDrawing()
		{
			TestCleanupTextDrawingNative();
		}

		/// <summary>
		/// Initializes the fuzzer for a test<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestFuzzerInitNative(ulong execKey)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[1379])(execKey);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[1379])(execKey);
			#endif
		}

		/// <summary>
		/// Initializes the fuzzer for a test<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void TestFuzzerInit(ulong execKey)
		{
			TestFuzzerInitNative(execKey);
		}

		/// <summary>
		/// Returns a random Uint8<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TestRandomUint8Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[1380])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[1380])();
			#endif
		}

		/// <summary>
		/// Returns a random Uint8<br/>
		/// <br/>
		/// </summary>
		public static byte TestRandomUint8()
		{
			byte ret = TestRandomUint8Native();
			return ret;
		}

		/// <summary>
		/// Returns a random Sint8<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static sbyte TestRandomSint8Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<sbyte>)funcTable[1381])();
			#else
			return (sbyte)((delegate* unmanaged[Cdecl]<sbyte>)funcTable[1381])();
			#endif
		}

		/// <summary>
		/// Returns a random Sint8<br/>
		/// <br/>
		/// </summary>
		public static sbyte TestRandomSint8()
		{
			sbyte ret = TestRandomSint8Native();
			return ret;
		}

		/// <summary>
		/// Returns a random Uint16<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort TestRandomUint16Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort>)funcTable[1382])();
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<ushort>)funcTable[1382])();
			#endif
		}

		/// <summary>
		/// Returns a random Uint16<br/>
		/// <br/>
		/// </summary>
		public static ushort TestRandomUint16()
		{
			ushort ret = TestRandomUint16Native();
			return ret;
		}

		/// <summary>
		/// Returns a random Sint16<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static short TestRandomSint16Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<short>)funcTable[1383])();
			#else
			return (short)((delegate* unmanaged[Cdecl]<short>)funcTable[1383])();
			#endif
		}

		/// <summary>
		/// Returns a random Sint16<br/>
		/// <br/>
		/// </summary>
		public static short TestRandomSint16()
		{
			short ret = TestRandomSint16Native();
			return ret;
		}

		/// <summary>
		/// Returns a random integer<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestRandomSint32Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[1384])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[1384])();
			#endif
		}

		/// <summary>
		/// Returns a random integer<br/>
		/// <br/>
		/// </summary>
		public static int TestRandomSint32()
		{
			int ret = TestRandomSint32Native();
			return ret;
		}

		/// <summary>
		/// Returns a random positive integer<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TestRandomUint32Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[1385])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[1385])();
			#endif
		}

		/// <summary>
		/// Returns a random positive integer<br/>
		/// <br/>
		/// </summary>
		public static uint TestRandomUint32()
		{
			uint ret = TestRandomUint32Native();
			return ret;
		}

		/// <summary>
		/// Returns random Uint64.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong TestRandomUint64Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong>)funcTable[1386])();
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<ulong>)funcTable[1386])();
			#endif
		}

		/// <summary>
		/// Returns random Uint64.<br/>
		/// <br/>
		/// </summary>
		public static ulong TestRandomUint64()
		{
			ulong ret = TestRandomUint64Native();
			return ret;
		}

		/// <summary>
		/// Returns random Sint64.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static long TestRandomSint64Native()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long>)funcTable[1387])();
			#else
			return (long)((delegate* unmanaged[Cdecl]<long>)funcTable[1387])();
			#endif
		}

		/// <summary>
		/// Returns random Sint64.<br/>
		/// <br/>
		/// </summary>
		public static long TestRandomSint64()
		{
			long ret = TestRandomSint64Native();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float TestRandomUnitFloatNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)funcTable[1388])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)funcTable[1388])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// </summary>
		public static float TestRandomUnitFloat()
		{
			float ret = TestRandomUnitFloatNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double TestRandomUnitDoubleNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double>)funcTable[1389])();
			#else
			return (double)((delegate* unmanaged[Cdecl]<double>)funcTable[1389])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// </summary>
		public static double TestRandomUnitDouble()
		{
			double ret = TestRandomUnitDoubleNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float TestRandomFloatNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)funcTable[1390])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)funcTable[1390])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float TestRandomFloat()
		{
			float ret = TestRandomFloatNative();
			return ret;
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double TestRandomDoubleNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double>)funcTable[1391])();
			#else
			return (double)((delegate* unmanaged[Cdecl]<double>)funcTable[1391])();
			#endif
		}

		/// <summary>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double TestRandomDouble()
		{
			double ret = TestRandomDoubleNative();
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TestRandomUint8BoundaryValueNative(byte boundary1, byte boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, byte, SDLBool, byte>)funcTable[1392])(boundary1, boundary2, validDomain);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte, byte, SDLBool, byte>)funcTable[1392])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Uint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte TestRandomUint8BoundaryValue(byte boundary1, byte boundary2, SDLBool validDomain)
		{
			byte ret = TestRandomUint8BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort TestRandomUint16BoundaryValueNative(ushort boundary1, ushort boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, SDLBool, ushort>)funcTable[1393])(boundary1, boundary2, validDomain);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<ushort, ushort, SDLBool, ushort>)funcTable[1393])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Uint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort TestRandomUint16BoundaryValue(ushort boundary1, ushort boundary2, SDLBool validDomain)
		{
			ushort ret = TestRandomUint16BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint TestRandomUint32BoundaryValueNative(uint boundary1, uint boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, SDLBool, uint>)funcTable[1394])(boundary1, boundary2, validDomain);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, uint, SDLBool, uint>)funcTable[1394])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Uint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static uint TestRandomUint32BoundaryValue(uint boundary1, uint boundary2, SDLBool validDomain)
		{
			uint ret = TestRandomUint32BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong TestRandomUint64BoundaryValueNative(ulong boundary1, ulong boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong, ulong, SDLBool, ulong>)funcTable[1395])(boundary1, boundary2, validDomain);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<ulong, ulong, SDLBool, ulong>)funcTable[1395])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Uint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20<br/>
		/// RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21<br/>
		/// RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100<br/>
		/// RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ulong TestRandomUint64BoundaryValue(ulong boundary1, ulong boundary2, SDLBool validDomain)
		{
			ulong ret = TestRandomUint64BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static sbyte TestRandomSint8BoundaryValueNative(sbyte boundary1, sbyte boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<sbyte, sbyte, SDLBool, sbyte>)funcTable[1396])(boundary1, boundary2, validDomain);
			#else
			return (sbyte)((delegate* unmanaged[Cdecl]<sbyte, sbyte, SDLBool, sbyte>)funcTable[1396])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static sbyte TestRandomSint8BoundaryValue(sbyte boundary1, sbyte boundary2, SDLBool validDomain)
		{
			sbyte ret = TestRandomSint8BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static short TestRandomSint16BoundaryValueNative(short boundary1, short boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<short, short, SDLBool, short>)funcTable[1397])(boundary1, boundary2, validDomain);
			#else
			return (short)((delegate* unmanaged[Cdecl]<short, short, SDLBool, short>)funcTable[1397])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static short TestRandomSint16BoundaryValue(short boundary1, short boundary2, SDLBool validDomain)
		{
			short ret = TestRandomSint16BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestRandomSint32BoundaryValueNative(int boundary1, int boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, SDLBool, int>)funcTable[1398])(boundary1, boundary2, validDomain);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, SDLBool, int>)funcTable[1398])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestRandomSint32BoundaryValue(int boundary1, int boundary2, SDLBool validDomain)
		{
			int ret = TestRandomSint32BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static long TestRandomSint64BoundaryValueNative(long boundary1, long boundary2, SDLBool validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, long, SDLBool, long>)funcTable[1399])(boundary1, boundary2, validDomain);
			#else
			return (long)((delegate* unmanaged[Cdecl]<long, long, SDLBool, long>)funcTable[1399])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20<br/>
		/// RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static long TestRandomSint64BoundaryValue(long boundary1, long boundary2, SDLBool validDomain)
		{
			long ret = TestRandomSint64BoundaryValueNative(boundary1, boundary2, validDomain);
			return ret;
		}

		/// <summary>
		/// Returns integer in range [min, max] (inclusive).<br/>
		/// Min and max values can be negative values.<br/>
		/// If Max in smaller than min, then the values are swapped.<br/>
		/// Min and max are the same value, that value will be returned.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestRandomIntegerInRangeNative(int min, int max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1400])(min, max);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1400])(min, max);
			#endif
		}

		/// <summary>
		/// Returns integer in range [min, max] (inclusive).<br/>
		/// Min and max values can be negative values.<br/>
		/// If Max in smaller than min, then the values are swapped.<br/>
		/// Min and max are the same value, that value will be returned.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestRandomIntegerInRange(int min, int max)
		{
			int ret = TestRandomIntegerInRangeNative(min, max);
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The minimum length for<br/>
		/// the string is 1 character, maximum length for the string is 255<br/>
		/// characters and it can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* TestRandomAsciiStringNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*>)funcTable[1401])();
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1401])();
			#endif
		}

		/// <summary>
		/// Generates random null-terminated string. The minimum length for<br/>
		/// the string is 1 character, maximum length for the string is 255<br/>
		/// characters and it can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// </summary>
		public static byte* TestRandomAsciiString()
		{
			byte* ret = TestRandomAsciiStringNative();
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The minimum length for<br/>
		/// the string is 1 character, maximum length for the string is 255<br/>
		/// characters and it can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// </summary>
		public static string TestRandomAsciiStringS()
		{
			string ret = Utils.DecodeStringUTF8(TestRandomAsciiStringNative());
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The maximum length for<br/>
		/// the string is defined by the maxLength parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* TestRandomAsciiStringWithMaximumLengthNative(int maxLength)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[1402])(maxLength);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[1402])(maxLength);
			#endif
		}

		/// <summary>
		/// Generates random null-terminated string. The maximum length for<br/>
		/// the string is defined by the maxLength parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* TestRandomAsciiStringWithMaximumLength(int maxLength)
		{
			byte* ret = TestRandomAsciiStringWithMaximumLengthNative(maxLength);
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The maximum length for<br/>
		/// the string is defined by the maxLength parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string TestRandomAsciiStringWithMaximumLengthS(int maxLength)
		{
			string ret = Utils.DecodeStringUTF8(TestRandomAsciiStringWithMaximumLengthNative(maxLength));
			return ret;
		}
	}
}
