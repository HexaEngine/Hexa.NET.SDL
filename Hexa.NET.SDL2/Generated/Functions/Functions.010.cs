// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Get the product version of a joystick, if available.<br/>
		/// This can be called before any joysticks are opened. If the product version<br/>
		/// isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetDeviceProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort JoystickGetDeviceProductVersionNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[487])(deviceIndex);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[487])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the product version of a joystick, if available.<br/>
		/// This can be called before any joysticks are opened. If the product version<br/>
		/// isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetDeviceProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetDeviceProductVersion([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			ushort ret = JoystickGetDeviceProductVersionNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the type of a joystick, if available.<br/>
		/// This can be called before any joysticks are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetDeviceType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystickType JoystickGetDeviceTypeNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLJoystickType>)funcTable[488])(deviceIndex);
			#else
			return (SDLJoystickType)((delegate* unmanaged[Cdecl]<int, SDLJoystickType>)funcTable[488])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the type of a joystick, if available.<br/>
		/// This can be called before any joysticks are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetDeviceType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		public static SDLJoystickType JoystickGetDeviceType([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			SDLJoystickType ret = JoystickGetDeviceTypeNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of a joystick.<br/>
		/// This can be called before any joysticks are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetDeviceInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickGetDeviceInstanceIDNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[489])(deviceIndex);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[489])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the instance ID of a joystick.<br/>
		/// This can be called before any joysticks are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetDeviceInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int JoystickGetDeviceInstanceID([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			int ret = JoystickGetDeviceInstanceIDNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Open a joystick for use.<br/>
		/// The `device_index` argument refers to the N'th joystick presently<br/>
		/// recognized by SDL on the system. It is **NOT** the same as the instance ID<br/>
		/// used to identify the joystick in future events. See<br/>
		/// SDL_JoystickInstanceID() for more details about instance IDs.<br/>
		/// The joystick subsystem must be initialized before a joystick can be opened<br/>
		/// for use.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystick* JoystickOpenNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLJoystick*>)funcTable[490])(deviceIndex);
			#else
			return (SDLJoystick*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[490])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Open a joystick for use.<br/>
		/// The `device_index` argument refers to the N'th joystick presently<br/>
		/// recognized by SDL on the system. It is **NOT** the same as the instance ID<br/>
		/// used to identify the joystick in future events. See<br/>
		/// SDL_JoystickInstanceID() for more details about instance IDs.<br/>
		/// The joystick subsystem must be initialized before a joystick can be opened<br/>
		/// for use.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		public static SDLJoystick* JoystickOpen([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			SDLJoystick* ret = JoystickOpenNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the SDL_Joystick associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystick* JoystickFromInstanceIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLJoystick*>)funcTable[491])(instanceId);
			#else
			return (SDLJoystick*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[491])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the SDL_Joystick associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		public static SDLJoystick* JoystickFromInstanceID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			SDLJoystick* ret = JoystickFromInstanceIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the SDL_Joystick associated with a player index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystick* JoystickFromPlayerIndexNative([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLJoystick*>)funcTable[492])(playerIndex);
			#else
			return (SDLJoystick*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[492])(playerIndex);
			#endif
		}

		/// <summary>
		/// Get the SDL_Joystick associated with a player index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick*")]
		public static SDLJoystick* JoystickFromPlayerIndex([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			SDLJoystick* ret = JoystickFromPlayerIndexNative(playerIndex);
			return ret;
		}

		/// <summary>
		/// Attach a new virtual joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickAttachVirtual")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickAttachVirtualNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "SDL_JoystickType")] SDLJoystickType type, [NativeName(NativeNameType.Param, "naxes")] [NativeName(NativeNameType.Type, "int")] int naxes, [NativeName(NativeNameType.Param, "nbuttons")] [NativeName(NativeNameType.Type, "int")] int nbuttons, [NativeName(NativeNameType.Param, "nhats")] [NativeName(NativeNameType.Type, "int")] int nhats)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystickType, int, int, int, int>)funcTable[493])(type, naxes, nbuttons, nhats);
			#else
			return (int)((delegate* unmanaged[Cdecl]<SDLJoystickType, int, int, int, int>)funcTable[493])(type, naxes, nbuttons, nhats);
			#endif
		}

		/// <summary>
		/// Attach a new virtual joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickAttachVirtual")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickAttachVirtual([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "SDL_JoystickType")] SDLJoystickType type, [NativeName(NativeNameType.Param, "naxes")] [NativeName(NativeNameType.Type, "int")] int naxes, [NativeName(NativeNameType.Param, "nbuttons")] [NativeName(NativeNameType.Type, "int")] int nbuttons, [NativeName(NativeNameType.Param, "nhats")] [NativeName(NativeNameType.Type, "int")] int nhats)
		{
			int ret = JoystickAttachVirtualNative(type, naxes, nbuttons, nhats);
			return ret;
		}

		/// <summary>
		/// Attach a new virtual joystick with extended properties.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickAttachVirtualEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickAttachVirtualExNative([NativeName(NativeNameType.Param, "desc")] [NativeName(NativeNameType.Type, "const SDL_VirtualJoystickDesc*")] SDLVirtualJoystickDesc* desc)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLVirtualJoystickDesc*, int>)funcTable[494])(desc);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[494])((nint)desc);
			#endif
		}

		/// <summary>
		/// Attach a new virtual joystick with extended properties.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickAttachVirtualEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickAttachVirtualEx([NativeName(NativeNameType.Param, "desc")] [NativeName(NativeNameType.Type, "const SDL_VirtualJoystickDesc*")] SDLVirtualJoystickDesc* desc)
		{
			int ret = JoystickAttachVirtualExNative(desc);
			return ret;
		}

		/// <summary>
		/// Attach a new virtual joystick with extended properties.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickAttachVirtualEx")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickAttachVirtualEx([NativeName(NativeNameType.Param, "desc")] [NativeName(NativeNameType.Type, "const SDL_VirtualJoystickDesc*")] ref SDLVirtualJoystickDesc desc)
		{
			fixed (SDLVirtualJoystickDesc* pdesc = &desc)
			{
				int ret = JoystickAttachVirtualExNative((SDLVirtualJoystickDesc*)pdesc);
				return ret;
			}
		}

		/// <summary>
		/// Detach a virtual joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickDetachVirtual")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickDetachVirtualNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[495])(deviceIndex);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[495])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Detach a virtual joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickDetachVirtual")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickDetachVirtual([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			int ret = JoystickDetachVirtualNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Query whether or not the joystick at a given device index is virtual.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickIsVirtual")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool JoystickIsVirtualNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLBool>)funcTable[496])(deviceIndex);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<int, SDLBool>)funcTable[496])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Query whether or not the joystick at a given device index is virtual.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickIsVirtual")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickIsVirtual([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			SDLBool ret = JoystickIsVirtualNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's axis.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// Note that when sending trigger axes, you should scale the value to the full<br/>
		/// range of Sint16. For example, a trigger at rest would have the value of<br/>
		/// `SDL_JOYSTICK_AXIS_MIN`.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualAxis")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickSetVirtualAxisNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Sint16")] short value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, short, int>)funcTable[497])(joystick, axis, value);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, short, int>)funcTable[497])((nint)joystick, axis, value);
			#endif
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's axis.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// Note that when sending trigger axes, you should scale the value to the full<br/>
		/// range of Sint16. For example, a trigger at rest would have the value of<br/>
		/// `SDL_JOYSTICK_AXIS_MIN`.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualAxis")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetVirtualAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Sint16")] short value)
		{
			int ret = JoystickSetVirtualAxisNative(joystick, axis, value);
			return ret;
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's axis.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// Note that when sending trigger axes, you should scale the value to the full<br/>
		/// range of Sint16. For example, a trigger at rest would have the value of<br/>
		/// `SDL_JOYSTICK_AXIS_MIN`.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualAxis")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetVirtualAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Sint16")] short value)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickSetVirtualAxisNative((SDLJoystick*)pjoystick, axis, value);
				return ret;
			}
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's button.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualButton")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickSetVirtualButtonNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte, int>)funcTable[498])(joystick, button, value);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, byte, int>)funcTable[498])((nint)joystick, button, value);
			#endif
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's button.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualButton")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetVirtualButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			int ret = JoystickSetVirtualButtonNative(joystick, button, value);
			return ret;
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's button.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualButton")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetVirtualButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickSetVirtualButtonNative((SDLJoystick*)pjoystick, button, value);
				return ret;
			}
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's hat.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualHat")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickSetVirtualHatNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte, int>)funcTable[499])(joystick, hat, value);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, byte, int>)funcTable[499])((nint)joystick, hat, value);
			#endif
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's hat.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualHat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetVirtualHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			int ret = JoystickSetVirtualHatNative(joystick, hat, value);
			return ret;
		}

		/// <summary>
		/// Set values on an opened, virtual-joystick's hat.<br/>
		/// Please note that values set here will not be applied until the next call to<br/>
		/// SDL_JoystickUpdate, which can either be called directly, or can be called<br/>
		/// indirectly through various other SDL APIs, including, but not limited to<br/>
		/// the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,<br/>
		/// SDL_WaitEvent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetVirtualHat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetVirtualHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "Uint8")] byte value)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickSetVirtualHatNative((SDLJoystick*)pjoystick, hat, value);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* JoystickNameNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte*>)funcTable[500])(joystick);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[500])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* JoystickName([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			byte* ret = JoystickNameNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string JoystickNameS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			string ret = Utils.DecodeStringUTF8(JoystickNameNative(joystick));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* JoystickName([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte* ret = JoystickNameNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent name of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string JoystickNameS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				string ret = Utils.DecodeStringUTF8(JoystickNameNative((SDLJoystick*)pjoystick));
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* JoystickPathNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte*>)funcTable[501])(joystick);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[501])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* JoystickPath([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			byte* ret = JoystickPathNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string JoystickPathS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			string ret = Utils.DecodeStringUTF8(JoystickPathNative(joystick));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* JoystickPath([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte* ret = JoystickPathNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent path of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string JoystickPathS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				string ret = Utils.DecodeStringUTF8(JoystickPathNative((SDLJoystick*)pjoystick));
				return ret;
			}
		}

		/// <summary>
		/// Get the player index of an opened joystick.<br/>
		/// For XInput controllers this returns the XInput user index. Many joysticks<br/>
		/// will not be able to supply this information.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickGetPlayerIndexNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[502])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[502])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the player index of an opened joystick.<br/>
		/// For XInput controllers this returns the XInput user index. Many joysticks<br/>
		/// will not be able to supply this information.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = JoystickGetPlayerIndexNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the player index of an opened joystick.<br/>
		/// For XInput controllers this returns the XInput user index. Many joysticks<br/>
		/// will not be able to supply this information.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickGetPlayerIndexNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Set the player index of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void JoystickSetPlayerIndexNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLJoystick*, int, void>)funcTable[503])(joystick, playerIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[503])((nint)joystick, playerIndex);
			#endif
		}

		/// <summary>
		/// Set the player index of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickSetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			JoystickSetPlayerIndexNative(joystick, playerIndex);
		}

		/// <summary>
		/// Set the player index of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickSetPlayerIndex([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				JoystickSetPlayerIndexNative((SDLJoystick*)pjoystick, playerIndex);
			}
		}

		/// <summary>
		/// Get the implementation-dependent GUID for the joystick.<br/>
		/// This function requires an open joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Guid JoystickGetGUIDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, Guid>)funcTable[504])(joystick);
			#else
			return (Guid)((delegate* unmanaged[Cdecl]<nint, Guid>)funcTable[504])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent GUID for the joystick.<br/>
		/// This function requires an open joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid JoystickGetGUID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			Guid ret = JoystickGetGUIDNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent GUID for the joystick.<br/>
		/// This function requires an open joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid JoystickGetGUID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				Guid ret = JoystickGetGUIDNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the USB vendor ID of an opened joystick, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort JoystickGetVendorNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)funcTable[505])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[505])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the USB vendor ID of an opened joystick, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetVendor([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = JoystickGetVendorNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the USB vendor ID of an opened joystick, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetVendor([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = JoystickGetVendorNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the USB product ID of an opened joystick, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort JoystickGetProductNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)funcTable[506])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[506])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the USB product ID of an opened joystick, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetProduct([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = JoystickGetProductNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the USB product ID of an opened joystick, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetProduct([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = JoystickGetProductNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the product version of an opened joystick, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort JoystickGetProductVersionNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)funcTable[507])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[507])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the product version of an opened joystick, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetProductVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = JoystickGetProductVersionNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the product version of an opened joystick, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetProductVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = JoystickGetProductVersionNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the firmware version of an opened joystick, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort JoystickGetFirmwareVersionNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort>)funcTable[508])(joystick);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[508])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the firmware version of an opened joystick, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetFirmwareVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			ushort ret = JoystickGetFirmwareVersionNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the firmware version of an opened joystick, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort JoystickGetFirmwareVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = JoystickGetFirmwareVersionNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* JoystickGetSerialNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte*>)funcTable[509])(joystick);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[509])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* JoystickGetSerial([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			byte* ret = JoystickGetSerialNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string JoystickGetSerialS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			string ret = Utils.DecodeStringUTF8(JoystickGetSerialNative(joystick));
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* JoystickGetSerial([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte* ret = JoystickGetSerialNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetSerial")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string JoystickGetSerialS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				string ret = Utils.DecodeStringUTF8(JoystickGetSerialNative((SDLJoystick*)pjoystick));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystickType JoystickGetTypeNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLJoystickType>)funcTable[510])(joystick);
			#else
			return (SDLJoystickType)((delegate* unmanaged[Cdecl]<nint, SDLJoystickType>)funcTable[510])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		public static SDLJoystickType JoystickGetType([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLJoystickType ret = JoystickGetTypeNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		public static SDLJoystickType JoystickGetType([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickType ret = JoystickGetTypeNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void JoystickGetGUIDStringNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] byte* pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Guid, byte*, int, void>)funcTable[511])(guid, pszGUID, cbGUID);
			#else
			((delegate* unmanaged[Cdecl]<Guid, nint, int, void>)funcTable[511])(guid, (nint)pszGUID, cbGUID);
			#endif
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickGetGUIDString([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] byte* pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			JoystickGetGUIDStringNative(guid, pszGUID, cbGUID);
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickGetGUIDString([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] ref byte pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			fixed (byte* ppszGUID = &pszGUID)
			{
				JoystickGetGUIDStringNative(guid, (byte*)ppszGUID, cbGUID);
			}
		}

		/// <summary>
		/// Get an ASCII string representation for a given SDL_JoystickGUID.<br/>
		/// You should supply at least 33 bytes for pszGUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDString")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickGetGUIDString([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "pszGUID")] [NativeName(NativeNameType.Type, "char*")] ref string pszGUID, [NativeName(NativeNameType.Param, "cbGUID")] [NativeName(NativeNameType.Type, "int")] int cbGUID)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pszGUID != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pszGUID);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pszGUID, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			JoystickGetGUIDStringNative(guid, pStr0, cbGUID);
			pszGUID = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Guid JoystickGetGUIDFromStringNative([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] byte* pchGUID)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Guid>)funcTable[512])(pchGUID);
			#else
			return (Guid)((delegate* unmanaged[Cdecl]<nint, Guid>)funcTable[512])((nint)pchGUID);
			#endif
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid JoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] byte* pchGUID)
		{
			Guid ret = JoystickGetGUIDFromStringNative(pchGUID);
			return ret;
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid JoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] ref byte pchGUID)
		{
			fixed (byte* ppchGUID = &pchGUID)
			{
				Guid ret = JoystickGetGUIDFromStringNative((byte*)ppchGUID);
				return ret;
			}
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid JoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> pchGUID)
		{
			fixed (byte* ppchGUID = pchGUID)
			{
				Guid ret = JoystickGetGUIDFromStringNative((byte*)ppchGUID);
				return ret;
			}
		}

		/// <summary>
		/// Convert a GUID string into a SDL_JoystickGUID structure.<br/>
		/// Performs no error checking. If this function is given a string containing<br/>
		/// an invalid GUID, the function will silently succeed, but the GUID generated<br/>
		/// will not be useful.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetGUIDFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickGUID")]
		public static Guid JoystickGetGUIDFromString([NativeName(NativeNameType.Param, "pchGUID")] [NativeName(NativeNameType.Type, "const char*")] string pchGUID)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pchGUID != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pchGUID);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pchGUID, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			Guid ret = JoystickGetGUIDFromStringNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetJoystickGUIDInfoNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Guid, ushort*, ushort*, ushort*, ushort*, void>)funcTable[513])(guid, vendor, product, version, crc16);
			#else
			((delegate* unmanaged[Cdecl]<Guid, nint, nint, nint, nint, void>)funcTable[513])(guid, (nint)vendor, (nint)product, (nint)version, (nint)crc16);
			#endif
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			GetJoystickGUIDInfoNative(guid, vendor, product, version, crc16);
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, version, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, version, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, version, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pversion = &version)
			{
				GetJoystickGUIDInfoNative(guid, vendor, product, (ushort*)pversion, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pversion = &version)
				{
					GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, (ushort*)pversion, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pversion = &version)
				{
					GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, (ushort*)pversion, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pversion = &version)
					{
						GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, (ushort*)pversion, crc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pcrc16 = &crc16)
			{
				GetJoystickGUIDInfoNative(guid, vendor, product, version, (ushort*)pcrc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, version, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, version, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, version, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pversion = &version)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					GetJoystickGUIDInfoNative(guid, vendor, product, (ushort*)pversion, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pversion = &version)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, (ushort*)pversion, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pversion = &version)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, (ushort*)pversion, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_JoystickGUID structure<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16*")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pversion = &version)
					{
						fixed (ushort* pcrc16 = &crc16)
						{
							GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, (ushort*)pversion, (ushort*)pcrc16);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool JoystickGetAttachedNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)funcTable[514])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[514])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickGetAttached([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = JoystickGetAttachedNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAttached")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickGetAttached([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = JoystickGetAttachedNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickInstanceIDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[515])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[515])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int JoystickInstanceID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = JoystickInstanceIDNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int JoystickInstanceID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickInstanceIDNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickNumAxesNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[516])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[516])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumAxes([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = JoystickNumAxesNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumAxes([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickNumAxesNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickNumBallsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[517])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[517])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumBalls([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = JoystickNumBallsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumBalls([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickNumBallsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickNumHatsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[518])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[518])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumHats([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = JoystickNumHatsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumHats([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickNumHatsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickNumButtonsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[519])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[519])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumButtons([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			int ret = JoystickNumButtonsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickNumButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickNumButtons([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickNumButtonsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Update the current state of the open joysticks.<br/>
		/// This is called automatically by the event loop if any joystick events are<br/>
		/// enabled.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void JoystickUpdateNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[520])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[520])();
			#endif
		}

		/// <summary>
		/// Update the current state of the open joysticks.<br/>
		/// This is called automatically by the event loop if any joystick events are<br/>
		/// enabled.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickUpdate()
		{
			JoystickUpdateNative();
		}

		/// <summary>
		/// Enable/disable joystick event polling.<br/>
		/// If joystick events are disabled, you must call SDL_JoystickUpdate()<br/>
		/// yourself and manually check the state of the joystick when you want<br/>
		/// joystick information.<br/>
		/// It is recommended that you leave joystick event handling enabled.<br/>
		/// **WARNING**: Calling this function may delete all events currently in SDL's<br/>
		/// event queue.<br/>
		/// While `param` is meant to be one of `SDL_QUERY`, `SDL_IGNORE`, or<br/>
		/// `SDL_ENABLE`, this function accepts any value, with any non-zero value that<br/>
		/// isn't `SDL_QUERY` being treated as `SDL_ENABLE`.<br/>
		/// If SDL was built with events disabled (extremely uncommon!), this will<br/>
		/// do nothing and always return `SDL_IGNORE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickEventState")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickEventStateNative([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "int")] int state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[521])(state);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[521])(state);
			#endif
		}

		/// <summary>
		/// Enable/disable joystick event polling.<br/>
		/// If joystick events are disabled, you must call SDL_JoystickUpdate()<br/>
		/// yourself and manually check the state of the joystick when you want<br/>
		/// joystick information.<br/>
		/// It is recommended that you leave joystick event handling enabled.<br/>
		/// **WARNING**: Calling this function may delete all events currently in SDL's<br/>
		/// event queue.<br/>
		/// While `param` is meant to be one of `SDL_QUERY`, `SDL_IGNORE`, or<br/>
		/// `SDL_ENABLE`, this function accepts any value, with any non-zero value that<br/>
		/// isn't `SDL_QUERY` being treated as `SDL_ENABLE`.<br/>
		/// If SDL was built with events disabled (extremely uncommon!), this will<br/>
		/// do nothing and always return `SDL_IGNORE`.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickEventState")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickEventState([NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "int")] int state)
		{
			int ret = JoystickEventStateNative(state);
			return ret;
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_JoystickGetAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static short JoystickGetAxisNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, short>)funcTable[522])(joystick, axis);
			#else
			return (short)((delegate* unmanaged[Cdecl]<nint, int, short>)funcTable[522])((nint)joystick, axis);
			#endif
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_JoystickGetAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short JoystickGetAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			short ret = JoystickGetAxisNative(joystick, axis);
			return ret;
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_JoystickGetAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short JoystickGetAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				short ret = JoystickGetAxisNative((SDLJoystick*)pjoystick, axis);
				return ret;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool JoystickGetAxisInitialStateNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] short* state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, short*, SDLBool>)funcTable[523])(joystick, axis, state);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, int, nint, SDLBool>)funcTable[523])((nint)joystick, axis, (nint)state);
			#endif
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] short* state)
		{
			SDLBool ret = JoystickGetAxisInitialStateNative(joystick, axis, state);
			return ret;
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] short* state)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = JoystickGetAxisInitialStateNative((SDLJoystick*)pjoystick, axis, state);
				return ret;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] ref short state)
		{
			fixed (short* pstate = &state)
			{
				SDLBool ret = JoystickGetAxisInitialStateNative(joystick, axis, (short*)pstate);
				return ret;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickGetAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16*")] ref short state)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (short* pstate = &state)
				{
					SDLBool ret = JoystickGetAxisInitialStateNative((SDLJoystick*)pjoystick, axis, (short*)pstate);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the following positions:<br/>
		/// - `SDL_HAT_CENTERED`<br/>
		/// - `SDL_HAT_UP`<br/>
		/// - `SDL_HAT_RIGHT`<br/>
		/// - `SDL_HAT_DOWN`<br/>
		/// - `SDL_HAT_LEFT`<br/>
		/// - `SDL_HAT_RIGHTUP`<br/>
		/// - `SDL_HAT_RIGHTDOWN`<br/>
		/// - `SDL_HAT_LEFTUP`<br/>
		/// - `SDL_HAT_LEFTDOWN`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte JoystickGetHatNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte>)funcTable[524])(joystick, hat);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[524])((nint)joystick, hat);
			#endif
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the following positions:<br/>
		/// - `SDL_HAT_CENTERED`<br/>
		/// - `SDL_HAT_UP`<br/>
		/// - `SDL_HAT_RIGHT`<br/>
		/// - `SDL_HAT_DOWN`<br/>
		/// - `SDL_HAT_LEFT`<br/>
		/// - `SDL_HAT_RIGHTUP`<br/>
		/// - `SDL_HAT_RIGHTDOWN`<br/>
		/// - `SDL_HAT_LEFTUP`<br/>
		/// - `SDL_HAT_LEFTDOWN`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte JoystickGetHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			byte ret = JoystickGetHatNative(joystick, hat);
			return ret;
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the following positions:<br/>
		/// - `SDL_HAT_CENTERED`<br/>
		/// - `SDL_HAT_UP`<br/>
		/// - `SDL_HAT_RIGHT`<br/>
		/// - `SDL_HAT_DOWN`<br/>
		/// - `SDL_HAT_LEFT`<br/>
		/// - `SDL_HAT_RIGHTUP`<br/>
		/// - `SDL_HAT_RIGHTDOWN`<br/>
		/// - `SDL_HAT_LEFTUP`<br/>
		/// - `SDL_HAT_LEFTDOWN`<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte JoystickGetHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = JoystickGetHatNative((SDLJoystick*)pjoystick, hat);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickGetBallNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, int*, int*, int>)funcTable[525])(joystick, ball, dx, dy);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, int>)funcTable[525])((nint)joystick, ball, (nint)dx, (nint)dy);
			#endif
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			int ret = JoystickGetBallNative(joystick, ball, dx, dy);
			return ret;
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickGetBallNative((SDLJoystick*)pjoystick, ball, dx, dy);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			fixed (int* pdx = &dx)
			{
				int ret = JoystickGetBallNative(joystick, ball, (int*)pdx, dy);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] int* dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdx = &dx)
				{
					int ret = JoystickGetBallNative((SDLJoystick*)pjoystick, ball, (int*)pdx, dy);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (int* pdy = &dy)
			{
				int ret = JoystickGetBallNative(joystick, ball, dx, (int*)pdy);
				return ret;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdy = &dy)
				{
					int ret = JoystickGetBallNative((SDLJoystick*)pjoystick, ball, dx, (int*)pdy);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (int* pdx = &dx)
			{
				fixed (int* pdy = &dy)
				{
					int ret = JoystickGetBallNative(joystick, ball, (int*)pdx, (int*)pdy);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_JoystickGetBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetBall")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickGetBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int*")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int*")] ref int dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdx = &dx)
				{
					fixed (int* pdy = &dy)
					{
						int ret = JoystickGetBallNative((SDLJoystick*)pjoystick, ball, (int*)pdx, (int*)pdy);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetButton")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte JoystickGetButtonNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte>)funcTable[526])(joystick, button);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[526])((nint)joystick, button);
			#endif
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetButton")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte JoystickGetButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			byte ret = JoystickGetButtonNative(joystick, button);
			return ret;
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickGetButton")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte JoystickGetButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = JoystickGetButtonNative((SDLJoystick*)pjoystick, button);
				return ret;
			}
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumble")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickRumbleNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort, ushort, uint, int>)funcTable[527])(joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, int>)funcTable[527])((nint)joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumble")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			int ret = JoystickRumbleNative(joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			return ret;
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumble")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickRumbleNative((SDLJoystick*)pjoystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
				return ret;
			}
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_JoystickRumble()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickRumbleTriggersNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort, ushort, uint, int>)funcTable[528])(joystick, leftRumble, rightRumble, durationMs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, int>)funcTable[528])((nint)joystick, leftRumble, rightRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_JoystickRumble()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			int ret = JoystickRumbleTriggersNative(joystick, leftRumble, rightRumble, durationMs);
			return ret;
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_JoystickRumble()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickRumbleTriggersNative((SDLJoystick*)pjoystick, leftRumble, rightRumble, durationMs);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a joystick has an LED.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasLED")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool JoystickHasLEDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)funcTable[529])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[529])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Query whether a joystick has an LED.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasLED")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickHasLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = JoystickHasLEDNative(joystick);
			return ret;
		}

		/// <summary>
		/// Query whether a joystick has an LED.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasLED")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickHasLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = JoystickHasLEDNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a joystick has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumble")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool JoystickHasRumbleNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)funcTable[530])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[530])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Query whether a joystick has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumble")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickHasRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = JoystickHasRumbleNative(joystick);
			return ret;
		}

		/// <summary>
		/// Query whether a joystick has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumble")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickHasRumble([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = JoystickHasRumbleNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a joystick has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool JoystickHasRumbleTriggersNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLBool>)funcTable[531])(joystick);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[531])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Query whether a joystick has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickHasRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLBool ret = JoystickHasRumbleTriggersNative(joystick);
			return ret;
		}

		/// <summary>
		/// Query whether a joystick has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickHasRumbleTriggers")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool JoystickHasRumbleTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLBool ret = JoystickHasRumbleTriggersNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetLED")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickSetLEDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte, byte, byte, int>)funcTable[532])(joystick, red, green, blue);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, byte, byte, byte, int>)funcTable[532])((nint)joystick, red, green, blue);
			#endif
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetLED")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			int ret = JoystickSetLEDNative(joystick, red, green, blue);
			return ret;
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSetLED")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSetLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickSetLEDNative((SDLJoystick*)pjoystick, red, green, blue);
				return ret;
			}
		}

		/// <summary>
		/// Send a joystick specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSendEffect")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int JoystickSendEffectNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, void*, int, int>)funcTable[533])(joystick, data, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[533])((nint)joystick, (nint)data, size);
			#endif
		}

		/// <summary>
		/// Send a joystick specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSendEffect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSendEffect([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			int ret = JoystickSendEffectNative(joystick, data, size);
			return ret;
		}

		/// <summary>
		/// Send a joystick specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickSendEffect")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int JoystickSendEffect([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "const void*")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = JoystickSendEffectNative((SDLJoystick*)pjoystick, data, size);
				return ret;
			}
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void JoystickCloseNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLJoystick*, void>)funcTable[534])(joystick);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[534])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickClose([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			JoystickCloseNative(joystick);
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void JoystickClose([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				JoystickCloseNative((SDLJoystick*)pjoystick);
			}
		}

		/// <summary>
		/// Get the battery level of a joystick as SDL_JoystickPowerLevel.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickCurrentPowerLevel")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickPowerLevel")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystickPowerLevel JoystickCurrentPowerLevelNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLJoystickPowerLevel>)funcTable[535])(joystick);
			#else
			return (SDLJoystickPowerLevel)((delegate* unmanaged[Cdecl]<nint, SDLJoystickPowerLevel>)funcTable[535])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the battery level of a joystick as SDL_JoystickPowerLevel.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickCurrentPowerLevel")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickPowerLevel")]
		public static SDLJoystickPowerLevel JoystickCurrentPowerLevel([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] SDLJoystick* joystick)
		{
			SDLJoystickPowerLevel ret = JoystickCurrentPowerLevelNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the battery level of a joystick as SDL_JoystickPowerLevel.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickCurrentPowerLevel")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickPowerLevel")]
		public static SDLJoystickPowerLevel JoystickCurrentPowerLevel([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick*")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickPowerLevel ret = JoystickCurrentPowerLevelNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Locking for multi-threaded access to the sensor API<br/>
		/// If you are using the sensor API or handling events from multiple threads<br/>
		/// you should use these locking functions to protect access to the sensors.<br/>
		/// In particular, you are guaranteed that the sensor list won't change, so the<br/>
		/// API functions that take a sensor index will be valid, and sensor events<br/>
		/// will not be delivered.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LockSensorsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[536])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[536])();
			#endif
		}

		/// <summary>
		/// Locking for multi-threaded access to the sensor API<br/>
		/// If you are using the sensor API or handling events from multiple threads<br/>
		/// you should use these locking functions to protect access to the sensors.<br/>
		/// In particular, you are guaranteed that the sensor list won't change, so the<br/>
		/// API functions that take a sensor index will be valid, and sensor events<br/>
		/// will not be delivered.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void LockSensors()
		{
			LockSensorsNative();
		}

		[NativeName(NativeNameType.Func, "SDL_UnlockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnlockSensorsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[537])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[537])();
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_UnlockSensors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnlockSensors()
		{
			UnlockSensorsNative();
		}

		/// <summary>
		/// Count the number of sensors attached to the system right now.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_NumSensors")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int NumSensorsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[538])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[538])();
			#endif
		}

		/// <summary>
		/// Count the number of sensors attached to the system right now.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_NumSensors")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int NumSensors()
		{
			int ret = NumSensorsNative();
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* SensorGetDeviceNameNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[539])(deviceIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[539])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SensorGetDeviceName([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			byte* ret = SensorGetDeviceNameNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SensorGetDeviceNameS([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			string ret = Utils.DecodeStringUTF8(SensorGetDeviceNameNative(deviceIndex));
			return ret;
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSensorType SensorGetDeviceTypeNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLSensorType>)funcTable[540])(deviceIndex);
			#else
			return (SDLSensorType)((delegate* unmanaged[Cdecl]<int, SDLSensorType>)funcTable[540])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		public static SDLSensorType SensorGetDeviceType([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			SDLSensorType ret = SensorGetDeviceTypeNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SensorGetDeviceNonPortableTypeNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[541])(deviceIndex);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[541])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDeviceNonPortableType([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			int ret = SensorGetDeviceNonPortableTypeNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SensorGetDeviceInstanceIDNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[542])(deviceIndex);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[542])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDeviceInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		public static int SensorGetDeviceInstanceID([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			int ret = SensorGetDeviceInstanceIDNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Open a sensor for use.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSensor* SensorOpenNative([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLSensor*>)funcTable[543])(deviceIndex);
			#else
			return (SDLSensor*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[543])(deviceIndex);
			#endif
		}

		/// <summary>
		/// Open a sensor for use.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		public static SDLSensor* SensorOpen([NativeName(NativeNameType.Param, "device_index")] [NativeName(NativeNameType.Type, "int")] int deviceIndex)
		{
			SDLSensor* ret = SensorOpenNative(deviceIndex);
			return ret;
		}

		/// <summary>
		/// Return the SDL_Sensor associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSensor* SensorFromInstanceIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_SensorID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLSensor*>)funcTable[544])(instanceId);
			#else
			return (SDLSensor*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[544])(instanceId);
			#endif
		}

		/// <summary>
		/// Return the SDL_Sensor associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_Sensor*")]
		public static SDLSensor* SensorFromInstanceID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_SensorID")] int instanceId)
		{
			SDLSensor* ret = SensorFromInstanceIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* SensorGetNameNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, byte*>)funcTable[545])(sensor);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[545])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SensorGetName([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			byte* ret = SensorGetNameNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SensorGetNameS([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			string ret = Utils.DecodeStringUTF8(SensorGetNameNative(sensor));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* SensorGetName([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				byte* ret = SensorGetNameNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation dependent name of a sensor<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string SensorGetNameS([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				string ret = Utils.DecodeStringUTF8(SensorGetNameNative((SDLSensor*)psensor));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSensorType SensorGetTypeNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, SDLSensorType>)funcTable[546])(sensor);
			#else
			return (SDLSensorType)((delegate* unmanaged[Cdecl]<nint, SDLSensorType>)funcTable[546])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		public static SDLSensorType SensorGetType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			SDLSensorType ret = SensorGetTypeNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorType")]
		public static SDLSensorType SensorGetType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				SDLSensorType ret = SensorGetTypeNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SensorGetNonPortableTypeNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, int>)funcTable[547])(sensor);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[547])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetNonPortableType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			int ret = SensorGetNonPortableTypeNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the platform dependent type of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetNonPortableType")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetNonPortableType([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SensorGetNonPortableTypeNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SensorGetInstanceIDNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, int>)funcTable[548])(sensor);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[548])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		public static int SensorGetInstanceID([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			int ret = SensorGetInstanceIDNative(sensor);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of a sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_SensorID")]
		public static int SensorGetInstanceID([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SensorGetInstanceIDNative((SDLSensor*)psensor);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SensorGetDataNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, float*, int, int>)funcTable[549])(sensor, data, numValues);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[549])((nint)sensor, (nint)data, numValues);
			#endif
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			int ret = SensorGetDataNative(sensor, data, numValues);
			return ret;
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SensorGetDataNative((SDLSensor*)psensor, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (float* pdata = &data)
			{
				int ret = SensorGetDataNative(sensor, (float*)pdata, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetData([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (float* pdata = &data)
				{
					int ret = SensorGetDataNative((SDLSensor*)psensor, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SensorGetDataWithTimestampNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSensor*, ulong*, float*, int, int>)funcTable[550])(sensor, timestamp, data, numValues);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int, int>)funcTable[550])((nint)sensor, (nint)timestamp, (nint)data, numValues);
			#endif
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			int ret = SensorGetDataWithTimestampNative(sensor, timestamp, data, numValues);
			return ret;
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				int ret = SensorGetDataWithTimestampNative((SDLSensor*)psensor, timestamp, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (ulong* ptimestamp = &timestamp)
			{
				int ret = SensorGetDataWithTimestampNative(sensor, (ulong*)ptimestamp, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] float* data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (ulong* ptimestamp = &timestamp)
				{
					int ret = SensorGetDataWithTimestampNative((SDLSensor*)psensor, (ulong*)ptimestamp, data, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (float* pdata = &data)
			{
				int ret = SensorGetDataWithTimestampNative(sensor, timestamp, (float*)pdata, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ulong* timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (float* pdata = &data)
				{
					int ret = SensorGetDataWithTimestampNative((SDLSensor*)psensor, timestamp, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (ulong* ptimestamp = &timestamp)
			{
				fixed (float* pdata = &data)
				{
					int ret = SensorGetDataWithTimestampNative(sensor, (ulong*)ptimestamp, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of an opened sensor with the timestamp of the last<br/>
		/// update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorGetDataWithTimestamp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SensorGetDataWithTimestamp([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "Uint64*")] ref ulong timestamp, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "float*")] ref float data, [NativeName(NativeNameType.Param, "num_values")] [NativeName(NativeNameType.Type, "int")] int numValues)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				fixed (ulong* ptimestamp = &timestamp)
				{
					fixed (float* pdata = &data)
					{
						int ret = SensorGetDataWithTimestampNative((SDLSensor*)psensor, (ulong*)ptimestamp, (float*)pdata, numValues);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Close a sensor previously opened with SDL_SensorOpen().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SensorCloseNative([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSensor*, void>)funcTable[551])(sensor);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[551])((nint)sensor);
			#endif
		}

		/// <summary>
		/// Close a sensor previously opened with SDL_SensorOpen().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SensorClose([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] SDLSensor* sensor)
		{
			SensorCloseNative(sensor);
		}

		/// <summary>
		/// Close a sensor previously opened with SDL_SensorOpen().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorClose")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SensorClose([NativeName(NativeNameType.Param, "sensor")] [NativeName(NativeNameType.Type, "SDL_Sensor*")] ref SDLSensor sensor)
		{
			fixed (SDLSensor* psensor = &sensor)
			{
				SensorCloseNative((SDLSensor*)psensor);
			}
		}

		/// <summary>
		/// Update the current state of the open sensors.<br/>
		/// This is called automatically by the event loop if sensor events are<br/>
		/// enabled.<br/>
		/// This needs to be called from the thread that initialized the sensor<br/>
		/// subsystem.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SensorUpdateNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[552])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[552])();
			#endif
		}

		/// <summary>
		/// Update the current state of the open sensors.<br/>
		/// This is called automatically by the event loop if sensor events are<br/>
		/// enabled.<br/>
		/// This needs to be called from the thread that initialized the sensor<br/>
		/// subsystem.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SensorUpdate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SensorUpdate()
		{
			SensorUpdateNative();
		}

		/// <summary>
		/// Load a set of Game Controller mappings from a seekable SDL data stream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known controller GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMappingsFromRW")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerAddMappingsFromRWNative([NativeName(NativeNameType.Param, "rw")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* rw, [NativeName(NativeNameType.Param, "freerw")] [NativeName(NativeNameType.Type, "int")] int freerw)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRWops*, int, int>)funcTable[553])(rw, freerw);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[553])((nint)rw, freerw);
			#endif
		}

		/// <summary>
		/// Load a set of Game Controller mappings from a seekable SDL data stream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known controller GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMappingsFromRW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerAddMappingsFromRW([NativeName(NativeNameType.Param, "rw")] [NativeName(NativeNameType.Type, "SDL_RWops*")] SDLRWops* rw, [NativeName(NativeNameType.Param, "freerw")] [NativeName(NativeNameType.Type, "int")] int freerw)
		{
			int ret = GameControllerAddMappingsFromRWNative(rw, freerw);
			return ret;
		}

		/// <summary>
		/// Load a set of Game Controller mappings from a seekable SDL data stream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known controller GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMappingsFromRW")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerAddMappingsFromRW([NativeName(NativeNameType.Param, "rw")] [NativeName(NativeNameType.Type, "SDL_RWops*")] ref SDLRWops rw, [NativeName(NativeNameType.Param, "freerw")] [NativeName(NativeNameType.Type, "int")] int freerw)
		{
			fixed (SDLRWops* prw = &rw)
			{
				int ret = GameControllerAddMappingsFromRWNative((SDLRWops*)prw, freerw);
				return ret;
			}
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerAddMappingNative([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] byte* mappingString)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[554])(mappingString);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[554])((nint)mappingString);
			#endif
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] byte* mappingString)
		{
			int ret = GameControllerAddMappingNative(mappingString);
			return ret;
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] ref byte mappingString)
		{
			fixed (byte* pmappingString = &mappingString)
			{
				int ret = GameControllerAddMappingNative((byte*)pmappingString);
				return ret;
			}
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> mappingString)
		{
			fixed (byte* pmappingString = mappingString)
			{
				int ret = GameControllerAddMappingNative((byte*)pmappingString);
				return ret;
			}
		}

		/// <summary>
		/// Add support for controllers that SDL is unaware of or to cause an existing<br/>
		/// controller to have a different binding.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_JoystickGetGUIDString(), name is the human readable<br/>
		/// string for the device and mappings are controller mappings to joystick<br/>
		/// ones. Under Windows there is a reserved GUID of "xinput" that covers all<br/>
		/// XInput devices. The mapping format for joystick is: {| |bX |a joystick<br/>
		/// button, index X |- |hX.Y |hat X with value Y |- |aX |axis X of the joystick<br/>
		/// |} Buttons can be used as a controller axes and vice versa.<br/>
		/// This string shows an example of a valid mapping for a controller:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerAddMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerAddMapping([NativeName(NativeNameType.Param, "mappingString")] [NativeName(NativeNameType.Type, "const char*")] string mappingString)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mappingString != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mappingString);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mappingString, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GameControllerAddMappingNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the number of mappings installed.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNumMappings")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerNumMappingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[555])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[555])();
			#endif
		}

		/// <summary>
		/// Get the number of mappings installed.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNumMappings")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerNumMappings()
		{
			int ret = GameControllerNumMappingsNative();
			return ret;
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingForIndexNative([NativeName(NativeNameType.Param, "mapping_index")] [NativeName(NativeNameType.Type, "int")] int mappingIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[556])(mappingIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[556])(mappingIndex);
			#endif
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* GameControllerMappingForIndex([NativeName(NativeNameType.Param, "mapping_index")] [NativeName(NativeNameType.Type, "int")] int mappingIndex)
		{
			byte* ret = GameControllerMappingForIndexNative(mappingIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string GameControllerMappingForIndexS([NativeName(NativeNameType.Param, "mapping_index")] [NativeName(NativeNameType.Type, "int")] int mappingIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingForIndexNative(mappingIndex));
			return ret;
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingForGUIDNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Guid, byte*>)funcTable[557])(guid);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<Guid, nint>)funcTable[557])(guid);
			#endif
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* GameControllerMappingForGUID([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid)
		{
			byte* ret = GameControllerMappingForGUIDNative(guid);
			return ret;
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string GameControllerMappingForGUIDS([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_JoystickGUID")] Guid guid)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingForGUIDNative(guid));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)funcTable[558])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[558])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* GameControllerMapping([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			byte* ret = GameControllerMappingNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string GameControllerMappingS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* GameControllerMapping([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerMappingNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMapping")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string GameControllerMappingS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerMappingNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Check if the given joystick is supported by the game controller interface.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsGameController")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool IsGameControllerNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLBool>)funcTable[559])(joystickIndex);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<int, SDLBool>)funcTable[559])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Check if the given joystick is supported by the game controller interface.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsGameController")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static SDLBool IsGameController([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			SDLBool ret = IsGameControllerNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNameForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerNameForIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[560])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[560])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNameForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GameControllerNameForIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			byte* ret = GameControllerNameForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerNameForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GameControllerNameForIndexS([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerNameForIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPathForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerPathForIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[561])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[561])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPathForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GameControllerPathForIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			byte* ret = GameControllerPathForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPathForIndex")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GameControllerPathForIndexS([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerPathForIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Get the type of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerTypeForIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerType GameControllerTypeForIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameControllerType>)funcTable[562])(joystickIndex);
			#else
			return (SDLGameControllerType)((delegate* unmanaged[Cdecl]<int, SDLGameControllerType>)funcTable[562])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the type of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerTypeForIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		public static SDLGameControllerType GameControllerTypeForIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			SDLGameControllerType ret = GameControllerTypeForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForDeviceIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingForDeviceIndexNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[563])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[563])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForDeviceIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static byte* GameControllerMappingForDeviceIndex([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			byte* ret = GameControllerMappingForDeviceIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerMappingForDeviceIndex")]
		[return: NativeName(NativeNameType.Type, "char*")]
		public static string GameControllerMappingForDeviceIndexS([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingForDeviceIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Open a game controller for use.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// The index passed as an argument refers to the N'th game controller on the<br/>
		/// system. This index is not the value which will identify this controller in<br/>
		/// future controller events. The joystick's instance id (SDL_JoystickID) will<br/>
		/// be used there instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameController* GameControllerOpenNative([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)funcTable[564])(joystickIndex);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[564])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Open a game controller for use.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// The index passed as an argument refers to the N'th game controller on the<br/>
		/// system. This index is not the value which will identify this controller in<br/>
		/// future controller events. The joystick's instance id (SDL_JoystickID) will<br/>
		/// be used there instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerOpen")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		public static SDLGameController* GameControllerOpen([NativeName(NativeNameType.Param, "joystick_index")] [NativeName(NativeNameType.Type, "int")] int joystickIndex)
		{
			SDLGameController* ret = GameControllerOpenNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the SDL_GameController associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameController* GameControllerFromInstanceIDNative([NativeName(NativeNameType.Param, "joyid")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int joyid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)funcTable[565])(joyid);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[565])(joyid);
			#endif
		}

		/// <summary>
		/// Get the SDL_GameController associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromInstanceID")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		public static SDLGameController* GameControllerFromInstanceID([NativeName(NativeNameType.Param, "joyid")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int joyid)
		{
			SDLGameController* ret = GameControllerFromInstanceIDNative(joyid);
			return ret;
		}

		/// <summary>
		/// Get the SDL_GameController associated with a player index.<br/>
		/// Please note that the player index is _not_ the device index, nor is it the<br/>
		/// instance id!<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameController* GameControllerFromPlayerIndexNative([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)funcTable[566])(playerIndex);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[566])(playerIndex);
			#endif
		}

		/// <summary>
		/// Get the SDL_GameController associated with a player index.<br/>
		/// Please note that the player index is _not_ the device index, nor is it the<br/>
		/// instance id!<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_GameController*")]
		public static SDLGameController* GameControllerFromPlayerIndex([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			SDLGameController* ret = GameControllerFromPlayerIndexNative(playerIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerNameNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)funcTable[567])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[567])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GameControllerName([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			byte* ret = GameControllerNameNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GameControllerNameS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerNameNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GameControllerName([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerNameNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerName")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GameControllerNameS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerNameNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerPathNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)funcTable[568])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[568])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GameControllerPath([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			byte* ret = GameControllerPathNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GameControllerPathS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerPathNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static byte* GameControllerPath([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerPathNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerPath")]
		[return: NativeName(NativeNameType.Type, "const char*")]
		public static string GameControllerPathS([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerPathNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerType GameControllerGetTypeNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerType>)funcTable[569])(gamecontroller);
			#else
			return (SDLGameControllerType)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerType>)funcTable[569])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		public static SDLGameControllerType GameControllerGetType([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			SDLGameControllerType ret = GameControllerGetTypeNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetType")]
		[return: NativeName(NativeNameType.Type, "SDL_GameControllerType")]
		public static SDLGameControllerType GameControllerGetType([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLGameControllerType ret = GameControllerGetTypeNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerGetPlayerIndexNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, int>)funcTable[570])(gamecontroller);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[570])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerGetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			int ret = GameControllerGetPlayerIndexNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GameControllerGetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerGetPlayerIndexNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GameControllerSetPlayerIndexNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLGameController*, int, void>)funcTable[571])(gamecontroller, playerIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[571])((nint)gamecontroller, playerIndex);
			#endif
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GameControllerSetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			GameControllerSetPlayerIndexNative(gamecontroller, playerIndex);
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerSetPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GameControllerSetPlayerIndex([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] ref SDLGameController gamecontroller, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				GameControllerSetPlayerIndexNative((SDLGameController*)pgamecontroller, playerIndex);
			}
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GameControllerGetVendorNative([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)funcTable[572])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[572])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GameControllerGetVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GameControllerGetVendor([NativeName(NativeNameType.Param, "gamecontroller")] [NativeName(NativeNameType.Type, "SDL_GameController*")] SDLGameController* gamecontroller)
		{
			ushort ret = GameControllerGetVendorNative(gamecontroller);
			return ret;
		}
	}
}
