// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingForIndexNative(int mappingIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[556])(mappingIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[556])(mappingIndex);
			#endif
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerMappingForIndex(int mappingIndex)
		{
			byte* ret = GameControllerMappingForIndexNative(mappingIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping at a particular index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerMappingForIndexS(int mappingIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingForIndexNative(mappingIndex));
			return ret;
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingForGUIDNative(Guid guid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Guid, byte*>)funcTable[557])(guid);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<Guid, nint>)funcTable[557])(guid);
			#endif
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerMappingForGUID(Guid guid)
		{
			byte* ret = GameControllerMappingForGUIDNative(guid);
			return ret;
		}

		/// <summary>
		/// Get the game controller mapping string for a given GUID.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerMappingForGUIDS(Guid guid)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingForGUIDNative(guid));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)funcTable[558])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[558])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerMapping(SDLGameController* gamecontroller)
		{
			byte* ret = GameControllerMappingNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerMappingS(SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerMapping(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerMappingNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the current mapping of a Game Controller.<br/>
		/// The returned string must be freed with SDL_free().<br/>
		/// Details about mappings are discussed with SDL_GameControllerAddMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerMappingS(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerMappingNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Check if the given joystick is supported by the game controller interface.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool IsGameControllerNative(int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLBool>)funcTable[559])(joystickIndex);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<int, SDLBool>)funcTable[559])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Check if the given joystick is supported by the game controller interface.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool IsGameController(int joystickIndex)
		{
			SDLBool ret = IsGameControllerNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerNameForIndexNative(int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[560])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[560])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerNameForIndex(int joystickIndex)
		{
			byte* ret = GameControllerNameForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerNameForIndexS(int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerNameForIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerPathForIndexNative(int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[561])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[561])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerPathForIndex(int joystickIndex)
		{
			byte* ret = GameControllerPathForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path for the game controller.<br/>
		/// This function can be called before any controllers are opened.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerPathForIndexS(int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerPathForIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Get the type of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerType GameControllerTypeForIndexNative(int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameControllerType>)funcTable[562])(joystickIndex);
			#else
			return (SDLGameControllerType)((delegate* unmanaged[Cdecl]<int, SDLGameControllerType>)funcTable[562])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the type of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerType GameControllerTypeForIndex(int joystickIndex)
		{
			SDLGameControllerType ret = GameControllerTypeForIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerMappingForDeviceIndexNative(int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[563])(joystickIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[563])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerMappingForDeviceIndex(int joystickIndex)
		{
			byte* ret = GameControllerMappingForDeviceIndexNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a game controller.<br/>
		/// This can be called before any controllers are opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerMappingForDeviceIndexS(int joystickIndex)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerMappingForDeviceIndexNative(joystickIndex));
			return ret;
		}

		/// <summary>
		/// Open a game controller for use.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// The index passed as an argument refers to the N'th game controller on the<br/>
		/// system. This index is not the value which will identify this controller in<br/>
		/// future controller events. The joystick's instance id (SDL_JoystickID) will<br/>
		/// be used there instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameController* GameControllerOpenNative(int joystickIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)funcTable[564])(joystickIndex);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[564])(joystickIndex);
			#endif
		}

		/// <summary>
		/// Open a game controller for use.<br/>
		/// `joystick_index` is the same as the `device_index` passed to<br/>
		/// SDL_JoystickOpen().<br/>
		/// The index passed as an argument refers to the N'th game controller on the<br/>
		/// system. This index is not the value which will identify this controller in<br/>
		/// future controller events. The joystick's instance id (SDL_JoystickID) will<br/>
		/// be used there instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameController* GameControllerOpen(int joystickIndex)
		{
			SDLGameController* ret = GameControllerOpenNative(joystickIndex);
			return ret;
		}

		/// <summary>
		/// Get the SDL_GameController associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameController* GameControllerFromInstanceIDNative(int joyid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)funcTable[565])(joyid);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[565])(joyid);
			#endif
		}

		/// <summary>
		/// Get the SDL_GameController associated with an instance id.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameController* GameControllerFromInstanceID(int joyid)
		{
			SDLGameController* ret = GameControllerFromInstanceIDNative(joyid);
			return ret;
		}

		/// <summary>
		/// Get the SDL_GameController associated with a player index.<br/>
		/// Please note that the player index is _not_ the device index, nor is it the<br/>
		/// instance id!<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameController* GameControllerFromPlayerIndexNative(int playerIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGameController*>)funcTable[566])(playerIndex);
			#else
			return (SDLGameController*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[566])(playerIndex);
			#endif
		}

		/// <summary>
		/// Get the SDL_GameController associated with a player index.<br/>
		/// Please note that the player index is _not_ the device index, nor is it the<br/>
		/// instance id!<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameController* GameControllerFromPlayerIndex(int playerIndex)
		{
			SDLGameController* ret = GameControllerFromPlayerIndexNative(playerIndex);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerNameNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)funcTable[567])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[567])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerName(SDLGameController* gamecontroller)
		{
			byte* ret = GameControllerNameNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerNameS(SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerNameNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerName(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerNameNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened game controller.<br/>
		/// This is the same name as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerNameS(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerNameNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerPathNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)funcTable[568])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[568])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerPath(SDLGameController* gamecontroller)
		{
			byte* ret = GameControllerPathNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerPathS(SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerPathNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerPath(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerPathNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened game controller.<br/>
		/// This is the same path as returned by SDL_GameControllerNameForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerPathS(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerPathNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerType GameControllerGetTypeNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerType>)funcTable[569])(gamecontroller);
			#else
			return (SDLGameControllerType)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerType>)funcTable[569])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerType GameControllerGetType(SDLGameController* gamecontroller)
		{
			SDLGameControllerType ret = GameControllerGetTypeNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the type of this currently opened controller<br/>
		/// This is the same name as returned by SDL_GameControllerTypeForIndex(), but<br/>
		/// it takes a controller identifier instead of the (unstable) device index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerType GameControllerGetType(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLGameControllerType ret = GameControllerGetTypeNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerGetPlayerIndexNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, int>)funcTable[570])(gamecontroller);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[570])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetPlayerIndex(SDLGameController* gamecontroller)
		{
			int ret = GameControllerGetPlayerIndexNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the player index of an opened game controller.<br/>
		/// For XInput controllers this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetPlayerIndex(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerGetPlayerIndexNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GameControllerSetPlayerIndexNative(SDLGameController* gamecontroller, int playerIndex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLGameController*, int, void>)funcTable[571])(gamecontroller, playerIndex);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[571])((nint)gamecontroller, playerIndex);
			#endif
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GameControllerSetPlayerIndex(SDLGameController* gamecontroller, int playerIndex)
		{
			GameControllerSetPlayerIndexNative(gamecontroller, playerIndex);
		}

		/// <summary>
		/// Set the player index of an opened game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GameControllerSetPlayerIndex(ref SDLGameController gamecontroller, int playerIndex)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				GameControllerSetPlayerIndexNative((SDLGameController*)pgamecontroller, playerIndex);
			}
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GameControllerGetVendorNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)funcTable[572])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[572])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetVendor(SDLGameController* gamecontroller)
		{
			ushort ret = GameControllerGetVendorNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the USB vendor ID of an opened controller, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetVendor(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = GameControllerGetVendorNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the USB product ID of an opened controller, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GameControllerGetProductNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)funcTable[573])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[573])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the USB product ID of an opened controller, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetProduct(SDLGameController* gamecontroller)
		{
			ushort ret = GameControllerGetProductNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the USB product ID of an opened controller, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetProduct(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = GameControllerGetProductNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the product version of an opened controller, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GameControllerGetProductVersionNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)funcTable[574])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[574])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the product version of an opened controller, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetProductVersion(SDLGameController* gamecontroller)
		{
			ushort ret = GameControllerGetProductVersionNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the product version of an opened controller, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetProductVersion(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = GameControllerGetProductVersionNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the firmware version of an opened controller, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GameControllerGetFirmwareVersionNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort>)funcTable[575])(gamecontroller);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[575])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the firmware version of an opened controller, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetFirmwareVersion(SDLGameController* gamecontroller)
		{
			ushort ret = GameControllerGetFirmwareVersionNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the firmware version of an opened controller, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ushort GameControllerGetFirmwareVersion(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ushort ret = GameControllerGetFirmwareVersionNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerGetSerialNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte*>)funcTable[576])(gamecontroller);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[576])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetSerial(SDLGameController* gamecontroller)
		{
			byte* ret = GameControllerGetSerialNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetSerialS(SDLGameController* gamecontroller)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerGetSerialNative(gamecontroller));
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetSerial(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerGetSerialNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened controller, if available.<br/>
		/// Returns the serial number of the controller, or NULL if it is not<br/>
		/// available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetSerialS(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerGetSerialNative((SDLGameController*)pgamecontroller));
				return ret;
			}
		}

		/// <summary>
		/// Get the Steam Input handle of an opened controller, if available.<br/>
		/// Returns an InputHandle_t for the controller that can be used with Steam Input API:<br/>
		/// https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong GameControllerGetSteamHandleNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ulong>)funcTable[577])(gamecontroller);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong>)funcTable[577])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the Steam Input handle of an opened controller, if available.<br/>
		/// Returns an InputHandle_t for the controller that can be used with Steam Input API:<br/>
		/// https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ulong GameControllerGetSteamHandle(SDLGameController* gamecontroller)
		{
			ulong ret = GameControllerGetSteamHandleNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the Steam Input handle of an opened controller, if available.<br/>
		/// Returns an InputHandle_t for the controller that can be used with Steam Input API:<br/>
		/// https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ulong GameControllerGetSteamHandle(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				ulong ret = GameControllerGetSteamHandleNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Check if a controller has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerGetAttachedNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLBool>)funcTable[578])(gamecontroller);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[578])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Check if a controller has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerGetAttached(SDLGameController* gamecontroller)
		{
			SDLBool ret = GameControllerGetAttachedNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Check if a controller has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerGetAttached(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerGetAttachedNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the Joystick ID from a Game Controller.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_GameController object. This would be<br/>
		/// useful for getting a joystick's position at any given time, even if it<br/>
		/// hasn't moved (moving it would produce an event, which would have the axis'<br/>
		/// value).<br/>
		/// The pointer returned is owned by the SDL_GameController. You should not<br/>
		/// call SDL_JoystickClose() on it, for example, since doing so will likely<br/>
		/// cause SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystick* GameControllerGetJoystickNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLJoystick*>)funcTable[579])(gamecontroller);
			#else
			return (SDLJoystick*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[579])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the Joystick ID from a Game Controller.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_GameController object. This would be<br/>
		/// useful for getting a joystick's position at any given time, even if it<br/>
		/// hasn't moved (moving it would produce an event, which would have the axis'<br/>
		/// value).<br/>
		/// The pointer returned is owned by the SDL_GameController. You should not<br/>
		/// call SDL_JoystickClose() on it, for example, since doing so will likely<br/>
		/// cause SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLJoystick* GameControllerGetJoystick(SDLGameController* gamecontroller)
		{
			SDLJoystick* ret = GameControllerGetJoystickNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the Joystick ID from a Game Controller.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_GameController object. This would be<br/>
		/// useful for getting a joystick's position at any given time, even if it<br/>
		/// hasn't moved (moving it would produce an event, which would have the axis'<br/>
		/// value).<br/>
		/// The pointer returned is owned by the SDL_GameController. You should not<br/>
		/// call SDL_JoystickClose() on it, for example, since doing so will likely<br/>
		/// cause SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLJoystick* GameControllerGetJoystick(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLJoystick* ret = GameControllerGetJoystickNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Query or change current state of Game Controller events.<br/>
		/// If controller events are disabled, you must call SDL_GameControllerUpdate()<br/>
		/// yourself and check the state of the controller when you want controller<br/>
		/// information.<br/>
		/// Any number can be passed to SDL_GameControllerEventState(), but only -1, 0,<br/>
		/// and 1 will have any effect. Other numbers will just be returned.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerEventStateNative(int state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[580])(state);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[580])(state);
			#endif
		}

		/// <summary>
		/// Query or change current state of Game Controller events.<br/>
		/// If controller events are disabled, you must call SDL_GameControllerUpdate()<br/>
		/// yourself and check the state of the controller when you want controller<br/>
		/// information.<br/>
		/// Any number can be passed to SDL_GameControllerEventState(), but only -1, 0,<br/>
		/// and 1 will have any effect. Other numbers will just be returned.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerEventState(int state)
		{
			int ret = GameControllerEventStateNative(state);
			return ret;
		}

		/// <summary>
		/// Manually pump game controller updates if not using the loop.<br/>
		/// This function is called automatically by the event loop if events are<br/>
		/// enabled. Under such circumstances, it will not be necessary to call this<br/>
		/// function.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GameControllerUpdateNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[581])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[581])();
			#endif
		}

		/// <summary>
		/// Manually pump game controller updates if not using the loop.<br/>
		/// This function is called automatically by the event loop if events are<br/>
		/// enabled. Under such circumstances, it will not be necessary to call this<br/>
		/// function.<br/>
		/// <br/>
		/// </summary>
		public static void GameControllerUpdate()
		{
			GameControllerUpdateNative();
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerAxis GameControllerGetAxisFromStringNative(byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLGameControllerAxis>)funcTable[582])(str);
			#else
			return (SDLGameControllerAxis)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerAxis>)funcTable[582])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerAxis GameControllerGetAxisFromString(byte* str)
		{
			SDLGameControllerAxis ret = GameControllerGetAxisFromStringNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerAxis GameControllerGetAxisFromString(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				SDLGameControllerAxis ret = GameControllerGetAxisFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerAxis GameControllerGetAxisFromString(ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				SDLGameControllerAxis ret = GameControllerGetAxisFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into SDL_GameControllerAxis enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_CONTROLLER_AXIS_TRIGGERRIGHT` and `SDL_CONTROLLER_AXIS_TRIGGERLEFT`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerAxis GameControllerGetAxisFromString(string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLGameControllerAxis ret = GameControllerGetAxisFromStringNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GameControllerAxis enum to a string.<br/>
		/// The caller should not SDL_free() the returned string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerGetStringForAxisNative(SDLGameControllerAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameControllerAxis, byte*>)funcTable[583])(axis);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SDLGameControllerAxis, nint>)funcTable[583])(axis);
			#endif
		}

		/// <summary>
		/// Convert from an SDL_GameControllerAxis enum to a string.<br/>
		/// The caller should not SDL_free() the returned string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetStringForAxis(SDLGameControllerAxis axis)
		{
			byte* ret = GameControllerGetStringForAxisNative(axis);
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GameControllerAxis enum to a string.<br/>
		/// The caller should not SDL_free() the returned string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetStringForAxisS(SDLGameControllerAxis axis)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerGetStringForAxisNative(axis));
			return ret;
		}

		/// <summary>
		/// Get the SDL joystick layer binding for a controller axis mapping.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerButtonBind GameControllerGetBindForAxisNative(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerAxis, SDLGameControllerButtonBind>)funcTable[584])(gamecontroller, axis);
			#else
			return (SDLGameControllerButtonBind)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerAxis, SDLGameControllerButtonBind>)funcTable[584])((nint)gamecontroller, axis);
			#endif
		}

		/// <summary>
		/// Get the SDL joystick layer binding for a controller axis mapping.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButtonBind GameControllerGetBindForAxis(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			SDLGameControllerButtonBind ret = GameControllerGetBindForAxisNative(gamecontroller, axis);
			return ret;
		}

		/// <summary>
		/// Get the SDL joystick layer binding for a controller axis mapping.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButtonBind GameControllerGetBindForAxis(ref SDLGameController gamecontroller, SDLGameControllerAxis axis)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLGameControllerButtonBind ret = GameControllerGetBindForAxisNative((SDLGameController*)pgamecontroller, axis);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a game controller has a given axis.<br/>
		/// This merely reports whether the controller's mapping defined this axis, as<br/>
		/// that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerHasAxisNative(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerAxis, SDLBool>)funcTable[585])(gamecontroller, axis);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerAxis, SDLBool>)funcTable[585])((nint)gamecontroller, axis);
			#endif
		}

		/// <summary>
		/// Query whether a game controller has a given axis.<br/>
		/// This merely reports whether the controller's mapping defined this axis, as<br/>
		/// that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasAxis(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			SDLBool ret = GameControllerHasAxisNative(gamecontroller, axis);
			return ret;
		}

		/// <summary>
		/// Query whether a game controller has a given axis.<br/>
		/// This merely reports whether the controller's mapping defined this axis, as<br/>
		/// that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasAxis(ref SDLGameController gamecontroller, SDLGameControllerAxis axis)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerHasAxisNative((SDLGameController*)pgamecontroller, axis);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of an axis control on a game controller.<br/>
		/// The axis indices start at index 0.<br/>
		/// For thumbsticks, the state is a value ranging from -32768 (up/left)<br/>
		/// to 32767 (down/right).<br/>
		/// Triggers range from 0 when released to 32767 when fully pressed, and<br/>
		/// never return a negative value. Note that this differs from the value<br/>
		/// reported by the lower-level SDL_GetJoystickAxis(), which normally uses<br/>
		/// the full range.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static short GameControllerGetAxisNative(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerAxis, short>)funcTable[586])(gamecontroller, axis);
			#else
			return (short)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerAxis, short>)funcTable[586])((nint)gamecontroller, axis);
			#endif
		}

		/// <summary>
		/// Get the current state of an axis control on a game controller.<br/>
		/// The axis indices start at index 0.<br/>
		/// For thumbsticks, the state is a value ranging from -32768 (up/left)<br/>
		/// to 32767 (down/right).<br/>
		/// Triggers range from 0 when released to 32767 when fully pressed, and<br/>
		/// never return a negative value. Note that this differs from the value<br/>
		/// reported by the lower-level SDL_GetJoystickAxis(), which normally uses<br/>
		/// the full range.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static short GameControllerGetAxis(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			short ret = GameControllerGetAxisNative(gamecontroller, axis);
			return ret;
		}

		/// <summary>
		/// Get the current state of an axis control on a game controller.<br/>
		/// The axis indices start at index 0.<br/>
		/// For thumbsticks, the state is a value ranging from -32768 (up/left)<br/>
		/// to 32767 (down/right).<br/>
		/// Triggers range from 0 when released to 32767 when fully pressed, and<br/>
		/// never return a negative value. Note that this differs from the value<br/>
		/// reported by the lower-level SDL_GetJoystickAxis(), which normally uses<br/>
		/// the full range.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static short GameControllerGetAxis(ref SDLGameController gamecontroller, SDLGameControllerAxis axis)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				short ret = GameControllerGetAxisNative((SDLGameController*)pgamecontroller, axis);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into an SDL_GameControllerButton enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerButton GameControllerGetButtonFromStringNative(byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLGameControllerButton>)funcTable[587])(str);
			#else
			return (SDLGameControllerButton)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerButton>)funcTable[587])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string into an SDL_GameControllerButton enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButton GameControllerGetButtonFromString(byte* str)
		{
			SDLGameControllerButton ret = GameControllerGetButtonFromStringNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string into an SDL_GameControllerButton enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButton GameControllerGetButtonFromString(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				SDLGameControllerButton ret = GameControllerGetButtonFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into an SDL_GameControllerButton enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButton GameControllerGetButtonFromString(ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				SDLGameControllerButton ret = GameControllerGetButtonFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into an SDL_GameControllerButton enum.<br/>
		/// This function is called internally to translate SDL_GameController mapping<br/>
		/// strings for the underlying joystick device into the consistent<br/>
		/// SDL_GameController mapping. You do not normally need to call this function<br/>
		/// unless you are parsing SDL_GameController mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButton GameControllerGetButtonFromString(string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLGameControllerButton ret = GameControllerGetButtonFromStringNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GameControllerButton enum to a string.<br/>
		/// The caller should not SDL_free() the returned string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerGetStringForButtonNative(SDLGameControllerButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameControllerButton, byte*>)funcTable[588])(button);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SDLGameControllerButton, nint>)funcTable[588])(button);
			#endif
		}

		/// <summary>
		/// Convert from an SDL_GameControllerButton enum to a string.<br/>
		/// The caller should not SDL_free() the returned string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetStringForButton(SDLGameControllerButton button)
		{
			byte* ret = GameControllerGetStringForButtonNative(button);
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GameControllerButton enum to a string.<br/>
		/// The caller should not SDL_free() the returned string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetStringForButtonS(SDLGameControllerButton button)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerGetStringForButtonNative(button));
			return ret;
		}

		/// <summary>
		/// Get the SDL joystick layer binding for a controller button mapping.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGameControllerButtonBind GameControllerGetBindForButtonNative(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerButton, SDLGameControllerButtonBind>)funcTable[589])(gamecontroller, button);
			#else
			return (SDLGameControllerButtonBind)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerButton, SDLGameControllerButtonBind>)funcTable[589])((nint)gamecontroller, button);
			#endif
		}

		/// <summary>
		/// Get the SDL joystick layer binding for a controller button mapping.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButtonBind GameControllerGetBindForButton(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			SDLGameControllerButtonBind ret = GameControllerGetBindForButtonNative(gamecontroller, button);
			return ret;
		}

		/// <summary>
		/// Get the SDL joystick layer binding for a controller button mapping.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGameControllerButtonBind GameControllerGetBindForButton(ref SDLGameController gamecontroller, SDLGameControllerButton button)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLGameControllerButtonBind ret = GameControllerGetBindForButtonNative((SDLGameController*)pgamecontroller, button);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a game controller has a given button.<br/>
		/// This merely reports whether the controller's mapping defined this button,<br/>
		/// as that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerHasButtonNative(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerButton, SDLBool>)funcTable[590])(gamecontroller, button);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerButton, SDLBool>)funcTable[590])((nint)gamecontroller, button);
			#endif
		}

		/// <summary>
		/// Query whether a game controller has a given button.<br/>
		/// This merely reports whether the controller's mapping defined this button,<br/>
		/// as that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasButton(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			SDLBool ret = GameControllerHasButtonNative(gamecontroller, button);
			return ret;
		}

		/// <summary>
		/// Query whether a game controller has a given button.<br/>
		/// This merely reports whether the controller's mapping defined this button,<br/>
		/// as that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasButton(ref SDLGameController gamecontroller, SDLGameControllerButton button)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerHasButtonNative((SDLGameController*)pgamecontroller, button);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a button on a game controller.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GameControllerGetButtonNative(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerButton, byte>)funcTable[591])(gamecontroller, button);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerButton, byte>)funcTable[591])((nint)gamecontroller, button);
			#endif
		}

		/// <summary>
		/// Get the current state of a button on a game controller.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte GameControllerGetButton(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			byte ret = GameControllerGetButtonNative(gamecontroller, button);
			return ret;
		}

		/// <summary>
		/// Get the current state of a button on a game controller.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte GameControllerGetButton(ref SDLGameController gamecontroller, SDLGameControllerButton button)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte ret = GameControllerGetButtonNative((SDLGameController*)pgamecontroller, button);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of touchpads on a game controller.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerGetNumTouchpadsNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, int>)funcTable[592])(gamecontroller);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[592])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Get the number of touchpads on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetNumTouchpads(SDLGameController* gamecontroller)
		{
			int ret = GameControllerGetNumTouchpadsNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Get the number of touchpads on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetNumTouchpads(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerGetNumTouchpadsNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of supported simultaneous fingers on a touchpad on a game<br/>
		/// controller.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerGetNumTouchpadFingersNative(SDLGameController* gamecontroller, int touchpad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, int, int>)funcTable[593])(gamecontroller, touchpad);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[593])((nint)gamecontroller, touchpad);
			#endif
		}

		/// <summary>
		/// Get the number of supported simultaneous fingers on a touchpad on a game<br/>
		/// controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetNumTouchpadFingers(SDLGameController* gamecontroller, int touchpad)
		{
			int ret = GameControllerGetNumTouchpadFingersNative(gamecontroller, touchpad);
			return ret;
		}

		/// <summary>
		/// Get the number of supported simultaneous fingers on a touchpad on a game<br/>
		/// controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetNumTouchpadFingers(ref SDLGameController gamecontroller, int touchpad)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerGetNumTouchpadFingersNative((SDLGameController*)pgamecontroller, touchpad);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerGetTouchpadFingerNative(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, float* pressure)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, int, int, byte*, float*, float*, float*, int>)funcTable[594])(gamecontroller, touchpad, finger, state, x, y, pressure);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, nint, nint, nint, nint, int>)funcTable[594])((nint)gamecontroller, touchpad, finger, (nint)state, (nint)x, (nint)y, (nint)pressure);
			#endif
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, float* pressure)
		{
			int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, x, y, pressure);
			return ret;
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, x, y, pressure);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, float* x, float* y, float* pressure)
		{
			fixed (byte* pstate = &state)
			{
				int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, x, y, pressure);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, float* x, float* y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, x, y, pressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, ref float x, float* y, float* pressure)
		{
			fixed (float* px = &x)
			{
				int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, (float*)px, y, pressure);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, ref float x, float* y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* px = &x)
				{
					int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, (float*)px, y, pressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, ref float x, float* y, float* pressure)
		{
			fixed (byte* pstate = &state)
			{
				fixed (float* px = &x)
				{
					int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, (float*)px, y, pressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, ref float x, float* y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					fixed (float* px = &x)
					{
						int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, (float*)px, y, pressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, float* x, ref float y, float* pressure)
		{
			fixed (float* py = &y)
			{
				int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, x, (float*)py, pressure);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, float* x, ref float y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* py = &y)
				{
					int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, x, (float*)py, pressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, float* x, ref float y, float* pressure)
		{
			fixed (byte* pstate = &state)
			{
				fixed (float* py = &y)
				{
					int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, x, (float*)py, pressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, float* x, ref float y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					fixed (float* py = &y)
					{
						int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, x, (float*)py, pressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, ref float x, ref float y, float* pressure)
		{
			fixed (float* px = &x)
			{
				fixed (float* py = &y)
				{
					int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, (float*)px, (float*)py, pressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, ref float x, ref float y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* px = &x)
				{
					fixed (float* py = &y)
					{
						int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, (float*)px, (float*)py, pressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, ref float x, ref float y, float* pressure)
		{
			fixed (byte* pstate = &state)
			{
				fixed (float* px = &x)
				{
					fixed (float* py = &y)
					{
						int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, (float*)px, (float*)py, pressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, ref float x, ref float y, float* pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					fixed (float* px = &x)
					{
						fixed (float* py = &y)
						{
							int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, (float*)px, (float*)py, pressure);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, ref float pressure)
		{
			fixed (float* ppressure = &pressure)
			{
				int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, x, y, (float*)ppressure);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* ppressure = &pressure)
				{
					int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, x, y, (float*)ppressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, float* x, float* y, ref float pressure)
		{
			fixed (byte* pstate = &state)
			{
				fixed (float* ppressure = &pressure)
				{
					int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, x, y, (float*)ppressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, float* x, float* y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					fixed (float* ppressure = &pressure)
					{
						int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, x, y, (float*)ppressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, ref float x, float* y, ref float pressure)
		{
			fixed (float* px = &x)
			{
				fixed (float* ppressure = &pressure)
				{
					int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, (float*)px, y, (float*)ppressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, ref float x, float* y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* px = &x)
				{
					fixed (float* ppressure = &pressure)
					{
						int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, (float*)px, y, (float*)ppressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, ref float x, float* y, ref float pressure)
		{
			fixed (byte* pstate = &state)
			{
				fixed (float* px = &x)
				{
					fixed (float* ppressure = &pressure)
					{
						int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, (float*)px, y, (float*)ppressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, ref float x, float* y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					fixed (float* px = &x)
					{
						fixed (float* ppressure = &pressure)
						{
							int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, (float*)px, y, (float*)ppressure);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, float* x, ref float y, ref float pressure)
		{
			fixed (float* py = &y)
			{
				fixed (float* ppressure = &pressure)
				{
					int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, x, (float*)py, (float*)ppressure);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, float* x, ref float y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* py = &y)
				{
					fixed (float* ppressure = &pressure)
					{
						int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, x, (float*)py, (float*)ppressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, float* x, ref float y, ref float pressure)
		{
			fixed (byte* pstate = &state)
			{
				fixed (float* py = &y)
				{
					fixed (float* ppressure = &pressure)
					{
						int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, x, (float*)py, (float*)ppressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, float* x, ref float y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					fixed (float* py = &y)
					{
						fixed (float* ppressure = &pressure)
						{
							int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, x, (float*)py, (float*)ppressure);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, byte* state, ref float x, ref float y, ref float pressure)
		{
			fixed (float* px = &x)
			{
				fixed (float* py = &y)
				{
					fixed (float* ppressure = &pressure)
					{
						int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, state, (float*)px, (float*)py, (float*)ppressure);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, byte* state, ref float x, ref float y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* px = &x)
				{
					fixed (float* py = &y)
					{
						fixed (float* ppressure = &pressure)
						{
							int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, state, (float*)px, (float*)py, (float*)ppressure);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(SDLGameController* gamecontroller, int touchpad, int finger, ref byte state, ref float x, ref float y, ref float pressure)
		{
			fixed (byte* pstate = &state)
			{
				fixed (float* px = &x)
				{
					fixed (float* py = &y)
					{
						fixed (float* ppressure = &pressure)
						{
							int ret = GameControllerGetTouchpadFingerNative(gamecontroller, touchpad, finger, (byte*)pstate, (float*)px, (float*)py, (float*)ppressure);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a finger on a touchpad on a game controller.<br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetTouchpadFinger(ref SDLGameController gamecontroller, int touchpad, int finger, ref byte state, ref float x, ref float y, ref float pressure)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (byte* pstate = &state)
				{
					fixed (float* px = &x)
					{
						fixed (float* py = &y)
						{
							fixed (float* ppressure = &pressure)
							{
								int ret = GameControllerGetTouchpadFingerNative((SDLGameController*)pgamecontroller, touchpad, finger, (byte*)pstate, (float*)px, (float*)py, (float*)ppressure);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Return whether a game controller has a particular sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerHasSensorNative(SDLGameController* gamecontroller, SDLSensorType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLSensorType, SDLBool>)funcTable[595])(gamecontroller, type);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLSensorType, SDLBool>)funcTable[595])((nint)gamecontroller, type);
			#endif
		}

		/// <summary>
		/// Return whether a game controller has a particular sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasSensor(SDLGameController* gamecontroller, SDLSensorType type)
		{
			SDLBool ret = GameControllerHasSensorNative(gamecontroller, type);
			return ret;
		}

		/// <summary>
		/// Return whether a game controller has a particular sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasSensor(ref SDLGameController gamecontroller, SDLSensorType type)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerHasSensorNative((SDLGameController*)pgamecontroller, type);
				return ret;
			}
		}

		/// <summary>
		/// Set whether data reporting for a game controller sensor is enabled.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerSetSensorEnabledNative(SDLGameController* gamecontroller, SDLSensorType type, SDLBool enabled)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLSensorType, SDLBool, int>)funcTable[596])(gamecontroller, type, enabled);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, SDLSensorType, SDLBool, int>)funcTable[596])((nint)gamecontroller, type, enabled);
			#endif
		}

		/// <summary>
		/// Set whether data reporting for a game controller sensor is enabled.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerSetSensorEnabled(SDLGameController* gamecontroller, SDLSensorType type, SDLBool enabled)
		{
			int ret = GameControllerSetSensorEnabledNative(gamecontroller, type, enabled);
			return ret;
		}

		/// <summary>
		/// Set whether data reporting for a game controller sensor is enabled.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerSetSensorEnabled(ref SDLGameController gamecontroller, SDLSensorType type, SDLBool enabled)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerSetSensorEnabledNative((SDLGameController*)pgamecontroller, type, enabled);
				return ret;
			}
		}

		/// <summary>
		/// Query whether sensor data reporting is enabled for a game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerIsSensorEnabledNative(SDLGameController* gamecontroller, SDLSensorType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLSensorType, SDLBool>)funcTable[597])(gamecontroller, type);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLSensorType, SDLBool>)funcTable[597])((nint)gamecontroller, type);
			#endif
		}

		/// <summary>
		/// Query whether sensor data reporting is enabled for a game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerIsSensorEnabled(SDLGameController* gamecontroller, SDLSensorType type)
		{
			SDLBool ret = GameControllerIsSensorEnabledNative(gamecontroller, type);
			return ret;
		}

		/// <summary>
		/// Query whether sensor data reporting is enabled for a game controller.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerIsSensorEnabled(ref SDLGameController gamecontroller, SDLSensorType type)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerIsSensorEnabledNative((SDLGameController*)pgamecontroller, type);
				return ret;
			}
		}

		/// <summary>
		/// Get the data rate (number of events per second) of a game controller<br/>
		/// sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GameControllerGetSensorDataRateNative(SDLGameController* gamecontroller, SDLSensorType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLSensorType, float>)funcTable[598])(gamecontroller, type);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, SDLSensorType, float>)funcTable[598])((nint)gamecontroller, type);
			#endif
		}

		/// <summary>
		/// Get the data rate (number of events per second) of a game controller<br/>
		/// sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float GameControllerGetSensorDataRate(SDLGameController* gamecontroller, SDLSensorType type)
		{
			float ret = GameControllerGetSensorDataRateNative(gamecontroller, type);
			return ret;
		}

		/// <summary>
		/// Get the data rate (number of events per second) of a game controller<br/>
		/// sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float GameControllerGetSensorDataRate(ref SDLGameController gamecontroller, SDLSensorType type)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				float ret = GameControllerGetSensorDataRateNative((SDLGameController*)pgamecontroller, type);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerGetSensorDataNative(SDLGameController* gamecontroller, SDLSensorType type, float* data, int numValues)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLSensorType, float*, int, int>)funcTable[599])(gamecontroller, type, data, numValues);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, SDLSensorType, nint, int, int>)funcTable[599])((nint)gamecontroller, type, (nint)data, numValues);
			#endif
		}

		/// <summary>
		/// Get the current state of a game controller sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorData(SDLGameController* gamecontroller, SDLSensorType type, float* data, int numValues)
		{
			int ret = GameControllerGetSensorDataNative(gamecontroller, type, data, numValues);
			return ret;
		}

		/// <summary>
		/// Get the current state of a game controller sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorData(ref SDLGameController gamecontroller, SDLSensorType type, float* data, int numValues)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerGetSensorDataNative((SDLGameController*)pgamecontroller, type, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorData(SDLGameController* gamecontroller, SDLSensorType type, ref float data, int numValues)
		{
			fixed (float* pdata = &data)
			{
				int ret = GameControllerGetSensorDataNative(gamecontroller, type, (float*)pdata, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorData(ref SDLGameController gamecontroller, SDLSensorType type, ref float data, int numValues)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* pdata = &data)
				{
					int ret = GameControllerGetSensorDataNative((SDLGameController*)pgamecontroller, type, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerGetSensorDataWithTimestampNative(SDLGameController* gamecontroller, SDLSensorType type, ulong* timestamp, float* data, int numValues)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLSensorType, ulong*, float*, int, int>)funcTable[600])(gamecontroller, type, timestamp, data, numValues);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, SDLSensorType, nint, nint, int, int>)funcTable[600])((nint)gamecontroller, type, (nint)timestamp, (nint)data, numValues);
			#endif
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(SDLGameController* gamecontroller, SDLSensorType type, ulong* timestamp, float* data, int numValues)
		{
			int ret = GameControllerGetSensorDataWithTimestampNative(gamecontroller, type, timestamp, data, numValues);
			return ret;
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(ref SDLGameController gamecontroller, SDLSensorType type, ulong* timestamp, float* data, int numValues)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerGetSensorDataWithTimestampNative((SDLGameController*)pgamecontroller, type, timestamp, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(SDLGameController* gamecontroller, SDLSensorType type, ref ulong timestamp, float* data, int numValues)
		{
			fixed (ulong* ptimestamp = &timestamp)
			{
				int ret = GameControllerGetSensorDataWithTimestampNative(gamecontroller, type, (ulong*)ptimestamp, data, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(ref SDLGameController gamecontroller, SDLSensorType type, ref ulong timestamp, float* data, int numValues)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (ulong* ptimestamp = &timestamp)
				{
					int ret = GameControllerGetSensorDataWithTimestampNative((SDLGameController*)pgamecontroller, type, (ulong*)ptimestamp, data, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(SDLGameController* gamecontroller, SDLSensorType type, ulong* timestamp, ref float data, int numValues)
		{
			fixed (float* pdata = &data)
			{
				int ret = GameControllerGetSensorDataWithTimestampNative(gamecontroller, type, timestamp, (float*)pdata, numValues);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(ref SDLGameController gamecontroller, SDLSensorType type, ulong* timestamp, ref float data, int numValues)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (float* pdata = &data)
				{
					int ret = GameControllerGetSensorDataWithTimestampNative((SDLGameController*)pgamecontroller, type, timestamp, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(SDLGameController* gamecontroller, SDLSensorType type, ref ulong timestamp, ref float data, int numValues)
		{
			fixed (ulong* ptimestamp = &timestamp)
			{
				fixed (float* pdata = &data)
				{
					int ret = GameControllerGetSensorDataWithTimestampNative(gamecontroller, type, (ulong*)ptimestamp, (float*)pdata, numValues);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current state of a game controller sensor with the timestamp of the<br/>
		/// last update.<br/>
		/// The number of values and interpretation of the data is sensor dependent.<br/>
		/// See SDL_sensor.h for the details for each type of sensor.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerGetSensorDataWithTimestamp(ref SDLGameController gamecontroller, SDLSensorType type, ref ulong timestamp, ref float data, int numValues)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				fixed (ulong* ptimestamp = &timestamp)
				{
					fixed (float* pdata = &data)
					{
						int ret = GameControllerGetSensorDataWithTimestampNative((SDLGameController*)pgamecontroller, type, (ulong*)ptimestamp, (float*)pdata, numValues);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Start a rumble effect on a game controller.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerRumbleNative(SDLGameController* gamecontroller, ushort lowFrequencyRumble, ushort highFrequencyRumble, uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort, ushort, uint, int>)funcTable[601])(gamecontroller, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, int>)funcTable[601])((nint)gamecontroller, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect on a game controller.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerRumble(SDLGameController* gamecontroller, ushort lowFrequencyRumble, ushort highFrequencyRumble, uint durationMs)
		{
			int ret = GameControllerRumbleNative(gamecontroller, lowFrequencyRumble, highFrequencyRumble, durationMs);
			return ret;
		}

		/// <summary>
		/// Start a rumble effect on a game controller.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerRumble(ref SDLGameController gamecontroller, ushort lowFrequencyRumble, ushort highFrequencyRumble, uint durationMs)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerRumbleNative((SDLGameController*)pgamecontroller, lowFrequencyRumble, highFrequencyRumble, durationMs);
				return ret;
			}
		}

		/// <summary>
		/// Start a rumble effect in the game controller's triggers.<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use<br/>
		/// SDL_GameControllerRumble() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerRumbleTriggersNative(SDLGameController* gamecontroller, ushort leftRumble, ushort rightRumble, uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, ushort, ushort, uint, int>)funcTable[602])(gamecontroller, leftRumble, rightRumble, durationMs);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, int>)funcTable[602])((nint)gamecontroller, leftRumble, rightRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect in the game controller's triggers.<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use<br/>
		/// SDL_GameControllerRumble() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerRumbleTriggers(SDLGameController* gamecontroller, ushort leftRumble, ushort rightRumble, uint durationMs)
		{
			int ret = GameControllerRumbleTriggersNative(gamecontroller, leftRumble, rightRumble, durationMs);
			return ret;
		}

		/// <summary>
		/// Start a rumble effect in the game controller's triggers.<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use<br/>
		/// SDL_GameControllerRumble() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerRumbleTriggers(ref SDLGameController gamecontroller, ushort leftRumble, ushort rightRumble, uint durationMs)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerRumbleTriggersNative((SDLGameController*)pgamecontroller, leftRumble, rightRumble, durationMs);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a game controller has an LED.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerHasLEDNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLBool>)funcTable[603])(gamecontroller);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[603])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Query whether a game controller has an LED.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasLED(SDLGameController* gamecontroller)
		{
			SDLBool ret = GameControllerHasLEDNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Query whether a game controller has an LED.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasLED(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerHasLEDNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a game controller has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerHasRumbleNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLBool>)funcTable[604])(gamecontroller);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[604])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Query whether a game controller has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasRumble(SDLGameController* gamecontroller)
		{
			SDLBool ret = GameControllerHasRumbleNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Query whether a game controller has rumble support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasRumble(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerHasRumbleNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Query whether a game controller has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GameControllerHasRumbleTriggersNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLBool>)funcTable[605])(gamecontroller);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, SDLBool>)funcTable[605])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Query whether a game controller has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasRumbleTriggers(SDLGameController* gamecontroller)
		{
			SDLBool ret = GameControllerHasRumbleTriggersNative(gamecontroller);
			return ret;
		}

		/// <summary>
		/// Query whether a game controller has rumble support on triggers.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GameControllerHasRumbleTriggers(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				SDLBool ret = GameControllerHasRumbleTriggersNative((SDLGameController*)pgamecontroller);
				return ret;
			}
		}

		/// <summary>
		/// Update a game controller's LED color.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerSetLEDNative(SDLGameController* gamecontroller, byte red, byte green, byte blue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, byte, byte, byte, int>)funcTable[606])(gamecontroller, red, green, blue);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, byte, byte, byte, int>)funcTable[606])((nint)gamecontroller, red, green, blue);
			#endif
		}

		/// <summary>
		/// Update a game controller's LED color.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerSetLED(SDLGameController* gamecontroller, byte red, byte green, byte blue)
		{
			int ret = GameControllerSetLEDNative(gamecontroller, red, green, blue);
			return ret;
		}

		/// <summary>
		/// Update a game controller's LED color.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerSetLED(ref SDLGameController gamecontroller, byte red, byte green, byte blue)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerSetLEDNative((SDLGameController*)pgamecontroller, red, green, blue);
				return ret;
			}
		}

		/// <summary>
		/// Send a controller specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GameControllerSendEffectNative(SDLGameController* gamecontroller, void* data, int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, void*, int, int>)funcTable[607])(gamecontroller, data, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[607])((nint)gamecontroller, (nint)data, size);
			#endif
		}

		/// <summary>
		/// Send a controller specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerSendEffect(SDLGameController* gamecontroller, void* data, int size)
		{
			int ret = GameControllerSendEffectNative(gamecontroller, data, size);
			return ret;
		}

		/// <summary>
		/// Send a controller specific effect packet<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GameControllerSendEffect(ref SDLGameController gamecontroller, void* data, int size)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				int ret = GameControllerSendEffectNative((SDLGameController*)pgamecontroller, data, size);
				return ret;
			}
		}

		/// <summary>
		/// Close a game controller previously opened with SDL_GameControllerOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GameControllerCloseNative(SDLGameController* gamecontroller)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLGameController*, void>)funcTable[608])(gamecontroller);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[608])((nint)gamecontroller);
			#endif
		}

		/// <summary>
		/// Close a game controller previously opened with SDL_GameControllerOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GameControllerClose(SDLGameController* gamecontroller)
		{
			GameControllerCloseNative(gamecontroller);
		}

		/// <summary>
		/// Close a game controller previously opened with SDL_GameControllerOpen().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GameControllerClose(ref SDLGameController gamecontroller)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				GameControllerCloseNative((SDLGameController*)pgamecontroller);
			}
		}

		/// <summary>
		/// Return the sfSymbolsName for a given button on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerGetAppleSFSymbolsNameForButtonNative(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerButton, byte*>)funcTable[609])(gamecontroller, button);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerButton, nint>)funcTable[609])((nint)gamecontroller, button);
			#endif
		}

		/// <summary>
		/// Return the sfSymbolsName for a given button on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetAppleSFSymbolsNameForButton(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			byte* ret = GameControllerGetAppleSFSymbolsNameForButtonNative(gamecontroller, button);
			return ret;
		}

		/// <summary>
		/// Return the sfSymbolsName for a given button on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetAppleSFSymbolsNameForButtonS(SDLGameController* gamecontroller, SDLGameControllerButton button)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerGetAppleSFSymbolsNameForButtonNative(gamecontroller, button));
			return ret;
		}

		/// <summary>
		/// Return the sfSymbolsName for a given button on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetAppleSFSymbolsNameForButton(ref SDLGameController gamecontroller, SDLGameControllerButton button)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerGetAppleSFSymbolsNameForButtonNative((SDLGameController*)pgamecontroller, button);
				return ret;
			}
		}

		/// <summary>
		/// Return the sfSymbolsName for a given button on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetAppleSFSymbolsNameForButtonS(ref SDLGameController gamecontroller, SDLGameControllerButton button)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerGetAppleSFSymbolsNameForButtonNative((SDLGameController*)pgamecontroller, button));
				return ret;
			}
		}

		/// <summary>
		/// Return the sfSymbolsName for a given axis on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GameControllerGetAppleSFSymbolsNameForAxisNative(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGameController*, SDLGameControllerAxis, byte*>)funcTable[610])(gamecontroller, axis);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, SDLGameControllerAxis, nint>)funcTable[610])((nint)gamecontroller, axis);
			#endif
		}

		/// <summary>
		/// Return the sfSymbolsName for a given axis on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetAppleSFSymbolsNameForAxis(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			byte* ret = GameControllerGetAppleSFSymbolsNameForAxisNative(gamecontroller, axis);
			return ret;
		}

		/// <summary>
		/// Return the sfSymbolsName for a given axis on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetAppleSFSymbolsNameForAxisS(SDLGameController* gamecontroller, SDLGameControllerAxis axis)
		{
			string ret = Utils.DecodeStringUTF8(GameControllerGetAppleSFSymbolsNameForAxisNative(gamecontroller, axis));
			return ret;
		}

		/// <summary>
		/// Return the sfSymbolsName for a given axis on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GameControllerGetAppleSFSymbolsNameForAxis(ref SDLGameController gamecontroller, SDLGameControllerAxis axis)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				byte* ret = GameControllerGetAppleSFSymbolsNameForAxisNative((SDLGameController*)pgamecontroller, axis);
				return ret;
			}
		}

		/// <summary>
		/// Return the sfSymbolsName for a given axis on a game controller on Apple<br/>
		/// platforms.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GameControllerGetAppleSFSymbolsNameForAxisS(ref SDLGameController gamecontroller, SDLGameControllerAxis axis)
		{
			fixed (SDLGameController* pgamecontroller = &gamecontroller)
			{
				string ret = Utils.DecodeStringUTF8(GameControllerGetAppleSFSymbolsNameForAxisNative((SDLGameController*)pgamecontroller, axis));
				return ret;
			}
		}

		/// <summary>
		/// Get the number of registered touch devices.<br/>
		/// On some platforms SDL first sees the touch device if it was actually used.<br/>
		/// Therefore SDL_GetNumTouchDevices() may return 0 although devices are<br/>
		/// available. After using all devices at least once the number will be<br/>
		/// correct.<br/>
		/// This was fixed for Android in SDL 2.0.1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumTouchDevicesNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[611])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[611])();
			#endif
		}

		/// <summary>
		/// Get the number of registered touch devices.<br/>
		/// On some platforms SDL first sees the touch device if it was actually used.<br/>
		/// Therefore SDL_GetNumTouchDevices() may return 0 although devices are<br/>
		/// available. After using all devices at least once the number will be<br/>
		/// correct.<br/>
		/// This was fixed for Android in SDL 2.0.1.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetNumTouchDevices()
		{
			int ret = GetNumTouchDevicesNative();
			return ret;
		}

		/// <summary>
		/// Get the touch ID with the given index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static long GetTouchDeviceNative(int index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, long>)funcTable[612])(index);
			#else
			return (long)((delegate* unmanaged[Cdecl]<int, long>)funcTable[612])(index);
			#endif
		}

		/// <summary>
		/// Get the touch ID with the given index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static long GetTouchDevice(int index)
		{
			long ret = GetTouchDeviceNative(index);
			return ret;
		}

		/// <summary>
		/// Get the touch device name as reported from the driver or NULL if the index<br/>
		/// is invalid.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetTouchNameNative(int index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[613])(index);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[613])(index);
			#endif
		}

		/// <summary>
		/// Get the touch device name as reported from the driver or NULL if the index<br/>
		/// is invalid.<br/>
		/// <br/>
		/// </summary>
		public static byte* GetTouchName(int index)
		{
			byte* ret = GetTouchNameNative(index);
			return ret;
		}

		/// <summary>
		/// Get the touch device name as reported from the driver or NULL if the index<br/>
		/// is invalid.<br/>
		/// <br/>
		/// </summary>
		public static string GetTouchNameS(int index)
		{
			string ret = Utils.DecodeStringUTF8(GetTouchNameNative(index));
			return ret;
		}

		/// <summary>
		/// Get the type of the given touch device.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLTouchDeviceType GetTouchDeviceTypeNative(long touchID)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, SDLTouchDeviceType>)funcTable[614])(touchID);
			#else
			return (SDLTouchDeviceType)((delegate* unmanaged[Cdecl]<long, SDLTouchDeviceType>)funcTable[614])(touchID);
			#endif
		}

		/// <summary>
		/// Get the type of the given touch device.<br/>
		/// <br/>
		/// </summary>
		public static SDLTouchDeviceType GetTouchDeviceType(long touchID)
		{
			SDLTouchDeviceType ret = GetTouchDeviceTypeNative(touchID);
			return ret;
		}

		/// <summary>
		/// Get the number of active fingers for a given touch device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumTouchFingersNative(long touchID)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, int>)funcTable[615])(touchID);
			#else
			return (int)((delegate* unmanaged[Cdecl]<long, int>)funcTable[615])(touchID);
			#endif
		}

		/// <summary>
		/// Get the number of active fingers for a given touch device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetNumTouchFingers(long touchID)
		{
			int ret = GetNumTouchFingersNative(touchID);
			return ret;
		}

		/// <summary>
		/// Get the finger object for specified touch device ID and finger index.<br/>
		/// The returned resource is owned by SDL and should not be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLFinger* GetTouchFingerNative(long touchID, int index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, int, SDLFinger*>)funcTable[616])(touchID, index);
			#else
			return (SDLFinger*)((delegate* unmanaged[Cdecl]<long, int, nint>)funcTable[616])(touchID, index);
			#endif
		}

		/// <summary>
		/// Get the finger object for specified touch device ID and finger index.<br/>
		/// The returned resource is owned by SDL and should not be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLFinger* GetTouchFinger(long touchID, int index)
		{
			SDLFinger* ret = GetTouchFingerNative(touchID, index);
			return ret;
		}

		/// <summary>
		/// Begin recording a gesture on a specified touch device or all touch devices.<br/>
		/// If the parameter `touchId` is -1 (i.e., all devices), this function will<br/>
		/// always return 1, regardless of whether there actually are any devices.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RecordGestureNative(long touchId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, int>)funcTable[617])(touchId);
			#else
			return (int)((delegate* unmanaged[Cdecl]<long, int>)funcTable[617])(touchId);
			#endif
		}

		/// <summary>
		/// Begin recording a gesture on a specified touch device or all touch devices.<br/>
		/// If the parameter `touchId` is -1 (i.e., all devices), this function will<br/>
		/// always return 1, regardless of whether there actually are any devices.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int RecordGesture(long touchId)
		{
			int ret = RecordGestureNative(touchId);
			return ret;
		}

		/// <summary>
		/// Save all currently loaded Dollar Gesture templates.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SaveAllDollarTemplatesNative(SDLRWops* dst)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRWops*, int>)funcTable[618])(dst);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[618])((nint)dst);
			#endif
		}

		/// <summary>
		/// Save all currently loaded Dollar Gesture templates.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveAllDollarTemplates(SDLRWops* dst)
		{
			int ret = SaveAllDollarTemplatesNative(dst);
			return ret;
		}

		/// <summary>
		/// Save all currently loaded Dollar Gesture templates.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveAllDollarTemplates(ref SDLRWops dst)
		{
			fixed (SDLRWops* pdst = &dst)
			{
				int ret = SaveAllDollarTemplatesNative((SDLRWops*)pdst);
				return ret;
			}
		}

		/// <summary>
		/// Save a currently loaded Dollar Gesture template.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SaveDollarTemplateNative(long gestureId, SDLRWops* dst)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, SDLRWops*, int>)funcTable[619])(gestureId, dst);
			#else
			return (int)((delegate* unmanaged[Cdecl]<long, nint, int>)funcTable[619])(gestureId, (nint)dst);
			#endif
		}

		/// <summary>
		/// Save a currently loaded Dollar Gesture template.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveDollarTemplate(long gestureId, SDLRWops* dst)
		{
			int ret = SaveDollarTemplateNative(gestureId, dst);
			return ret;
		}

		/// <summary>
		/// Save a currently loaded Dollar Gesture template.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int SaveDollarTemplate(long gestureId, ref SDLRWops dst)
		{
			fixed (SDLRWops* pdst = &dst)
			{
				int ret = SaveDollarTemplateNative(gestureId, (SDLRWops*)pdst);
				return ret;
			}
		}

		/// <summary>
		/// Load Dollar Gesture templates from a file.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LoadDollarTemplatesNative(long touchId, SDLRWops* src)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, SDLRWops*, int>)funcTable[620])(touchId, src);
			#else
			return (int)((delegate* unmanaged[Cdecl]<long, nint, int>)funcTable[620])(touchId, (nint)src);
			#endif
		}

		/// <summary>
		/// Load Dollar Gesture templates from a file.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LoadDollarTemplates(long touchId, SDLRWops* src)
		{
			int ret = LoadDollarTemplatesNative(touchId, src);
			return ret;
		}

		/// <summary>
		/// Load Dollar Gesture templates from a file.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int LoadDollarTemplates(long touchId, ref SDLRWops src)
		{
			fixed (SDLRWops* psrc = &src)
			{
				int ret = LoadDollarTemplatesNative(touchId, (SDLRWops*)psrc);
				return ret;
			}
		}

		/// <summary>
		/// Pump the event loop, gathering events from the input devices.<br/>
		/// This function updates the event queue and internal input device state.<br/>
		/// **WARNING**: This should only be run in the thread that initialized the<br/>
		/// video subsystem, and for extra safety, you should consider only doing those<br/>
		/// things on the main thread in any case.<br/>
		/// SDL_PumpEvents() gathers all the pending input information from devices and<br/>
		/// places it in the event queue. Without calls to SDL_PumpEvents() no events<br/>
		/// would ever be placed on the queue. Often the need for calls to<br/>
		/// SDL_PumpEvents() is hidden from the user since SDL_PollEvent() and<br/>
		/// SDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not<br/>
		/// polling or waiting for events (e.g. you are filtering them), then you must<br/>
		/// call SDL_PumpEvents() to force an event queue update.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PumpEventsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[621])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[621])();
			#endif
		}

		/// <summary>
		/// Pump the event loop, gathering events from the input devices.<br/>
		/// This function updates the event queue and internal input device state.<br/>
		/// **WARNING**: This should only be run in the thread that initialized the<br/>
		/// video subsystem, and for extra safety, you should consider only doing those<br/>
		/// things on the main thread in any case.<br/>
		/// SDL_PumpEvents() gathers all the pending input information from devices and<br/>
		/// places it in the event queue. Without calls to SDL_PumpEvents() no events<br/>
		/// would ever be placed on the queue. Often the need for calls to<br/>
		/// SDL_PumpEvents() is hidden from the user since SDL_PollEvent() and<br/>
		/// SDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not<br/>
		/// polling or waiting for events (e.g. you are filtering them), then you must<br/>
		/// call SDL_PumpEvents() to force an event queue update.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void PumpEvents()
		{
			PumpEventsNative();
		}

		/// <summary>
		/// Check the event queue for messages and optionally return them.<br/>
		/// `action` may be any of the following:<br/>
		/// - `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the<br/>
		/// event queue.<br/>
		/// - `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,<br/>
		/// within the specified minimum and maximum type, will be returned to the<br/>
		/// caller and will _not_ be removed from the queue.<br/>
		/// - `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,<br/>
		/// within the specified minimum and maximum type, will be returned to the<br/>
		/// caller and will be removed from the queue.<br/>
		/// You may have to call SDL_PumpEvents() before calling this function.<br/>
		/// Otherwise, the events may not be ready to be filtered when you call<br/>
		/// SDL_PeepEvents().<br/>
		/// This function is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PeepEventsNative(SDLEvent* events, int numevents, SDLEventaction action, uint minType, uint maxType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEvent*, int, SDLEventaction, uint, uint, int>)funcTable[622])(events, numevents, action, minType, maxType);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, SDLEventaction, uint, uint, int>)funcTable[622])((nint)events, numevents, action, minType, maxType);
			#endif
		}

		/// <summary>
		/// Check the event queue for messages and optionally return them.<br/>
		/// `action` may be any of the following:<br/>
		/// - `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the<br/>
		/// event queue.<br/>
		/// - `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,<br/>
		/// within the specified minimum and maximum type, will be returned to the<br/>
		/// caller and will _not_ be removed from the queue.<br/>
		/// - `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,<br/>
		/// within the specified minimum and maximum type, will be returned to the<br/>
		/// caller and will be removed from the queue.<br/>
		/// You may have to call SDL_PumpEvents() before calling this function.<br/>
		/// Otherwise, the events may not be ready to be filtered when you call<br/>
		/// SDL_PeepEvents().<br/>
		/// This function is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int PeepEvents(SDLEvent* events, int numevents, SDLEventaction action, uint minType, uint maxType)
		{
			int ret = PeepEventsNative(events, numevents, action, minType, maxType);
			return ret;
		}

		/// <summary>
		/// Check the event queue for messages and optionally return them.<br/>
		/// `action` may be any of the following:<br/>
		/// - `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the<br/>
		/// event queue.<br/>
		/// - `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,<br/>
		/// within the specified minimum and maximum type, will be returned to the<br/>
		/// caller and will _not_ be removed from the queue.<br/>
		/// - `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,<br/>
		/// within the specified minimum and maximum type, will be returned to the<br/>
		/// caller and will be removed from the queue.<br/>
		/// You may have to call SDL_PumpEvents() before calling this function.<br/>
		/// Otherwise, the events may not be ready to be filtered when you call<br/>
		/// SDL_PeepEvents().<br/>
		/// This function is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int PeepEvents(ref SDLEvent events, int numevents, SDLEventaction action, uint minType, uint maxType)
		{
			fixed (SDLEvent* pevents = &events)
			{
				int ret = PeepEventsNative((SDLEvent*)pevents, numevents, action, minType, maxType);
				return ret;
			}
		}

		/// <summary>
		/// Check for the existence of a certain event type in the event queue.<br/>
		/// If you need to check for a range of event types, use SDL_HasEvents()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool HasEventNative(uint type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, SDLBool>)funcTable[623])(type);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<uint, SDLBool>)funcTable[623])(type);
			#endif
		}

		/// <summary>
		/// Check for the existence of a certain event type in the event queue.<br/>
		/// If you need to check for a range of event types, use SDL_HasEvents()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasEvent(uint type)
		{
			SDLBool ret = HasEventNative(type);
			return ret;
		}

		/// <summary>
		/// Check for the existence of certain event types in the event queue.<br/>
		/// If you need to check for a single event type, use SDL_HasEvent() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool HasEventsNative(uint minType, uint maxType)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, SDLBool>)funcTable[624])(minType, maxType);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<uint, uint, SDLBool>)funcTable[624])(minType, maxType);
			#endif
		}

		/// <summary>
		/// Check for the existence of certain event types in the event queue.<br/>
		/// If you need to check for a single event type, use SDL_HasEvent() instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool HasEvents(uint minType, uint maxType)
		{
			SDLBool ret = HasEventsNative(minType, maxType);
			return ret;
		}

		/// <summary>
		/// Clear events of a specific type from the event queue.<br/>
		/// This will unconditionally remove any events from the queue that match<br/>
		/// `type`. If you need to remove a range of event types, use SDL_FlushEvents()<br/>
		/// instead.<br/>
		/// It's also normal to just ignore events you don't care about in your event<br/>
		/// loop without calling this function.<br/>
		/// This function only affects currently queued events. If you want to make<br/>
		/// sure that all pending OS events are flushed, you can call SDL_PumpEvents()<br/>
		/// on the main thread immediately before the flush call.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FlushEventNative(uint type)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[625])(type);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[625])(type);
			#endif
		}

		/// <summary>
		/// Clear events of a specific type from the event queue.<br/>
		/// This will unconditionally remove any events from the queue that match<br/>
		/// `type`. If you need to remove a range of event types, use SDL_FlushEvents()<br/>
		/// instead.<br/>
		/// It's also normal to just ignore events you don't care about in your event<br/>
		/// loop without calling this function.<br/>
		/// This function only affects currently queued events. If you want to make<br/>
		/// sure that all pending OS events are flushed, you can call SDL_PumpEvents()<br/>
		/// on the main thread immediately before the flush call.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void FlushEvent(uint type)
		{
			FlushEventNative(type);
		}

		/// <summary>
		/// Clear events of a range of types from the event queue.<br/>
		/// This will unconditionally remove any events from the queue that are in the<br/>
		/// range of `minType` to `maxType`, inclusive. If you need to remove a single<br/>
		/// event type, use SDL_FlushEvent() instead.<br/>
		/// It's also normal to just ignore events you don't care about in your event<br/>
		/// loop without calling this function.<br/>
		/// This function only affects currently queued events. If you want to make<br/>
		/// sure that all pending OS events are flushed, you can call SDL_PumpEvents()<br/>
		/// on the main thread immediately before the flush call.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FlushEventsNative(uint minType, uint maxType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[626])(minType, maxType);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[626])(minType, maxType);
			#endif
		}

		/// <summary>
		/// Clear events of a range of types from the event queue.<br/>
		/// This will unconditionally remove any events from the queue that are in the<br/>
		/// range of `minType` to `maxType`, inclusive. If you need to remove a single<br/>
		/// event type, use SDL_FlushEvent() instead.<br/>
		/// It's also normal to just ignore events you don't care about in your event<br/>
		/// loop without calling this function.<br/>
		/// This function only affects currently queued events. If you want to make<br/>
		/// sure that all pending OS events are flushed, you can call SDL_PumpEvents()<br/>
		/// on the main thread immediately before the flush call.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void FlushEvents(uint minType, uint maxType)
		{
			FlushEventsNative(minType, maxType);
		}

		/// <summary>
		/// Poll for currently pending events.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`. The 1 returned refers to<br/>
		/// this event, immediately stored in the SDL Event structure -- not an event<br/>
		/// to follow.<br/>
		/// If `event` is NULL, it simply returns 1 if there is an event in the queue,<br/>
		/// but will not remove it from the queue.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that set the video mode.<br/>
		/// SDL_PollEvent() is the favored way of receiving system events since it can<br/>
		/// be done from the main loop and does not suspend the main loop while waiting<br/>
		/// on an event to be posted.<br/>
		/// The common practice is to fully process the event queue once every frame,<br/>
		/// usually as a first step before updating the game's state:<br/>
		/// ```c<br/>
		/// while (game_is_still_running) {<br/>
		/// SDL_Event event;<br/>
		/// while (SDL_PollEvent(<br/>
		/// &event<br/>
		/// )) {  // poll until all events are handled!<br/>
		/// // decide what to do with this event.<br/>
		/// }<br/>
		/// // update game state, draw the current frame<br/>
		/// }<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PollEventNative(SDLEvent* evnt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEvent*, int>)funcTable[627])(evnt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[627])((nint)evnt);
			#endif
		}

		/// <summary>
		/// Poll for currently pending events.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`. The 1 returned refers to<br/>
		/// this event, immediately stored in the SDL Event structure -- not an event<br/>
		/// to follow.<br/>
		/// If `event` is NULL, it simply returns 1 if there is an event in the queue,<br/>
		/// but will not remove it from the queue.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that set the video mode.<br/>
		/// SDL_PollEvent() is the favored way of receiving system events since it can<br/>
		/// be done from the main loop and does not suspend the main loop while waiting<br/>
		/// on an event to be posted.<br/>
		/// The common practice is to fully process the event queue once every frame,<br/>
		/// usually as a first step before updating the game's state:<br/>
		/// ```c<br/>
		/// while (game_is_still_running) {<br/>
		/// SDL_Event event;<br/>
		/// while (SDL_PollEvent(<br/>
		/// &event<br/>
		/// )) {  // poll until all events are handled!<br/>
		/// // decide what to do with this event.<br/>
		/// }<br/>
		/// // update game state, draw the current frame<br/>
		/// }<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int PollEvent(SDLEvent* evnt)
		{
			int ret = PollEventNative(evnt);
			return ret;
		}

		/// <summary>
		/// Poll for currently pending events.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`. The 1 returned refers to<br/>
		/// this event, immediately stored in the SDL Event structure -- not an event<br/>
		/// to follow.<br/>
		/// If `event` is NULL, it simply returns 1 if there is an event in the queue,<br/>
		/// but will not remove it from the queue.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that set the video mode.<br/>
		/// SDL_PollEvent() is the favored way of receiving system events since it can<br/>
		/// be done from the main loop and does not suspend the main loop while waiting<br/>
		/// on an event to be posted.<br/>
		/// The common practice is to fully process the event queue once every frame,<br/>
		/// usually as a first step before updating the game's state:<br/>
		/// ```c<br/>
		/// while (game_is_still_running) {<br/>
		/// SDL_Event event;<br/>
		/// while (SDL_PollEvent(<br/>
		/// &event<br/>
		/// )) {  // poll until all events are handled!<br/>
		/// // decide what to do with this event.<br/>
		/// }<br/>
		/// // update game state, draw the current frame<br/>
		/// }<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int PollEvent(ref SDLEvent evnt)
		{
			fixed (SDLEvent* pevnt = &evnt)
			{
				int ret = PollEventNative((SDLEvent*)pevnt);
				return ret;
			}
		}

		/// <summary>
		/// Wait indefinitely for the next available event.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that initialized the video subsystem.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WaitEventNative(SDLEvent* evnt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEvent*, int>)funcTable[628])(evnt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[628])((nint)evnt);
			#endif
		}

		/// <summary>
		/// Wait indefinitely for the next available event.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that initialized the video subsystem.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int WaitEvent(SDLEvent* evnt)
		{
			int ret = WaitEventNative(evnt);
			return ret;
		}

		/// <summary>
		/// Wait indefinitely for the next available event.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that initialized the video subsystem.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int WaitEvent(ref SDLEvent evnt)
		{
			fixed (SDLEvent* pevnt = &evnt)
			{
				int ret = WaitEventNative((SDLEvent*)pevnt);
				return ret;
			}
		}

		/// <summary>
		/// Wait until the specified timeout (in milliseconds) for the next available<br/>
		/// event.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that initialized the video subsystem.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WaitEventTimeoutNative(SDLEvent* evnt, int timeout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEvent*, int, int>)funcTable[629])(evnt, timeout);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[629])((nint)evnt, timeout);
			#endif
		}

		/// <summary>
		/// Wait until the specified timeout (in milliseconds) for the next available<br/>
		/// event.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that initialized the video subsystem.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int WaitEventTimeout(SDLEvent* evnt, int timeout)
		{
			int ret = WaitEventTimeoutNative(evnt, timeout);
			return ret;
		}

		/// <summary>
		/// Wait until the specified timeout (in milliseconds) for the next available<br/>
		/// event.<br/>
		/// If `event` is not NULL, the next event is removed from the queue and stored<br/>
		/// in the SDL_Event structure pointed to by `event`.<br/>
		/// As this function may implicitly call SDL_PumpEvents(), you can only call<br/>
		/// this function in the thread that initialized the video subsystem.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int WaitEventTimeout(ref SDLEvent evnt, int timeout)
		{
			fixed (SDLEvent* pevnt = &evnt)
			{
				int ret = WaitEventTimeoutNative((SDLEvent*)pevnt, timeout);
				return ret;
			}
		}

		/// <summary>
		/// Add an event to the event queue.<br/>
		/// The event queue can actually be used as a two way communication channel.<br/>
		/// Not only can events be read from the queue, but the user can also push<br/>
		/// their own events onto it. `event` is a pointer to the event structure you<br/>
		/// wish to push onto the queue. The event is copied into the queue, and the<br/>
		/// caller may dispose of the memory pointed to after SDL_PushEvent() returns.<br/>
		/// Note: Pushing device input events onto the queue doesn't modify the state<br/>
		/// of the device within SDL.<br/>
		/// This function is thread-safe, and can be called from other threads safely.<br/>
		/// Note: Events pushed onto the queue with SDL_PushEvent() get passed through<br/>
		/// the event filter but events added with SDL_PeepEvents() do not.<br/>
		/// For pushing application-specific events, please use SDL_RegisterEvents() to<br/>
		/// get an event type that does not conflict with other code that also wants<br/>
		/// its own custom event types.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PushEventNative(SDLEvent* evnt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEvent*, int>)funcTable[630])(evnt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[630])((nint)evnt);
			#endif
		}

		/// <summary>
		/// Add an event to the event queue.<br/>
		/// The event queue can actually be used as a two way communication channel.<br/>
		/// Not only can events be read from the queue, but the user can also push<br/>
		/// their own events onto it. `event` is a pointer to the event structure you<br/>
		/// wish to push onto the queue. The event is copied into the queue, and the<br/>
		/// caller may dispose of the memory pointed to after SDL_PushEvent() returns.<br/>
		/// Note: Pushing device input events onto the queue doesn't modify the state<br/>
		/// of the device within SDL.<br/>
		/// This function is thread-safe, and can be called from other threads safely.<br/>
		/// Note: Events pushed onto the queue with SDL_PushEvent() get passed through<br/>
		/// the event filter but events added with SDL_PeepEvents() do not.<br/>
		/// For pushing application-specific events, please use SDL_RegisterEvents() to<br/>
		/// get an event type that does not conflict with other code that also wants<br/>
		/// its own custom event types.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int PushEvent(SDLEvent* evnt)
		{
			int ret = PushEventNative(evnt);
			return ret;
		}

		/// <summary>
		/// Add an event to the event queue.<br/>
		/// The event queue can actually be used as a two way communication channel.<br/>
		/// Not only can events be read from the queue, but the user can also push<br/>
		/// their own events onto it. `event` is a pointer to the event structure you<br/>
		/// wish to push onto the queue. The event is copied into the queue, and the<br/>
		/// caller may dispose of the memory pointed to after SDL_PushEvent() returns.<br/>
		/// Note: Pushing device input events onto the queue doesn't modify the state<br/>
		/// of the device within SDL.<br/>
		/// This function is thread-safe, and can be called from other threads safely.<br/>
		/// Note: Events pushed onto the queue with SDL_PushEvent() get passed through<br/>
		/// the event filter but events added with SDL_PeepEvents() do not.<br/>
		/// For pushing application-specific events, please use SDL_RegisterEvents() to<br/>
		/// get an event type that does not conflict with other code that also wants<br/>
		/// its own custom event types.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int PushEvent(ref SDLEvent evnt)
		{
			fixed (SDLEvent* pevnt = &evnt)
			{
				int ret = PushEventNative((SDLEvent*)pevnt);
				return ret;
			}
		}

		/// <summary>
		/// Set up a filter to process all events before they change internal state and<br/>
		/// are posted to the internal event queue.<br/>
		/// If the filter function returns 1 when called, then the event will be added<br/>
		/// to the internal queue. If it returns 0, then the event will be dropped from<br/>
		/// the queue, but the internal state will still be updated. This allows<br/>
		/// selective filtering of dynamically arriving events.<br/>
		/// **WARNING**: Be very careful of what you do in the event filter function,<br/>
		/// as it may run in a different thread!<br/>
		/// On platforms that support it, if the quit event is generated by an<br/>
		/// interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the<br/>
		/// application at the next event poll.<br/>
		/// There is one caveat when dealing with the ::SDL_QuitEvent event type. The<br/>
		/// event filter is only called when the window manager desires to close the<br/>
		/// application window. If the event filter returns 1, then the window will be<br/>
		/// closed, otherwise the window will remain open if possible.<br/>
		/// Note: Disabled events never make it to the event filter function; see<br/>
		/// SDL_EventState().<br/>
		/// Note: If you just want to inspect events without filtering, you should use<br/>
		/// SDL_AddEventWatch() instead.<br/>
		/// Note: Events pushed onto the queue with SDL_PushEvent() get passed through<br/>
		/// the event filter, but events pushed onto the queue with SDL_PeepEvents() do<br/>
		/// not.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetEventFilterNative(SDLEventFilter filter, void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, SDLEvent*, int>, void*, void>)funcTable[631])((delegate*<void*, SDLEvent*, int>)Utils.GetFunctionPointerForDelegate(filter), userdata);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[631])((nint)Utils.GetFunctionPointerForDelegate(filter), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Set up a filter to process all events before they change internal state and<br/>
		/// are posted to the internal event queue.<br/>
		/// If the filter function returns 1 when called, then the event will be added<br/>
		/// to the internal queue. If it returns 0, then the event will be dropped from<br/>
		/// the queue, but the internal state will still be updated. This allows<br/>
		/// selective filtering of dynamically arriving events.<br/>
		/// **WARNING**: Be very careful of what you do in the event filter function,<br/>
		/// as it may run in a different thread!<br/>
		/// On platforms that support it, if the quit event is generated by an<br/>
		/// interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the<br/>
		/// application at the next event poll.<br/>
		/// There is one caveat when dealing with the ::SDL_QuitEvent event type. The<br/>
		/// event filter is only called when the window manager desires to close the<br/>
		/// application window. If the event filter returns 1, then the window will be<br/>
		/// closed, otherwise the window will remain open if possible.<br/>
		/// Note: Disabled events never make it to the event filter function; see<br/>
		/// SDL_EventState().<br/>
		/// Note: If you just want to inspect events without filtering, you should use<br/>
		/// SDL_AddEventWatch() instead.<br/>
		/// Note: Events pushed onto the queue with SDL_PushEvent() get passed through<br/>
		/// the event filter, but events pushed onto the queue with SDL_PeepEvents() do<br/>
		/// not.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetEventFilter(SDLEventFilter filter, void* userdata)
		{
			SetEventFilterNative(filter, userdata);
		}

		/// <summary>
		/// Query the current event filter.<br/>
		/// This function can be used to "chain" filters, by saving the existing filter<br/>
		/// before replacing it with a function that will call that saved filter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLBool GetEventFilterNative(delegate*<void*, SDLEvent*, int>* filter, void** userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void*, SDLEvent*, int>*, void**, SDLBool>)funcTable[632])(filter, userdata);
			#else
			return (SDLBool)((delegate* unmanaged[Cdecl]<nint, nint, SDLBool>)funcTable[632])((nint)filter, (nint)userdata);
			#endif
		}

		/// <summary>
		/// Query the current event filter.<br/>
		/// This function can be used to "chain" filters, by saving the existing filter<br/>
		/// before replacing it with a function that will call that saved filter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLBool GetEventFilter(delegate*<void*, SDLEvent*, int>* filter, void** userdata)
		{
			SDLBool ret = GetEventFilterNative(filter, userdata);
			return ret;
		}

		/// <summary>
		/// Add a callback to be triggered when an event is added to the event queue.<br/>
		/// `filter` will be called when an event happens, and its return value is<br/>
		/// ignored.<br/>
		/// **WARNING**: Be very careful of what you do in the event filter function,<br/>
		/// as it may run in a different thread!<br/>
		/// If the quit event is generated by a signal (e.g. SIGINT), it will bypass<br/>
		/// the internal queue and be delivered to the watch callback immediately, and<br/>
		/// arrive at the next event poll.<br/>
		/// Note: the callback is called for events posted by the user through<br/>
		/// SDL_PushEvent(), but not for disabled events, nor for events by a filter<br/>
		/// callback set with SDL_SetEventFilter(), nor for events posted by the user<br/>
		/// through SDL_PeepEvents().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void AddEventWatchNative(SDLEventFilter filter, void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, SDLEvent*, int>, void*, void>)funcTable[633])((delegate*<void*, SDLEvent*, int>)Utils.GetFunctionPointerForDelegate(filter), userdata);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[633])((nint)Utils.GetFunctionPointerForDelegate(filter), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Add a callback to be triggered when an event is added to the event queue.<br/>
		/// `filter` will be called when an event happens, and its return value is<br/>
		/// ignored.<br/>
		/// **WARNING**: Be very careful of what you do in the event filter function,<br/>
		/// as it may run in a different thread!<br/>
		/// If the quit event is generated by a signal (e.g. SIGINT), it will bypass<br/>
		/// the internal queue and be delivered to the watch callback immediately, and<br/>
		/// arrive at the next event poll.<br/>
		/// Note: the callback is called for events posted by the user through<br/>
		/// SDL_PushEvent(), but not for disabled events, nor for events by a filter<br/>
		/// callback set with SDL_SetEventFilter(), nor for events posted by the user<br/>
		/// through SDL_PeepEvents().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void AddEventWatch(SDLEventFilter filter, void* userdata)
		{
			AddEventWatchNative(filter, userdata);
		}

		/// <summary>
		/// Remove an event watch callback added with SDL_AddEventWatch().<br/>
		/// This function takes the same input as SDL_AddEventWatch() to identify and<br/>
		/// delete the corresponding callback.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DelEventWatchNative(SDLEventFilter filter, void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, SDLEvent*, int>, void*, void>)funcTable[634])((delegate*<void*, SDLEvent*, int>)Utils.GetFunctionPointerForDelegate(filter), userdata);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[634])((nint)Utils.GetFunctionPointerForDelegate(filter), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Remove an event watch callback added with SDL_AddEventWatch().<br/>
		/// This function takes the same input as SDL_AddEventWatch() to identify and<br/>
		/// delete the corresponding callback.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DelEventWatch(SDLEventFilter filter, void* userdata)
		{
			DelEventWatchNative(filter, userdata);
		}

		/// <summary>
		/// Run a specific filter function on the current event queue, removing any<br/>
		/// events for which the filter returns 0.<br/>
		/// See SDL_SetEventFilter() for more information. Unlike SDL_SetEventFilter(),<br/>
		/// this function does not change the filter permanently, it only uses the<br/>
		/// supplied filter until this function returns.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FilterEventsNative(SDLEventFilter filter, void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<void*, SDLEvent*, int>, void*, void>)funcTable[635])((delegate*<void*, SDLEvent*, int>)Utils.GetFunctionPointerForDelegate(filter), userdata);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[635])((nint)Utils.GetFunctionPointerForDelegate(filter), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Run a specific filter function on the current event queue, removing any<br/>
		/// events for which the filter returns 0.<br/>
		/// See SDL_SetEventFilter() for more information. Unlike SDL_SetEventFilter(),<br/>
		/// this function does not change the filter permanently, it only uses the<br/>
		/// supplied filter until this function returns.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void FilterEvents(SDLEventFilter filter, void* userdata)
		{
			FilterEventsNative(filter, userdata);
		}

		/// <summary>
		/// Set the state of processing events by type.<br/>
		/// `state` may be any of the following:<br/>
		/// - `SDL_QUERY`: returns the current processing state of the specified event<br/>
		/// - `SDL_IGNORE` (aka `SDL_DISABLE`): the event will automatically be dropped<br/>
		/// from the event queue and will not be filtered<br/>
		/// - `SDL_ENABLE`: the event will be processed normally<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte EventStateNative(uint type, int state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, byte>)funcTable[636])(type, state);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, int, byte>)funcTable[636])(type, state);
			#endif
		}

		/// <summary>
		/// Set the state of processing events by type.<br/>
		/// `state` may be any of the following:<br/>
		/// - `SDL_QUERY`: returns the current processing state of the specified event<br/>
		/// - `SDL_IGNORE` (aka `SDL_DISABLE`): the event will automatically be dropped<br/>
		/// from the event queue and will not be filtered<br/>
		/// - `SDL_ENABLE`: the event will be processed normally<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte EventState(uint type, int state)
		{
			byte ret = EventStateNative(type, state);
			return ret;
		}

		/// <summary>
		/// Allocate a set of user-defined events, and return the beginning event<br/>
		/// number for that set of events.<br/>
		/// Calling this function with `numevents` <br/>
		/// <<br/>
		/// = 0 is an error and will return<br/>
		/// (Uint32)-1.<br/>
		/// Note, (Uint32)-1 means the maximum unsigned 32-bit integer value (or<br/>
		/// 0xFFFFFFFF), but is clearer to write.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RegisterEventsNative(int numevents)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, uint>)funcTable[637])(numevents);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, uint>)funcTable[637])(numevents);
			#endif
		}

		/// <summary>
		/// Allocate a set of user-defined events, and return the beginning event<br/>
		/// number for that set of events.<br/>
		/// Calling this function with `numevents` <br/>
		/// <<br/>
		/// = 0 is an error and will return<br/>
		/// (Uint32)-1.<br/>
		/// Note, (Uint32)-1 means the maximum unsigned 32-bit integer value (or<br/>
		/// 0xFFFFFFFF), but is clearer to write.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static uint RegisterEvents(int numevents)
		{
			uint ret = RegisterEventsNative(numevents);
			return ret;
		}

		/// <summary>
		/// Get the directory where the application was run from.<br/>
		/// This is not necessarily a fast call, so you should call this once near<br/>
		/// startup and save the string if you need it.<br/>
		/// **Mac OS X and iOS Specific Functionality**: If the application is in a<br/>
		/// ".app" bundle, this function returns the Resource directory (e.g.<br/>
		/// MyApp.app/Contents/Resources/). This behaviour can be overridden by adding<br/>
		/// a property to the Info.plist file. Adding a string key with the name<br/>
		/// SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the<br/>
		/// behaviour.<br/>
		/// Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an<br/>
		/// application in /Applications/SDLApp/MyApp.app):<br/>
		/// - `resource`: bundle resource directory (the default). For example:<br/>
		/// `/Applications/SDLApp/MyApp.app/Contents/Resources`<br/>
		/// - `bundle`: the Bundle directory. For example:<br/>
		/// `/Applications/SDLApp/MyApp.app/`<br/>
		/// - `parent`: the containing directory of the bundle. For example:<br/>
		/// `/Applications/SDLApp/`<br/>
		/// **Nintendo 3DS Specific Functionality**: This function returns "romfs"<br/>
		/// directory of the application as it is uncommon to store resources outside<br/>
		/// the executable. As such it is not a writable directory.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetBasePathNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*>)funcTable[638])();
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint>)funcTable[638])();
			#endif
		}

		/// <summary>
		/// Get the directory where the application was run from.<br/>
		/// This is not necessarily a fast call, so you should call this once near<br/>
		/// startup and save the string if you need it.<br/>
		/// **Mac OS X and iOS Specific Functionality**: If the application is in a<br/>
		/// ".app" bundle, this function returns the Resource directory (e.g.<br/>
		/// MyApp.app/Contents/Resources/). This behaviour can be overridden by adding<br/>
		/// a property to the Info.plist file. Adding a string key with the name<br/>
		/// SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the<br/>
		/// behaviour.<br/>
		/// Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an<br/>
		/// application in /Applications/SDLApp/MyApp.app):<br/>
		/// - `resource`: bundle resource directory (the default). For example:<br/>
		/// `/Applications/SDLApp/MyApp.app/Contents/Resources`<br/>
		/// - `bundle`: the Bundle directory. For example:<br/>
		/// `/Applications/SDLApp/MyApp.app/`<br/>
		/// - `parent`: the containing directory of the bundle. For example:<br/>
		/// `/Applications/SDLApp/`<br/>
		/// **Nintendo 3DS Specific Functionality**: This function returns "romfs"<br/>
		/// directory of the application as it is uncommon to store resources outside<br/>
		/// the executable. As such it is not a writable directory.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetBasePath()
		{
			byte* ret = GetBasePathNative();
			return ret;
		}

		/// <summary>
		/// Get the directory where the application was run from.<br/>
		/// This is not necessarily a fast call, so you should call this once near<br/>
		/// startup and save the string if you need it.<br/>
		/// **Mac OS X and iOS Specific Functionality**: If the application is in a<br/>
		/// ".app" bundle, this function returns the Resource directory (e.g.<br/>
		/// MyApp.app/Contents/Resources/). This behaviour can be overridden by adding<br/>
		/// a property to the Info.plist file. Adding a string key with the name<br/>
		/// SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the<br/>
		/// behaviour.<br/>
		/// Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an<br/>
		/// application in /Applications/SDLApp/MyApp.app):<br/>
		/// - `resource`: bundle resource directory (the default). For example:<br/>
		/// `/Applications/SDLApp/MyApp.app/Contents/Resources`<br/>
		/// - `bundle`: the Bundle directory. For example:<br/>
		/// `/Applications/SDLApp/MyApp.app/`<br/>
		/// - `parent`: the containing directory of the bundle. For example:<br/>
		/// `/Applications/SDLApp/`<br/>
		/// **Nintendo 3DS Specific Functionality**: This function returns "romfs"<br/>
		/// directory of the application as it is uncommon to store resources outside<br/>
		/// the executable. As such it is not a writable directory.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetBasePathS()
		{
			string ret = Utils.DecodeStringUTF8(GetBasePathNative());
			return ret;
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On Mac OS X, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as it's UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetPrefPathNative(byte* org, byte* app)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)funcTable[639])(org, app);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[639])((nint)org, (nint)app);
			#endif
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On Mac OS X, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as it's UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(byte* org, byte* app)
		{
			byte* ret = GetPrefPathNative(org, app);
			return ret;
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On Mac OS X, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as it's UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(byte* org, byte* app)
		{
			string ret = Utils.DecodeStringUTF8(GetPrefPathNative(org, app));
			return ret;
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On Mac OS X, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as it's UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(ref byte org, byte* app)
		{
			fixed (byte* porg = &org)
			{
				byte* ret = GetPrefPathNative((byte*)porg, app);
				return ret;
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On Mac OS X, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as it's UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// The pointer returned is owned by the caller. Please call SDL_free() on the<br/>
		/// pointer when done with it.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(ref byte org, byte* app)
		{
			fixed (byte* porg = &org)
			{
				string ret = Utils.DecodeStringUTF8(GetPrefPathNative((byte*)porg, app));
				return ret;
			}
		}
	}
}
