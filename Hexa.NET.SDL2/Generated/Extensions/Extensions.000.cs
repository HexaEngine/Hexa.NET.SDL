// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	public static unsafe partial class Extensions
	{
		public static int Close(this SDLIconv cd)
		{
			int ret = SDL.IconvCloseNative(cd);
			return ret;
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, nuint* inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, outbuf, outbytesleft);
			return ret;
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, outbuf, outbytesleft);
				return ret;
			}
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, ref nuint inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, outbuf, outbytesleft);
				return ret;
			}
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, outbuf, outbytesleft);
					return ret;
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, nuint* inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (byte** poutbuf = &outbuf)
			{
				nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, (byte**)poutbuf, outbytesleft);
				return ret;
			}
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, (byte**)poutbuf, outbytesleft);
					return ret;
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, ref nuint inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, (byte**)poutbuf, outbytesleft);
					return ret;
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (byte** poutbuf = &outbuf)
					{
						nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, (byte**)poutbuf, outbytesleft);
						return ret;
					}
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, nuint* inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (nuint* poutbytesleft = &outbytesleft)
			{
				nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, outbuf, (nuint*)poutbytesleft);
				return ret;
			}
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, outbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, ref nuint inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, outbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, outbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, nuint* inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (byte** poutbuf = &outbuf)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, byte** inbuf, ref nuint inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		public static nuint Iconv(this SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (byte** poutbuf = &outbuf)
					{
						fixed (nuint* poutbytesleft = &outbytesleft)
						{
							nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Delete an OpenGL context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DeleteContext(this SDLGLContext context)
		{
			SDL.GLDeleteContextNative(context);
		}

		/// <summary>
		/// Destroy an existing SDL_MetalView object.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Metal_CreateView was<br/>
		/// called after SDL_CreateWindow.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DestroyView(this SDLMetalView view)
		{
			SDL.MetalDestroyViewNative(view);
		}

		/// <summary>
		/// Get a pointer to the backing CAMetalLayer for the given view.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void* GetLayer(this SDLMetalView view)
		{
			void* ret = SDL.MetalGetLayerNative(view);
			return ret;
		}

		public static uint ChooseConfig(this EGLDisplay dpy, int* attribList, EGLConfig* configs, int configSize, int* numConfig)
		{
			uint ret = SDL.EglChooseConfigNative(dpy, attribList, configs, configSize, numConfig);
			return ret;
		}

		public static uint ChooseConfig(this EGLDisplay dpy, ref int attribList, EGLConfig* configs, int configSize, int* numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, configs, configSize, numConfig);
				return ret;
			}
		}

		public static uint ChooseConfig(this EGLDisplay dpy, int* attribList, ref EGLConfig configs, int configSize, int* numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				uint ret = SDL.EglChooseConfigNative(dpy, attribList, (EGLConfig*)pconfigs, configSize, numConfig);
				return ret;
			}
		}

		public static uint ChooseConfig(this EGLDisplay dpy, ref int attribList, ref EGLConfig configs, int configSize, int* numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				fixed (EGLConfig* pconfigs = &configs)
				{
					uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, (EGLConfig*)pconfigs, configSize, numConfig);
					return ret;
				}
			}
		}

		public static uint ChooseConfig(this EGLDisplay dpy, int* attribList, EGLConfig* configs, int configSize, ref int numConfig)
		{
			fixed (int* pnumConfig = &numConfig)
			{
				uint ret = SDL.EglChooseConfigNative(dpy, attribList, configs, configSize, (int*)pnumConfig);
				return ret;
			}
		}

		public static uint ChooseConfig(this EGLDisplay dpy, ref int attribList, EGLConfig* configs, int configSize, ref int numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				fixed (int* pnumConfig = &numConfig)
				{
					uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, configs, configSize, (int*)pnumConfig);
					return ret;
				}
			}
		}

		public static uint ChooseConfig(this EGLDisplay dpy, int* attribList, ref EGLConfig configs, int configSize, ref int numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				fixed (int* pnumConfig = &numConfig)
				{
					uint ret = SDL.EglChooseConfigNative(dpy, attribList, (EGLConfig*)pconfigs, configSize, (int*)pnumConfig);
					return ret;
				}
			}
		}

		public static uint ChooseConfig(this EGLDisplay dpy, ref int attribList, ref EGLConfig configs, int configSize, ref int numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				fixed (EGLConfig* pconfigs = &configs)
				{
					fixed (int* pnumConfig = &numConfig)
					{
						uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, (EGLConfig*)pconfigs, configSize, (int*)pnumConfig);
						return ret;
					}
				}
			}
		}

		public static uint CopyBuffers(this EGLDisplay dpy, EGLSurface surface, nint target)
		{
			uint ret = SDL.EglCopyBuffersNative(dpy, surface, target);
			return ret;
		}

		public static EGLContext CreateContext(this EGLDisplay dpy, EGLConfig config, EGLContext shareContext, int* attribList)
		{
			EGLContext ret = SDL.EglCreateContextNative(dpy, config, shareContext, attribList);
			return ret;
		}

		public static EGLContext CreateContext(this EGLDisplay dpy, EGLConfig config, EGLContext shareContext, ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLContext ret = SDL.EglCreateContextNative(dpy, config, shareContext, (int*)pattribList);
				return ret;
			}
		}

		public static EGLSurface CreatePbufferSurface(this EGLDisplay dpy, EGLConfig config, int* attribList)
		{
			EGLSurface ret = SDL.EglCreatePbufferSurfaceNative(dpy, config, attribList);
			return ret;
		}

		public static EGLSurface CreatePbufferSurface(this EGLDisplay dpy, EGLConfig config, ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePbufferSurfaceNative(dpy, config, (int*)pattribList);
				return ret;
			}
		}

		public static EGLSurface CreatePixmapSurface(this EGLDisplay dpy, EGLConfig config, nint pixmap, int* attribList)
		{
			EGLSurface ret = SDL.EglCreatePixmapSurfaceNative(dpy, config, pixmap, attribList);
			return ret;
		}

		public static EGLSurface CreatePixmapSurface(this EGLDisplay dpy, EGLConfig config, nint pixmap, ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePixmapSurfaceNative(dpy, config, pixmap, (int*)pattribList);
				return ret;
			}
		}

		public static EGLSurface CreateWindowSurface(this EGLDisplay dpy, EGLConfig config, nint win, int* attribList)
		{
			EGLSurface ret = SDL.EglCreateWindowSurfaceNative(dpy, config, win, attribList);
			return ret;
		}

		public static EGLSurface CreateWindowSurface(this EGLDisplay dpy, EGLConfig config, nint win, ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreateWindowSurfaceNative(dpy, config, win, (int*)pattribList);
				return ret;
			}
		}

		public static uint DestroyContext(this EGLDisplay dpy, EGLContext ctx)
		{
			uint ret = SDL.EglDestroyContextNative(dpy, ctx);
			return ret;
		}

		public static uint DestroySurface(this EGLDisplay dpy, EGLSurface surface)
		{
			uint ret = SDL.EglDestroySurfaceNative(dpy, surface);
			return ret;
		}

		public static uint GetConfigAttrib(this EGLDisplay dpy, EGLConfig config, int attribute, int* value)
		{
			uint ret = SDL.EglGetConfigAttribNative(dpy, config, attribute, value);
			return ret;
		}

		public static uint GetConfigAttrib(this EGLDisplay dpy, EGLConfig config, int attribute, ref int value)
		{
			fixed (int* pvalue = &value)
			{
				uint ret = SDL.EglGetConfigAttribNative(dpy, config, attribute, (int*)pvalue);
				return ret;
			}
		}

		public static uint GetConfigs(this EGLDisplay dpy, EGLConfig* configs, int configSize, int* numConfig)
		{
			uint ret = SDL.EglGetConfigsNative(dpy, configs, configSize, numConfig);
			return ret;
		}

		public static uint GetConfigs(this EGLDisplay dpy, ref EGLConfig configs, int configSize, int* numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				uint ret = SDL.EglGetConfigsNative(dpy, (EGLConfig*)pconfigs, configSize, numConfig);
				return ret;
			}
		}

		public static uint GetConfigs(this EGLDisplay dpy, EGLConfig* configs, int configSize, ref int numConfig)
		{
			fixed (int* pnumConfig = &numConfig)
			{
				uint ret = SDL.EglGetConfigsNative(dpy, configs, configSize, (int*)pnumConfig);
				return ret;
			}
		}

		public static uint GetConfigs(this EGLDisplay dpy, ref EGLConfig configs, int configSize, ref int numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				fixed (int* pnumConfig = &numConfig)
				{
					uint ret = SDL.EglGetConfigsNative(dpy, (EGLConfig*)pconfigs, configSize, (int*)pnumConfig);
					return ret;
				}
			}
		}

		public static uint Initialize(this EGLDisplay dpy, int* major, int* minor)
		{
			uint ret = SDL.EglInitializeNative(dpy, major, minor);
			return ret;
		}

		public static uint Initialize(this EGLDisplay dpy, ref int major, int* minor)
		{
			fixed (int* pmajor = &major)
			{
				uint ret = SDL.EglInitializeNative(dpy, (int*)pmajor, minor);
				return ret;
			}
		}

		public static uint Initialize(this EGLDisplay dpy, int* major, ref int minor)
		{
			fixed (int* pminor = &minor)
			{
				uint ret = SDL.EglInitializeNative(dpy, major, (int*)pminor);
				return ret;
			}
		}

		public static uint Initialize(this EGLDisplay dpy, ref int major, ref int minor)
		{
			fixed (int* pmajor = &major)
			{
				fixed (int* pminor = &minor)
				{
					uint ret = SDL.EglInitializeNative(dpy, (int*)pmajor, (int*)pminor);
					return ret;
				}
			}
		}

		public static uint MakeCurrent(this EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
		{
			uint ret = SDL.EglMakeCurrentNative(dpy, draw, read, ctx);
			return ret;
		}

		public static uint QueryContext(this EGLDisplay dpy, EGLContext ctx, int attribute, int* value)
		{
			uint ret = SDL.EglQueryContextNative(dpy, ctx, attribute, value);
			return ret;
		}

		public static uint QueryContext(this EGLDisplay dpy, EGLContext ctx, int attribute, ref int value)
		{
			fixed (int* pvalue = &value)
			{
				uint ret = SDL.EglQueryContextNative(dpy, ctx, attribute, (int*)pvalue);
				return ret;
			}
		}

		public static byte* QueryString(this EGLDisplay dpy, int name)
		{
			byte* ret = SDL.EglQueryStringNative(dpy, name);
			return ret;
		}

		public static string QueryStringS(this EGLDisplay dpy, int name)
		{
			string ret = Utils.DecodeStringUTF8(SDL.EglQueryStringNative(dpy, name));
			return ret;
		}

		public static uint QuerySurface(this EGLDisplay dpy, EGLSurface surface, int attribute, int* value)
		{
			uint ret = SDL.EglQuerySurfaceNative(dpy, surface, attribute, value);
			return ret;
		}

		public static uint QuerySurface(this EGLDisplay dpy, EGLSurface surface, int attribute, ref int value)
		{
			fixed (int* pvalue = &value)
			{
				uint ret = SDL.EglQuerySurfaceNative(dpy, surface, attribute, (int*)pvalue);
				return ret;
			}
		}

		public static uint SwapBuffers(this EGLDisplay dpy, EGLSurface surface)
		{
			uint ret = SDL.EglSwapBuffersNative(dpy, surface);
			return ret;
		}

		public static uint Terminate(this EGLDisplay dpy)
		{
			uint ret = SDL.EglTerminateNative(dpy);
			return ret;
		}

		public static uint BindTexImage(this EGLDisplay dpy, EGLSurface surface, int buffer)
		{
			uint ret = SDL.EglBindTexImageNative(dpy, surface, buffer);
			return ret;
		}

		public static uint ReleaseTexImage(this EGLDisplay dpy, EGLSurface surface, int buffer)
		{
			uint ret = SDL.EglReleaseTexImageNative(dpy, surface, buffer);
			return ret;
		}

		public static uint SurfaceAttrib(this EGLDisplay dpy, EGLSurface surface, int attribute, int value)
		{
			uint ret = SDL.EglSurfaceAttribNative(dpy, surface, attribute, value);
			return ret;
		}

		public static uint SwapInterval(this EGLDisplay dpy, int interval)
		{
			uint ret = SDL.EglSwapIntervalNative(dpy, interval);
			return ret;
		}

		public static EGLSurface CreatePbufferFromClientBuffer(this EGLDisplay dpy, uint buftype, EGLClientBuffer buffer, EGLConfig config, int* attribList)
		{
			EGLSurface ret = SDL.EglCreatePbufferFromClientBufferNative(dpy, buftype, buffer, config, attribList);
			return ret;
		}

		public static EGLSurface CreatePbufferFromClientBuffer(this EGLDisplay dpy, uint buftype, EGLClientBuffer buffer, EGLConfig config, ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePbufferFromClientBufferNative(dpy, buftype, buffer, config, (int*)pattribList);
				return ret;
			}
		}

		public static EGLSync CreateSync(this EGLDisplay dpy, uint type, nint* attribList)
		{
			EGLSync ret = SDL.EglCreateSyncNative(dpy, type, attribList);
			return ret;
		}

		public static EGLSync CreateSync(this EGLDisplay dpy, uint type, ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLSync ret = SDL.EglCreateSyncNative(dpy, type, (nint*)pattribList);
				return ret;
			}
		}

		public static uint DestroySync(this EGLDisplay dpy, EGLSync sync)
		{
			uint ret = SDL.EglDestroySyncNative(dpy, sync);
			return ret;
		}

		public static int ClientWaitSync(this EGLDisplay dpy, EGLSync sync, int flags, ulong timeout)
		{
			int ret = SDL.EglClientWaitSyncNative(dpy, sync, flags, timeout);
			return ret;
		}

		public static uint GetSyncAttrib(this EGLDisplay dpy, EGLSync sync, int attribute, nint* value)
		{
			uint ret = SDL.EglGetSyncAttribNative(dpy, sync, attribute, value);
			return ret;
		}

		public static uint GetSyncAttrib(this EGLDisplay dpy, EGLSync sync, int attribute, ref nint value)
		{
			fixed (nint* pvalue = &value)
			{
				uint ret = SDL.EglGetSyncAttribNative(dpy, sync, attribute, (nint*)pvalue);
				return ret;
			}
		}

		public static EGLImage CreateImage(this EGLDisplay dpy, EGLContext ctx, uint target, EGLClientBuffer buffer, nint* attribList)
		{
			EGLImage ret = SDL.EglCreateImageNative(dpy, ctx, target, buffer, attribList);
			return ret;
		}

		public static EGLImage CreateImage(this EGLDisplay dpy, EGLContext ctx, uint target, EGLClientBuffer buffer, ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLImage ret = SDL.EglCreateImageNative(dpy, ctx, target, buffer, (nint*)pattribList);
				return ret;
			}
		}

		public static uint DestroyImage(this EGLDisplay dpy, EGLImage image)
		{
			uint ret = SDL.EglDestroyImageNative(dpy, image);
			return ret;
		}

		public static EGLSurface CreatePlatformWindowSurface(this EGLDisplay dpy, EGLConfig config, void* nativeWindow, nint* attribList)
		{
			EGLSurface ret = SDL.EglCreatePlatformWindowSurfaceNative(dpy, config, nativeWindow, attribList);
			return ret;
		}

		public static EGLSurface CreatePlatformWindowSurface(this EGLDisplay dpy, EGLConfig config, void* nativeWindow, ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePlatformWindowSurfaceNative(dpy, config, nativeWindow, (nint*)pattribList);
				return ret;
			}
		}

		public static EGLSurface CreatePlatformPixmapSurface(this EGLDisplay dpy, EGLConfig config, void* nativePixmap, nint* attribList)
		{
			EGLSurface ret = SDL.EglCreatePlatformPixmapSurfaceNative(dpy, config, nativePixmap, attribList);
			return ret;
		}

		public static EGLSurface CreatePlatformPixmapSurface(this EGLDisplay dpy, EGLConfig config, void* nativePixmap, ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePlatformPixmapSurfaceNative(dpy, config, nativePixmap, (nint*)pattribList);
				return ret;
			}
		}

		public static uint WaitSync(this EGLDisplay dpy, EGLSync sync, int flags)
		{
			uint ret = SDL.EglWaitSyncNative(dpy, sync, flags);
			return ret;
		}

	}
}
