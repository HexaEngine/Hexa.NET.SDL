// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// A structure containing a template for a Periodic effect.<br/>
	/// The struct handles the following effects:<br/>
	/// - SDL_HAPTIC_SINE<br/>
	/// - SDL_HAPTIC_SQUARE<br/>
	/// - SDL_HAPTIC_TRIANGLE<br/>
	/// - SDL_HAPTIC_SAWTOOTHUP<br/>
	/// - SDL_HAPTIC_SAWTOOTHDOWN<br/>
	/// A periodic effect consists in a wave-shaped effect that repeats itself over<br/>
	/// time. The type determines the shape of the wave and the parameters<br/>
	/// determine the dimensions of the wave.<br/>
	/// Phase is given by hundredth of a degree meaning that giving the phase a<br/>
	/// value of 9000 will displace it 25% of its period. Here are sample values:<br/>
	/// - 0: No phase displacement.<br/>
	/// - 9000: Displaced 25% of its period.<br/>
	/// - 18000: Displaced 50% of its period.<br/>
	/// - 27000: Displaced 75% of its period.<br/>
	/// - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.<br/>
	/// Examples:<br/>
	/// ```<br/>
	/// SDL_HAPTIC_SINE<br/>
	/// __      __      __      __<br/>
	/// /  <br/>
	/// \<br/>
	/// /  <br/>
	/// \<br/>
	/// /  <br/>
	/// \<br/>
	/// /<br/>
	/// /    <br/>
	/// \<br/>
	/// __/    <br/>
	/// \<br/>
	/// __/    <br/>
	/// \<br/>
	/// __/<br/>
	/// SDL_HAPTIC_SQUARE<br/>
	/// __    __    __    __    __<br/>
	/// |  |  |  |  |  |  |  |  |  |<br/>
	/// |  |__|  |__|  |__|  |__|  |<br/>
	/// SDL_HAPTIC_TRIANGLE<br/>
	/// /<br/>
	/// \<br/>
	/// /<br/>
	/// \<br/>
	/// /<br/>
	/// \<br/>
	/// /<br/>
	/// \<br/>
	/// /<br/>
	/// \<br/>
	/// /  <br/>
	/// \<br/>
	/// /  <br/>
	/// \<br/>
	/// /  <br/>
	/// \<br/>
	/// /  <br/>
	/// \<br/>
	/// /<br/>
	/// /    <br/>
	/// \<br/>
	/// /    <br/>
	/// \<br/>
	/// /    <br/>
	/// \<br/>
	/// /    <br/>
	/// \<br/>
	/// /<br/>
	/// SDL_HAPTIC_SAWTOOTHUP<br/>
	/// /|  /|  /|  /|  /|  /|  /|<br/>
	/// / | / | / | / | / | / | / |<br/>
	/// /  |/  |/  |/  |/  |/  |/  |<br/>
	/// SDL_HAPTIC_SAWTOOTHDOWN<br/>
	/// <br/>
	/// \<br/>
	/// |<br/>
	/// \<br/>
	/// |<br/>
	/// \<br/>
	/// |<br/>
	/// \<br/>
	/// |<br/>
	/// \<br/>
	/// |<br/>
	/// \<br/>
	/// |<br/>
	/// \<br/>
	/// |<br/>
	/// <br/>
	/// \<br/>
	/// | <br/>
	/// \<br/>
	/// | <br/>
	/// \<br/>
	/// | <br/>
	/// \<br/>
	/// | <br/>
	/// \<br/>
	/// | <br/>
	/// \<br/>
	/// | <br/>
	/// \<br/>
	/// |<br/>
	/// <br/>
	/// \<br/>
	/// |  <br/>
	/// \<br/>
	/// |  <br/>
	/// \<br/>
	/// |  <br/>
	/// \<br/>
	/// |  <br/>
	/// \<br/>
	/// |  <br/>
	/// \<br/>
	/// |  <br/>
	/// \<br/>
	/// |<br/>
	/// ```<br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLHapticPeriodic
	{
		/// <summary>
		/// SDL_HAPTIC_SINE, SDL_HAPTIC_LEFTRIGHT,<br/>
		/// SDL_HAPTIC_TRIANGLE, SDL_HAPTIC_SAWTOOTHUP or<br/>
		/// SDL_HAPTIC_SAWTOOTHDOWN <br/>
		/// </summary>
		public ushort Type;

		/// <summary>
		/// Direction of the effect. <br/>
		/// </summary>
		public SDLHapticDirection Direction;

		/// <summary>
		/// Duration of the effect. <br/>
		/// </summary>
		public uint Length;

		/// <summary>
		/// Delay before starting the effect. <br/>
		/// </summary>
		public ushort Delay;

		/// <summary>
		/// Button that triggers the effect. <br/>
		/// </summary>
		public ushort Button;

		/// <summary>
		/// How soon it can be triggered again after button. <br/>
		/// </summary>
		public ushort Interval;

		/// <summary>
		/// Period of the wave. <br/>
		/// </summary>
		public ushort Period;

		/// <summary>
		/// Peak value; if negative, equivalent to 180 degrees extra phase shift. <br/>
		/// </summary>
		public short Magnitude;

		/// <summary>
		/// Mean value of the wave. <br/>
		/// </summary>
		public short Offset;

		/// <summary>
		/// Positive phase shift given by hundredth of a degree. <br/>
		/// </summary>
		public ushort Phase;

		/// <summary>
		/// Duration of the attack. <br/>
		/// </summary>
		public ushort AttackLength;

		/// <summary>
		/// Level at the start of the attack. <br/>
		/// </summary>
		public ushort AttackLevel;

		/// <summary>
		/// Duration of the fade. <br/>
		/// </summary>
		public ushort FadeLength;

		/// <summary>
		/// Level at the end of the fade. <br/>
		/// </summary>
		public ushort FadeLevel;


		public unsafe SDLHapticPeriodic(ushort type = default, SDLHapticDirection direction = default, uint length = default, ushort delay = default, ushort button = default, ushort interval = default, ushort period = default, short magnitude = default, short offset = default, ushort phase = default, ushort attackLength = default, ushort attackLevel = default, ushort fadeLength = default, ushort fadeLevel = default)
		{
			Type = type;
			Direction = direction;
			Length = length;
			Delay = delay;
			Button = button;
			Interval = interval;
			Period = period;
			Magnitude = magnitude;
			Offset = offset;
			Phase = phase;
			AttackLength = attackLength;
			AttackLevel = attackLevel;
			FadeLength = fadeLength;
			FadeLevel = fadeLevel;
		}


	}

}
