// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL2
{
	/// <summary>
	/// A structure that contains pixel format information.<br/>
	/// Everything in the pixel format structure is read-only.<br/>
	/// A pixel format has either a palette or masks. If a palette is used `Rmask`,<br/>
	/// `Gmask`, `Bmask`, and `Amask` will be 0.<br/>
	/// An SDL_PixelFormat describes the format of the pixel data stored at the<br/>
	/// `pixels` field of an SDL_Surface. Every surface stores an SDL_PixelFormat<br/>
	/// in the `format` field.<br/>
	/// If you wish to do pixel level modifications on a surface, then<br/>
	/// understanding how SDL stores its color information is essential.<br/>
	/// For information on modern pixel color spaces, see the following Wikipedia<br/>
	/// article: http://en.wikipedia.org/wiki/RGBA_color_space<br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLPixelFormat
	{
		public uint Format;
		public unsafe SDLPalette* Palette;
		public byte BitsPerPixel;
		public byte BytesPerPixel;
		public byte Padding_0;
		public byte Padding_1;
		public uint Rmask;
		public uint Gmask;
		public uint Bmask;
		public uint Amask;
		public byte Rloss;
		public byte Gloss;
		public byte Bloss;
		public byte Aloss;
		public byte Rshift;
		public byte Gshift;
		public byte Bshift;
		public byte Ashift;
		public int Refcount;
		public unsafe SDLPixelFormat* Next;

		public unsafe SDLPixelFormat(uint format = default, SDLPalette* palette = default, byte bitsPerPixel = default, byte bytesPerPixel = default, byte* padding = default, uint rmask = default, uint gmask = default, uint bmask = default, uint amask = default, byte rloss = default, byte gloss = default, byte bloss = default, byte aloss = default, byte rshift = default, byte gshift = default, byte bshift = default, byte ashift = default, int refcount = default, SDLPixelFormat* next = default)
		{
			Format = format;
			Palette = palette;
			BitsPerPixel = bitsPerPixel;
			BytesPerPixel = bytesPerPixel;
			if (padding != default(byte*))
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
			}
			Rmask = rmask;
			Gmask = gmask;
			Bmask = bmask;
			Amask = amask;
			Rloss = rloss;
			Gloss = gloss;
			Bloss = bloss;
			Aloss = aloss;
			Rshift = rshift;
			Gshift = gshift;
			Bshift = bshift;
			Ashift = ashift;
			Refcount = refcount;
			Next = next;
		}

		public unsafe SDLPixelFormat(uint format = default, SDLPalette* palette = default, byte bitsPerPixel = default, byte bytesPerPixel = default, Span<byte> padding = default, uint rmask = default, uint gmask = default, uint bmask = default, uint amask = default, byte rloss = default, byte gloss = default, byte bloss = default, byte aloss = default, byte rshift = default, byte gshift = default, byte bshift = default, byte ashift = default, int refcount = default, SDLPixelFormat* next = default)
		{
			Format = format;
			Palette = palette;
			BitsPerPixel = bitsPerPixel;
			BytesPerPixel = bytesPerPixel;
			if (padding != default(Span<byte>))
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
			}
			Rmask = rmask;
			Gmask = gmask;
			Bmask = bmask;
			Amask = amask;
			Rloss = rloss;
			Gloss = gloss;
			Bloss = bloss;
			Aloss = aloss;
			Rshift = rshift;
			Gshift = gshift;
			Bshift = bshift;
			Ashift = ashift;
			Refcount = refcount;
			Next = next;
		}


	}

}
