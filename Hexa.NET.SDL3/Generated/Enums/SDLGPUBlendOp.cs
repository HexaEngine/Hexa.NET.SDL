// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// Specifies the operator to be used when pixels in a render target are<br/>
	/// blended with existing pixels in the texture.<br/>
	/// The source color is the value written by the fragment shader. The<br/>
	/// destination color is the value currently existing in the texture.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[Flags]
	public enum SDLGPUBlendOp : int
	{
		Invalid = unchecked(0),
		/// <summary>
		/// (source * source_factor) + (destination * destination_factor) <br/>
		/// </summary>
		Add = unchecked(1),

		/// <summary>
		/// (source * source_factor) - (destination * destination_factor) <br/>
		/// </summary>
		Subtract = unchecked(2),

		/// <summary>
		/// (destination * destination_factor) - (source * source_factor) <br/>
		/// </summary>
		ReverseSubtract = unchecked(3),

		/// <summary>
		/// min(source, destination) <br/>
		/// </summary>
		Min = unchecked(4),

		/// <summary>
		/// max(source, destination) <br/>
		/// </summary>
		Max = unchecked(5),
	}
}
