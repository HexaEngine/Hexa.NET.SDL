// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// Description of where standard I/O should be directed when creating a<br/>
	/// process.<br/>
	/// If a standard I/O stream is set to SDL_PROCESS_STDIO_INHERITED, it will go<br/>
	/// to the same place as the application's I/O stream. This is the default for<br/>
	/// standard output and standard error.<br/>
	/// If a standard I/O stream is set to SDL_PROCESS_STDIO_NULL, it is connected<br/>
	/// to `NUL:` on Windows and `/dev/null` on POSIX systems. This is the default<br/>
	/// for standard input.<br/>
	/// If a standard I/O stream is set to SDL_PROCESS_STDIO_APP, it is connected<br/>
	/// to a new SDL_IOStream that is available to the application. Standard input<br/>
	/// will be available as `SDL_PROP_PROCESS_STDIN_POINTER` and allows<br/>
	/// SDL_GetProcessInput(), standard output will be available as<br/>
	/// `SDL_PROP_PROCESS_STDOUT_POINTER` and allows SDL_ReadProcess() and<br/>
	/// SDL_GetProcessOutput(), and standard error will be available as<br/>
	/// `SDL_PROP_PROCESS_STDERR_POINTER` in the properties for the created<br/>
	/// process.<br/>
	/// If a standard I/O stream is set to SDL_PROCESS_STDIO_REDIRECT, it is<br/>
	/// connected to an existing SDL_IOStream provided by the application. Standard<br/>
	/// input is provided using `SDL_PROP_PROCESS_CREATE_STDIN_POINTER`, standard<br/>
	/// output is provided using `SDL_PROP_PROCESS_CREATE_STDOUT_POINTER`, and<br/>
	/// standard error is provided using `SDL_PROP_PROCESS_CREATE_STDERR_POINTER`<br/>
	/// in the creation properties. These existing streams should be closed by the<br/>
	/// application once the new process is created.<br/>
	/// In order to use an SDL_IOStream with SDL_PROCESS_STDIO_REDIRECT, it must<br/>
	/// have `SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER` or<br/>
	/// `SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER` set. This is true for streams<br/>
	/// representing files and process I/O.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[Flags]
	public enum SDLProcessIO : int
	{
		/// <summary>
		/// The I/O stream is inherited from the application. <br/>
		/// </summary>
		StdioInherited = unchecked(0),

		/// <summary>
		/// The I/O stream is ignored. <br/>
		/// </summary>
		StdioNull = unchecked(1),

		/// <summary>
		/// The I/O stream is connected to a new SDL_IOStream that the application can read or write <br/>
		/// </summary>
		StdioApp = unchecked(2),

		/// <summary>
		/// The I/O stream is redirected to an existing SDL_IOStream. <br/>
		/// </summary>
		StdioRedirect = unchecked(3),
	}
}
