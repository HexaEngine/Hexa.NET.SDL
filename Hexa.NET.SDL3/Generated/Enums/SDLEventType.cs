// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// The types of events that can be delivered.<br/>
	/// <br/>
	/// </summary>
	[Flags]
	public enum SDLEventType : int
	{
		/// <summary>
		/// Unused (do not remove) <br/>
		/// </summary>
		First = unchecked(0),

		/// <summary>
		/// User-requested quit <br/>
		/// </summary>
		Quit = unchecked(256),

		/// <summary>
		/// The application is being terminated by the OS. This event must be handled in a callback set with SDL_AddEventWatch().<br/>
		/// Called on iOS in applicationWillTerminate()<br/>
		/// Called on Android in onDestroy()<br/>
		/// </summary>
		Terminating = unchecked(257),

		/// <summary>
		/// The application is low on memory, free memory if possible. This event must be handled in a callback set with SDL_AddEventWatch().<br/>
		/// Called on iOS in applicationDidReceiveMemoryWarning()<br/>
		/// Called on Android in onTrimMemory()<br/>
		/// </summary>
		LowMemory = unchecked(258),

		/// <summary>
		/// The application is about to enter the background. This event must be handled in a callback set with SDL_AddEventWatch().<br/>
		/// Called on iOS in applicationWillResignActive()<br/>
		/// Called on Android in onPause()<br/>
		/// </summary>
		WillEnterBackground = unchecked(259),

		/// <summary>
		/// The application did enter the background and may not get CPU for some time. This event must be handled in a callback set with SDL_AddEventWatch().<br/>
		/// Called on iOS in applicationDidEnterBackground()<br/>
		/// Called on Android in onPause()<br/>
		/// </summary>
		DidEnterBackground = unchecked(260),

		/// <summary>
		/// The application is about to enter the foreground. This event must be handled in a callback set with SDL_AddEventWatch().<br/>
		/// Called on iOS in applicationWillEnterForeground()<br/>
		/// Called on Android in onResume()<br/>
		/// </summary>
		WillEnterForeground = unchecked(261),

		/// <summary>
		/// The application is now interactive. This event must be handled in a callback set with SDL_AddEventWatch().<br/>
		/// Called on iOS in applicationDidBecomeActive()<br/>
		/// Called on Android in onResume()<br/>
		/// </summary>
		DidEnterForeground = unchecked(262),

		/// <summary>
		/// The user's locale preferences have changed. <br/>
		/// </summary>
		LocaleChanged = unchecked(263),

		/// <summary>
		/// The system theme changed <br/>
		/// </summary>
		SystemThemeChanged = unchecked(264),

		/// <summary>
		/// Display orientation has changed to data1 <br/>
		/// </summary>
		DisplayOrientation = unchecked(337),

		/// <summary>
		/// Display has been added to the system <br/>
		/// </summary>
		DisplayAdded = unchecked(338),

		/// <summary>
		/// Display has been removed from the system <br/>
		/// </summary>
		DisplayRemoved = unchecked(339),

		/// <summary>
		/// Display has changed position <br/>
		/// </summary>
		DisplayMoved = unchecked(340),

		/// <summary>
		/// Display has changed desktop mode <br/>
		/// </summary>
		DisplayDesktopModeChanged = unchecked(341),

		/// <summary>
		/// Display has changed current mode <br/>
		/// </summary>
		DisplayCurrentModeChanged = unchecked(342),

		/// <summary>
		/// Display has changed content scale <br/>
		/// </summary>
		DisplayContentScaleChanged = unchecked(343),

		DisplayFirst = DisplayOrientation,
		DisplayLast = DisplayContentScaleChanged,
		/// <summary>
		/// Window has been shown <br/>
		/// </summary>
		WindowShown = unchecked(514),

		/// <summary>
		/// Window has been hidden <br/>
		/// </summary>
		WindowHidden = unchecked(515),

		/// <summary>
		/// Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event <br/>
		/// </summary>
		WindowExposed = unchecked(516),

		/// <summary>
		/// Window has been moved to data1, data2 <br/>
		/// </summary>
		WindowMoved = unchecked(517),

		/// <summary>
		/// Window has been resized to data1xdata2 <br/>
		/// </summary>
		WindowResized = unchecked(518),

		/// <summary>
		/// The pixel size of the window has changed to data1xdata2 <br/>
		/// </summary>
		WindowPixelSizeChanged = unchecked(519),

		/// <summary>
		/// The pixel size of a Metal view associated with the window has changed <br/>
		/// </summary>
		WindowMetalViewResized = unchecked(520),

		/// <summary>
		/// Window has been minimized <br/>
		/// </summary>
		WindowMinimized = unchecked(521),

		/// <summary>
		/// Window has been maximized <br/>
		/// </summary>
		WindowMaximized = unchecked(522),

		/// <summary>
		/// Window has been restored to normal size and position <br/>
		/// </summary>
		WindowRestored = unchecked(523),

		/// <summary>
		/// Window has gained mouse focus <br/>
		/// </summary>
		WindowMouseEnter = unchecked(524),

		/// <summary>
		/// Window has lost mouse focus <br/>
		/// </summary>
		WindowMouseLeave = unchecked(525),

		/// <summary>
		/// Window has gained keyboard focus <br/>
		/// </summary>
		WindowFocusGained = unchecked(526),

		/// <summary>
		/// Window has lost keyboard focus <br/>
		/// </summary>
		WindowFocusLost = unchecked(527),

		/// <summary>
		/// The window manager requests that the window be closed <br/>
		/// </summary>
		WindowCloseRequested = unchecked(528),

		/// <summary>
		/// Window had a hit test that wasn't SDL_HITTEST_NORMAL <br/>
		/// </summary>
		WindowHitTest = unchecked(529),

		/// <summary>
		/// The ICC profile of the window's display has changed <br/>
		/// </summary>
		WindowIccprofChanged = unchecked(530),

		/// <summary>
		/// Window has been moved to display data1 <br/>
		/// </summary>
		WindowDisplayChanged = unchecked(531),

		/// <summary>
		/// Window display scale has been changed <br/>
		/// </summary>
		WindowDisplayScaleChanged = unchecked(532),

		/// <summary>
		/// The window safe area has been changed <br/>
		/// </summary>
		WindowSafeAreaChanged = unchecked(533),

		/// <summary>
		/// The window has been occluded <br/>
		/// </summary>
		WindowOccluded = unchecked(534),

		/// <summary>
		/// The window has entered fullscreen mode <br/>
		/// </summary>
		WindowEnterFullscreen = unchecked(535),

		/// <summary>
		/// The window has left fullscreen mode <br/>
		/// </summary>
		WindowLeaveFullscreen = unchecked(536),

		/// <summary>
		/// The window with the associated ID is being or has been destroyed. If this message is being handled<br/>
		/// in an event watcher, the window handle is still valid and can still be used to retrieve any properties<br/>
		/// associated with the window. Otherwise, the handle has already been destroyed and all resources<br/>
		/// associated with it are invalid <br/>
		/// </summary>
		WindowDestroyed = unchecked(537),

		/// <summary>
		/// Window HDR properties have changed <br/>
		/// </summary>
		WindowHdrStateChanged = unchecked(538),

		WindowFirst = WindowShown,
		WindowLast = WindowHdrStateChanged,
		/// <summary>
		/// Key pressed <br/>
		/// </summary>
		KeyDown = unchecked(768),

		/// <summary>
		/// Key released <br/>
		/// </summary>
		KeyUp = unchecked(769),

		/// <summary>
		/// Keyboard text editing (composition) <br/>
		/// </summary>
		TextEditing = unchecked(770),

		/// <summary>
		/// Keyboard text input <br/>
		/// </summary>
		TextInput = unchecked(771),

		/// <summary>
		/// Keymap changed due to a system event such as an<br/>
		/// input language or keyboard layout change. <br/>
		/// </summary>
		KeymapChanged = unchecked(772),

		/// <summary>
		/// A new keyboard has been inserted into the system <br/>
		/// </summary>
		KeyboardAdded = unchecked(773),

		/// <summary>
		/// A keyboard has been removed <br/>
		/// </summary>
		KeyboardRemoved = unchecked(774),

		/// <summary>
		/// Keyboard text editing candidates <br/>
		/// </summary>
		TextEditingCandidates = unchecked(775),

		/// <summary>
		/// Mouse moved <br/>
		/// </summary>
		MouseMotion = unchecked(1024),

		/// <summary>
		/// Mouse button pressed <br/>
		/// </summary>
		MouseButtonDown = unchecked(1025),

		/// <summary>
		/// Mouse button released <br/>
		/// </summary>
		MouseButtonUp = unchecked(1026),

		/// <summary>
		/// Mouse wheel motion <br/>
		/// </summary>
		MouseWheel = unchecked(1027),

		/// <summary>
		/// A new mouse has been inserted into the system <br/>
		/// </summary>
		MouseAdded = unchecked(1028),

		/// <summary>
		/// A mouse has been removed <br/>
		/// </summary>
		MouseRemoved = unchecked(1029),

		/// <summary>
		/// Joystick axis motion <br/>
		/// </summary>
		JoystickAxisMotion = unchecked(1536),

		/// <summary>
		/// Joystick trackball motion <br/>
		/// </summary>
		JoystickBallMotion = unchecked(1537),

		/// <summary>
		/// Joystick hat position change <br/>
		/// </summary>
		JoystickHatMotion = unchecked(1538),

		/// <summary>
		/// Joystick button pressed <br/>
		/// </summary>
		JoystickButtonDown = unchecked(1539),

		/// <summary>
		/// Joystick button released <br/>
		/// </summary>
		JoystickButtonUp = unchecked(1540),

		/// <summary>
		/// A new joystick has been inserted into the system <br/>
		/// </summary>
		JoystickAdded = unchecked(1541),

		/// <summary>
		/// An opened joystick has been removed <br/>
		/// </summary>
		JoystickRemoved = unchecked(1542),

		/// <summary>
		/// Joystick battery level change <br/>
		/// </summary>
		JoystickBatteryUpdated = unchecked(1543),

		/// <summary>
		/// Joystick update is complete <br/>
		/// </summary>
		JoystickUpdateComplete = unchecked(1544),

		/// <summary>
		/// Gamepad axis motion <br/>
		/// </summary>
		GamepadAxisMotion = unchecked(1616),

		/// <summary>
		/// Gamepad button pressed <br/>
		/// </summary>
		GamepadButtonDown = unchecked(1617),

		/// <summary>
		/// Gamepad button released <br/>
		/// </summary>
		GamepadButtonUp = unchecked(1618),

		/// <summary>
		/// A new gamepad has been inserted into the system <br/>
		/// </summary>
		GamepadAdded = unchecked(1619),

		/// <summary>
		/// A gamepad has been removed <br/>
		/// </summary>
		GamepadRemoved = unchecked(1620),

		/// <summary>
		/// The gamepad mapping was updated <br/>
		/// </summary>
		GamepadRemapped = unchecked(1621),

		/// <summary>
		/// Gamepad touchpad was touched <br/>
		/// </summary>
		GamepadTouchpadDown = unchecked(1622),

		/// <summary>
		/// Gamepad touchpad finger was moved <br/>
		/// </summary>
		GamepadTouchpadMotion = unchecked(1623),

		/// <summary>
		/// Gamepad touchpad finger was lifted <br/>
		/// </summary>
		GamepadTouchpadUp = unchecked(1624),

		/// <summary>
		/// Gamepad sensor was updated <br/>
		/// </summary>
		GamepadSensorUpdate = unchecked(1625),

		/// <summary>
		/// Gamepad update is complete <br/>
		/// </summary>
		GamepadUpdateComplete = unchecked(1626),

		/// <summary>
		/// Gamepad Steam handle has changed <br/>
		/// </summary>
		GamepadSteamHandleUpdated = unchecked(1627),

		/// <summary>
		/// Touch events <br/>
		/// </summary>
		FingerDown = unchecked(1792),

		/// <summary>
		/// Touch events <br/>
		/// </summary>
		FingerUp = unchecked(1793),

		/// <summary>
		/// Touch events <br/>
		/// </summary>
		FingerMotion = unchecked(1794),

		/// <summary>
		/// Touch events <br/>
		/// </summary>
		FingerCanceled = unchecked(1795),

		/// <summary>
		/// The clipboard or primary selection changed <br/>
		/// </summary>
		ClipboardUpdate = unchecked(2304),

		/// <summary>
		/// The system requests a file open <br/>
		/// </summary>
		DropFile = unchecked(4096),

		/// <summary>
		/// text/plain drag-and-drop event <br/>
		/// </summary>
		DropText = unchecked(4097),

		/// <summary>
		/// A new set of drops is beginning (NULL filename) <br/>
		/// </summary>
		DropBegin = unchecked(4098),

		/// <summary>
		/// Current set of drops is now complete (NULL filename) <br/>
		/// </summary>
		DropComplete = unchecked(4099),

		/// <summary>
		/// Position while moving over the window <br/>
		/// </summary>
		DropPosition = unchecked(4100),

		/// <summary>
		/// A new audio device is available <br/>
		/// </summary>
		AudioDeviceAdded = unchecked(4352),

		/// <summary>
		/// An audio device has been removed. <br/>
		/// </summary>
		AudioDeviceRemoved = unchecked(4353),

		/// <summary>
		/// An audio device's format has been changed by the system. <br/>
		/// </summary>
		AudioDeviceFormatChanged = unchecked(4354),

		/// <summary>
		/// A sensor was updated <br/>
		/// </summary>
		SensorUpdate = unchecked(4608),

		/// <summary>
		/// Pressure-sensitive pen has become available <br/>
		/// </summary>
		PenProximityIn = unchecked(4864),

		/// <summary>
		/// Pressure-sensitive pen has become unavailable <br/>
		/// </summary>
		PenProximityOut = unchecked(4865),

		/// <summary>
		/// Pressure-sensitive pen touched drawing surface <br/>
		/// </summary>
		PenDown = unchecked(4866),

		/// <summary>
		/// Pressure-sensitive pen stopped touching drawing surface <br/>
		/// </summary>
		PenUp = unchecked(4867),

		/// <summary>
		/// Pressure-sensitive pen button pressed <br/>
		/// </summary>
		PenButtonDown = unchecked(4868),

		/// <summary>
		/// Pressure-sensitive pen button released <br/>
		/// </summary>
		PenButtonUp = unchecked(4869),

		/// <summary>
		/// Pressure-sensitive pen is moving on the tablet <br/>
		/// </summary>
		PenMotion = unchecked(4870),

		/// <summary>
		/// Pressure-sensitive pen angle/pressure/etc changed <br/>
		/// </summary>
		PenAxis = unchecked(4871),

		/// <summary>
		/// A new camera device is available <br/>
		/// </summary>
		CameraDeviceAdded = unchecked(5120),

		/// <summary>
		/// A camera device has been removed. <br/>
		/// </summary>
		CameraDeviceRemoved = unchecked(5121),

		/// <summary>
		/// A camera device has been approved for use by the user. <br/>
		/// </summary>
		CameraDeviceApproved = unchecked(5122),

		/// <summary>
		/// A camera device has been denied for use by the user. <br/>
		/// </summary>
		CameraDeviceDenied = unchecked(5123),

		/// <summary>
		/// The render targets have been reset and their contents need to be updated <br/>
		/// </summary>
		RenderTargetsReset = unchecked(8192),

		/// <summary>
		/// The device has been reset and all textures need to be recreated <br/>
		/// </summary>
		RenderDeviceReset = unchecked(8193),

		/// <summary>
		/// The device has been lost and can't be recovered. <br/>
		/// </summary>
		RenderDeviceLost = unchecked(8194),

		/// <summary>
		/// Reserved events for private platforms <br/>
		/// </summary>
		Private0 = unchecked(16384),

		/// <summary>
		/// Reserved events for private platforms <br/>
		/// </summary>
		Private1 = unchecked(16385),

		/// <summary>
		/// Reserved events for private platforms <br/>
		/// </summary>
		Private2 = unchecked(16386),

		/// <summary>
		/// Reserved events for private platforms <br/>
		/// </summary>
		Private3 = unchecked(16387),

		/// <summary>
		/// Signals the end of an event poll cycle <br/>
		/// </summary>
		PollSentinel = unchecked(32512),

		/// <summary>
		/// Events SDL_EVENT_USER through SDL_EVENT_LAST are for your use,<br/>
		/// and should be allocated with SDL_RegisterEvents()<br/>
		/// </summary>
		User = unchecked(32768),

		/// <summary>
		/// This last event is only for bounding internal arrays<br/>
		/// </summary>
		Last = unchecked(65535),

		/// <summary>
		/// This just makes sure the enum is the size of Uint32 <br/>
		/// </summary>
		EnumPadding = unchecked(2147483647),
	}
}
