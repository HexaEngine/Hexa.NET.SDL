// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// Pixel format.<br/>
	/// SDL's pixel formats have the following naming convention:<br/>
	/// - Names with a list of components and a single bit count, such as RGB24 and<br/>
	/// ABGR32, define a platform-independent encoding into bytes in the order<br/>
	/// specified. For example, in RGB24 data, each pixel is encoded in 3 bytes<br/>
	/// (red, green, blue) in that order, and in ABGR32 data, each pixel is<br/>
	/// encoded in 4 bytes alpha, blue, green, red) in that order. Use these<br/>
	/// names if the property of a format that is important to you is the order<br/>
	/// of the bytes in memory or on disk.<br/>
	/// - Names with a bit count per component, such as ARGB8888 and XRGB1555, are<br/>
	/// "packed" into an appropriately-sized integer in the platform's native<br/>
	/// endianness. For example, ARGB8888 is a sequence of 32-bit integers; in<br/>
	/// each integer, the most significant bits are alpha, and the least<br/>
	/// significant bits are blue. On a little-endian CPU such as x86, the least<br/>
	/// significant bits of each integer are arranged first in memory, but on a<br/>
	/// big-endian CPU such as s390x, the most significant bits are arranged<br/>
	/// first. Use these names if the property of a format that is important to<br/>
	/// you is the meaning of each bit position within a native-endianness<br/>
	/// integer.<br/>
	/// - In indexed formats such as INDEX4LSB, each pixel is represented by<br/>
	/// encoding an index into the palette into the indicated number of bits,<br/>
	/// with multiple pixels packed into each byte if appropriate. In LSB<br/>
	/// formats, the first (leftmost) pixel is stored in the least-significant<br/>
	/// bits of the byte; in MSB formats, it's stored in the most-significant<br/>
	/// bits. INDEX8 does not need LSB/MSB variants, because each pixel exactly<br/>
	/// fills one byte.<br/>
	/// The 32-bit byte-array encodings such as RGBA32 are aliases for the<br/>
	/// appropriate 8888 encoding for the current platform. For example, RGBA32 is<br/>
	/// an alias for ABGR8888 on little-endian CPUs like x86, or an alias for<br/>
	/// RGBA8888 on big-endian CPUs.<br/>
	/// <br/>
	/// </summary>
	[Flags]
	public enum SDLPixelFormat : int
	{
		Unknown = unchecked(0),
		Index1Lsb = unchecked((int)0x11100100u),
		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0, 1, 0), <br/>
		/// </summary>
		Index1Msb = unchecked((int)0x11200100u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0, 1, 0), <br/>
		/// </summary>
		Index2Lsb = unchecked((int)0x1c100200u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_4321, 0, 2, 0), <br/>
		/// </summary>
		Index2Msb = unchecked((int)0x1c200200u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_1234, 0, 2, 0), <br/>
		/// </summary>
		Index4Lsb = unchecked((int)0x12100400u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0, 4, 0), <br/>
		/// </summary>
		Index4Msb = unchecked((int)0x12200400u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0, 4, 0), <br/>
		/// </summary>
		Index8 = unchecked((int)0x13000801u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1), <br/>
		/// </summary>
		Rgb332 = unchecked((int)0x14110801u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_332, 8, 1), <br/>
		/// </summary>
		Xrgb4444 = unchecked((int)0x15120c02u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_4444, 12, 2), <br/>
		/// </summary>
		Xbgr4444 = unchecked((int)0x15520c02u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_4444, 12, 2), <br/>
		/// </summary>
		Xrgb1555 = unchecked((int)0x15130f02u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_1555, 15, 2), <br/>
		/// </summary>
		Xbgr1555 = unchecked((int)0x15530f02u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_1555, 15, 2), <br/>
		/// </summary>
		Argb4444 = unchecked((int)0x15321002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_4444, 16, 2), <br/>
		/// </summary>
		Rgba4444 = unchecked((int)0x15421002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_4444, 16, 2), <br/>
		/// </summary>
		Abgr4444 = unchecked((int)0x15721002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_4444, 16, 2), <br/>
		/// </summary>
		Bgra4444 = unchecked((int)0x15821002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_4444, 16, 2), <br/>
		/// </summary>
		Argb1555 = unchecked((int)0x15331002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_1555, 16, 2), <br/>
		/// </summary>
		Rgba5551 = unchecked((int)0x15441002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_5551, 16, 2), <br/>
		/// </summary>
		Abgr1555 = unchecked((int)0x15731002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_1555, 16, 2), <br/>
		/// </summary>
		Bgra5551 = unchecked((int)0x15841002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_5551, 16, 2), <br/>
		/// </summary>
		Rgb565 = unchecked((int)0x15151002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_565, 16, 2), <br/>
		/// </summary>
		Bgr565 = unchecked((int)0x15551002u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_565, 16, 2), <br/>
		/// </summary>
		Rgb24 = unchecked((int)0x17101803u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0, 24, 3), <br/>
		/// </summary>
		Bgr24 = unchecked((int)0x17401803u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0, 24, 3), <br/>
		/// </summary>
		Xrgb8888 = unchecked((int)0x16161804u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_8888, 24, 4), <br/>
		/// </summary>
		Rgbx8888 = unchecked((int)0x16261804u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX, SDL_PACKEDLAYOUT_8888, 24, 4), <br/>
		/// </summary>
		Xbgr8888 = unchecked((int)0x16561804u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_8888, 24, 4), <br/>
		/// </summary>
		Bgrx8888 = unchecked((int)0x16661804u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX, SDL_PACKEDLAYOUT_8888, 24, 4), <br/>
		/// </summary>
		Argb8888 = unchecked((int)0x16362004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_8888, 32, 4), <br/>
		/// </summary>
		Rgba8888 = unchecked((int)0x16462004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4), <br/>
		/// </summary>
		Abgr8888 = unchecked((int)0x16762004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_8888, 32, 4), <br/>
		/// </summary>
		Bgra8888 = unchecked((int)0x16862004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_8888, 32, 4), <br/>
		/// </summary>
		Xrgb2101010 = unchecked((int)0x16172004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_2101010, 32, 4), <br/>
		/// </summary>
		Xbgr2101010 = unchecked((int)0x16572004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_2101010, 32, 4), <br/>
		/// </summary>
		Argb2101010 = unchecked((int)0x16372004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_2101010, 32, 4), <br/>
		/// </summary>
		Abgr2101010 = unchecked((int)0x16772004u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_2101010, 32, 4), <br/>
		/// </summary>
		Rgb48 = unchecked((int)0x18103006u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGB, 0, 48, 6), <br/>
		/// </summary>
		Bgr48 = unchecked((int)0x18403006u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGR, 0, 48, 6), <br/>
		/// </summary>
		Rgba64 = unchecked((int)0x18204008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGBA, 0, 64, 8), <br/>
		/// </summary>
		Argb64 = unchecked((int)0x18304008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ARGB, 0, 64, 8), <br/>
		/// </summary>
		Bgra64 = unchecked((int)0x18504008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGRA, 0, 64, 8), <br/>
		/// </summary>
		Abgr64 = unchecked((int)0x18604008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ABGR, 0, 64, 8), <br/>
		/// </summary>
		Rgb48Float = unchecked((int)0x1a103006u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGB, 0, 48, 6), <br/>
		/// </summary>
		Bgr48Float = unchecked((int)0x1a403006u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGR, 0, 48, 6), <br/>
		/// </summary>
		Rgba64Float = unchecked((int)0x1a204008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGBA, 0, 64, 8), <br/>
		/// </summary>
		Argb64Float = unchecked((int)0x1a304008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ARGB, 0, 64, 8), <br/>
		/// </summary>
		Bgra64Float = unchecked((int)0x1a504008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGRA, 0, 64, 8), <br/>
		/// </summary>
		Abgr64Float = unchecked((int)0x1a604008u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ABGR, 0, 64, 8), <br/>
		/// </summary>
		Rgb96Float = unchecked((int)0x1b10600cu),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGB, 0, 96, 12), <br/>
		/// </summary>
		Bgr96Float = unchecked((int)0x1b40600cu),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGR, 0, 96, 12), <br/>
		/// </summary>
		Rgba128Float = unchecked((int)0x1b208010u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGBA, 0, 128, 16), <br/>
		/// </summary>
		Argb128Float = unchecked((int)0x1b308010u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ARGB, 0, 128, 16), <br/>
		/// </summary>
		Bgra128Float = unchecked((int)0x1b508010u),

		/// <summary>
		/// SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGRA, 0, 128, 16), <br/>
		/// </summary>
		Abgr128Float = unchecked((int)0x1b608010u),

		/// <summary>
		/// Planar mode: Y + V + U  (3 planes) <br/>
		/// </summary>
		Yv12 = unchecked((int)0x32315659u),

		/// <summary>
		/// Planar mode: Y + U + V  (3 planes) <br/>
		/// </summary>
		Iyuv = unchecked((int)0x56555949u),

		/// <summary>
		/// Packed mode: Y0+U0+Y1+V0 (1 plane) <br/>
		/// </summary>
		Yuy2 = unchecked((int)0x32595559u),

		/// <summary>
		/// Packed mode: U0+Y0+V0+Y1 (1 plane) <br/>
		/// </summary>
		Uyvy = unchecked((int)0x59565955u),

		/// <summary>
		/// Packed mode: Y0+V0+Y1+U0 (1 plane) <br/>
		/// </summary>
		Yvyu = unchecked((int)0x55595659u),

		/// <summary>
		/// Planar mode: Y + U/V interleaved  (2 planes) <br/>
		/// </summary>
		Nv12 = unchecked((int)0x3231564eu),

		/// <summary>
		/// Planar mode: Y + V/U interleaved  (2 planes) <br/>
		/// </summary>
		Nv21 = unchecked((int)0x3132564eu),

		/// <summary>
		/// Planar mode: Y + U/V interleaved  (2 planes) <br/>
		/// </summary>
		P010 = unchecked((int)0x30313050u),

		/// <summary>
		/// Android video texture format <br/>
		/// </summary>
		ExternalOes = unchecked((int)0x2053454fu),

		/// <summary>
		/// Motion JPEG <br/>
		/// </summary>
		Mjpg = unchecked((int)0x47504a4du),

		Rgba32 = Abgr8888,
		Argb32 = Bgra8888,
		Bgra32 = Argb8888,
		Abgr32 = Rgba8888,
		Rgbx32 = Xbgr8888,
		Xrgb32 = Bgrx8888,
		Bgrx32 = Xrgb8888,
		Xbgr32 = Rgbx8888,
	}
}
