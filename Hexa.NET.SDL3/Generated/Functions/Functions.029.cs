// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Returns a random boundary value for Uint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint32BoundaryValue(10, 20, true) returns 10, 11, 19 or 20<br/>
		/// RandomUint32BoundaryValue(1, 20, false) returns 0 or 21<br/>
		/// RandomUint32BoundaryValue(0, 99, false) returns 100<br/>
		/// RandomUint32BoundaryValue(0, 0xFFFFFFFF, false) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static uint TestRandomUint32BoundaryValue(uint boundary1, uint boundary2, bool validDomain)
		{
			uint ret = TestRandomUint32BoundaryValueNative(boundary1, boundary2, validDomain ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Uint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint64BoundaryValue(10, 20, true) returns 10, 11, 19 or 20<br/>
		/// RandomUint64BoundaryValue(1, 20, false) returns 0 or 21<br/>
		/// RandomUint64BoundaryValue(0, 99, false) returns 100<br/>
		/// RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, false) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong TestRandomUint64BoundaryValueNative(ulong boundary1, ulong boundary2, byte validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong, ulong, byte, ulong>)funcTable[1297])(boundary1, boundary2, validDomain);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<ulong, ulong, byte, ulong>)funcTable[1297])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Uint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomUint64BoundaryValue(10, 20, true) returns 10, 11, 19 or 20<br/>
		/// RandomUint64BoundaryValue(1, 20, false) returns 0 or 21<br/>
		/// RandomUint64BoundaryValue(0, 99, false) returns 100<br/>
		/// RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, false) returns 0 (with error set)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static ulong TestRandomUint64BoundaryValue(ulong boundary1, ulong boundary2, bool validDomain)
		{
			ulong ret = TestRandomUint64BoundaryValueNative(boundary1, boundary2, validDomain ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint8BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint8BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, 99, false) returns 100<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, false) returns SINT8_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static sbyte TestRandomSint8BoundaryValueNative(sbyte boundary1, sbyte boundary2, byte validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<sbyte, sbyte, byte, sbyte>)funcTable[1298])(boundary1, boundary2, validDomain);
			#else
			return (sbyte)((delegate* unmanaged[Cdecl]<sbyte, sbyte, byte, sbyte>)funcTable[1298])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint8 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint8BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint8BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, 99, false) returns 100<br/>
		/// RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, false) returns SINT8_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static sbyte TestRandomSint8BoundaryValue(sbyte boundary1, sbyte boundary2, bool validDomain)
		{
			sbyte ret = TestRandomSint8BoundaryValueNative(boundary1, boundary2, validDomain ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint16BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint16BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, 99, false) returns 100<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, false) returns SINT16_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static short TestRandomSint16BoundaryValueNative(short boundary1, short boundary2, byte validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<short, short, byte, short>)funcTable[1299])(boundary1, boundary2, validDomain);
			#else
			return (short)((delegate* unmanaged[Cdecl]<short, short, byte, short>)funcTable[1299])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint16 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint16BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint16BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, 99, false) returns 100<br/>
		/// RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, false) returns SINT16_MIN (== error value) with error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static short TestRandomSint16BoundaryValue(short boundary1, short boundary2, bool validDomain)
		{
			short ret = TestRandomSint16BoundaryValueNative(boundary1, boundary2, validDomain ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint32BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint32BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, 99, false) returns 100<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, false) returns SINT32_MIN (== error value)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestRandomSint32BoundaryValueNative(int boundary1, int boundary2, byte validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, byte, int>)funcTable[1300])(boundary1, boundary2, validDomain);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, byte, int>)funcTable[1300])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint32 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint32BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint32BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, 99, false) returns 100<br/>
		/// RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, false) returns SINT32_MIN (== error value)<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestRandomSint32BoundaryValue(int boundary1, int boundary2, bool validDomain)
		{
			int ret = TestRandomSint32BoundaryValueNative(boundary1, boundary2, validDomain ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns a random boundary value for Sint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint64BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint64BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, 99, false) returns 100<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, false) returns SINT64_MIN (== error value) and error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static long TestRandomSint64BoundaryValueNative(long boundary1, long boundary2, byte validDomain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, long, byte, long>)funcTable[1301])(boundary1, boundary2, validDomain);
			#else
			return (long)((delegate* unmanaged[Cdecl]<long, long, byte, long>)funcTable[1301])(boundary1, boundary2, validDomain);
			#endif
		}

		/// <summary>
		/// Returns a random boundary value for Sint64 within the given boundaries.<br/>
		/// Boundaries are inclusive, see the usage examples below. If validDomain<br/>
		/// is true, the function will only return valid boundaries, otherwise non-valid<br/>
		/// boundaries are also possible.<br/>
		/// If boundary1 > boundary2, the values are swapped<br/>
		/// Usage examples:<br/>
		/// RandomSint64BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20<br/>
		/// RandomSint64BoundaryValue(-100, -10, false) returns -101 or -9<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, 99, false) returns 100<br/>
		/// RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, false) returns SINT64_MIN (== error value) and error set<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static long TestRandomSint64BoundaryValue(long boundary1, long boundary2, bool validDomain)
		{
			long ret = TestRandomSint64BoundaryValueNative(boundary1, boundary2, validDomain ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Returns integer in range [min, max] (inclusive).<br/>
		/// Min and max values can be negative values.<br/>
		/// If Max in smaller than min, then the values are swapped.<br/>
		/// Min and max are the same value, that value will be returned.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestRandomIntegerInRangeNative(int min, int max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1302])(min, max);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1302])(min, max);
			#endif
		}

		/// <summary>
		/// Returns integer in range [min, max] (inclusive).<br/>
		/// Min and max values can be negative values.<br/>
		/// If Max in smaller than min, then the values are swapped.<br/>
		/// Min and max are the same value, that value will be returned.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestRandomIntegerInRange(int min, int max)
		{
			int ret = TestRandomIntegerInRangeNative(min, max);
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The minimum length for<br/>
		/// the string is 1 character, maximum length for the string is 255<br/>
		/// characters and it can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* TestRandomAsciiStringNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*>)funcTable[1303])();
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1303])();
			#endif
		}

		/// <summary>
		/// Generates random null-terminated string. The minimum length for<br/>
		/// the string is 1 character, maximum length for the string is 255<br/>
		/// characters and it can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// </summary>
		public static byte* TestRandomAsciiString()
		{
			byte* ret = TestRandomAsciiStringNative();
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The minimum length for<br/>
		/// the string is 1 character, maximum length for the string is 255<br/>
		/// characters and it can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// </summary>
		public static string TestRandomAsciiStringS()
		{
			string ret = Utils.DecodeStringUTF8(TestRandomAsciiStringNative());
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The maximum length for<br/>
		/// the string is defined by the maxLength parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* TestRandomAsciiStringWithMaximumLengthNative(int maxLength)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[1304])(maxLength);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[1304])(maxLength);
			#endif
		}

		/// <summary>
		/// Generates random null-terminated string. The maximum length for<br/>
		/// the string is defined by the maxLength parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* TestRandomAsciiStringWithMaximumLength(int maxLength)
		{
			byte* ret = TestRandomAsciiStringWithMaximumLengthNative(maxLength);
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The maximum length for<br/>
		/// the string is defined by the maxLength parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string TestRandomAsciiStringWithMaximumLengthS(int maxLength)
		{
			string ret = Utils.DecodeStringUTF8(TestRandomAsciiStringWithMaximumLengthNative(maxLength));
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The length for<br/>
		/// the string is defined by the size parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* TestRandomAsciiStringOfSizeNative(int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[1305])(size);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[1305])(size);
			#endif
		}

		/// <summary>
		/// Generates random null-terminated string. The length for<br/>
		/// the string is defined by the size parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* TestRandomAsciiStringOfSize(int size)
		{
			byte* ret = TestRandomAsciiStringOfSizeNative(size);
			return ret;
		}

		/// <summary>
		/// Generates random null-terminated string. The length for<br/>
		/// the string is defined by the size parameter.<br/>
		/// String can contain ASCII characters from 32 to 126.<br/>
		/// Note: Returned string needs to be deallocated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string TestRandomAsciiStringOfSizeS(int size)
		{
			string ret = Utils.DecodeStringUTF8(TestRandomAsciiStringOfSizeNative(size));
			return ret;
		}

		/// <summary>
		/// Get the invocation count for the fuzzer since last ...FuzzerInit.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestGetFuzzerInvocationCountNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[1306])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[1306])();
			#endif
		}

		/// <summary>
		/// Get the invocation count for the fuzzer since last ...FuzzerInit.<br/>
		/// <br/>
		/// </summary>
		public static int TestGetFuzzerInvocationCount()
		{
			int ret = TestGetFuzzerInvocationCountNative();
			return ret;
		}

		/// <summary>
		/// Generates a random run seed string for the harness. The generated seed<br/>
		/// will contain alphanumeric characters (0-9A-Z).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* TestGenerateRunSeedNative(byte* buffer, int length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, byte*>)funcTable[1307])(buffer, length);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)funcTable[1307])((nint)buffer, length);
			#endif
		}

		/// <summary>
		/// Generates a random run seed string for the harness. The generated seed<br/>
		/// will contain alphanumeric characters (0-9A-Z).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* TestGenerateRunSeed(byte* buffer, int length)
		{
			byte* ret = TestGenerateRunSeedNative(buffer, length);
			return ret;
		}

		/// <summary>
		/// Generates a random run seed string for the harness. The generated seed<br/>
		/// will contain alphanumeric characters (0-9A-Z).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string TestGenerateRunSeedS(byte* buffer, int length)
		{
			string ret = Utils.DecodeStringUTF8(TestGenerateRunSeedNative(buffer, length));
			return ret;
		}

		/// <summary>
		/// Generates a random run seed string for the harness. The generated seed<br/>
		/// will contain alphanumeric characters (0-9A-Z).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* TestGenerateRunSeed(ref byte buffer, int length)
		{
			fixed (byte* pbuffer = &buffer)
			{
				byte* ret = TestGenerateRunSeedNative((byte*)pbuffer, length);
				return ret;
			}
		}

		/// <summary>
		/// Generates a random run seed string for the harness. The generated seed<br/>
		/// will contain alphanumeric characters (0-9A-Z).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string TestGenerateRunSeedS(ref byte buffer, int length)
		{
			fixed (byte* pbuffer = &buffer)
			{
				string ret = Utils.DecodeStringUTF8(TestGenerateRunSeedNative((byte*)pbuffer, length));
				return ret;
			}
		}

		/// <summary>
		/// Generates a random run seed string for the harness. The generated seed<br/>
		/// will contain alphanumeric characters (0-9A-Z).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* TestGenerateRunSeed(ref string buffer, int length)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = TestGenerateRunSeedNative(pStr0, length);
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Generates a random run seed string for the harness. The generated seed<br/>
		/// will contain alphanumeric characters (0-9A-Z).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string TestGenerateRunSeedS(ref string buffer, int length)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buffer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buffer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buffer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(TestGenerateRunSeedNative(pStr0, length));
			buffer = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Create a new test suite runner, that will execute the given test suites.<br/>
		/// It will register the harness cli arguments to the common SDL state.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLTestTestSuiteRunner* TestCreateTestSuiteRunnerNative(SDLTestCommonState* state, SDLTestTestSuiteReference** testSuites)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestCommonState*, SDLTestTestSuiteReference**, SDLTestTestSuiteRunner*>)funcTable[1308])(state, testSuites);
			#else
			return (SDLTestTestSuiteRunner*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[1308])((nint)state, (nint)testSuites);
			#endif
		}

		/// <summary>
		/// Create a new test suite runner, that will execute the given test suites.<br/>
		/// It will register the harness cli arguments to the common SDL state.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLTestTestSuiteRunner* TestCreateTestSuiteRunner(SDLTestCommonState* state, SDLTestTestSuiteReference** testSuites)
		{
			SDLTestTestSuiteRunner* ret = TestCreateTestSuiteRunnerNative(state, testSuites);
			return ret;
		}

		/// <summary>
		/// Create a new test suite runner, that will execute the given test suites.<br/>
		/// It will register the harness cli arguments to the common SDL state.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLTestTestSuiteRunner* TestCreateTestSuiteRunner(ref SDLTestCommonState state, SDLTestTestSuiteReference** testSuites)
		{
			fixed (SDLTestCommonState* pstate = &state)
			{
				SDLTestTestSuiteRunner* ret = TestCreateTestSuiteRunnerNative((SDLTestCommonState*)pstate, testSuites);
				return ret;
			}
		}

		/// <summary>
		/// Destroy a test suite runner.<br/>
		/// It will unregister the harness cli arguments to the common SDL state.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestDestroyTestSuiteRunnerNative(SDLTestTestSuiteRunner* runner)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestTestSuiteRunner*, void>)funcTable[1309])(runner);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1309])((nint)runner);
			#endif
		}

		/// <summary>
		/// Destroy a test suite runner.<br/>
		/// It will unregister the harness cli arguments to the common SDL state.<br/>
		/// <br/>
		/// </summary>
		public static void TestDestroyTestSuiteRunner(SDLTestTestSuiteRunner* runner)
		{
			TestDestroyTestSuiteRunnerNative(runner);
		}

		/// <summary>
		/// Destroy a test suite runner.<br/>
		/// It will unregister the harness cli arguments to the common SDL state.<br/>
		/// <br/>
		/// </summary>
		public static void TestDestroyTestSuiteRunner(ref SDLTestTestSuiteRunner runner)
		{
			fixed (SDLTestTestSuiteRunner* prunner = &runner)
			{
				TestDestroyTestSuiteRunnerNative((SDLTestTestSuiteRunner*)prunner);
			}
		}

		/// <summary>
		/// Execute a test suite, using the configured run seed, execution key, filter, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TestExecuteTestSuiteRunnerNative(SDLTestTestSuiteRunner* runner)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLTestTestSuiteRunner*, int>)funcTable[1310])(runner);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[1310])((nint)runner);
			#endif
		}

		/// <summary>
		/// Execute a test suite, using the configured run seed, execution key, filter, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestExecuteTestSuiteRunner(SDLTestTestSuiteRunner* runner)
		{
			int ret = TestExecuteTestSuiteRunnerNative(runner);
			return ret;
		}

		/// <summary>
		/// Execute a test suite, using the configured run seed, execution key, filter, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int TestExecuteTestSuiteRunner(ref SDLTestTestSuiteRunner runner)
		{
			fixed (SDLTestTestSuiteRunner* prunner = &runner)
			{
				int ret = TestExecuteTestSuiteRunnerNative((SDLTestTestSuiteRunner*)prunner);
				return ret;
			}
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and INFO priority.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestLogNative(byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)funcTable[1311])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1311])((nint)fmt);
			#endif
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and INFO priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLog(byte* fmt)
		{
			TestLogNative(fmt);
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and INFO priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLog(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TestLogNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and INFO priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLog(ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TestLogNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and INFO priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLog(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestLogNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Prints given prefix and buffer.<br/>
		/// Non-printible characters in the raw data are substituted by printible alternatives.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestLogEscapedStringNative(byte* prefix, void* buffer, nuint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void*, nuint, void>)funcTable[1312])(prefix, buffer, size);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nuint, void>)funcTable[1312])((nint)prefix, (nint)buffer, size);
			#endif
		}

		/// <summary>
		/// Prints given prefix and buffer.<br/>
		/// Non-printible characters in the raw data are substituted by printible alternatives.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogEscapedString(byte* prefix, void* buffer, nuint size)
		{
			TestLogEscapedStringNative(prefix, buffer, size);
		}

		/// <summary>
		/// Prints given prefix and buffer.<br/>
		/// Non-printible characters in the raw data are substituted by printible alternatives.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogEscapedString(ref byte prefix, void* buffer, nuint size)
		{
			fixed (byte* pprefix = &prefix)
			{
				TestLogEscapedStringNative((byte*)pprefix, buffer, size);
			}
		}

		/// <summary>
		/// Prints given prefix and buffer.<br/>
		/// Non-printible characters in the raw data are substituted by printible alternatives.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogEscapedString(ReadOnlySpan<byte> prefix, void* buffer, nuint size)
		{
			fixed (byte* pprefix = prefix)
			{
				TestLogEscapedStringNative((byte*)pprefix, buffer, size);
			}
		}

		/// <summary>
		/// Prints given prefix and buffer.<br/>
		/// Non-printible characters in the raw data are substituted by printible alternatives.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogEscapedString(string prefix, void* buffer, nuint size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (prefix != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(prefix);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(prefix, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestLogEscapedStringNative(pStr0, buffer, size);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and the ERROR priority.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestLogErrorNative(byte* fmt)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)funcTable[1313])(fmt);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1313])((nint)fmt);
			#endif
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and the ERROR priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogError(byte* fmt)
		{
			TestLogErrorNative(fmt);
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and the ERROR priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogError(ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				TestLogErrorNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and the ERROR priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogError(ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				TestLogErrorNative((byte*)pfmt);
			}
		}

		/// <summary>
		/// Prints given message with a timestamp in the TEST category and the ERROR priority.<br/>
		/// <br/>
		/// </summary>
		public static void TestLogError(string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			TestLogErrorNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// initialize the context<br/>
		/// <br/>
		/// Note: The function initializes the message-digest context<br/>
		/// mdContext. Call before each new use of the context -<br/>
		/// all fields are set to zero.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestMd5InitNative(SDLTestMd5Context* mdContext)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestMd5Context*, void>)funcTable[1314])(mdContext);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1314])((nint)mdContext);
			#endif
		}

		/// <summary>
		/// initialize the context<br/>
		/// <br/>
		/// Note: The function initializes the message-digest context<br/>
		/// mdContext. Call before each new use of the context -<br/>
		/// all fields are set to zero.<br/>
		/// </summary>
		public static void TestMd5Init(SDLTestMd5Context* mdContext)
		{
			TestMd5InitNative(mdContext);
		}

		/// <summary>
		/// initialize the context<br/>
		/// <br/>
		/// Note: The function initializes the message-digest context<br/>
		/// mdContext. Call before each new use of the context -<br/>
		/// all fields are set to zero.<br/>
		/// </summary>
		public static void TestMd5Init(ref SDLTestMd5Context mdContext)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				TestMd5InitNative((SDLTestMd5Context*)pmdContext);
			}
		}

		/// <summary>
		/// update digest from variable length data<br/>
		/// <br/>
		/// Note: The function updates the message-digest context to account<br/>
		/// for the presence of each of the characters inBuf[0..inLen-1]<br/>
		/// in the message whose digest is being computed.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestMd5UpdateNative(SDLTestMd5Context* mdContext, byte* inBuf, uint inLen)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestMd5Context*, byte*, uint, void>)funcTable[1315])(mdContext, inBuf, inLen);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, uint, void>)funcTable[1315])((nint)mdContext, (nint)inBuf, inLen);
			#endif
		}

		/// <summary>
		/// update digest from variable length data<br/>
		/// <br/>
		/// Note: The function updates the message-digest context to account<br/>
		/// for the presence of each of the characters inBuf[0..inLen-1]<br/>
		/// in the message whose digest is being computed.<br/>
		/// </summary>
		public static void TestMd5Update(SDLTestMd5Context* mdContext, byte* inBuf, uint inLen)
		{
			TestMd5UpdateNative(mdContext, inBuf, inLen);
		}

		/// <summary>
		/// update digest from variable length data<br/>
		/// <br/>
		/// Note: The function updates the message-digest context to account<br/>
		/// for the presence of each of the characters inBuf[0..inLen-1]<br/>
		/// in the message whose digest is being computed.<br/>
		/// </summary>
		public static void TestMd5Update(ref SDLTestMd5Context mdContext, byte* inBuf, uint inLen)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				TestMd5UpdateNative((SDLTestMd5Context*)pmdContext, inBuf, inLen);
			}
		}

		/// <summary>
		/// update digest from variable length data<br/>
		/// <br/>
		/// Note: The function updates the message-digest context to account<br/>
		/// for the presence of each of the characters inBuf[0..inLen-1]<br/>
		/// in the message whose digest is being computed.<br/>
		/// </summary>
		public static void TestMd5Update(SDLTestMd5Context* mdContext, ref byte inBuf, uint inLen)
		{
			fixed (byte* pinBuf = &inBuf)
			{
				TestMd5UpdateNative(mdContext, (byte*)pinBuf, inLen);
			}
		}

		/// <summary>
		/// update digest from variable length data<br/>
		/// <br/>
		/// Note: The function updates the message-digest context to account<br/>
		/// for the presence of each of the characters inBuf[0..inLen-1]<br/>
		/// in the message whose digest is being computed.<br/>
		/// </summary>
		public static void TestMd5Update(ref SDLTestMd5Context mdContext, ref byte inBuf, uint inLen)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				fixed (byte* pinBuf = &inBuf)
				{
					TestMd5UpdateNative((SDLTestMd5Context*)pmdContext, (byte*)pinBuf, inLen);
				}
			}
		}

		/// <summary>
		/// complete digest computation<br/>
		/// <br/>
		/// Note: The function terminates the message-digest computation and<br/>
		/// ends with the desired message digest in mdContext.digest[0..15].<br/>
		/// Always call before using the digest[] variable.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestMd5FinalNative(SDLTestMd5Context* mdContext)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLTestMd5Context*, void>)funcTable[1316])(mdContext);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1316])((nint)mdContext);
			#endif
		}

		/// <summary>
		/// complete digest computation<br/>
		/// <br/>
		/// Note: The function terminates the message-digest computation and<br/>
		/// ends with the desired message digest in mdContext.digest[0..15].<br/>
		/// Always call before using the digest[] variable.<br/>
		/// </summary>
		public static void TestMd5Final(SDLTestMd5Context* mdContext)
		{
			TestMd5FinalNative(mdContext);
		}

		/// <summary>
		/// complete digest computation<br/>
		/// <br/>
		/// Note: The function terminates the message-digest computation and<br/>
		/// ends with the desired message digest in mdContext.digest[0..15].<br/>
		/// Always call before using the digest[] variable.<br/>
		/// </summary>
		public static void TestMd5Final(ref SDLTestMd5Context mdContext)
		{
			fixed (SDLTestMd5Context* pmdContext = &mdContext)
			{
				TestMd5FinalNative((SDLTestMd5Context*)pmdContext);
			}
		}

		/// <summary>
		/// Start tracking SDL memory allocations<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestTrackAllocationsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1317])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1317])();
			#endif
		}

		/// <summary>
		/// Start tracking SDL memory allocations<br/>
		/// <br/>
		/// </summary>
		public static void TestTrackAllocations()
		{
			TestTrackAllocationsNative();
		}

		/// <summary>
		/// Fill allocations with random data<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestRandFillAllocationsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1318])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1318])();
			#endif
		}

		/// <summary>
		/// Fill allocations with random data<br/>
		/// <br/>
		/// </summary>
		public static void TestRandFillAllocations()
		{
			TestRandFillAllocationsNative();
		}

		/// <summary>
		/// Print a log of any outstanding allocations<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TestLogAllocationsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1319])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1319])();
			#endif
		}

		/// <summary>
		/// Print a log of any outstanding allocations<br/>
		/// <br/>
		/// </summary>
		public static void TestLogAllocations()
		{
			TestLogAllocationsNative();
		}

		/// <summary>
		/// Dynamically load the Vulkan loader library.<br/>
		/// This should be called after initializing the video driver, but before<br/>
		/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>
		/// default library will be loaded upon creation of the first Vulkan window.<br/>
		/// SDL keeps a counter of how many times this function has been successfully<br/>
		/// called, so it is safe to call this function multiple times, so long as it<br/>
		/// is eventually paired with an equivalent number of calls to<br/>
		/// SDL_Vulkan_UnloadLibrary. The `path` argument is ignored unless there is no<br/>
		/// library currently loaded, and and the library isn't actually unloaded until<br/>
		/// there have been an equivalent number of calls to SDL_Vulkan_UnloadLibrary.<br/>
		/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>
		/// of explicitly loading it at run time. This will work with SDL provided the<br/>
		/// application links to a dynamic library and both it and SDL use the same<br/>
		/// search path.<br/>
		/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>
		/// Vulkan functions it uses from the dynamic library using<br/>
		/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>
		/// to the same vulkan loader library the application linked to.<br/>
		/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>
		/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>
		/// process. This is because it is fairly common for Vulkan applications to<br/>
		/// link with libvulkan (and historically MoltenVK was provided as a static<br/>
		/// library). If it is not found, on macOS, SDL will attempt to load<br/>
		/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>
		/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>
		/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>
		/// dynamic framework or .dylib must ensure it is included in its application<br/>
		/// bundle.<br/>
		/// On non-Apple devices, application linking with a static libvulkan is not<br/>
		/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>
		/// library version.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte VulkanLoadLibraryNative(byte* path)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)funcTable[1320])(path);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[1320])((nint)path);
			#endif
		}

		/// <summary>
		/// Dynamically load the Vulkan loader library.<br/>
		/// This should be called after initializing the video driver, but before<br/>
		/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>
		/// default library will be loaded upon creation of the first Vulkan window.<br/>
		/// SDL keeps a counter of how many times this function has been successfully<br/>
		/// called, so it is safe to call this function multiple times, so long as it<br/>
		/// is eventually paired with an equivalent number of calls to<br/>
		/// SDL_Vulkan_UnloadLibrary. The `path` argument is ignored unless there is no<br/>
		/// library currently loaded, and and the library isn't actually unloaded until<br/>
		/// there have been an equivalent number of calls to SDL_Vulkan_UnloadLibrary.<br/>
		/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>
		/// of explicitly loading it at run time. This will work with SDL provided the<br/>
		/// application links to a dynamic library and both it and SDL use the same<br/>
		/// search path.<br/>
		/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>
		/// Vulkan functions it uses from the dynamic library using<br/>
		/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>
		/// to the same vulkan loader library the application linked to.<br/>
		/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>
		/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>
		/// process. This is because it is fairly common for Vulkan applications to<br/>
		/// link with libvulkan (and historically MoltenVK was provided as a static<br/>
		/// library). If it is not found, on macOS, SDL will attempt to load<br/>
		/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>
		/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>
		/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>
		/// dynamic framework or .dylib must ensure it is included in its application<br/>
		/// bundle.<br/>
		/// On non-Apple devices, application linking with a static libvulkan is not<br/>
		/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>
		/// library version.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanLoadLibrary(byte* path)
		{
			byte ret = VulkanLoadLibraryNative(path);
			return ret != 0;
		}

		/// <summary>
		/// Dynamically load the Vulkan loader library.<br/>
		/// This should be called after initializing the video driver, but before<br/>
		/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>
		/// default library will be loaded upon creation of the first Vulkan window.<br/>
		/// SDL keeps a counter of how many times this function has been successfully<br/>
		/// called, so it is safe to call this function multiple times, so long as it<br/>
		/// is eventually paired with an equivalent number of calls to<br/>
		/// SDL_Vulkan_UnloadLibrary. The `path` argument is ignored unless there is no<br/>
		/// library currently loaded, and and the library isn't actually unloaded until<br/>
		/// there have been an equivalent number of calls to SDL_Vulkan_UnloadLibrary.<br/>
		/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>
		/// of explicitly loading it at run time. This will work with SDL provided the<br/>
		/// application links to a dynamic library and both it and SDL use the same<br/>
		/// search path.<br/>
		/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>
		/// Vulkan functions it uses from the dynamic library using<br/>
		/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>
		/// to the same vulkan loader library the application linked to.<br/>
		/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>
		/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>
		/// process. This is because it is fairly common for Vulkan applications to<br/>
		/// link with libvulkan (and historically MoltenVK was provided as a static<br/>
		/// library). If it is not found, on macOS, SDL will attempt to load<br/>
		/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>
		/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>
		/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>
		/// dynamic framework or .dylib must ensure it is included in its application<br/>
		/// bundle.<br/>
		/// On non-Apple devices, application linking with a static libvulkan is not<br/>
		/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>
		/// library version.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanLoadLibrary(ref byte path)
		{
			fixed (byte* ppath = &path)
			{
				byte ret = VulkanLoadLibraryNative((byte*)ppath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Dynamically load the Vulkan loader library.<br/>
		/// This should be called after initializing the video driver, but before<br/>
		/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>
		/// default library will be loaded upon creation of the first Vulkan window.<br/>
		/// SDL keeps a counter of how many times this function has been successfully<br/>
		/// called, so it is safe to call this function multiple times, so long as it<br/>
		/// is eventually paired with an equivalent number of calls to<br/>
		/// SDL_Vulkan_UnloadLibrary. The `path` argument is ignored unless there is no<br/>
		/// library currently loaded, and and the library isn't actually unloaded until<br/>
		/// there have been an equivalent number of calls to SDL_Vulkan_UnloadLibrary.<br/>
		/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>
		/// of explicitly loading it at run time. This will work with SDL provided the<br/>
		/// application links to a dynamic library and both it and SDL use the same<br/>
		/// search path.<br/>
		/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>
		/// Vulkan functions it uses from the dynamic library using<br/>
		/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>
		/// to the same vulkan loader library the application linked to.<br/>
		/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>
		/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>
		/// process. This is because it is fairly common for Vulkan applications to<br/>
		/// link with libvulkan (and historically MoltenVK was provided as a static<br/>
		/// library). If it is not found, on macOS, SDL will attempt to load<br/>
		/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>
		/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>
		/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>
		/// dynamic framework or .dylib must ensure it is included in its application<br/>
		/// bundle.<br/>
		/// On non-Apple devices, application linking with a static libvulkan is not<br/>
		/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>
		/// library version.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanLoadLibrary(ReadOnlySpan<byte> path)
		{
			fixed (byte* ppath = path)
			{
				byte ret = VulkanLoadLibraryNative((byte*)ppath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Dynamically load the Vulkan loader library.<br/>
		/// This should be called after initializing the video driver, but before<br/>
		/// creating any Vulkan windows. If no Vulkan loader library is loaded, the<br/>
		/// default library will be loaded upon creation of the first Vulkan window.<br/>
		/// SDL keeps a counter of how many times this function has been successfully<br/>
		/// called, so it is safe to call this function multiple times, so long as it<br/>
		/// is eventually paired with an equivalent number of calls to<br/>
		/// SDL_Vulkan_UnloadLibrary. The `path` argument is ignored unless there is no<br/>
		/// library currently loaded, and and the library isn't actually unloaded until<br/>
		/// there have been an equivalent number of calls to SDL_Vulkan_UnloadLibrary.<br/>
		/// It is fairly common for Vulkan applications to link with libvulkan instead<br/>
		/// of explicitly loading it at run time. This will work with SDL provided the<br/>
		/// application links to a dynamic library and both it and SDL use the same<br/>
		/// search path.<br/>
		/// If you specify a non-NULL `path`, an application should retrieve all of the<br/>
		/// Vulkan functions it uses from the dynamic library using<br/>
		/// SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points<br/>
		/// to the same vulkan loader library the application linked to.<br/>
		/// On Apple devices, if `path` is NULL, SDL will attempt to find the<br/>
		/// `vkGetInstanceProcAddr` address within all the Mach-O images of the current<br/>
		/// process. This is because it is fairly common for Vulkan applications to<br/>
		/// link with libvulkan (and historically MoltenVK was provided as a static<br/>
		/// library). If it is not found, on macOS, SDL will attempt to load<br/>
		/// `vulkan.framework/vulkan`, `libvulkan.1.dylib`,<br/>
		/// `MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On<br/>
		/// iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a<br/>
		/// dynamic framework or .dylib must ensure it is included in its application<br/>
		/// bundle.<br/>
		/// On non-Apple devices, application linking with a static libvulkan is not<br/>
		/// supported. Either do not link to the Vulkan loader or link to a dynamic<br/>
		/// library version.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanLoadLibrary(string path)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = VulkanLoadLibraryNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Get the address of the `vkGetInstanceProcAddr` function.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// The actual type of the returned function pointer is<br/>
		/// PFN_vkGetInstanceProcAddr, but that isn't available because the Vulkan<br/>
		/// headers are not included here. You should cast the return value of this<br/>
		/// function to that type, e.g.<br/>
		/// `vkGetInstanceProcAddr =<br/>
		/// (PFN_vkGetInstanceProcAddr)SDL_Vulkan_GetVkGetInstanceProcAddr();`<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static delegate*<void> VulkanGetVkGetInstanceProcAddrNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void>>)funcTable[1321])();
			#else
			return (delegate*<void>)((delegate* unmanaged[Cdecl]<nint>)funcTable[1321])();
			#endif
		}

		/// <summary>
		/// Get the address of the `vkGetInstanceProcAddr` function.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// The actual type of the returned function pointer is<br/>
		/// PFN_vkGetInstanceProcAddr, but that isn't available because the Vulkan<br/>
		/// headers are not included here. You should cast the return value of this<br/>
		/// function to that type, e.g.<br/>
		/// `vkGetInstanceProcAddr =<br/>
		/// (PFN_vkGetInstanceProcAddr)SDL_Vulkan_GetVkGetInstanceProcAddr();`<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static delegate*<void> VulkanGetVkGetInstanceProcAddr()
		{
			delegate*<void> ret = VulkanGetVkGetInstanceProcAddrNative();
			return ret;
		}

		/// <summary>
		/// Unload the Vulkan library previously loaded by SDL_Vulkan_LoadLibrary().<br/>
		/// SDL keeps a counter of how many times this function has been called, so it<br/>
		/// is safe to call this function multiple times, so long as it is paired with<br/>
		/// an equivalent number of calls to SDL_Vulkan_LoadLibrary. The library isn't<br/>
		/// actually unloaded until there have been an equivalent number of calls to<br/>
		/// SDL_Vulkan_UnloadLibrary.<br/>
		/// Once the library has actually been unloaded, if any Vulkan instances<br/>
		/// remain, they will likely crash the program. Clean up any existing Vulkan<br/>
		/// resources, and destroy appropriate windows, renderers and GPU devices<br/>
		/// before calling this function.<br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VulkanUnloadLibraryNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1322])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1322])();
			#endif
		}

		/// <summary>
		/// Unload the Vulkan library previously loaded by SDL_Vulkan_LoadLibrary().<br/>
		/// SDL keeps a counter of how many times this function has been called, so it<br/>
		/// is safe to call this function multiple times, so long as it is paired with<br/>
		/// an equivalent number of calls to SDL_Vulkan_LoadLibrary. The library isn't<br/>
		/// actually unloaded until there have been an equivalent number of calls to<br/>
		/// SDL_Vulkan_UnloadLibrary.<br/>
		/// Once the library has actually been unloaded, if any Vulkan instances<br/>
		/// remain, they will likely crash the program. Clean up any existing Vulkan<br/>
		/// resources, and destroy appropriate windows, renderers and GPU devices<br/>
		/// before calling this function.<br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void VulkanUnloadLibrary()
		{
			VulkanUnloadLibraryNative();
		}

		/// <summary>
		/// Get the Vulkan instance extensions needed for vkCreateInstance.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// On return, the variable pointed to by `count` will be set to the number of<br/>
		/// elements returned, suitable for using with<br/>
		/// VkInstanceCreateInfo::enabledExtensionCount, and the returned array can be<br/>
		/// used with VkInstanceCreateInfo::ppEnabledExtensionNames, for calling<br/>
		/// Vulkan's vkCreateInstance API.<br/>
		/// You should not free the returned array; it is owned by SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte** VulkanGetInstanceExtensionsNative(uint* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint*, byte**>)funcTable[1323])(count);
			#else
			return (byte**)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[1323])((nint)count);
			#endif
		}

		/// <summary>
		/// Get the Vulkan instance extensions needed for vkCreateInstance.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// On return, the variable pointed to by `count` will be set to the number of<br/>
		/// elements returned, suitable for using with<br/>
		/// VkInstanceCreateInfo::enabledExtensionCount, and the returned array can be<br/>
		/// used with VkInstanceCreateInfo::ppEnabledExtensionNames, for calling<br/>
		/// Vulkan's vkCreateInstance API.<br/>
		/// You should not free the returned array; it is owned by SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte** VulkanGetInstanceExtensions(uint* count)
		{
			byte** ret = VulkanGetInstanceExtensionsNative(count);
			return ret;
		}

		/// <summary>
		/// Get the Vulkan instance extensions needed for vkCreateInstance.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// On return, the variable pointed to by `count` will be set to the number of<br/>
		/// elements returned, suitable for using with<br/>
		/// VkInstanceCreateInfo::enabledExtensionCount, and the returned array can be<br/>
		/// used with VkInstanceCreateInfo::ppEnabledExtensionNames, for calling<br/>
		/// Vulkan's vkCreateInstance API.<br/>
		/// You should not free the returned array; it is owned by SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte** VulkanGetInstanceExtensions(ref uint count)
		{
			fixed (uint* pcount = &count)
			{
				byte** ret = VulkanGetInstanceExtensionsNative((uint*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte VulkanCreateSurfaceNative(SDLWindow* window, VkInstance instance, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, VkInstance, VkAllocationCallbacks*, VkSurfaceKHR*, byte>)funcTable[1324])(window, instance, allocator, surface);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, VkInstance, nint, nint, byte>)funcTable[1324])((nint)window, instance, (nint)allocator, (nint)surface);
			#endif
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(SDLWindow* window, VkInstance instance, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			byte ret = VulkanCreateSurfaceNative(window, instance, allocator, surface);
			return ret != 0;
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(ref SDLWindow window, VkInstance instance, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, allocator, surface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(SDLWindow* window, VkInstance instance, ref VkAllocationCallbacks allocator, VkSurfaceKHR* surface)
		{
			fixed (VkAllocationCallbacks* pallocator = &allocator)
			{
				byte ret = VulkanCreateSurfaceNative(window, instance, (VkAllocationCallbacks*)pallocator, surface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(ref SDLWindow window, VkInstance instance, ref VkAllocationCallbacks allocator, VkSurfaceKHR* surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (VkAllocationCallbacks* pallocator = &allocator)
				{
					byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, (VkAllocationCallbacks*)pallocator, surface);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(SDLWindow* window, VkInstance instance, VkAllocationCallbacks* allocator, ref VkSurfaceKHR surface)
		{
			fixed (VkSurfaceKHR* psurface = &surface)
			{
				byte ret = VulkanCreateSurfaceNative(window, instance, allocator, (VkSurfaceKHR*)psurface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(ref SDLWindow window, VkInstance instance, VkAllocationCallbacks* allocator, ref VkSurfaceKHR surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (VkSurfaceKHR* psurface = &surface)
				{
					byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, allocator, (VkSurfaceKHR*)psurface);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(SDLWindow* window, VkInstance instance, ref VkAllocationCallbacks allocator, ref VkSurfaceKHR surface)
		{
			fixed (VkAllocationCallbacks* pallocator = &allocator)
			{
				fixed (VkSurfaceKHR* psurface = &surface)
				{
					byte ret = VulkanCreateSurfaceNative(window, instance, (VkAllocationCallbacks*)pallocator, (VkSurfaceKHR*)psurface);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanCreateSurface(ref SDLWindow window, VkInstance instance, ref VkAllocationCallbacks allocator, ref VkSurfaceKHR surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (VkAllocationCallbacks* pallocator = &allocator)
				{
					fixed (VkSurfaceKHR* psurface = &surface)
					{
						byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, (VkAllocationCallbacks*)pallocator, (VkSurfaceKHR*)psurface);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VulkanDestroySurfaceNative(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* allocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void>)funcTable[1325])(instance, surface, allocator);
			#else
			((delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, nint, void>)funcTable[1325])(instance, surface, (nint)allocator);
			#endif
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void VulkanDestroySurface(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* allocator)
		{
			VulkanDestroySurfaceNative(instance, surface, allocator);
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void VulkanDestroySurface(VkInstance instance, VkSurfaceKHR surface, ref VkAllocationCallbacks allocator)
		{
			fixed (VkAllocationCallbacks* pallocator = &allocator)
			{
				VulkanDestroySurfaceNative(instance, surface, (VkAllocationCallbacks*)pallocator);
			}
		}

		/// <summary>
		/// Query support for presentation via a given physical device and queue<br/>
		/// family.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte VulkanGetPresentationSupportNative(VkInstance instance, VkPhysicalDevice physicalDevice, uint queueFamilyIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkInstance, VkPhysicalDevice, uint, byte>)funcTable[1326])(instance, physicalDevice, queueFamilyIndex);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<VkInstance, VkPhysicalDevice, uint, byte>)funcTable[1326])(instance, physicalDevice, queueFamilyIndex);
			#endif
		}

		/// <summary>
		/// Query support for presentation via a given physical device and queue<br/>
		/// family.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool VulkanGetPresentationSupport(VkInstance instance, VkPhysicalDevice physicalDevice, uint queueFamilyIndex)
		{
			byte ret = VulkanGetPresentationSupportNative(instance, physicalDevice, queueFamilyIndex);
			return ret != 0;
		}

	}
}
