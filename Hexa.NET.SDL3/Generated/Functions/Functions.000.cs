// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{
		[NativeName(NativeNameType.Func, "SDL_malloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MallocNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, void*>)funcTable[0])(size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nuint, nint>)funcTable[0])(size);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_malloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Malloc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = MallocNative(size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_calloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* CallocNative([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, nuint, void*>)funcTable[1])(nmemb, size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nuint, nuint, nint>)funcTable[1])(nmemb, size);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_calloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Calloc([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = CallocNative(nmemb, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_realloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* ReallocNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, void*>)funcTable[2])(mem, size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nuint, nint>)funcTable[2])((nint)mem, size);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_realloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Realloc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = ReallocNative(mem, size);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FreeNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)funcTable[3])(mem);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[3])((nint)mem);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Free([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			FreeNative(mem);
		}

		/// <summary>
		/// Get the original set of SDL memory functions.<br/>
		/// This is what SDL_malloc and friends will use by default, if there has been<br/>
		/// no call to SDL_SetMemoryFunctions. This is not necessarily using the C<br/>
		/// runtime's `malloc` functions behind the scenes! Different platforms and<br/>
		/// build configurations might do any number of unexpected things.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetOriginalMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetOriginalMemoryFunctionsNative([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<nuint, void*>*, delegate*<nuint, nuint, void*>*, delegate*<void*, nuint, void*>*, delegate*<void*, void>*, void>)funcTable[4])(mallocFunc, callocFunc, reallocFunc, freeFunc);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[4])((nint)mallocFunc, (nint)callocFunc, (nint)reallocFunc, (nint)freeFunc);
			#endif
		}

		/// <summary>
		/// Get the original set of SDL memory functions.<br/>
		/// This is what SDL_malloc and friends will use by default, if there has been<br/>
		/// no call to SDL_SetMemoryFunctions. This is not necessarily using the C<br/>
		/// runtime's `malloc` functions behind the scenes! Different platforms and<br/>
		/// build configurations might do any number of unexpected things.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetOriginalMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetOriginalMemoryFunctions([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			GetOriginalMemoryFunctionsNative(mallocFunc, callocFunc, reallocFunc, freeFunc);
		}

		/// <summary>
		/// Get the current set of SDL memory functions.<br/>
		/// <br/>
		/// <br/>
		/// This does not hold a lock, so do not call this in the<br/>
		/// unlikely event of a background thread calling<br/>
		/// SDL_SetMemoryFunctions simultaneously.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMemoryFunctionsNative([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<nuint, void*>*, delegate*<nuint, nuint, void*>*, delegate*<void*, nuint, void*>*, delegate*<void*, void>*, void>)funcTable[5])(mallocFunc, callocFunc, reallocFunc, freeFunc);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[5])((nint)mallocFunc, (nint)callocFunc, (nint)reallocFunc, (nint)freeFunc);
			#endif
		}

		/// <summary>
		/// Get the current set of SDL memory functions.<br/>
		/// <br/>
		/// <br/>
		/// This does not hold a lock, so do not call this in the<br/>
		/// unlikely event of a background thread calling<br/>
		/// SDL_SetMemoryFunctions simultaneously.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetMemoryFunctions([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			GetMemoryFunctionsNative(mallocFunc, callocFunc, reallocFunc, freeFunc);
		}

		/// <summary>
		/// Replace SDL's memory allocation functions with a custom set.<br/>
		/// It is not safe to call this function once any allocations have been made,<br/>
		/// as future calls to SDL_free will use the new allocator, even if they came<br/>
		/// from an SDL_malloc made with the old one!<br/>
		/// If used, usually this needs to be the first call made into the SDL library,<br/>
		/// if not the very first thing done at program startup time.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but one<br/>
		/// should not replace the memory functions once any allocations<br/>
		/// are made!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetMemoryFunctionsNative([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func")] SDLMallocFunc mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func")] SDLCallocFunc callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func")] SDLReallocFunc reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func")] SDLFreeFunc freeFunc)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<nuint, void*>, delegate*<nuint, nuint, void*>, delegate*<void*, nuint, void*>, delegate*<void*, void>, int>)funcTable[6])((delegate*<nuint, void*>)Utils.GetFunctionPointerForDelegate(mallocFunc), (delegate*<nuint, nuint, void*>)Utils.GetFunctionPointerForDelegate(callocFunc), (delegate*<void*, nuint, void*>)Utils.GetFunctionPointerForDelegate(reallocFunc), (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(freeFunc));
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[6])((nint)Utils.GetFunctionPointerForDelegate(mallocFunc), (nint)Utils.GetFunctionPointerForDelegate(callocFunc), (nint)Utils.GetFunctionPointerForDelegate(reallocFunc), (nint)Utils.GetFunctionPointerForDelegate(freeFunc));
			#endif
		}

		/// <summary>
		/// Replace SDL's memory allocation functions with a custom set.<br/>
		/// It is not safe to call this function once any allocations have been made,<br/>
		/// as future calls to SDL_free will use the new allocator, even if they came<br/>
		/// from an SDL_malloc made with the old one!<br/>
		/// If used, usually this needs to be the first call made into the SDL library,<br/>
		/// if not the very first thing done at program startup time.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but one<br/>
		/// should not replace the memory functions once any allocations<br/>
		/// are made!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetMemoryFunctions([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func")] SDLMallocFunc mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func")] SDLCallocFunc callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func")] SDLReallocFunc reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func")] SDLFreeFunc freeFunc)
		{
			int ret = SetMemoryFunctionsNative(mallocFunc, callocFunc, reallocFunc, freeFunc);
			return ret;
		}

		/// <summary>
		/// Allocate memory aligned to a specific value.<br/>
		/// If `alignment` is less than the size of `void *`, then it will be increased<br/>
		/// to match that.<br/>
		/// The returned memory address will be a multiple of the alignment value, and<br/>
		/// the amount of memory allocated will be a multiple of the alignment value.<br/>
		/// The memory returned by this function must be freed with SDL_aligned_free(),<br/>
		/// and _not_ SDL_free.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* AlignedAllocNative([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, nuint, void*>)funcTable[7])(alignment, size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nuint, nuint, nint>)funcTable[7])(alignment, size);
			#endif
		}

		/// <summary>
		/// Allocate memory aligned to a specific value.<br/>
		/// If `alignment` is less than the size of `void *`, then it will be increased<br/>
		/// to match that.<br/>
		/// The returned memory address will be a multiple of the alignment value, and<br/>
		/// the amount of memory allocated will be a multiple of the alignment value.<br/>
		/// The memory returned by this function must be freed with SDL_aligned_free(),<br/>
		/// and _not_ SDL_free.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* AlignedAlloc([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = AlignedAllocNative(alignment, size);
			return ret;
		}

		/// <summary>
		/// Free memory allocated by SDL_aligned_alloc().<br/>
		/// The pointer is no longer valid after this call and cannot be dereferenced<br/>
		/// anymore.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void AlignedFreeNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)funcTable[8])(mem);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[8])((nint)mem);
			#endif
		}

		/// <summary>
		/// Free memory allocated by SDL_aligned_alloc().<br/>
		/// The pointer is no longer valid after this call and cannot be dereferenced<br/>
		/// anymore.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AlignedFree([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			AlignedFreeNative(mem);
		}

		/// <summary>
		/// Get the number of outstanding (unfreed) allocations.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumAllocations")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumAllocationsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[9])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[9])();
			#endif
		}

		/// <summary>
		/// Get the number of outstanding (unfreed) allocations.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumAllocations")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumAllocations()
		{
			int ret = GetNumAllocationsNative();
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetenvNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[10])(name);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[10])((nint)name);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			byte* ret = GetenvNative(name);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			string ret = Utils.DecodeStringUTF8(GetenvNative(name));
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = GetenvNative((byte*)pname);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				string ret = Utils.DecodeStringUTF8(GetenvNative((byte*)pname));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte* ret = GetenvNative((byte*)pname);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				string ret = Utils.DecodeStringUTF8(GetenvNative((byte*)pname));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = GetenvNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetenvNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetenvNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, int>)funcTable[11])(name, value, overwrite);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[11])((nint)name, (nint)value, overwrite);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			int ret = SetenvNative(name, value, overwrite);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = &name)
			{
				int ret = SetenvNative((byte*)pname, value, overwrite);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = name)
			{
				int ret = SetenvNative((byte*)pname, value, overwrite);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SetenvNative(pStr0, value, overwrite);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pvalue = &value)
			{
				int ret = SetenvNative(name, (byte*)pvalue, overwrite);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pvalue = value)
			{
				int ret = SetenvNative(name, (byte*)pvalue, overwrite);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (value != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(value);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SetenvNative(name, pStr0, overwrite);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pvalue = &value)
				{
					int ret = SetenvNative((byte*)pname, (byte*)pvalue, overwrite);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = name)
			{
				fixed (byte* pvalue = value)
				{
					int ret = SetenvNative((byte*)pname, (byte*)pvalue, overwrite);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_setenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Setenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (value != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(value);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SetenvNative(pStr0, pStr1, overwrite);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_unsetenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int UnsetenvNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[12])(name);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[12])((nint)name);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_unsetenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Unsetenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			int ret = UnsetenvNative(name);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_unsetenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Unsetenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				int ret = UnsetenvNative((byte*)pname);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_unsetenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Unsetenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				int ret = UnsetenvNative((byte*)pname);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_unsetenv")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Unsetenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UnsetenvNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_qsort")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QsortNative([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, nuint, nuint, delegate*<void*, void*, int>, void>)funcTable[13])(baseValue, nmemb, size, (delegate*<void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare));
			#else
			((delegate* unmanaged[Cdecl]<nint, nuint, nuint, nint, void>)funcTable[13])((nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare));
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_qsort")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Qsort([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			QsortNative(baseValue, nmemb, size, compare);
		}

		[NativeName(NativeNameType.Func, "SDL_bsearch")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* BsearchNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, nuint, delegate*<void*, void*, int>, void*>)funcTable[14])(key, baseValue, nmemb, size, (delegate*<void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare));
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint, nint, nint>)funcTable[14])((nint)key, (nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare));
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_bsearch")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Bsearch([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			void* ret = BsearchNative(key, baseValue, nmemb, size, compare);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_qsort_r")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QsortRNative([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, nuint, nuint, delegate*<void*, void*, void*, int>, void*, void>)funcTable[15])(baseValue, nmemb, size, (delegate*<void*, void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare), userdata);
			#else
			((delegate* unmanaged[Cdecl]<nint, nuint, nuint, nint, nint, void>)funcTable[15])((nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare), (nint)userdata);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_qsort_r")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void QsortR([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			QsortRNative(baseValue, nmemb, size, compare, userdata);
		}

		[NativeName(NativeNameType.Func, "SDL_bsearch_r")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* BsearchRNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, nuint, delegate*<void*, void*, void*, int>, void*, void*>)funcTable[16])(key, baseValue, nmemb, size, (delegate*<void*, void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare), userdata);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint, nint, nint, nint>)funcTable[16])((nint)key, (nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare), (nint)userdata);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_bsearch_r")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* BsearchR([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			void* ret = BsearchRNative(key, baseValue, nmemb, size, compare, userdata);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_abs")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AbsNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[17])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[17])(x);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_abs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Abs([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = AbsNative(x);
			return ret;
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z' and 'A-Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalpha")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsalphaNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[18])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[18])(x);
			#endif
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z' and 'A-Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalpha")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isalpha([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsalphaNative(x);
			return ret;
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter) or a number.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z', 'A-Z', and '0-9' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalnum")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsalnumNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[19])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[19])(x);
			#endif
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter) or a number.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z', 'A-Z', and '0-9' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalnum")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isalnum([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsalnumNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is blank (a space or tab).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0x20 (space) or 0x9 (tab) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isblank")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsblankNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[20])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[20])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is blank (a space or tab).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0x20 (space) or 0x9 (tab) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isblank")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isblank([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsblankNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a control character.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0 through 0x1F, and 0x7F, as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iscntrl")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IscntrlNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[21])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[21])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a control character.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0 through 0x1F, and 0x7F, as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iscntrl")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Iscntrl([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IscntrlNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a numeric digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// '0' (0x30) through '9' (0x39), as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsdigitNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[22])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[22])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a numeric digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// '0' (0x30) through '9' (0x39), as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isdigit([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsdigitNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a hexadecimal digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'F', 'a' through 'f', and '0' through '9', as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isxdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsxdigitNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[23])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[23])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a hexadecimal digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'F', 'a' through 'f', and '0' through '9', as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isxdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isxdigit([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsxdigitNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a punctuation mark.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `((SDL_isgraph(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// (!SDL_isalnum(x)))`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ispunct")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IspunctNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[24])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[24])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a punctuation mark.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `((SDL_isgraph(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// (!SDL_isalnum(x)))`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ispunct")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Ispunct([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IspunctNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is whitespace.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat the<br/>
		/// following ASCII values as true:<br/>
		/// - space (0x20)<br/>
		/// - tab (0x09)<br/>
		/// - newline (0x0A)<br/>
		/// - vertical tab (0x0B)<br/>
		/// - form feed (0x0C)<br/>
		/// - return (0x0D)<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isspace")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsspaceNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[25])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[25])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is whitespace.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat the<br/>
		/// following ASCII values as true:<br/>
		/// - space (0x20)<br/>
		/// - tab (0x09)<br/>
		/// - newline (0x0A)<br/>
		/// - vertical tab (0x0B)<br/>
		/// - form feed (0x0C)<br/>
		/// - return (0x0D)<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isspace")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isspace([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsspaceNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is upper case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsupperNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[26])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[26])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is upper case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isupper([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsupperNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is lower case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'a' through 'z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_islower")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IslowerNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[27])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[27])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is lower case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'a' through 'z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_islower")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Islower([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IslowerNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is "printable".<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// ' ' (0x20) through '~' (0x7E) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isprint")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsprintNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[28])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[28])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is "printable".<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// ' ' (0x20) through '~' (0x7E) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isprint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isprint([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsprintNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is any "printable" except space.<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `(SDL_isprint(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// ((x) != ' ')`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isgraph")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsgraphNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[29])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[29])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is any "printable" except space.<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `(SDL_isprint(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// ((x) != ' ')`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isgraph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isgraph([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsgraphNative(x);
			return ret;
		}

		/// <summary>
		/// Convert low-ASCII English letters to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'a' through 'z' to uppercase.<br/>
		/// This function returns the uppercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already uppercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_toupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ToupperNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[30])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[30])(x);
			#endif
		}

		/// <summary>
		/// Convert low-ASCII English letters to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'a' through 'z' to uppercase.<br/>
		/// This function returns the uppercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already uppercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_toupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Toupper([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = ToupperNative(x);
			return ret;
		}

		/// <summary>
		/// Convert low-ASCII English letters to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function returns the lowercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already lowercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_tolower")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TolowerNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[31])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[31])(x);
			#endif
		}

		/// <summary>
		/// Convert low-ASCII English letters to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function returns the lowercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already lowercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_tolower")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Tolower([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = TolowerNative(x);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_crc16")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort Crc16Native([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint16")] ushort crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, void*, nuint, ushort>)funcTable[32])(crc, data, len);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<ushort, nint, nuint, ushort>)funcTable[32])(crc, (nint)data, len);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_crc16")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort Crc16([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint16")] ushort crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			ushort ret = Crc16Native(crc, data, len);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_crc32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint Crc32Native([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint32")] uint crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, void*, nuint, uint>)funcTable[33])(crc, data, len);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, nint, nuint, uint>)funcTable[33])(crc, (nint)data, len);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_crc32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint Crc32([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint32")] uint crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			uint ret = Crc32Native(crc, data, len);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_memcpy")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MemcpyNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, void*>)funcTable[34])(dst, src, len);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nint>)funcTable[34])((nint)dst, (nint)src, len);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_memcpy")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			void* ret = MemcpyNative(dst, src, len);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_memmove")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MemmoveNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, void*>)funcTable[35])(dst, src, len);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nint>)funcTable[35])((nint)dst, (nint)src, len);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_memmove")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memmove([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			void* ret = MemmoveNative(dst, src, len);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_memset")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MemsetNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, nuint, void*>)funcTable[36])(dst, c, len);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, int, nuint, nint>)funcTable[36])((nint)dst, c, len);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_memset")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memset([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			void* ret = MemsetNative(dst, c, len);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_memset4")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* Memset4Native([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "Uint32")] uint val, [NativeName(NativeNameType.Param, "dwords")] [NativeName(NativeNameType.Type, "size_t")] nuint dwords)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, uint, nuint, void*>)funcTable[37])(dst, val, dwords);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, uint, nuint, nint>)funcTable[37])((nint)dst, val, dwords);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_memset4")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memset4([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "Uint32")] uint val, [NativeName(NativeNameType.Param, "dwords")] [NativeName(NativeNameType.Type, "size_t")] nuint dwords)
		{
			void* ret = Memset4Native(dst, val, dwords);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_memcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int MemcmpNative([NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "void const *")] void* s1, [NativeName(NativeNameType.Param, "s2")] [NativeName(NativeNameType.Type, "void const *")] void* s2, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, int>)funcTable[38])(s1, s2, len);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[38])((nint)s1, (nint)s2, len);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_memcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Memcmp([NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "void const *")] void* s1, [NativeName(NativeNameType.Param, "s2")] [NativeName(NativeNameType.Type, "void const *")] void* s2, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			int ret = MemcmpNative(s1, s2, len);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcslenNative([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, nuint>)funcTable[39])(wstr);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint>)funcTable[39])((nint)wstr);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			nuint ret = WcslenNative(wstr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr)
		{
			fixed (char* pwstr = &wstr)
			{
				nuint ret = WcslenNative((char*)pwstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> wstr)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcslenNative((char*)pwstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] string wstr)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcslenNative(pwstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcsnlenNative([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, nuint, nuint>)funcTable[40])(wstr, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint, nuint>)funcTable[40])((nint)wstr, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = WcsnlenNative(wstr, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pwstr = &wstr)
			{
				nuint ret = WcsnlenNative((char*)pwstr, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcsnlenNative((char*)pwstr, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] string wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcsnlenNative(pwstr, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcslcpyNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, nuint>)funcTable[41])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[41])((nint)dst, (nint)src, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = WcslcpyNative(dst, src, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				nuint ret = WcslcpyNative((char*)pdst, src, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			nuint ret = WcslcpyNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = &src)
			{
				nuint ret = WcslcpyNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcpyNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcpyNative(dst, psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = &src)
				{
					nuint ret = WcslcpyNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = src)
				{
					nuint ret = WcslcpyNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char* psrc = src)
			{
				nuint ret = WcslcpyNative(pStr0, psrc, maxlen);
				dst = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcslcatNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, nuint>)funcTable[42])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[42])((nint)dst, (nint)src, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = WcslcatNative(dst, src, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				nuint ret = WcslcatNative((char*)pdst, src, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			nuint ret = WcslcatNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = &src)
			{
				nuint ret = WcslcatNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcatNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcatNative(dst, psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = &src)
				{
					nuint ret = WcslcatNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = src)
				{
					nuint ret = WcslcatNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char* psrc = src)
			{
				nuint ret = WcslcatNative(pStr0, psrc, maxlen);
				dst = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static char* WcsdupNative([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*>)funcTable[43])(wstr);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[43])((nint)wstr);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsdup([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			char* ret = WcsdupNative(wstr);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsdupS([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			string ret = Utils.DecodeStringUTF16(WcsdupNative(wstr));
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsdup([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr)
		{
			fixed (char* pwstr = &wstr)
			{
				char* ret = WcsdupNative((char*)pwstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsdupS([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr)
		{
			fixed (char* pwstr = &wstr)
			{
				string ret = Utils.DecodeStringUTF16(WcsdupNative((char*)pwstr));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsdup([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> wstr)
		{
			fixed (char* pwstr = wstr)
			{
				char* ret = WcsdupNative((char*)pwstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsdupS([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> wstr)
		{
			fixed (char* pwstr = wstr)
			{
				string ret = Utils.DecodeStringUTF16(WcsdupNative((char*)pwstr));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsdup([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] string wstr)
		{
			fixed (char* pwstr = wstr)
			{
				char* ret = WcsdupNative(pwstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsdupS([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] string wstr)
		{
			fixed (char* pwstr = wstr)
			{
				string ret = Utils.DecodeStringUTF16(WcsdupNative(pwstr));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static char* WcsstrNative([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, char*>)funcTable[44])(haystack, needle);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[44])((nint)haystack, (nint)needle);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			char* ret = WcsstrNative(haystack, needle);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			string ret = Utils.DecodeStringUTF16(WcsstrNative(haystack, needle));
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			fixed (char* phaystack = &haystack)
			{
				char* ret = WcsstrNative((char*)phaystack, needle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			fixed (char* phaystack = &haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsstrNative((char*)phaystack, needle));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			fixed (char* phaystack = haystack)
			{
				char* ret = WcsstrNative((char*)phaystack, needle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			fixed (char* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsstrNative((char*)phaystack, needle));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			fixed (char* phaystack = haystack)
			{
				char* ret = WcsstrNative(phaystack, needle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle)
		{
			fixed (char* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsstrNative(phaystack, needle));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle)
		{
			fixed (char* pneedle = &needle)
			{
				char* ret = WcsstrNative(haystack, (char*)pneedle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle)
		{
			fixed (char* pneedle = &needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsstrNative(haystack, (char*)pneedle));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle)
		{
			fixed (char* pneedle = needle)
			{
				char* ret = WcsstrNative(haystack, (char*)pneedle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle)
		{
			fixed (char* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsstrNative(haystack, (char*)pneedle));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle)
		{
			fixed (char* pneedle = needle)
			{
				char* ret = WcsstrNative(haystack, pneedle);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle)
		{
			fixed (char* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsstrNative(haystack, pneedle));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle)
		{
			fixed (char* phaystack = &haystack)
			{
				fixed (char* pneedle = &needle)
				{
					char* ret = WcsstrNative((char*)phaystack, (char*)pneedle);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle)
		{
			fixed (char* phaystack = &haystack)
			{
				fixed (char* pneedle = &needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsstrNative((char*)phaystack, (char*)pneedle));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsstrNative((char*)phaystack, (char*)pneedle);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsstrNative((char*)phaystack, (char*)pneedle));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsstrNative(phaystack, pneedle);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsstrNative(phaystack, pneedle));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static char* WcsnstrNative([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, char*>)funcTable[45])(haystack, needle, maxlen);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nint>)funcTable[45])((nint)haystack, (nint)needle, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* ret = WcsnstrNative(haystack, needle, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, needle, maxlen));
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				char* ret = WcsnstrNative((char*)phaystack, needle, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, needle, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				char* ret = WcsnstrNative((char*)phaystack, needle, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, needle, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				char* ret = WcsnstrNative(phaystack, needle, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] char* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(phaystack, needle, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pneedle = &needle)
			{
				char* ret = WcsnstrNative(haystack, (char*)pneedle, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pneedle = &needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, (char*)pneedle, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				char* ret = WcsnstrNative(haystack, (char*)pneedle, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, (char*)pneedle, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				char* ret = WcsnstrNative(haystack, pneedle, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] char* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, pneedle, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				fixed (char* pneedle = &needle)
				{
					char* ret = WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ref char haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ref char needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				fixed (char* pneedle = &needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen));
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsnstrNative(phaystack, pneedle, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcsnstr")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "wchar const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "wchar const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsnstrNative(phaystack, pneedle, maxlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcscmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, int>)funcTable[46])(str1, str2);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[46])((nint)str1, (nint)str2);
			#endif
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			int ret = WcscmpNative(str1, str2);
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcscmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscmpNative(pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcscmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscmpNative(str1, pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcscmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscmpNative(pstr1, pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcsncmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, int>)funcTable[47])(str1, str2, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[47])((nint)str1, (nint)str2, maxlen);
			#endif
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			int ret = WcsncmpNative(str1, str2, maxlen);
			return ret;
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcsncmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncmpNative(pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcsncmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncmpNative(str1, pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcsncmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncmpNative(pstr1, pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcscasecmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, int>)funcTable[48])(str1, str2);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[48])((nint)str1, (nint)str2);
			#endif
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			int ret = WcscasecmpNative(str1, str2);
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcscasecmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscasecmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscasecmpNative(pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcscasecmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscasecmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscasecmpNative(str1, pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcscasecmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscasecmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcscasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcscasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscasecmpNative(pstr1, pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcsncasecmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, int>)funcTable[49])(str1, str2, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[49])((nint)str1, (nint)str2, maxlen);
			#endif
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			int ret = WcsncasecmpNative(str1, str2, maxlen);
			return ret;
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcsncasecmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncasecmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] char* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncasecmpNative(pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcsncasecmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncasecmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] char* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncasecmpNative(str1, pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcsncasecmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncasecmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Wcsncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "wchar const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "wchar const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncasecmpNative(pstr1, pstr2, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcstolNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] char* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] char** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char**, int, int>)funcTable[50])(str, endp, baseValue);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[50])((nint)str, (nint)endp, baseValue);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] char* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] char** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			int ret = WcstolNative(str, endp, baseValue);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] char** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (char* pstr = &str)
			{
				int ret = WcstolNative((char*)pstr, endp, baseValue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] char** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (char* pstr = str)
			{
				int ret = WcstolNative((char*)pstr, endp, baseValue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] char** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (char* pstr = str)
			{
				int ret = WcstolNative(pstr, endp, baseValue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] char* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] ref char* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (char** pendp = &endp)
			{
				int ret = WcstolNative(str, (char**)pendp, baseValue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] ref char str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] ref char* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (char* pstr = &str)
			{
				fixed (char** pendp = &endp)
				{
					int ret = WcstolNative((char*)pstr, (char**)pendp, baseValue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] ref char* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (char* pstr = str)
			{
				fixed (char** pendp = &endp)
				{
					int ret = WcstolNative((char*)pstr, (char**)pendp, baseValue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_wcstol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Wcstol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "wchar const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "wchar * *")] ref char* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (char* pstr = str)
			{
				fixed (char** pendp = &endp)
				{
					int ret = WcstolNative(pstr, (char**)pendp, baseValue);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrlenNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint>)funcTable[51])(str);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint>)funcTable[51])((nint)str);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			nuint ret = StrlenNative(str);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				nuint ret = StrlenNative((byte*)pstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				nuint ret = StrlenNative((byte*)pstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlenNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrnlenNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint, nuint>)funcTable[52])(str, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint, nuint>)funcTable[52])((nint)str, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = StrnlenNative(str, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr = &str)
			{
				nuint ret = StrnlenNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr = str)
			{
				nuint ret = StrnlenNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrnlenNative(pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrlcpyNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, nuint>)funcTable[53])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[53])((nint)dst, (nint)src, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = StrlcpyNative(dst, src, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				nuint ret = StrlcpyNative((byte*)pdst, src, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcpyNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ref byte src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* psrc = &src)
			{
				nuint ret = StrlcpyNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* psrc = src)
			{
				nuint ret = StrlcpyNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (src != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(src);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcpyNative(dst, pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ref byte src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = &src)
				{
					nuint ret = StrlcpyNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = src)
				{
					nuint ret = StrlcpyNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (src != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(src);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(src, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			nuint ret = StrlcpyNative(pStr0, pStr1, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint Utf8StrlcpyNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, nuint>)funcTable[54])(dst, src, dstBytes);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[54])((nint)dst, (nint)src, dstBytes);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			nuint ret = Utf8StrlcpyNative(dst, src, dstBytes);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			fixed (byte* pdst = &dst)
			{
				nuint ret = Utf8StrlcpyNative((byte*)pdst, src, dstBytes);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = Utf8StrlcpyNative(pStr0, src, dstBytes);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ref byte src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			fixed (byte* psrc = &src)
			{
				nuint ret = Utf8StrlcpyNative(dst, (byte*)psrc, dstBytes);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			fixed (byte* psrc = src)
			{
				nuint ret = Utf8StrlcpyNative(dst, (byte*)psrc, dstBytes);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] string src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (src != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(src);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = Utf8StrlcpyNative(dst, pStr0, dstBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ref byte src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = &src)
				{
					nuint ret = Utf8StrlcpyNative((byte*)pdst, (byte*)psrc, dstBytes);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = src)
				{
					nuint ret = Utf8StrlcpyNative((byte*)pdst, (byte*)psrc, dstBytes);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_utf8strlcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] string src, [NativeName(NativeNameType.Param, "dst_bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint dstBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (src != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(src);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(src, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			nuint ret = Utf8StrlcpyNative(pStr0, pStr1, dstBytes);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrlcatNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, nuint>)funcTable[55])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[55])((nint)dst, (nint)src, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = StrlcatNative(dst, src, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				nuint ret = StrlcatNative((byte*)pdst, src, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] byte* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcatNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ref byte src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* psrc = &src)
			{
				nuint ret = StrlcatNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* psrc = src)
			{
				nuint ret = StrlcatNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (src != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(src);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcatNative(dst, pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ref byte src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = &src)
				{
					nuint ret = StrlcatNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = src)
				{
					nuint ret = StrlcatNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strlcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Strlcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "char const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (src != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(src);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(src, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			nuint ret = StrlcatNative(pStr0, pStr1, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrdupNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[56])(str);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[56])((nint)str);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strdup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			byte* ret = StrdupNative(str);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrdupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			string ret = Utils.DecodeStringUTF8(StrdupNative(str));
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strdup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrdupNative((byte*)pstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrdupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrdupNative((byte*)pstr));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strdup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrdupNative((byte*)pstr);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrdupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrdupNative((byte*)pstr));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strdup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrdupNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strdup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrdupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrdupNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrndupNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint, byte*>)funcTable[57])(str, maxlen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nuint, nint>)funcTable[57])((nint)str, maxlen);
			#endif
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strndup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* ret = StrndupNative(str, maxlen);
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrndupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			string ret = Utils.DecodeStringUTF8(StrndupNative(str, maxlen));
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strndup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrndupNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrndupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrndupNative((byte*)pstr, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strndup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrndupNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrndupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrndupNative((byte*)pstr, maxlen));
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strndup([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrndupNative(pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		[NativeName(NativeNameType.Func, "SDL_strndup")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrndupS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrndupNative(pStr0, maxlen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}
	}
}
