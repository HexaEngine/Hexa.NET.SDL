// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{
		/// <summary>
		/// Allocate uninitialized memory.<br/>
		/// The allocated memory returned by this function must be freed with<br/>
		/// SDL_free().<br/>
		/// If `size` is 0, it will be set to 1.<br/>
		/// If you want to allocate memory aligned to a specific alignment, consider<br/>
		/// using SDL_aligned_alloc().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_malloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MallocNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, void*>)funcTable[0])(size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nuint, nint>)funcTable[0])(size);
			#endif
		}

		/// <summary>
		/// Allocate uninitialized memory.<br/>
		/// The allocated memory returned by this function must be freed with<br/>
		/// SDL_free().<br/>
		/// If `size` is 0, it will be set to 1.<br/>
		/// If you want to allocate memory aligned to a specific alignment, consider<br/>
		/// using SDL_aligned_alloc().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_malloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Malloc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = MallocNative(size);
			return ret;
		}

		/// <summary>
		/// Allocate a zero-initialized array.<br/>
		/// The memory returned by this function must be freed with SDL_free().<br/>
		/// If either of `nmemb` or `size` is 0, they will both be set to 1.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_calloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* CallocNative([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, nuint, void*>)funcTable[1])(nmemb, size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nuint, nuint, nint>)funcTable[1])(nmemb, size);
			#endif
		}

		/// <summary>
		/// Allocate a zero-initialized array.<br/>
		/// The memory returned by this function must be freed with SDL_free().<br/>
		/// If either of `nmemb` or `size` is 0, they will both be set to 1.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_calloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Calloc([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = CallocNative(nmemb, size);
			return ret;
		}

		/// <summary>
		/// Change the size of allocated memory.<br/>
		/// The memory returned by this function must be freed with SDL_free().<br/>
		/// If `size` is 0, it will be set to 1. Note that this is unlike some other C<br/>
		/// runtime `realloc` implementations, which may treat `realloc(mem, 0)` the<br/>
		/// same way as `free(mem)`.<br/>
		/// If `mem` is NULL, the behavior of this function is equivalent to<br/>
		/// SDL_malloc(). Otherwise, the function can have one of three possible<br/>
		/// outcomes:<br/>
		/// - If it returns the same pointer as `mem`, it means that `mem` was resized<br/>
		/// in place without freeing.<br/>
		/// - If it returns a different non-NULL pointer, it means that `mem` was freed<br/>
		/// and cannot be dereferenced anymore.<br/>
		/// - If it returns NULL (indicating failure), then `mem` will remain valid and<br/>
		/// must still be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_realloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* ReallocNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, void*>)funcTable[2])(mem, size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nuint, nint>)funcTable[2])((nint)mem, size);
			#endif
		}

		/// <summary>
		/// Change the size of allocated memory.<br/>
		/// The memory returned by this function must be freed with SDL_free().<br/>
		/// If `size` is 0, it will be set to 1. Note that this is unlike some other C<br/>
		/// runtime `realloc` implementations, which may treat `realloc(mem, 0)` the<br/>
		/// same way as `free(mem)`.<br/>
		/// If `mem` is NULL, the behavior of this function is equivalent to<br/>
		/// SDL_malloc(). Otherwise, the function can have one of three possible<br/>
		/// outcomes:<br/>
		/// - If it returns the same pointer as `mem`, it means that `mem` was resized<br/>
		/// in place without freeing.<br/>
		/// - If it returns a different non-NULL pointer, it means that `mem` was freed<br/>
		/// and cannot be dereferenced anymore.<br/>
		/// - If it returns NULL (indicating failure), then `mem` will remain valid and<br/>
		/// must still be freed with SDL_free().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_realloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Realloc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = ReallocNative(mem, size);
			return ret;
		}

		/// <summary>
		/// Free allocated memory.<br/>
		/// The pointer is no longer valid after this call and cannot be dereferenced<br/>
		/// anymore.<br/>
		/// If `mem` is NULL, this function does nothing.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FreeNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)funcTable[3])(mem);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[3])((nint)mem);
			#endif
		}

		/// <summary>
		/// Free allocated memory.<br/>
		/// The pointer is no longer valid after this call and cannot be dereferenced<br/>
		/// anymore.<br/>
		/// If `mem` is NULL, this function does nothing.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Free([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			FreeNative(mem);
		}

		/// <summary>
		/// Get the original set of SDL memory functions.<br/>
		/// This is what SDL_malloc and friends will use by default, if there has been<br/>
		/// no call to SDL_SetMemoryFunctions. This is not necessarily using the C<br/>
		/// runtime's `malloc` functions behind the scenes! Different platforms and<br/>
		/// build configurations might do any number of unexpected things.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetOriginalMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetOriginalMemoryFunctionsNative([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<nuint, void*>*, delegate*<nuint, nuint, void*>*, delegate*<void*, nuint, void*>*, delegate*<void*, void>*, void>)funcTable[4])(mallocFunc, callocFunc, reallocFunc, freeFunc);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[4])((nint)mallocFunc, (nint)callocFunc, (nint)reallocFunc, (nint)freeFunc);
			#endif
		}

		/// <summary>
		/// Get the original set of SDL memory functions.<br/>
		/// This is what SDL_malloc and friends will use by default, if there has been<br/>
		/// no call to SDL_SetMemoryFunctions. This is not necessarily using the C<br/>
		/// runtime's `malloc` functions behind the scenes! Different platforms and<br/>
		/// build configurations might do any number of unexpected things.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetOriginalMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetOriginalMemoryFunctions([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			GetOriginalMemoryFunctionsNative(mallocFunc, callocFunc, reallocFunc, freeFunc);
		}

		/// <summary>
		/// Get the current set of SDL memory functions.<br/>
		/// <br/>
		/// <br/>
		/// This does not hold a lock, so do not call this in the<br/>
		/// unlikely event of a background thread calling<br/>
		/// SDL_SetMemoryFunctions simultaneously.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMemoryFunctionsNative([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<delegate*<nuint, void*>*, delegate*<nuint, nuint, void*>*, delegate*<void*, nuint, void*>*, delegate*<void*, void>*, void>)funcTable[5])(mallocFunc, callocFunc, reallocFunc, freeFunc);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[5])((nint)mallocFunc, (nint)callocFunc, (nint)reallocFunc, (nint)freeFunc);
			#endif
		}

		/// <summary>
		/// Get the current set of SDL memory functions.<br/>
		/// <br/>
		/// <br/>
		/// This does not hold a lock, so do not call this in the<br/>
		/// unlikely event of a background thread calling<br/>
		/// SDL_SetMemoryFunctions simultaneously.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetMemoryFunctions([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func *")] delegate*<nuint, void*>* mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func *")] delegate*<nuint, nuint, void*>* callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func *")] delegate*<void*, nuint, void*>* reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func *")] delegate*<void*, void>* freeFunc)
		{
			GetMemoryFunctionsNative(mallocFunc, callocFunc, reallocFunc, freeFunc);
		}

		/// <summary>
		/// Replace SDL's memory allocation functions with a custom set.<br/>
		/// It is not safe to call this function once any allocations have been made,<br/>
		/// as future calls to SDL_free will use the new allocator, even if they came<br/>
		/// from an SDL_malloc made with the old one!<br/>
		/// If used, usually this needs to be the first call made into the SDL library,<br/>
		/// if not the very first thing done at program startup time.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but one<br/>
		/// should not replace the memory functions once any allocations<br/>
		/// are made!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetMemoryFunctionsNative([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func")] SDLMallocFunc mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func")] SDLCallocFunc callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func")] SDLReallocFunc reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func")] SDLFreeFunc freeFunc)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<nuint, void*>, delegate*<nuint, nuint, void*>, delegate*<void*, nuint, void*>, delegate*<void*, void>, byte>)funcTable[6])((delegate*<nuint, void*>)Utils.GetFunctionPointerForDelegate(mallocFunc), (delegate*<nuint, nuint, void*>)Utils.GetFunctionPointerForDelegate(callocFunc), (delegate*<void*, nuint, void*>)Utils.GetFunctionPointerForDelegate(reallocFunc), (delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(freeFunc));
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, byte>)funcTable[6])((nint)Utils.GetFunctionPointerForDelegate(mallocFunc), (nint)Utils.GetFunctionPointerForDelegate(callocFunc), (nint)Utils.GetFunctionPointerForDelegate(reallocFunc), (nint)Utils.GetFunctionPointerForDelegate(freeFunc));
			#endif
		}

		/// <summary>
		/// Replace SDL's memory allocation functions with a custom set.<br/>
		/// It is not safe to call this function once any allocations have been made,<br/>
		/// as future calls to SDL_free will use the new allocator, even if they came<br/>
		/// from an SDL_malloc made with the old one!<br/>
		/// If used, usually this needs to be the first call made into the SDL library,<br/>
		/// if not the very first thing done at program startup time.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but one<br/>
		/// should not replace the memory functions once any allocations<br/>
		/// are made!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetMemoryFunctions")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetMemoryFunctions([NativeName(NativeNameType.Param, "malloc_func")] [NativeName(NativeNameType.Type, "SDL_malloc_func")] SDLMallocFunc mallocFunc, [NativeName(NativeNameType.Param, "calloc_func")] [NativeName(NativeNameType.Type, "SDL_calloc_func")] SDLCallocFunc callocFunc, [NativeName(NativeNameType.Param, "realloc_func")] [NativeName(NativeNameType.Type, "SDL_realloc_func")] SDLReallocFunc reallocFunc, [NativeName(NativeNameType.Param, "free_func")] [NativeName(NativeNameType.Type, "SDL_free_func")] SDLFreeFunc freeFunc)
		{
			byte ret = SetMemoryFunctionsNative(mallocFunc, callocFunc, reallocFunc, freeFunc);
			return ret != 0;
		}

		/// <summary>
		/// Allocate memory aligned to a specific alignment.<br/>
		/// The memory returned by this function must be freed with SDL_aligned_free(),<br/>
		/// _not_ SDL_free().<br/>
		/// If `alignment` is less than the size of `void *`, it will be increased to<br/>
		/// match that.<br/>
		/// The returned memory address will be a multiple of the alignment value, and<br/>
		/// the size of the memory allocated will be a multiple of the alignment value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* AlignedAllocNative([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nuint, nuint, void*>)funcTable[7])(alignment, size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nuint, nuint, nint>)funcTable[7])(alignment, size);
			#endif
		}

		/// <summary>
		/// Allocate memory aligned to a specific alignment.<br/>
		/// The memory returned by this function must be freed with SDL_aligned_free(),<br/>
		/// _not_ SDL_free().<br/>
		/// If `alignment` is less than the size of `void *`, it will be increased to<br/>
		/// match that.<br/>
		/// The returned memory address will be a multiple of the alignment value, and<br/>
		/// the size of the memory allocated will be a multiple of the alignment value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_alloc")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* AlignedAlloc([NativeName(NativeNameType.Param, "alignment")] [NativeName(NativeNameType.Type, "size_t")] nuint alignment, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size)
		{
			void* ret = AlignedAllocNative(alignment, size);
			return ret;
		}

		/// <summary>
		/// Free memory allocated by SDL_aligned_alloc().<br/>
		/// The pointer is no longer valid after this call and cannot be dereferenced<br/>
		/// anymore.<br/>
		/// If `mem` is NULL, this function does nothing.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void AlignedFreeNative([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void>)funcTable[8])(mem);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[8])((nint)mem);
			#endif
		}

		/// <summary>
		/// Free memory allocated by SDL_aligned_alloc().<br/>
		/// The pointer is no longer valid after this call and cannot be dereferenced<br/>
		/// anymore.<br/>
		/// If `mem` is NULL, this function does nothing.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_aligned_free")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void AlignedFree([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem)
		{
			AlignedFreeNative(mem);
		}

		/// <summary>
		/// Get the number of outstanding (unfreed) allocations.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumAllocations")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumAllocationsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[9])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[9])();
			#endif
		}

		/// <summary>
		/// Get the number of outstanding (unfreed) allocations.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumAllocations")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumAllocations()
		{
			int ret = GetNumAllocationsNative();
			return ret;
		}

		/// <summary>
		/// Get the process environment.<br/>
		/// This is initialized at application start and is not affected by setenv()<br/>
		/// and unsetenv() calls after that point. Use SDL_SetEnvironmentVariable() and<br/>
		/// SDL_UnsetEnvironmentVariable() if you want to modify this environment, or<br/>
		/// SDL_setenv_unsafe() or SDL_unsetenv_unsafe() if you want changes to persist<br/>
		/// in the C runtime environment after SDL_Quit().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironment")]
		[return: NativeName(NativeNameType.Type, "SDL_Environment *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLEnvironment* GetEnvironmentNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEnvironment*>)funcTable[10])();
			#else
			return (SDLEnvironment*)((delegate* unmanaged[Cdecl]<nint>)funcTable[10])();
			#endif
		}

		/// <summary>
		/// Get the process environment.<br/>
		/// This is initialized at application start and is not affected by setenv()<br/>
		/// and unsetenv() calls after that point. Use SDL_SetEnvironmentVariable() and<br/>
		/// SDL_UnsetEnvironmentVariable() if you want to modify this environment, or<br/>
		/// SDL_setenv_unsafe() or SDL_unsetenv_unsafe() if you want changes to persist<br/>
		/// in the C runtime environment after SDL_Quit().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironment")]
		[return: NativeName(NativeNameType.Type, "SDL_Environment *")]
		public static SDLEnvironment* GetEnvironment()
		{
			SDLEnvironment* ret = GetEnvironmentNative();
			return ret;
		}

		/// <summary>
		/// Create a set of environment variables<br/>
		/// <br/>
		/// <br/>
		/// If `populated` is false, it is safe to call this function<br/>
		/// from any thread, otherwise it is safe if no other threads are<br/>
		/// calling setenv() or unsetenv()<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateEnvironment")]
		[return: NativeName(NativeNameType.Type, "SDL_Environment *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLEnvironment* CreateEnvironmentNative([NativeName(NativeNameType.Param, "populated")] [NativeName(NativeNameType.Type, "bool")] byte populated)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, SDLEnvironment*>)funcTable[11])(populated);
			#else
			return (SDLEnvironment*)((delegate* unmanaged[Cdecl]<byte, nint>)funcTable[11])(populated);
			#endif
		}

		/// <summary>
		/// Create a set of environment variables<br/>
		/// <br/>
		/// <br/>
		/// If `populated` is false, it is safe to call this function<br/>
		/// from any thread, otherwise it is safe if no other threads are<br/>
		/// calling setenv() or unsetenv()<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateEnvironment")]
		[return: NativeName(NativeNameType.Type, "SDL_Environment *")]
		public static SDLEnvironment* CreateEnvironment([NativeName(NativeNameType.Param, "populated")] [NativeName(NativeNameType.Type, "bool")] bool populated)
		{
			SDLEnvironment* ret = CreateEnvironmentNative(populated ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetEnvironmentVariableNative([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEnvironment*, byte*, byte*>)funcTable[12])(env, name);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[12])((nint)env, (nint)name);
			#endif
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			byte* ret = GetEnvironmentVariableNative(env, name);
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative(env, name));
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte* ret = GetEnvironmentVariableNative((SDLEnvironment*)penv, name);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative((SDLEnvironment*)penv, name));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = GetEnvironmentVariableNative(env, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative(env, (byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte* ret = GetEnvironmentVariableNative(env, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative(env, (byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = GetEnvironmentVariableNative(env, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative(env, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = &name)
				{
					byte* ret = GetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = &name)
				{
					string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname));
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = name)
				{
					byte* ret = GetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = name)
				{
					string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname));
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* ret = GetEnvironmentVariableNative((SDLEnvironment*)penv, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetEnvironmentVariableS([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				string ret = Utils.DecodeStringUTF8(GetEnvironmentVariableNative((SDLEnvironment*)penv, pStr0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get all variables in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariables")]
		[return: NativeName(NativeNameType.Type, "char * *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte** GetEnvironmentVariablesNative([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEnvironment*, byte**>)funcTable[13])(env);
			#else
			return (byte**)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[13])((nint)env);
			#endif
		}

		/// <summary>
		/// Get all variables in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariables")]
		[return: NativeName(NativeNameType.Type, "char * *")]
		public static byte** GetEnvironmentVariables([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env)
		{
			byte** ret = GetEnvironmentVariablesNative(env);
			return ret;
		}

		/// <summary>
		/// Get all variables in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetEnvironmentVariables")]
		[return: NativeName(NativeNameType.Type, "char * *")]
		public static byte** GetEnvironmentVariables([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte** ret = GetEnvironmentVariablesNative((SDLEnvironment*)penv);
				return ret;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetEnvironmentVariableNative([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] byte overwrite)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEnvironment*, byte*, byte*, byte, byte>)funcTable[14])(env, name, value, overwrite);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte, byte>)funcTable[14])((nint)env, (nint)name, (nint)value, overwrite);
			#endif
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			byte ret = SetEnvironmentVariableNative(env, name, value, overwrite ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, name, value, overwrite ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (byte* pname = &name)
			{
				byte ret = SetEnvironmentVariableNative(env, (byte*)pname, value, overwrite ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (byte* pname = name)
			{
				byte ret = SetEnvironmentVariableNative(env, (byte*)pname, value, overwrite ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetEnvironmentVariableNative(env, pStr0, value, overwrite ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = &name)
				{
					byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname, value, overwrite ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = name)
				{
					byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname, value, overwrite ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, pStr0, value, overwrite ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (byte* pvalue = &value)
			{
				byte ret = SetEnvironmentVariableNative(env, name, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (byte* pvalue = value)
			{
				byte ret = SetEnvironmentVariableNative(env, name, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (value != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(value);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetEnvironmentVariableNative(env, name, pStr0, overwrite ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pvalue = &value)
				{
					byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, name, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pvalue = value)
				{
					byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, name, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (value != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(value);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, name, pStr0, overwrite ? (byte)1 : (byte)0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pvalue = &value)
				{
					byte ret = SetEnvironmentVariableNative(env, (byte*)pname, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (byte* pname = name)
			{
				fixed (byte* pvalue = value)
				{
					byte ret = SetEnvironmentVariableNative(env, (byte*)pname, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (value != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(value);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = SetEnvironmentVariableNative(env, pStr0, pStr1, overwrite ? (byte)1 : (byte)0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = &name)
				{
					fixed (byte* pvalue = &value)
					{
						byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = name)
				{
					fixed (byte* pvalue = value)
					{
						byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname, (byte*)pvalue, overwrite ? (byte)1 : (byte)0);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "bool")] bool overwrite)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (value != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(value);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				byte ret = SetEnvironmentVariableNative((SDLEnvironment*)penv, pStr0, pStr1, overwrite ? (byte)1 : (byte)0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte UnsetEnvironmentVariableNative([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLEnvironment*, byte*, byte>)funcTable[15])(env, name);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[15])((nint)env, (nint)name);
			#endif
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			byte ret = UnsetEnvironmentVariableNative(env, name);
			return ret != 0;
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte ret = UnsetEnvironmentVariableNative((SDLEnvironment*)penv, name);
				return ret != 0;
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte ret = UnsetEnvironmentVariableNative(env, (byte*)pname);
				return ret != 0;
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte ret = UnsetEnvironmentVariableNative(env, (byte*)pname);
				return ret != 0;
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = UnsetEnvironmentVariableNative(env, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = &name)
				{
					byte ret = UnsetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				fixed (byte* pname = name)
				{
					byte ret = UnsetEnvironmentVariableNative((SDLEnvironment*)penv, (byte*)pname);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnsetEnvironmentVariable")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool UnsetEnvironmentVariable([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (name != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(name);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = UnsetEnvironmentVariableNative((SDLEnvironment*)penv, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Destroy a set of environment variables.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the environment is no longer in use.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyEnvironment")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyEnvironmentNative([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLEnvironment*, void>)funcTable[16])(env);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[16])((nint)env);
			#endif
		}

		/// <summary>
		/// Destroy a set of environment variables.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the environment is no longer in use.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyEnvironment")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyEnvironment([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] SDLEnvironment* env)
		{
			DestroyEnvironmentNative(env);
		}

		/// <summary>
		/// Destroy a set of environment variables.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the environment is no longer in use.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyEnvironment")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyEnvironment([NativeName(NativeNameType.Param, "env")] [NativeName(NativeNameType.Type, "SDL_Environment *")] ref SDLEnvironment env)
		{
			fixed (SDLEnvironment* penv = &env)
			{
				DestroyEnvironmentNative((SDLEnvironment*)penv);
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetenvNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[17])(name);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[17])((nint)name);
			#endif
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			byte* ret = GetenvNative(name);
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			string ret = Utils.DecodeStringUTF8(GetenvNative(name));
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = GetenvNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				string ret = Utils.DecodeStringUTF8(GetenvNative((byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte* ret = GetenvNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				string ret = Utils.DecodeStringUTF8(GetenvNative((byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* Getenv([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = GetenvNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function uses SDL's cached copy of the environment and is thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetenvNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetenvUnsafeNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[18])(name);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[18])((nint)name);
			#endif
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			byte* ret = GetenvUnsafeNative(name);
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvUnsafeS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			string ret = Utils.DecodeStringUTF8(GetenvUnsafeNative(name));
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = GetenvUnsafeNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvUnsafeS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				string ret = Utils.DecodeStringUTF8(GetenvUnsafeNative((byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte* ret = GetenvUnsafeNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvUnsafeS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				string ret = Utils.DecodeStringUTF8(GetenvUnsafeNative((byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = GetenvUnsafeNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the value of a variable in the environment.<br/>
		/// This function bypasses SDL's cached copy of the environment and is not<br/>
		/// thread-safe.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using SDL_getenv()<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_getenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetenvUnsafeS([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetenvUnsafeNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetenvUnsafeNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int, int>)funcTable[19])(name, value, overwrite);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[19])((nint)name, (nint)value, overwrite);
			#endif
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			int ret = SetenvUnsafeNative(name, value, overwrite);
			return ret;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = &name)
			{
				int ret = SetenvUnsafeNative((byte*)pname, value, overwrite);
				return ret;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = name)
			{
				int ret = SetenvUnsafeNative((byte*)pname, value, overwrite);
				return ret;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] byte* value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SetenvUnsafeNative(pStr0, value, overwrite);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pvalue = &value)
			{
				int ret = SetenvUnsafeNative(name, (byte*)pvalue, overwrite);
				return ret;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pvalue = value)
			{
				int ret = SetenvUnsafeNative(name, (byte*)pvalue, overwrite);
				return ret;
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (value != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(value);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SetenvUnsafeNative(name, pStr0, overwrite);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ref byte value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pvalue = &value)
				{
					int ret = SetenvUnsafeNative((byte*)pname, (byte*)pvalue, overwrite);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			fixed (byte* pname = name)
			{
				fixed (byte* pvalue = value)
				{
					int ret = SetenvUnsafeNative((byte*)pname, (byte*)pvalue, overwrite);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the value of a variable in the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_SetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_setenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "char const *")] string value, [NativeName(NativeNameType.Param, "overwrite")] [NativeName(NativeNameType.Type, "int")] int overwrite)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (value != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(value);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SetenvUnsafeNative(pStr0, pStr1, overwrite);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_UnsetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_unsetenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int UnsetenvUnsafeNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[20])(name);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[20])((nint)name);
			#endif
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_UnsetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_unsetenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UnsetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name)
		{
			int ret = UnsetenvUnsafeNative(name);
			return ret;
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_UnsetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_unsetenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UnsetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ref byte name)
		{
			fixed (byte* pname = &name)
			{
				int ret = UnsetenvUnsafeNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_UnsetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_unsetenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UnsetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				int ret = UnsetenvUnsafeNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Clear a variable from the environment.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, consider using<br/>
		/// SDL_UnsetEnvironmentVariable() instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_unsetenv_unsafe")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UnsetenvUnsafe([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = UnsetenvUnsafeNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Sort an array.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *a, const void *b)<br/>
		/// {<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->n <br/>
		/// <<br/>
		/// B->n) {<br/>
		/// return -1;<br/>
		/// } else if (B->n <br/>
		/// <<br/>
		/// A->n) {<br/>
		/// return 1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 3, "third" }, { 1, "first" }, { 2, "second" }<br/>
		/// };<br/>
		/// SDL_qsort(values, SDL_arraysize(values), sizeof(values[0]), compare);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_qsort")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QsortNative([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, nuint, nuint, delegate*<void*, void*, int>, void>)funcTable[21])(baseValue, nmemb, size, (delegate*<void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare));
			#else
			((delegate* unmanaged[Cdecl]<nint, nuint, nuint, nint, void>)funcTable[21])((nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare));
			#endif
		}

		/// <summary>
		/// Sort an array.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *a, const void *b)<br/>
		/// {<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->n <br/>
		/// <<br/>
		/// B->n) {<br/>
		/// return -1;<br/>
		/// } else if (B->n <br/>
		/// <<br/>
		/// A->n) {<br/>
		/// return 1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 3, "third" }, { 1, "first" }, { 2, "second" }<br/>
		/// };<br/>
		/// SDL_qsort(values, SDL_arraysize(values), sizeof(values[0]), compare);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_qsort")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Qsort([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			QsortNative(baseValue, nmemb, size, compare);
		}

		/// <summary>
		/// Perform a binary search on a previously sorted array.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *a, const void *b)<br/>
		/// {<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->n <br/>
		/// <<br/>
		/// B->n) {<br/>
		/// return -1;<br/>
		/// } else if (B->n <br/>
		/// <<br/>
		/// A->n) {<br/>
		/// return 1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 1, "first" }, { 2, "second" }, { 3, "third" }<br/>
		/// };<br/>
		/// data key = { 2, NULL };<br/>
		/// data *result = SDL_bsearch(<br/>
		/// &key<br/>
		/// , values, SDL_arraysize(values), sizeof(values[0]), compare);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_bsearch")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* BsearchNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, nuint, delegate*<void*, void*, int>, void*>)funcTable[22])(key, baseValue, nmemb, size, (delegate*<void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare));
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint, nint, nint>)funcTable[22])((nint)key, (nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare));
			#endif
		}

		/// <summary>
		/// Perform a binary search on a previously sorted array.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *a, const void *b)<br/>
		/// {<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->n <br/>
		/// <<br/>
		/// B->n) {<br/>
		/// return -1;<br/>
		/// } else if (B->n <br/>
		/// <<br/>
		/// A->n) {<br/>
		/// return 1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 1, "first" }, { 2, "second" }, { 3, "third" }<br/>
		/// };<br/>
		/// data key = { 2, NULL };<br/>
		/// data *result = SDL_bsearch(<br/>
		/// &key<br/>
		/// , values, SDL_arraysize(values), sizeof(values[0]), compare);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_bsearch")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Bsearch([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback")] SDLCompareCallback compare)
		{
			void* ret = BsearchNative(key, baseValue, nmemb, size, compare);
			return ret;
		}

		/// <summary>
		/// Sort an array, passing a userdata pointer to the compare function.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef enum {<br/>
		/// sort_increasing,<br/>
		/// sort_decreasing,<br/>
		/// } sort_method;<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *userdata, const void *a, const void *b)<br/>
		/// {<br/>
		/// sort_method method = (sort_method)(uintptr_t)userdata;<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->key <br/>
		/// <<br/>
		/// B->key) {<br/>
		/// return (method == sort_increasing) ? -1 : 1;<br/>
		/// } else if (B->key <br/>
		/// <<br/>
		/// A->key) {<br/>
		/// return (method == sort_increasing) ? 1 : -1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 3, "third" }, { 1, "first" }, { 2, "second" }<br/>
		/// };<br/>
		/// SDL_qsort_r(values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_qsort_r")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QsortRNative([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, nuint, nuint, delegate*<void*, void*, void*, int>, void*, void>)funcTable[23])(baseValue, nmemb, size, (delegate*<void*, void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare), userdata);
			#else
			((delegate* unmanaged[Cdecl]<nint, nuint, nuint, nint, nint, void>)funcTable[23])((nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Sort an array, passing a userdata pointer to the compare function.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef enum {<br/>
		/// sort_increasing,<br/>
		/// sort_decreasing,<br/>
		/// } sort_method;<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *userdata, const void *a, const void *b)<br/>
		/// {<br/>
		/// sort_method method = (sort_method)(uintptr_t)userdata;<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->key <br/>
		/// <<br/>
		/// B->key) {<br/>
		/// return (method == sort_increasing) ? -1 : 1;<br/>
		/// } else if (B->key <br/>
		/// <<br/>
		/// A->key) {<br/>
		/// return (method == sort_increasing) ? 1 : -1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 3, "third" }, { 1, "first" }, { 2, "second" }<br/>
		/// };<br/>
		/// SDL_qsort_r(values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_qsort_r")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void QsortR([NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			QsortRNative(baseValue, nmemb, size, compare, userdata);
		}

		/// <summary>
		/// Perform a binary search on a previously sorted array, passing a userdata<br/>
		/// pointer to the compare function.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef enum {<br/>
		/// sort_increasing,<br/>
		/// sort_decreasing,<br/>
		/// } sort_method;<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *userdata, const void *a, const void *b)<br/>
		/// {<br/>
		/// sort_method method = (sort_method)(uintptr_t)userdata;<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->key <br/>
		/// <<br/>
		/// B->key) {<br/>
		/// return (method == sort_increasing) ? -1 : 1;<br/>
		/// } else if (B->key <br/>
		/// <<br/>
		/// A->key) {<br/>
		/// return (method == sort_increasing) ? 1 : -1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 1, "first" }, { 2, "second" }, { 3, "third" }<br/>
		/// };<br/>
		/// data key = { 2, NULL };<br/>
		/// data *result = SDL_bsearch_r(<br/>
		/// &key<br/>
		/// , values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_bsearch_r")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* BsearchRNative([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, nuint, delegate*<void*, void*, void*, int>, void*, void*>)funcTable[24])(key, baseValue, nmemb, size, (delegate*<void*, void*, void*, int>)Utils.GetFunctionPointerForDelegate(compare), userdata);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint, nint, nint, nint>)funcTable[24])((nint)key, (nint)baseValue, nmemb, size, (nint)Utils.GetFunctionPointerForDelegate(compare), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Perform a binary search on a previously sorted array, passing a userdata<br/>
		/// pointer to the compare function.<br/>
		/// For example:<br/>
		/// ```c<br/>
		/// typedef enum {<br/>
		/// sort_increasing,<br/>
		/// sort_decreasing,<br/>
		/// } sort_method;<br/>
		/// typedef struct {<br/>
		/// int key;<br/>
		/// const char *string;<br/>
		/// } data;<br/>
		/// int SDLCALL compare(const void *userdata, const void *a, const void *b)<br/>
		/// {<br/>
		/// sort_method method = (sort_method)(uintptr_t)userdata;<br/>
		/// const data *A = (const data *)a;<br/>
		/// const data *B = (const data *)b;<br/>
		/// if (A->key <br/>
		/// <<br/>
		/// B->key) {<br/>
		/// return (method == sort_increasing) ? -1 : 1;<br/>
		/// } else if (B->key <br/>
		/// <<br/>
		/// A->key) {<br/>
		/// return (method == sort_increasing) ? 1 : -1;<br/>
		/// } else {<br/>
		/// return 0;<br/>
		/// }<br/>
		/// }<br/>
		/// data values[] = {<br/>
		/// { 1, "first" }, { 2, "second" }, { 3, "third" }<br/>
		/// };<br/>
		/// data key = { 2, NULL };<br/>
		/// data *result = SDL_bsearch_r(<br/>
		/// &key<br/>
		/// , values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_bsearch_r")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* BsearchR([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "void const *")] void* baseValue, [NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "compare")] [NativeName(NativeNameType.Type, "SDL_CompareCallback_r")] SDLCompareCallbackR compare, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			void* ret = BsearchRNative(key, baseValue, nmemb, size, compare, userdata);
			return ret;
		}

		/// <summary>
		/// Compute the absolute value of `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_abs")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AbsNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[25])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[25])(x);
			#endif
		}

		/// <summary>
		/// Compute the absolute value of `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_abs")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Abs([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = AbsNative(x);
			return ret;
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z' and 'A-Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalpha")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsalphaNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[26])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[26])(x);
			#endif
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z' and 'A-Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalpha")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isalpha([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsalphaNative(x);
			return ret;
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter) or a number.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z', 'A-Z', and '0-9' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalnum")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsalnumNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[27])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[27])(x);
			#endif
		}

		/// <summary>
		/// Query if a character is alphabetic (a letter) or a number.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// for English 'a-z', 'A-Z', and '0-9' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isalnum")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isalnum([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsalnumNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is blank (a space or tab).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0x20 (space) or 0x9 (tab) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isblank")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsblankNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[28])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[28])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is blank (a space or tab).<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0x20 (space) or 0x9 (tab) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isblank")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isblank([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsblankNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a control character.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0 through 0x1F, and 0x7F, as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iscntrl")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IscntrlNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[29])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[29])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a control character.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 0 through 0x1F, and 0x7F, as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iscntrl")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Iscntrl([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IscntrlNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a numeric digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// '0' (0x30) through '9' (0x39), as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsdigitNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[30])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[30])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a numeric digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// '0' (0x30) through '9' (0x39), as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isdigit([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsdigitNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a hexadecimal digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'F', 'a' through 'f', and '0' through '9', as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isxdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsxdigitNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[31])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[31])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a hexadecimal digit.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'F', 'a' through 'f', and '0' through '9', as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isxdigit")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isxdigit([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsxdigitNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is a punctuation mark.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `((SDL_isgraph(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// (!SDL_isalnum(x)))`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ispunct")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IspunctNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[32])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[32])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is a punctuation mark.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `((SDL_isgraph(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// (!SDL_isalnum(x)))`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ispunct")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Ispunct([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IspunctNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is whitespace.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat the<br/>
		/// following ASCII values as true:<br/>
		/// - space (0x20)<br/>
		/// - tab (0x09)<br/>
		/// - newline (0x0A)<br/>
		/// - vertical tab (0x0B)<br/>
		/// - form feed (0x0C)<br/>
		/// - return (0x0D)<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isspace")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsspaceNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[33])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[33])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is whitespace.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat the<br/>
		/// following ASCII values as true:<br/>
		/// - space (0x20)<br/>
		/// - tab (0x09)<br/>
		/// - newline (0x0A)<br/>
		/// - vertical tab (0x0B)<br/>
		/// - form feed (0x0C)<br/>
		/// - return (0x0D)<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isspace")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isspace([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsspaceNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is upper case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsupperNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[34])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[34])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is upper case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'A' through 'Z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isupper([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsupperNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is lower case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'a' through 'z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_islower")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IslowerNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[35])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[35])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is lower case.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// 'a' through 'z' as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_islower")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Islower([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IslowerNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is "printable".<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// ' ' (0x20) through '~' (0x7E) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isprint")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsprintNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[36])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[36])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is "printable".<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this will only treat ASCII values<br/>
		/// ' ' (0x20) through '~' (0x7E) as true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isprint")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isprint([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsprintNative(x);
			return ret;
		}

		/// <summary>
		/// Report if a character is any "printable" except space.<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `(SDL_isprint(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// ((x) != ' ')`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isgraph")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsgraphNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[37])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[37])(x);
			#endif
		}

		/// <summary>
		/// Report if a character is any "printable" except space.<br/>
		/// Be advised that "printable" has a definition that goes back to text<br/>
		/// terminals from the dawn of computing, making this a sort of special case<br/>
		/// function that is not suitable for Unicode (or most any) text management.<br/>
		/// **WARNING**: Regardless of system locale, this is equivalent to<br/>
		/// `(SDL_isprint(x)) <br/>
		/// &<br/>
		/// &<br/>
		/// ((x) != ' ')`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_isgraph")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Isgraph([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = IsgraphNative(x);
			return ret;
		}

		/// <summary>
		/// Convert low-ASCII English letters to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'a' through 'z' to uppercase.<br/>
		/// This function returns the uppercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already uppercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_toupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ToupperNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[38])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[38])(x);
			#endif
		}

		/// <summary>
		/// Convert low-ASCII English letters to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'a' through 'z' to uppercase.<br/>
		/// This function returns the uppercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already uppercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_toupper")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Toupper([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = ToupperNative(x);
			return ret;
		}

		/// <summary>
		/// Convert low-ASCII English letters to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function returns the lowercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already lowercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_tolower")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int TolowerNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[39])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[39])(x);
			#endif
		}

		/// <summary>
		/// Convert low-ASCII English letters to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function returns the lowercase equivalent of `x`. If a character<br/>
		/// cannot be converted, or is already lowercase, this function returns `x`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_tolower")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Tolower([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x)
		{
			int ret = TolowerNative(x);
			return ret;
		}

		/// <summary>
		/// Calculate a CRC-16 value.<br/>
		/// https://en.wikipedia.org/wiki/Cyclic_redundancy_check<br/>
		/// This function can be called multiple times, to stream data to be<br/>
		/// checksummed in blocks. Each call must provide the previous CRC-16 return<br/>
		/// value to be updated with the next block. The first call to this function<br/>
		/// for a set of blocks should pass in a zero CRC value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_crc16")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort Crc16Native([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint16")] ushort crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, void*, nuint, ushort>)funcTable[40])(crc, data, len);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<ushort, nint, nuint, ushort>)funcTable[40])(crc, (nint)data, len);
			#endif
		}

		/// <summary>
		/// Calculate a CRC-16 value.<br/>
		/// https://en.wikipedia.org/wiki/Cyclic_redundancy_check<br/>
		/// This function can be called multiple times, to stream data to be<br/>
		/// checksummed in blocks. Each call must provide the previous CRC-16 return<br/>
		/// value to be updated with the next block. The first call to this function<br/>
		/// for a set of blocks should pass in a zero CRC value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_crc16")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort Crc16([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint16")] ushort crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			ushort ret = Crc16Native(crc, data, len);
			return ret;
		}

		/// <summary>
		/// Calculate a CRC-32 value.<br/>
		/// https://en.wikipedia.org/wiki/Cyclic_redundancy_check<br/>
		/// This function can be called multiple times, to stream data to be<br/>
		/// checksummed in blocks. Each call must provide the previous CRC-32 return<br/>
		/// value to be updated with the next block. The first call to this function<br/>
		/// for a set of blocks should pass in a zero CRC value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_crc32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint Crc32Native([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint32")] uint crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, void*, nuint, uint>)funcTable[41])(crc, data, len);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, nint, nuint, uint>)funcTable[41])(crc, (nint)data, len);
			#endif
		}

		/// <summary>
		/// Calculate a CRC-32 value.<br/>
		/// https://en.wikipedia.org/wiki/Cyclic_redundancy_check<br/>
		/// This function can be called multiple times, to stream data to be<br/>
		/// checksummed in blocks. Each call must provide the previous CRC-32 return<br/>
		/// value to be updated with the next block. The first call to this function<br/>
		/// for a set of blocks should pass in a zero CRC value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_crc32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint Crc32([NativeName(NativeNameType.Param, "crc")] [NativeName(NativeNameType.Type, "Uint32")] uint crc, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			uint ret = Crc32Native(crc, data, len);
			return ret;
		}

		/// <summary>
		/// Calculate a 32-bit MurmurHash3 value for a block of data.<br/>
		/// https://en.wikipedia.org/wiki/MurmurHash<br/>
		/// A seed may be specified, which changes the final results consistently, but<br/>
		/// this does not work like SDL_crc16 and SDL_crc32: you can't feed a previous<br/>
		/// result from this function back into itself as the next seed value to<br/>
		/// calculate a hash in chunks; it won't produce the same hash as it would if<br/>
		/// the same data was provided in a single call.<br/>
		/// If you aren't sure what to provide for a seed, zero is fine. Murmur3 is not<br/>
		/// cryptographically secure, so it shouldn't be used for hashing top-secret<br/>
		/// data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_murmur3_32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint Murmur332Native([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "Uint32")] uint seed)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, nuint, uint, uint>)funcTable[42])(data, len, seed);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nuint, uint, uint>)funcTable[42])((nint)data, len, seed);
			#endif
		}

		/// <summary>
		/// Calculate a 32-bit MurmurHash3 value for a block of data.<br/>
		/// https://en.wikipedia.org/wiki/MurmurHash<br/>
		/// A seed may be specified, which changes the final results consistently, but<br/>
		/// this does not work like SDL_crc16 and SDL_crc32: you can't feed a previous<br/>
		/// result from this function back into itself as the next seed value to<br/>
		/// calculate a hash in chunks; it won't produce the same hash as it would if<br/>
		/// the same data was provided in a single call.<br/>
		/// If you aren't sure what to provide for a seed, zero is fine. Murmur3 is not<br/>
		/// cryptographically secure, so it shouldn't be used for hashing top-secret<br/>
		/// data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_murmur3_32")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint Murmur332([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len, [NativeName(NativeNameType.Param, "seed")] [NativeName(NativeNameType.Type, "Uint32")] uint seed)
		{
			uint ret = Murmur332Native(data, len, seed);
			return ret;
		}

		/// <summary>
		/// Copy non-overlapping memory.<br/>
		/// The memory regions must not overlap. If they do, use SDL_memmove() instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memcpy")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MemcpyNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, void*>)funcTable[43])(dst, src, len);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nint>)funcTable[43])((nint)dst, (nint)src, len);
			#endif
		}

		/// <summary>
		/// Copy non-overlapping memory.<br/>
		/// The memory regions must not overlap. If they do, use SDL_memmove() instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memcpy")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			void* ret = MemcpyNative(dst, src, len);
			return ret;
		}

		/// <summary>
		/// Copy memory ranges that might overlap.<br/>
		/// It is okay for the memory regions to overlap. If you are confident that the<br/>
		/// regions never overlap, using SDL_memcpy() may improve performance.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memmove")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MemmoveNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, void*>)funcTable[44])(dst, src, len);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nint>)funcTable[44])((nint)dst, (nint)src, len);
			#endif
		}

		/// <summary>
		/// Copy memory ranges that might overlap.<br/>
		/// It is okay for the memory regions to overlap. If you are confident that the<br/>
		/// regions never overlap, using SDL_memcpy() may improve performance.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memmove")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memmove([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "void const *")] void* src, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			void* ret = MemmoveNative(dst, src, len);
			return ret;
		}

		/// <summary>
		/// Initialize all bytes of buffer of memory to a specific value.<br/>
		/// This function will set `len` bytes, pointed to by `dst`, to the value<br/>
		/// specified in `c`.<br/>
		/// Despite `c` being an `int` instead of a `char`, this only operates on<br/>
		/// bytes; `c` must be a value between 0 and 255, inclusive.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memset")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MemsetNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, int, nuint, void*>)funcTable[45])(dst, c, len);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, int, nuint, nint>)funcTable[45])((nint)dst, c, len);
			#endif
		}

		/// <summary>
		/// Initialize all bytes of buffer of memory to a specific value.<br/>
		/// This function will set `len` bytes, pointed to by `dst`, to the value<br/>
		/// specified in `c`.<br/>
		/// Despite `c` being an `int` instead of a `char`, this only operates on<br/>
		/// bytes; `c` must be a value between 0 and 255, inclusive.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memset")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memset([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			void* ret = MemsetNative(dst, c, len);
			return ret;
		}

		/// <summary>
		/// Initialize all 32-bit words of buffer of memory to a specific value.<br/>
		/// This function will set a buffer of `dwords` Uint32 values, pointed to by<br/>
		/// `dst`, to the value specified in `val`.<br/>
		/// Unlike SDL_memset, this sets 32-bit values, not bytes, so it's not limited<br/>
		/// to a range of 0-255.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memset4")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* Memset4Native([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "Uint32")] uint val, [NativeName(NativeNameType.Param, "dwords")] [NativeName(NativeNameType.Type, "size_t")] nuint dwords)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, uint, nuint, void*>)funcTable[46])(dst, val, dwords);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, uint, nuint, nint>)funcTable[46])((nint)dst, val, dwords);
			#endif
		}

		/// <summary>
		/// Initialize all 32-bit words of buffer of memory to a specific value.<br/>
		/// This function will set a buffer of `dwords` Uint32 values, pointed to by<br/>
		/// `dst`, to the value specified in `val`.<br/>
		/// Unlike SDL_memset, this sets 32-bit values, not bytes, so it's not limited<br/>
		/// to a range of 0-255.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memset4")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* Memset4([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "void *")] void* dst, [NativeName(NativeNameType.Param, "val")] [NativeName(NativeNameType.Type, "Uint32")] uint val, [NativeName(NativeNameType.Param, "dwords")] [NativeName(NativeNameType.Type, "size_t")] nuint dwords)
		{
			void* ret = Memset4Native(dst, val, dwords);
			return ret;
		}

		/// <summary>
		/// Compare two buffers of memory.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int MemcmpNative([NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "void const *")] void* s1, [NativeName(NativeNameType.Param, "s2")] [NativeName(NativeNameType.Type, "void const *")] void* s2, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<void*, void*, nuint, int>)funcTable[47])(s1, s2, len);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[47])((nint)s1, (nint)s2, len);
			#endif
		}

		/// <summary>
		/// Compare two buffers of memory.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_memcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Memcmp([NativeName(NativeNameType.Param, "s1")] [NativeName(NativeNameType.Type, "void const *")] void* s1, [NativeName(NativeNameType.Param, "s2")] [NativeName(NativeNameType.Type, "void const *")] void* s2, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "size_t")] nuint len)
		{
			int ret = MemcmpNative(s1, s2, len);
			return ret;
		}

		/// <summary>
		/// This works exactly like wcslen() but doesn't require access to a C runtime.<br/>
		/// Counts the number of wchar_t values in `wstr`, excluding the null<br/>
		/// terminator.<br/>
		/// Like SDL_strlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcslenNative([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, nuint>)funcTable[48])(wstr);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint>)funcTable[48])((nint)wstr);
			#endif
		}

		/// <summary>
		/// This works exactly like wcslen() but doesn't require access to a C runtime.<br/>
		/// Counts the number of wchar_t values in `wstr`, excluding the null<br/>
		/// terminator.<br/>
		/// Like SDL_strlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			nuint ret = WcslenNative(wstr);
			return ret;
		}

		/// <summary>
		/// This works exactly like wcslen() but doesn't require access to a C runtime.<br/>
		/// Counts the number of wchar_t values in `wstr`, excluding the null<br/>
		/// terminator.<br/>
		/// Like SDL_strlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr)
		{
			fixed (char* pwstr = &wstr)
			{
				nuint ret = WcslenNative((char*)pwstr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like wcslen() but doesn't require access to a C runtime.<br/>
		/// Counts the number of wchar_t values in `wstr`, excluding the null<br/>
		/// terminator.<br/>
		/// Like SDL_strlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> wstr)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcslenNative((char*)pwstr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like wcslen() but doesn't require access to a C runtime.<br/>
		/// Counts the number of wchar_t values in `wstr`, excluding the null<br/>
		/// terminator.<br/>
		/// Like SDL_strlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] string wstr)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcslenNative(pwstr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like wcsnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the<br/>
		/// null terminator.<br/>
		/// Like SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// Also, `maxlen` is a count of wide characters, not bytes!<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcsnlenNative([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, nuint, nuint>)funcTable[49])(wstr, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint, nuint>)funcTable[49])((nint)wstr, maxlen);
			#endif
		}

		/// <summary>
		/// This works exactly like wcsnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the<br/>
		/// null terminator.<br/>
		/// Like SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// Also, `maxlen` is a count of wide characters, not bytes!<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = WcsnlenNative(wstr, maxlen);
			return ret;
		}

		/// <summary>
		/// This works exactly like wcsnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the<br/>
		/// null terminator.<br/>
		/// Like SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// Also, `maxlen` is a count of wide characters, not bytes!<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pwstr = &wstr)
			{
				nuint ret = WcsnlenNative((char*)pwstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like wcsnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the<br/>
		/// null terminator.<br/>
		/// Like SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// Also, `maxlen` is a count of wide characters, not bytes!<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcsnlenNative((char*)pwstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like wcsnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the<br/>
		/// null terminator.<br/>
		/// Like SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,<br/>
		/// this counts wchar_t values in a string, even if the string's encoding is of<br/>
		/// variable width, like UTF-16.<br/>
		/// Also be aware that wchar_t is different sizes on different platforms (4<br/>
		/// bytes on Linux, 2 on Windows, etc).<br/>
		/// Also, `maxlen` is a count of wide characters, not bytes!<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcsnlen([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] string wstr, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pwstr = wstr)
			{
				nuint ret = WcsnlenNative(pwstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcslcpyNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, nuint>)funcTable[50])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[50])((nint)dst, (nint)src, maxlen);
			#endif
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = WcslcpyNative(dst, src, maxlen);
			return ret;
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				nuint ret = WcslcpyNative((char*)pdst, src, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			nuint ret = WcslcpyNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = &src)
			{
				nuint ret = WcslcpyNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcpyNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcpyNative(dst, psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = &src)
				{
					nuint ret = WcslcpyNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = src)
				{
					nuint ret = WcslcpyNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy a wide string.<br/>
		/// This function copies `maxlen` - 1 wide characters from `src` to `dst`, then<br/>
		/// appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` is 0, no wide characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcpy")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcpy([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char* psrc = src)
			{
				nuint ret = WcslcpyNative(pStr0, psrc, maxlen);
				dst = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint WcslcatNative([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, nuint>)funcTable[51])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[51])((nint)dst, (nint)src, maxlen);
			#endif
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			nuint ret = WcslcatNative(dst, src, maxlen);
			return ret;
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				nuint ret = WcslcatNative((char*)pdst, src, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] char* src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			nuint ret = WcslcatNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = &src)
			{
				nuint ret = WcslcatNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcatNative(dst, (char*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] char* dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* psrc = src)
			{
				nuint ret = WcslcatNative(dst, psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ref char src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = &src)
				{
					nuint ret = WcslcatNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref char dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (char* pdst = &dst)
			{
				fixed (char* psrc = src)
				{
					nuint ret = WcslcatNative((char*)pdst, (char*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Concatenate wide strings.<br/>
		/// This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters<br/>
		/// from `src` to the end of the wide string in `dst`, then appends a null<br/>
		/// terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcslcat")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Wcslcat([NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "wchar *")] ref string dst, [NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "wchar const *")] string src, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char* psrc = src)
			{
				nuint ret = WcslcatNative(pStr0, psrc, maxlen);
				dst = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a wide string.<br/>
		/// This allocates enough space for a null-terminated copy of `wstr`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static char* WcsdupNative([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*>)funcTable[52])(wstr);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[52])((nint)wstr);
			#endif
		}

		/// <summary>
		/// Allocate a copy of a wide string.<br/>
		/// This allocates enough space for a null-terminated copy of `wstr`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsdup([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			char* ret = WcsdupNative(wstr);
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a wide string.<br/>
		/// This allocates enough space for a null-terminated copy of `wstr`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsdupS([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] char* wstr)
		{
			string ret = Utils.DecodeStringUTF16(WcsdupNative(wstr));
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a wide string.<br/>
		/// This allocates enough space for a null-terminated copy of `wstr`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsdup([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr)
		{
			fixed (char* pwstr = &wstr)
			{
				char* ret = WcsdupNative((char*)pwstr);
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a wide string.<br/>
		/// This allocates enough space for a null-terminated copy of `wstr`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static string WcsdupS([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ref char wstr)
		{
			fixed (char* pwstr = &wstr)
			{
				string ret = Utils.DecodeStringUTF16(WcsdupNative((char*)pwstr));
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a wide string.<br/>
		/// This allocates enough space for a null-terminated copy of `wstr`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_wcsdup")]
		[return: NativeName(NativeNameType.Type, "wchar *")]
		public static char* Wcsdup([NativeName(NativeNameType.Param, "wstr")] [NativeName(NativeNameType.Type, "wchar const *")] ReadOnlySpan<char> wstr)
		{
			fixed (char* pwstr = wstr)
			{
				char* ret = WcsdupNative((char*)pwstr);
				return ret;
			}
		}
	}
}
