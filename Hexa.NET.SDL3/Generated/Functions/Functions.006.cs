// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Use this function to pause audio playback on a specified device.<br/>
		/// This function pauses audio processing for a given device. Any bound audio<br/>
		/// streams will not progress, and no audio will be generated. Pausing one<br/>
		/// device does not prevent other unpaused devices from running.<br/>
		/// Unlike in SDL2, audio devices start in an _unpaused_ state, since an app<br/>
		/// has to bind a stream before any audio will flow. Pausing a paused device is<br/>
		/// a legal no-op.<br/>
		/// Pausing a device can be useful to halt all audio without unbinding all the<br/>
		/// audio streams. This might be useful while a game is paused, or a level is<br/>
		/// loading, etc.<br/>
		/// Physical devices can not be paused or unpaused, only logical devices<br/>
		/// created through SDL_OpenAudioDevice() can be.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PauseAudioDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PauseAudioDeviceNative([NativeName(NativeNameType.Param, "dev")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint dev)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int>)funcTable[286])(dev);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, int>)funcTable[286])(dev);
			#endif
		}

		/// <summary>
		/// Use this function to pause audio playback on a specified device.<br/>
		/// This function pauses audio processing for a given device. Any bound audio<br/>
		/// streams will not progress, and no audio will be generated. Pausing one<br/>
		/// device does not prevent other unpaused devices from running.<br/>
		/// Unlike in SDL2, audio devices start in an _unpaused_ state, since an app<br/>
		/// has to bind a stream before any audio will flow. Pausing a paused device is<br/>
		/// a legal no-op.<br/>
		/// Pausing a device can be useful to halt all audio without unbinding all the<br/>
		/// audio streams. This might be useful while a game is paused, or a level is<br/>
		/// loading, etc.<br/>
		/// Physical devices can not be paused or unpaused, only logical devices<br/>
		/// created through SDL_OpenAudioDevice() can be.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PauseAudioDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PauseAudioDevice([NativeName(NativeNameType.Param, "dev")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint dev)
		{
			int ret = PauseAudioDeviceNative(dev);
			return ret;
		}

		/// <summary>
		/// Use this function to unpause audio playback on a specified device.<br/>
		/// This function unpauses audio processing for a given device that has<br/>
		/// previously been paused with SDL_PauseAudioDevice(). Once unpaused, any<br/>
		/// bound audio streams will begin to progress again, and audio can be<br/>
		/// generated.<br/>
		/// Unlike in SDL2, audio devices start in an _unpaused_ state, since an app<br/>
		/// has to bind a stream before any audio will flow. Unpausing an unpaused<br/>
		/// device is a legal no-op.<br/>
		/// Physical devices can not be paused or unpaused, only logical devices<br/>
		/// created through SDL_OpenAudioDevice() can be.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ResumeAudioDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ResumeAudioDeviceNative([NativeName(NativeNameType.Param, "dev")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint dev)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int>)funcTable[287])(dev);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, int>)funcTable[287])(dev);
			#endif
		}

		/// <summary>
		/// Use this function to unpause audio playback on a specified device.<br/>
		/// This function unpauses audio processing for a given device that has<br/>
		/// previously been paused with SDL_PauseAudioDevice(). Once unpaused, any<br/>
		/// bound audio streams will begin to progress again, and audio can be<br/>
		/// generated.<br/>
		/// Unlike in SDL2, audio devices start in an _unpaused_ state, since an app<br/>
		/// has to bind a stream before any audio will flow. Unpausing an unpaused<br/>
		/// device is a legal no-op.<br/>
		/// Physical devices can not be paused or unpaused, only logical devices<br/>
		/// created through SDL_OpenAudioDevice() can be.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ResumeAudioDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ResumeAudioDevice([NativeName(NativeNameType.Param, "dev")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint dev)
		{
			int ret = ResumeAudioDeviceNative(dev);
			return ret;
		}

		/// <summary>
		/// Use this function to query if an audio device is paused.<br/>
		/// Unlike in SDL2, audio devices start in an _unpaused_ state, since an app<br/>
		/// has to bind a stream before any audio will flow.<br/>
		/// Physical devices can not be paused or unpaused, only logical devices<br/>
		/// created through SDL_OpenAudioDevice() can be. Physical and invalid device<br/>
		/// IDs will report themselves as unpaused here.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AudioDevicePaused")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AudioDevicePausedNative([NativeName(NativeNameType.Param, "dev")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint dev)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int>)funcTable[288])(dev);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, int>)funcTable[288])(dev);
			#endif
		}

		/// <summary>
		/// Use this function to query if an audio device is paused.<br/>
		/// Unlike in SDL2, audio devices start in an _unpaused_ state, since an app<br/>
		/// has to bind a stream before any audio will flow.<br/>
		/// Physical devices can not be paused or unpaused, only logical devices<br/>
		/// created through SDL_OpenAudioDevice() can be. Physical and invalid device<br/>
		/// IDs will report themselves as unpaused here.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AudioDevicePaused")]
		[return: NativeName(NativeNameType.Type, "SDL_bool")]
		public static int AudioDevicePaused([NativeName(NativeNameType.Param, "dev")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint dev)
		{
			int ret = AudioDevicePausedNative(dev);
			return ret;
		}

		/// <summary>
		/// Get the gain of an audio device.<br/>
		/// The gain of a device is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio devices default to a gain of 1.0f (no change in output).<br/>
		/// Physical devices may not have their gain changed, only logical devices, and<br/>
		/// this function will always return -1.0f when used on physical devices.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioDeviceGain")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetAudioDeviceGainNative([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, float>)funcTable[289])(devid);
			#else
			return (float)((delegate* unmanaged[Cdecl]<uint, float>)funcTable[289])(devid);
			#endif
		}

		/// <summary>
		/// Get the gain of an audio device.<br/>
		/// The gain of a device is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio devices default to a gain of 1.0f (no change in output).<br/>
		/// Physical devices may not have their gain changed, only logical devices, and<br/>
		/// this function will always return -1.0f when used on physical devices.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioDeviceGain")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetAudioDeviceGain([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid)
		{
			float ret = GetAudioDeviceGainNative(devid);
			return ret;
		}

		/// <summary>
		/// Change the gain of an audio device.<br/>
		/// The gain of a device is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio devices default to a gain of 1.0f (no change in output).<br/>
		/// Physical devices may not have their gain changed, only logical devices, and<br/>
		/// this function will always return -1 when used on physical devices. While it<br/>
		/// might seem attractive to adjust several logical devices at once in this<br/>
		/// way, it would allow an app or library to interfere with another portion of<br/>
		/// the program's otherwise-isolated devices.<br/>
		/// This is applied, along with any per-audiostream gain, during playback to<br/>
		/// the hardware, and can be continuously changed to create various effects. On<br/>
		/// recording devices, this will adjust the gain before passing the data into<br/>
		/// an audiostream; that recording audiostream can then adjust its gain further<br/>
		/// when outputting the data elsewhere, if it likes, but that second gain is<br/>
		/// not applied until the data leaves the audiostream again.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioDeviceGain")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioDeviceGainNative([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "gain")] [NativeName(NativeNameType.Type, "float")] float gain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, float, int>)funcTable[290])(devid, gain);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, float, int>)funcTable[290])(devid, gain);
			#endif
		}

		/// <summary>
		/// Change the gain of an audio device.<br/>
		/// The gain of a device is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio devices default to a gain of 1.0f (no change in output).<br/>
		/// Physical devices may not have their gain changed, only logical devices, and<br/>
		/// this function will always return -1 when used on physical devices. While it<br/>
		/// might seem attractive to adjust several logical devices at once in this<br/>
		/// way, it would allow an app or library to interfere with another portion of<br/>
		/// the program's otherwise-isolated devices.<br/>
		/// This is applied, along with any per-audiostream gain, during playback to<br/>
		/// the hardware, and can be continuously changed to create various effects. On<br/>
		/// recording devices, this will adjust the gain before passing the data into<br/>
		/// an audiostream; that recording audiostream can then adjust its gain further<br/>
		/// when outputting the data elsewhere, if it likes, but that second gain is<br/>
		/// not applied until the data leaves the audiostream again.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioDeviceGain")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioDeviceGain([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "gain")] [NativeName(NativeNameType.Type, "float")] float gain)
		{
			int ret = SetAudioDeviceGainNative(devid, gain);
			return ret;
		}

		/// <summary>
		/// Close a previously-opened audio device.<br/>
		/// The application should close open audio devices once they are no longer<br/>
		/// needed.<br/>
		/// This function may block briefly while pending audio data is played by the<br/>
		/// hardware, so that applications don't drop the last buffer of data they<br/>
		/// supplied if terminating immediately afterwards.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CloseAudioDevice")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CloseAudioDeviceNative([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[291])(devid);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[291])(devid);
			#endif
		}

		/// <summary>
		/// Close a previously-opened audio device.<br/>
		/// The application should close open audio devices once they are no longer<br/>
		/// needed.<br/>
		/// This function may block briefly while pending audio data is played by the<br/>
		/// hardware, so that applications don't drop the last buffer of data they<br/>
		/// supplied if terminating immediately afterwards.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CloseAudioDevice")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CloseAudioDevice([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid)
		{
			CloseAudioDeviceNative(devid);
		}

		/// <summary>
		/// Bind a list of audio streams to an audio device.<br/>
		/// Audio data will flow through any bound streams. For a playback device, data<br/>
		/// for all bound streams will be mixed together and fed to the device. For a<br/>
		/// recording device, a copy of recorded data will be provided to each bound<br/>
		/// stream.<br/>
		/// Audio streams can only be bound to an open device. This operation is<br/>
		/// atomic--all streams bound in the same call will start processing at the<br/>
		/// same time, so they can stay in sync. Also: either all streams will be bound<br/>
		/// or none of them will be.<br/>
		/// It is an error to bind an already-bound stream; it must be explicitly<br/>
		/// unbound first.<br/>
		/// Binding a stream to a device will set its output format for playback<br/>
		/// devices, and its input format for recording devices, so they match the<br/>
		/// device's settings. The caller is welcome to change the other end of the<br/>
		/// stream's format at any time.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_BindAudioStreams")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int BindAudioStreamsNative([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "streams")] [NativeName(NativeNameType.Type, "SDL_AudioStream * *")] SDLAudioStream** streams, [NativeName(NativeNameType.Param, "num_streams")] [NativeName(NativeNameType.Type, "int")] int numStreams)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, SDLAudioStream**, int, int>)funcTable[292])(devid, streams, numStreams);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int, int>)funcTable[292])(devid, (nint)streams, numStreams);
			#endif
		}

		/// <summary>
		/// Bind a list of audio streams to an audio device.<br/>
		/// Audio data will flow through any bound streams. For a playback device, data<br/>
		/// for all bound streams will be mixed together and fed to the device. For a<br/>
		/// recording device, a copy of recorded data will be provided to each bound<br/>
		/// stream.<br/>
		/// Audio streams can only be bound to an open device. This operation is<br/>
		/// atomic--all streams bound in the same call will start processing at the<br/>
		/// same time, so they can stay in sync. Also: either all streams will be bound<br/>
		/// or none of them will be.<br/>
		/// It is an error to bind an already-bound stream; it must be explicitly<br/>
		/// unbound first.<br/>
		/// Binding a stream to a device will set its output format for playback<br/>
		/// devices, and its input format for recording devices, so they match the<br/>
		/// device's settings. The caller is welcome to change the other end of the<br/>
		/// stream's format at any time.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_BindAudioStreams")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BindAudioStreams([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "streams")] [NativeName(NativeNameType.Type, "SDL_AudioStream * *")] SDLAudioStream** streams, [NativeName(NativeNameType.Param, "num_streams")] [NativeName(NativeNameType.Type, "int")] int numStreams)
		{
			int ret = BindAudioStreamsNative(devid, streams, numStreams);
			return ret;
		}

		/// <summary>
		/// Bind a list of audio streams to an audio device.<br/>
		/// Audio data will flow through any bound streams. For a playback device, data<br/>
		/// for all bound streams will be mixed together and fed to the device. For a<br/>
		/// recording device, a copy of recorded data will be provided to each bound<br/>
		/// stream.<br/>
		/// Audio streams can only be bound to an open device. This operation is<br/>
		/// atomic--all streams bound in the same call will start processing at the<br/>
		/// same time, so they can stay in sync. Also: either all streams will be bound<br/>
		/// or none of them will be.<br/>
		/// It is an error to bind an already-bound stream; it must be explicitly<br/>
		/// unbound first.<br/>
		/// Binding a stream to a device will set its output format for playback<br/>
		/// devices, and its input format for recording devices, so they match the<br/>
		/// device's settings. The caller is welcome to change the other end of the<br/>
		/// stream's format at any time.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_BindAudioStreams")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BindAudioStreams([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "streams")] [NativeName(NativeNameType.Type, "SDL_AudioStream * *")] ref SDLAudioStream* streams, [NativeName(NativeNameType.Param, "num_streams")] [NativeName(NativeNameType.Type, "int")] int numStreams)
		{
			fixed (SDLAudioStream** pstreams = &streams)
			{
				int ret = BindAudioStreamsNative(devid, (SDLAudioStream**)pstreams, numStreams);
				return ret;
			}
		}

		/// <summary>
		/// Bind a single audio stream to an audio device.<br/>
		/// This is a convenience function, equivalent to calling<br/>
		/// `SDL_BindAudioStreams(devid, <br/>
		/// &stream<br/>
		/// , 1)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_BindAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int BindAudioStreamNative([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, SDLAudioStream*, int>)funcTable[293])(devid, stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)funcTable[293])(devid, (nint)stream);
			#endif
		}

		/// <summary>
		/// Bind a single audio stream to an audio device.<br/>
		/// This is a convenience function, equivalent to calling<br/>
		/// `SDL_BindAudioStreams(devid, <br/>
		/// &stream<br/>
		/// , 1)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_BindAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BindAudioStream([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = BindAudioStreamNative(devid, stream);
			return ret;
		}

		/// <summary>
		/// Bind a single audio stream to an audio device.<br/>
		/// This is a convenience function, equivalent to calling<br/>
		/// `SDL_BindAudioStreams(devid, <br/>
		/// &stream<br/>
		/// , 1)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_BindAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int BindAudioStream([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = BindAudioStreamNative(devid, (SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Unbind a list of audio streams from their audio devices.<br/>
		/// The streams being unbound do not all have to be on the same device. All<br/>
		/// streams on the same device will be unbound atomically (data will stop<br/>
		/// flowing through all unbound streams on the same device at the same time).<br/>
		/// Unbinding a stream that isn't bound to a device is a legal no-op.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnbindAudioStreams")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnbindAudioStreamsNative([NativeName(NativeNameType.Param, "streams")] [NativeName(NativeNameType.Type, "SDL_AudioStream * *")] SDLAudioStream** streams, [NativeName(NativeNameType.Param, "num_streams")] [NativeName(NativeNameType.Type, "int")] int numStreams)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLAudioStream**, int, void>)funcTable[294])(streams, numStreams);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[294])((nint)streams, numStreams);
			#endif
		}

		/// <summary>
		/// Unbind a list of audio streams from their audio devices.<br/>
		/// The streams being unbound do not all have to be on the same device. All<br/>
		/// streams on the same device will be unbound atomically (data will stop<br/>
		/// flowing through all unbound streams on the same device at the same time).<br/>
		/// Unbinding a stream that isn't bound to a device is a legal no-op.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnbindAudioStreams")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnbindAudioStreams([NativeName(NativeNameType.Param, "streams")] [NativeName(NativeNameType.Type, "SDL_AudioStream * *")] SDLAudioStream** streams, [NativeName(NativeNameType.Param, "num_streams")] [NativeName(NativeNameType.Type, "int")] int numStreams)
		{
			UnbindAudioStreamsNative(streams, numStreams);
		}

		/// <summary>
		/// Unbind a list of audio streams from their audio devices.<br/>
		/// The streams being unbound do not all have to be on the same device. All<br/>
		/// streams on the same device will be unbound atomically (data will stop<br/>
		/// flowing through all unbound streams on the same device at the same time).<br/>
		/// Unbinding a stream that isn't bound to a device is a legal no-op.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnbindAudioStreams")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnbindAudioStreams([NativeName(NativeNameType.Param, "streams")] [NativeName(NativeNameType.Type, "SDL_AudioStream * *")] ref SDLAudioStream* streams, [NativeName(NativeNameType.Param, "num_streams")] [NativeName(NativeNameType.Type, "int")] int numStreams)
		{
			fixed (SDLAudioStream** pstreams = &streams)
			{
				UnbindAudioStreamsNative((SDLAudioStream**)pstreams, numStreams);
			}
		}

		/// <summary>
		/// Unbind a single audio stream from its audio device.<br/>
		/// This is a convenience function, equivalent to calling<br/>
		/// `SDL_UnbindAudioStreams(<br/>
		/// &stream<br/>
		/// , 1)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnbindAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnbindAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLAudioStream*, void>)funcTable[295])(stream);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[295])((nint)stream);
			#endif
		}

		/// <summary>
		/// Unbind a single audio stream from its audio device.<br/>
		/// This is a convenience function, equivalent to calling<br/>
		/// `SDL_UnbindAudioStreams(<br/>
		/// &stream<br/>
		/// , 1)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnbindAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnbindAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			UnbindAudioStreamNative(stream);
		}

		/// <summary>
		/// Unbind a single audio stream from its audio device.<br/>
		/// This is a convenience function, equivalent to calling<br/>
		/// `SDL_UnbindAudioStreams(<br/>
		/// &stream<br/>
		/// , 1)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnbindAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UnbindAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				UnbindAudioStreamNative((SDLAudioStream*)pstream);
			}
		}

		/// <summary>
		/// Query an audio stream for its currently-bound device.<br/>
		/// This reports the audio device that an audio stream is currently bound to.<br/>
		/// If not bound, or invalid, this returns zero, which is not a valid device<br/>
		/// ID.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioDeviceID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetAudioStreamDeviceNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, uint>)funcTable[296])(stream);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[296])((nint)stream);
			#endif
		}

		/// <summary>
		/// Query an audio stream for its currently-bound device.<br/>
		/// This reports the audio device that an audio stream is currently bound to.<br/>
		/// If not bound, or invalid, this returns zero, which is not a valid device<br/>
		/// ID.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioDeviceID")]
		public static uint GetAudioStreamDevice([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			uint ret = GetAudioStreamDeviceNative(stream);
			return ret;
		}

		/// <summary>
		/// Query an audio stream for its currently-bound device.<br/>
		/// This reports the audio device that an audio stream is currently bound to.<br/>
		/// If not bound, or invalid, this returns zero, which is not a valid device<br/>
		/// ID.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioDeviceID")]
		public static uint GetAudioStreamDevice([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				uint ret = GetAudioStreamDeviceNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Create a new audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateAudioStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLAudioStream* CreateAudioStreamNative([NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioSpec*, SDLAudioSpec*, SDLAudioStream*>)funcTable[297])(srcSpec, dstSpec);
			#else
			return (SDLAudioStream*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[297])((nint)srcSpec, (nint)dstSpec);
			#endif
		}

		/// <summary>
		/// Create a new audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateAudioStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		public static SDLAudioStream* CreateAudioStream([NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			SDLAudioStream* ret = CreateAudioStreamNative(srcSpec, dstSpec);
			return ret;
		}

		/// <summary>
		/// Create a new audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateAudioStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		public static SDLAudioStream* CreateAudioStream([NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			fixed (SDLAudioSpec* psrcSpec = &srcSpec)
			{
				SDLAudioStream* ret = CreateAudioStreamNative((SDLAudioSpec*)psrcSpec, dstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Create a new audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateAudioStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		public static SDLAudioStream* CreateAudioStream([NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioSpec* pdstSpec = &dstSpec)
			{
				SDLAudioStream* ret = CreateAudioStreamNative(srcSpec, (SDLAudioSpec*)pdstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Create a new audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateAudioStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		public static SDLAudioStream* CreateAudioStream([NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioSpec* psrcSpec = &srcSpec)
			{
				fixed (SDLAudioSpec* pdstSpec = &dstSpec)
				{
					SDLAudioStream* ret = CreateAudioStreamNative((SDLAudioSpec*)psrcSpec, (SDLAudioSpec*)pdstSpec);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the properties associated with an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetAudioStreamPropertiesNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, uint>)funcTable[298])(stream);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[298])((nint)stream);
			#endif
		}

		/// <summary>
		/// Get the properties associated with an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		public static uint GetAudioStreamProperties([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			uint ret = GetAudioStreamPropertiesNative(stream);
			return ret;
		}

		/// <summary>
		/// Get the properties associated with an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		public static uint GetAudioStreamProperties([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				uint ret = GetAudioStreamPropertiesNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetAudioStreamFormatNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* dstSpec)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, SDLAudioSpec*, SDLAudioSpec*, int>)funcTable[299])(stream, srcSpec, dstSpec);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[299])((nint)stream, (nint)srcSpec, (nint)dstSpec);
			#endif
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* dstSpec)
		{
			int ret = GetAudioStreamFormatNative(stream, srcSpec, dstSpec);
			return ret;
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = GetAudioStreamFormatNative((SDLAudioStream*)pstream, srcSpec, dstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* dstSpec)
		{
			fixed (SDLAudioSpec* psrcSpec = &srcSpec)
			{
				int ret = GetAudioStreamFormatNative(stream, (SDLAudioSpec*)psrcSpec, dstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (SDLAudioSpec* psrcSpec = &srcSpec)
				{
					int ret = GetAudioStreamFormatNative((SDLAudioStream*)pstream, (SDLAudioSpec*)psrcSpec, dstSpec);
					return ret;
				}
			}
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioSpec* pdstSpec = &dstSpec)
			{
				int ret = GetAudioStreamFormatNative(stream, srcSpec, (SDLAudioSpec*)pdstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (SDLAudioSpec* pdstSpec = &dstSpec)
				{
					int ret = GetAudioStreamFormatNative((SDLAudioStream*)pstream, srcSpec, (SDLAudioSpec*)pdstSpec);
					return ret;
				}
			}
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioSpec* psrcSpec = &srcSpec)
			{
				fixed (SDLAudioSpec* pdstSpec = &dstSpec)
				{
					int ret = GetAudioStreamFormatNative(stream, (SDLAudioSpec*)psrcSpec, (SDLAudioSpec*)pdstSpec);
					return ret;
				}
			}
		}

		/// <summary>
		/// Query the current format of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (SDLAudioSpec* psrcSpec = &srcSpec)
				{
					fixed (SDLAudioSpec* pdstSpec = &dstSpec)
					{
						int ret = GetAudioStreamFormatNative((SDLAudioStream*)pstream, (SDLAudioSpec*)psrcSpec, (SDLAudioSpec*)pdstSpec);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioStreamFormatNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, SDLAudioSpec*, SDLAudioSpec*, int>)funcTable[300])(stream, srcSpec, dstSpec);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[300])((nint)stream, (nint)srcSpec, (nint)dstSpec);
			#endif
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			int ret = SetAudioStreamFormatNative(stream, srcSpec, dstSpec);
			return ret;
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = SetAudioStreamFormatNative((SDLAudioStream*)pstream, srcSpec, dstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			fixed (SDLAudioSpec* psrcSpec = &srcSpec)
			{
				int ret = SetAudioStreamFormatNative(stream, (SDLAudioSpec*)psrcSpec, dstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (SDLAudioSpec* psrcSpec = &srcSpec)
				{
					int ret = SetAudioStreamFormatNative((SDLAudioStream*)pstream, (SDLAudioSpec*)psrcSpec, dstSpec);
					return ret;
				}
			}
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioSpec* pdstSpec = &dstSpec)
			{
				int ret = SetAudioStreamFormatNative(stream, srcSpec, (SDLAudioSpec*)pdstSpec);
				return ret;
			}
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (SDLAudioSpec* pdstSpec = &dstSpec)
				{
					int ret = SetAudioStreamFormatNative((SDLAudioStream*)pstream, srcSpec, (SDLAudioSpec*)pdstSpec);
					return ret;
				}
			}
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioSpec* psrcSpec = &srcSpec)
			{
				fixed (SDLAudioSpec* pdstSpec = &dstSpec)
				{
					int ret = SetAudioStreamFormatNative(stream, (SDLAudioSpec*)psrcSpec, (SDLAudioSpec*)pdstSpec);
					return ret;
				}
			}
		}

		/// <summary>
		/// Change the input and output formats of an audio stream.<br/>
		/// Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData<br/>
		/// will reflect the new format, and future calls to SDL_PutAudioStreamData<br/>
		/// must provide data in the new input formats.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the format that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one format to a stream, change formats for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFormat")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFormat([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "src_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec srcSpec, [NativeName(NativeNameType.Param, "dst_spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec dstSpec)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (SDLAudioSpec* psrcSpec = &srcSpec)
				{
					fixed (SDLAudioSpec* pdstSpec = &dstSpec)
					{
						int ret = SetAudioStreamFormatNative((SDLAudioStream*)pstream, (SDLAudioSpec*)psrcSpec, (SDLAudioSpec*)pdstSpec);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the frequency ratio of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFrequencyRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetAudioStreamFrequencyRatioNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, float>)funcTable[301])(stream);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[301])((nint)stream);
			#endif
		}

		/// <summary>
		/// Get the frequency ratio of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFrequencyRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetAudioStreamFrequencyRatio([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			float ret = GetAudioStreamFrequencyRatioNative(stream);
			return ret;
		}

		/// <summary>
		/// Get the frequency ratio of an audio stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamFrequencyRatio")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetAudioStreamFrequencyRatio([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				float ret = GetAudioStreamFrequencyRatioNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Change the frequency ratio of an audio stream.<br/>
		/// The frequency ratio is used to adjust the rate at which input data is<br/>
		/// consumed. Changing this effectively modifies the speed and pitch of the<br/>
		/// audio. A value greater than 1.0 will play the audio faster, and at a higher<br/>
		/// pitch. A value less than 1.0 will play the audio slower, and at a lower<br/>
		/// pitch.<br/>
		/// This is applied during SDL_GetAudioStreamData, and can be continuously<br/>
		/// changed to create various effects.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFrequencyRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioStreamFrequencyRatioNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "ratio")] [NativeName(NativeNameType.Type, "float")] float ratio)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, float, int>)funcTable[302])(stream, ratio);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, float, int>)funcTable[302])((nint)stream, ratio);
			#endif
		}

		/// <summary>
		/// Change the frequency ratio of an audio stream.<br/>
		/// The frequency ratio is used to adjust the rate at which input data is<br/>
		/// consumed. Changing this effectively modifies the speed and pitch of the<br/>
		/// audio. A value greater than 1.0 will play the audio faster, and at a higher<br/>
		/// pitch. A value less than 1.0 will play the audio slower, and at a lower<br/>
		/// pitch.<br/>
		/// This is applied during SDL_GetAudioStreamData, and can be continuously<br/>
		/// changed to create various effects.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFrequencyRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFrequencyRatio([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "ratio")] [NativeName(NativeNameType.Type, "float")] float ratio)
		{
			int ret = SetAudioStreamFrequencyRatioNative(stream, ratio);
			return ret;
		}

		/// <summary>
		/// Change the frequency ratio of an audio stream.<br/>
		/// The frequency ratio is used to adjust the rate at which input data is<br/>
		/// consumed. Changing this effectively modifies the speed and pitch of the<br/>
		/// audio. A value greater than 1.0 will play the audio faster, and at a higher<br/>
		/// pitch. A value less than 1.0 will play the audio slower, and at a lower<br/>
		/// pitch.<br/>
		/// This is applied during SDL_GetAudioStreamData, and can be continuously<br/>
		/// changed to create various effects.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamFrequencyRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamFrequencyRatio([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "ratio")] [NativeName(NativeNameType.Type, "float")] float ratio)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = SetAudioStreamFrequencyRatioNative((SDLAudioStream*)pstream, ratio);
				return ret;
			}
		}

		/// <summary>
		/// Get the gain of an audio stream.<br/>
		/// The gain of a stream is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio streams default to a gain of 1.0f (no change in output).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamGain")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetAudioStreamGainNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, float>)funcTable[303])(stream);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[303])((nint)stream);
			#endif
		}

		/// <summary>
		/// Get the gain of an audio stream.<br/>
		/// The gain of a stream is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio streams default to a gain of 1.0f (no change in output).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamGain")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetAudioStreamGain([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			float ret = GetAudioStreamGainNative(stream);
			return ret;
		}

		/// <summary>
		/// Get the gain of an audio stream.<br/>
		/// The gain of a stream is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio streams default to a gain of 1.0f (no change in output).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamGain")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float GetAudioStreamGain([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				float ret = GetAudioStreamGainNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Change the gain of an audio stream.<br/>
		/// The gain of a stream is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio streams default to a gain of 1.0f (no change in output).<br/>
		/// This is applied during SDL_GetAudioStreamData, and can be continuously<br/>
		/// changed to create various effects.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamGain")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioStreamGainNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "gain")] [NativeName(NativeNameType.Type, "float")] float gain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, float, int>)funcTable[304])(stream, gain);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, float, int>)funcTable[304])((nint)stream, gain);
			#endif
		}

		/// <summary>
		/// Change the gain of an audio stream.<br/>
		/// The gain of a stream is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio streams default to a gain of 1.0f (no change in output).<br/>
		/// This is applied during SDL_GetAudioStreamData, and can be continuously<br/>
		/// changed to create various effects.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamGain")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamGain([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "gain")] [NativeName(NativeNameType.Type, "float")] float gain)
		{
			int ret = SetAudioStreamGainNative(stream, gain);
			return ret;
		}

		/// <summary>
		/// Change the gain of an audio stream.<br/>
		/// The gain of a stream is its volume; a larger gain means a louder output,<br/>
		/// with a gain of zero being silence.<br/>
		/// Audio streams default to a gain of 1.0f (no change in output).<br/>
		/// This is applied during SDL_GetAudioStreamData, and can be continuously<br/>
		/// changed to create various effects.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamGain")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamGain([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "gain")] [NativeName(NativeNameType.Type, "float")] float gain)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = SetAudioStreamGainNative((SDLAudioStream*)pstream, gain);
				return ret;
			}
		}

		/// <summary>
		/// Get the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int* GetAudioStreamInputChannelMapNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int*, int*>)funcTable[305])(stream, count);
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[305])((nint)stream, (nint)count);
			#endif
		}

		/// <summary>
		/// Get the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			int* ret = GetAudioStreamInputChannelMapNative(stream, count);
			return ret;
		}

		/// <summary>
		/// Get the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int* ret = GetAudioStreamInputChannelMapNative((SDLAudioStream*)pstream, count);
				return ret;
			}
		}

		/// <summary>
		/// Get the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (int* pcount = &count)
			{
				int* ret = GetAudioStreamInputChannelMapNative(stream, (int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Get the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (int* pcount = &count)
				{
					int* ret = GetAudioStreamInputChannelMapNative((SDLAudioStream*)pstream, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int* GetAudioStreamOutputChannelMapNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int*, int*>)funcTable[306])(stream, count);
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[306])((nint)stream, (nint)count);
			#endif
		}

		/// <summary>
		/// Get the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			int* ret = GetAudioStreamOutputChannelMapNative(stream, count);
			return ret;
		}

		/// <summary>
		/// Get the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int* ret = GetAudioStreamOutputChannelMapNative((SDLAudioStream*)pstream, count);
				return ret;
			}
		}

		/// <summary>
		/// Get the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (int* pcount = &count)
			{
				int* ret = GetAudioStreamOutputChannelMapNative(stream, (int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Get the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// Audio streams default to no remapping applied. This is represented by<br/>
		/// returning NULL, and does not signify an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int *")]
		public static int* GetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (int* pcount = &count)
				{
					int* ret = GetAudioStreamOutputChannelMapNative((SDLAudioStream*)pstream, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The input channel map reorders data that is added to a stream via<br/>
		/// SDL_PutAudioStreamData. Future calls to SDL_PutAudioStreamData must provide<br/>
		/// data in the new channel order.<br/>
		/// Each item in the array represents an input channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the order that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one order to a stream, change orders for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioStreamInputChannelMapNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] int* chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int*, int, int>)funcTable[307])(stream, chmap, count);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[307])((nint)stream, (nint)chmap, count);
			#endif
		}

		/// <summary>
		/// Set the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The input channel map reorders data that is added to a stream via<br/>
		/// SDL_PutAudioStreamData. Future calls to SDL_PutAudioStreamData must provide<br/>
		/// data in the new channel order.<br/>
		/// Each item in the array represents an input channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the order that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one order to a stream, change orders for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] int* chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SetAudioStreamInputChannelMapNative(stream, chmap, count);
			return ret;
		}

		/// <summary>
		/// Set the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The input channel map reorders data that is added to a stream via<br/>
		/// SDL_PutAudioStreamData. Future calls to SDL_PutAudioStreamData must provide<br/>
		/// data in the new channel order.<br/>
		/// Each item in the array represents an input channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the order that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one order to a stream, change orders for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] int* chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = SetAudioStreamInputChannelMapNative((SDLAudioStream*)pstream, chmap, count);
				return ret;
			}
		}

		/// <summary>
		/// Set the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The input channel map reorders data that is added to a stream via<br/>
		/// SDL_PutAudioStreamData. Future calls to SDL_PutAudioStreamData must provide<br/>
		/// data in the new channel order.<br/>
		/// Each item in the array represents an input channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the order that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one order to a stream, change orders for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] ref int chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (int* pchmap = &chmap)
			{
				int ret = SetAudioStreamInputChannelMapNative(stream, (int*)pchmap, count);
				return ret;
			}
		}

		/// <summary>
		/// Set the current input channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The input channel map reorders data that is added to a stream via<br/>
		/// SDL_PutAudioStreamData. Future calls to SDL_PutAudioStreamData must provide<br/>
		/// data in the new channel order.<br/>
		/// Each item in the array represents an input channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// Data that was previously queued in the stream will still be operated on in<br/>
		/// the order that was current when it was added, which is to say you can put<br/>
		/// the end of a sound file in one order to a stream, change orders for the<br/>
		/// next sound file, and start putting that new data while the previous sound<br/>
		/// file is still queued, and everything will still play back correctly.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamInputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamInputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] ref int chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (int* pchmap = &chmap)
				{
					int ret = SetAudioStreamInputChannelMapNative((SDLAudioStream*)pstream, (int*)pchmap, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The output channel map reorders data that leaving a stream via<br/>
		/// SDL_GetAudioStreamData.<br/>
		/// Each item in the array represents an output channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// The output channel map can be changed at any time, as output remapping is<br/>
		/// applied during SDL_GetAudioStreamData.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioStreamOutputChannelMapNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] int* chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int*, int, int>)funcTable[308])(stream, chmap, count);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[308])((nint)stream, (nint)chmap, count);
			#endif
		}

		/// <summary>
		/// Set the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The output channel map reorders data that leaving a stream via<br/>
		/// SDL_GetAudioStreamData.<br/>
		/// Each item in the array represents an output channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// The output channel map can be changed at any time, as output remapping is<br/>
		/// applied during SDL_GetAudioStreamData.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] int* chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			int ret = SetAudioStreamOutputChannelMapNative(stream, chmap, count);
			return ret;
		}

		/// <summary>
		/// Set the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The output channel map reorders data that leaving a stream via<br/>
		/// SDL_GetAudioStreamData.<br/>
		/// Each item in the array represents an output channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// The output channel map can be changed at any time, as output remapping is<br/>
		/// applied during SDL_GetAudioStreamData.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] int* chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = SetAudioStreamOutputChannelMapNative((SDLAudioStream*)pstream, chmap, count);
				return ret;
			}
		}

		/// <summary>
		/// Set the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The output channel map reorders data that leaving a stream via<br/>
		/// SDL_GetAudioStreamData.<br/>
		/// Each item in the array represents an output channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// The output channel map can be changed at any time, as output remapping is<br/>
		/// applied during SDL_GetAudioStreamData.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] ref int chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (int* pchmap = &chmap)
			{
				int ret = SetAudioStreamOutputChannelMapNative(stream, (int*)pchmap, count);
				return ret;
			}
		}

		/// <summary>
		/// Set the current output channel map of an audio stream.<br/>
		/// Channel maps are optional; most things do not need them, instead passing<br/>
		/// data in the [order that SDL expects](CategoryAudio#channel-layouts).<br/>
		/// The output channel map reorders data that leaving a stream via<br/>
		/// SDL_GetAudioStreamData.<br/>
		/// Each item in the array represents an output channel, and its value is the<br/>
		/// channel that it should be remapped to. To reverse a stereo signal's left<br/>
		/// and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap<br/>
		/// multiple channels to the same thing, so `{ 1, 1 }` would duplicate the<br/>
		/// right channel to both channels of a stereo signal. You cannot change the<br/>
		/// number of channels through a channel map, just reorder them.<br/>
		/// The output channel map can be changed at any time, as output remapping is<br/>
		/// applied during SDL_GetAudioStreamData.<br/>
		/// Audio streams default to no remapping applied. Passing a NULL channel map<br/>
		/// is legal, and turns off remapping.<br/>
		/// SDL will copy the channel map; the caller does not have to save this array<br/>
		/// after this call.<br/>
		/// If `count` is not equal to the current number of channels in the audio<br/>
		/// stream's format, this will fail. This is a safety measure to make sure a a<br/>
		/// race condition hasn't changed the format while you this call is setting the<br/>
		/// channel map.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as it holds<br/>
		/// a stream-specific mutex while running. Don't change the<br/>
		/// stream's format to have a different number of channels from a<br/>
		/// a different thread at the same time, though!<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamOutputChannelMap")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamOutputChannelMap([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "chmap")] [NativeName(NativeNameType.Type, "int const *")] ref int chmap, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				fixed (int* pchmap = &chmap)
				{
					int ret = SetAudioStreamOutputChannelMapNative((SDLAudioStream*)pstream, (int*)pchmap, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Add data to the stream.<br/>
		/// This data must match the format/channels/samplerate specified in the latest<br/>
		/// call to SDL_SetAudioStreamFormat, or the format specified when creating the<br/>
		/// stream if it hasn't been changed.<br/>
		/// Note that this call simply copies the unconverted data for later. This is<br/>
		/// different than SDL2, where data was converted during the Put call and the<br/>
		/// Get call would just dequeue the previously-converted data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but if the<br/>
		/// stream has a callback set, the caller might need to manage<br/>
		/// extra locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PutAudioStreamData")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PutAudioStreamDataNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "void const *")] void* buf, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, void*, int, int>)funcTable[309])(stream, buf, len);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[309])((nint)stream, (nint)buf, len);
			#endif
		}

		/// <summary>
		/// Add data to the stream.<br/>
		/// This data must match the format/channels/samplerate specified in the latest<br/>
		/// call to SDL_SetAudioStreamFormat, or the format specified when creating the<br/>
		/// stream if it hasn't been changed.<br/>
		/// Note that this call simply copies the unconverted data for later. This is<br/>
		/// different than SDL2, where data was converted during the Put call and the<br/>
		/// Get call would just dequeue the previously-converted data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but if the<br/>
		/// stream has a callback set, the caller might need to manage<br/>
		/// extra locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PutAudioStreamData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PutAudioStreamData([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "void const *")] void* buf, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			int ret = PutAudioStreamDataNative(stream, buf, len);
			return ret;
		}

		/// <summary>
		/// Add data to the stream.<br/>
		/// This data must match the format/channels/samplerate specified in the latest<br/>
		/// call to SDL_SetAudioStreamFormat, or the format specified when creating the<br/>
		/// stream if it hasn't been changed.<br/>
		/// Note that this call simply copies the unconverted data for later. This is<br/>
		/// different than SDL2, where data was converted during the Put call and the<br/>
		/// Get call would just dequeue the previously-converted data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but if the<br/>
		/// stream has a callback set, the caller might need to manage<br/>
		/// extra locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PutAudioStreamData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PutAudioStreamData([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "void const *")] void* buf, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = PutAudioStreamDataNative((SDLAudioStream*)pstream, buf, len);
				return ret;
			}
		}

		/// <summary>
		/// Get converted/resampled data from the stream.<br/>
		/// The input/output data format/channels/samplerate is specified when creating<br/>
		/// the stream, and can be changed after creation by calling<br/>
		/// SDL_SetAudioStreamFormat.<br/>
		/// Note that any conversion and resampling necessary is done during this call,<br/>
		/// and SDL_PutAudioStreamData simply queues unconverted data for later. This<br/>
		/// is different than SDL2, where that work was done while inputting new data<br/>
		/// to the stream and requesting the output just copied the converted data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but if the<br/>
		/// stream has a callback set, the caller might need to manage<br/>
		/// extra locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamData")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetAudioStreamDataNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "void *")] void* buf, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, void*, int, int>)funcTable[310])(stream, buf, len);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[310])((nint)stream, (nint)buf, len);
			#endif
		}

		/// <summary>
		/// Get converted/resampled data from the stream.<br/>
		/// The input/output data format/channels/samplerate is specified when creating<br/>
		/// the stream, and can be changed after creation by calling<br/>
		/// SDL_SetAudioStreamFormat.<br/>
		/// Note that any conversion and resampling necessary is done during this call,<br/>
		/// and SDL_PutAudioStreamData simply queues unconverted data for later. This<br/>
		/// is different than SDL2, where that work was done while inputting new data<br/>
		/// to the stream and requesting the output just copied the converted data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but if the<br/>
		/// stream has a callback set, the caller might need to manage<br/>
		/// extra locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamData([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "void *")] void* buf, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			int ret = GetAudioStreamDataNative(stream, buf, len);
			return ret;
		}

		/// <summary>
		/// Get converted/resampled data from the stream.<br/>
		/// The input/output data format/channels/samplerate is specified when creating<br/>
		/// the stream, and can be changed after creation by calling<br/>
		/// SDL_SetAudioStreamFormat.<br/>
		/// Note that any conversion and resampling necessary is done during this call,<br/>
		/// and SDL_PutAudioStreamData simply queues unconverted data for later. This<br/>
		/// is different than SDL2, where that work was done while inputting new data<br/>
		/// to the stream and requesting the output just copied the converted data.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, but if the<br/>
		/// stream has a callback set, the caller might need to manage<br/>
		/// extra locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamData")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamData([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "buf")] [NativeName(NativeNameType.Type, "void *")] void* buf, [NativeName(NativeNameType.Param, "len")] [NativeName(NativeNameType.Type, "int")] int len)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = GetAudioStreamDataNative((SDLAudioStream*)pstream, buf, len);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of converted/resampled bytes available.<br/>
		/// The stream may be buffering data behind the scenes until it has enough to<br/>
		/// resample correctly, so this number might be lower than what you expect, or<br/>
		/// even be zero. Add more data or flush the stream if you need the data now.<br/>
		/// If the stream has so much data that it would overflow an int, the return<br/>
		/// value is clamped to a maximum value, but no queued data is lost; if there<br/>
		/// are gigabytes of data queued, the app might need to read some of it with<br/>
		/// SDL_GetAudioStreamData before this function's return value is no longer<br/>
		/// clamped.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamAvailable")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetAudioStreamAvailableNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[311])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[311])((nint)stream);
			#endif
		}

		/// <summary>
		/// Get the number of converted/resampled bytes available.<br/>
		/// The stream may be buffering data behind the scenes until it has enough to<br/>
		/// resample correctly, so this number might be lower than what you expect, or<br/>
		/// even be zero. Add more data or flush the stream if you need the data now.<br/>
		/// If the stream has so much data that it would overflow an int, the return<br/>
		/// value is clamped to a maximum value, but no queued data is lost; if there<br/>
		/// are gigabytes of data queued, the app might need to read some of it with<br/>
		/// SDL_GetAudioStreamData before this function's return value is no longer<br/>
		/// clamped.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamAvailable")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamAvailable([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = GetAudioStreamAvailableNative(stream);
			return ret;
		}

		/// <summary>
		/// Get the number of converted/resampled bytes available.<br/>
		/// The stream may be buffering data behind the scenes until it has enough to<br/>
		/// resample correctly, so this number might be lower than what you expect, or<br/>
		/// even be zero. Add more data or flush the stream if you need the data now.<br/>
		/// If the stream has so much data that it would overflow an int, the return<br/>
		/// value is clamped to a maximum value, but no queued data is lost; if there<br/>
		/// are gigabytes of data queued, the app might need to read some of it with<br/>
		/// SDL_GetAudioStreamData before this function's return value is no longer<br/>
		/// clamped.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamAvailable")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamAvailable([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = GetAudioStreamAvailableNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of bytes currently queued.<br/>
		/// Note that audio streams can change their input format at any time, even if<br/>
		/// there is still data queued in a different format, so the returned byte<br/>
		/// count will not necessarily match the number of _sample frames_ available.<br/>
		/// Users of this API should be aware of format changes they make when feeding<br/>
		/// a stream and plan accordingly.<br/>
		/// Queued data is not converted until it is consumed by<br/>
		/// SDL_GetAudioStreamData, so this value should be representative of the exact<br/>
		/// data that was put into the stream.<br/>
		/// If the stream has so much data that it would overflow an int, the return<br/>
		/// value is clamped to a maximum value, but no queued data is lost; if there<br/>
		/// are gigabytes of data queued, the app might need to read some of it with<br/>
		/// SDL_GetAudioStreamData before this function's return value is no longer<br/>
		/// clamped.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamQueued")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetAudioStreamQueuedNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[312])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[312])((nint)stream);
			#endif
		}

		/// <summary>
		/// Get the number of bytes currently queued.<br/>
		/// Note that audio streams can change their input format at any time, even if<br/>
		/// there is still data queued in a different format, so the returned byte<br/>
		/// count will not necessarily match the number of _sample frames_ available.<br/>
		/// Users of this API should be aware of format changes they make when feeding<br/>
		/// a stream and plan accordingly.<br/>
		/// Queued data is not converted until it is consumed by<br/>
		/// SDL_GetAudioStreamData, so this value should be representative of the exact<br/>
		/// data that was put into the stream.<br/>
		/// If the stream has so much data that it would overflow an int, the return<br/>
		/// value is clamped to a maximum value, but no queued data is lost; if there<br/>
		/// are gigabytes of data queued, the app might need to read some of it with<br/>
		/// SDL_GetAudioStreamData before this function's return value is no longer<br/>
		/// clamped.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamQueued")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamQueued([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = GetAudioStreamQueuedNative(stream);
			return ret;
		}

		/// <summary>
		/// Get the number of bytes currently queued.<br/>
		/// Note that audio streams can change their input format at any time, even if<br/>
		/// there is still data queued in a different format, so the returned byte<br/>
		/// count will not necessarily match the number of _sample frames_ available.<br/>
		/// Users of this API should be aware of format changes they make when feeding<br/>
		/// a stream and plan accordingly.<br/>
		/// Queued data is not converted until it is consumed by<br/>
		/// SDL_GetAudioStreamData, so this value should be representative of the exact<br/>
		/// data that was put into the stream.<br/>
		/// If the stream has so much data that it would overflow an int, the return<br/>
		/// value is clamped to a maximum value, but no queued data is lost; if there<br/>
		/// are gigabytes of data queued, the app might need to read some of it with<br/>
		/// SDL_GetAudioStreamData before this function's return value is no longer<br/>
		/// clamped.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetAudioStreamQueued")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetAudioStreamQueued([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = GetAudioStreamQueuedNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Tell the stream that you're done sending data, and anything being buffered<br/>
		/// should be converted/resampled and made available immediately.<br/>
		/// It is legal to add more data to a stream after flushing, but there may be<br/>
		/// audio gaps in the output. Generally this is intended to signal the end of<br/>
		/// input, so the complete output becomes available.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_FlushAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int FlushAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[313])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[313])((nint)stream);
			#endif
		}

		/// <summary>
		/// Tell the stream that you're done sending data, and anything being buffered<br/>
		/// should be converted/resampled and made available immediately.<br/>
		/// It is legal to add more data to a stream after flushing, but there may be<br/>
		/// audio gaps in the output. Generally this is intended to signal the end of<br/>
		/// input, so the complete output becomes available.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_FlushAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int FlushAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = FlushAudioStreamNative(stream);
			return ret;
		}

		/// <summary>
		/// Tell the stream that you're done sending data, and anything being buffered<br/>
		/// should be converted/resampled and made available immediately.<br/>
		/// It is legal to add more data to a stream after flushing, but there may be<br/>
		/// audio gaps in the output. Generally this is intended to signal the end of<br/>
		/// input, so the complete output becomes available.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_FlushAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int FlushAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = FlushAudioStreamNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Clear any pending data in the stream.<br/>
		/// This drops any queued data, so there will be nothing to read from the<br/>
		/// stream until more is added.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ClearAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ClearAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[314])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[314])((nint)stream);
			#endif
		}

		/// <summary>
		/// Clear any pending data in the stream.<br/>
		/// This drops any queued data, so there will be nothing to read from the<br/>
		/// stream until more is added.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ClearAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ClearAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = ClearAudioStreamNative(stream);
			return ret;
		}

		/// <summary>
		/// Clear any pending data in the stream.<br/>
		/// This drops any queued data, so there will be nothing to read from the<br/>
		/// stream until more is added.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ClearAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ClearAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = ClearAudioStreamNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Use this function to pause audio playback on the audio device associated<br/>
		/// with an audio stream.<br/>
		/// This function pauses audio processing for a given device. Any bound audio<br/>
		/// streams will not progress, and no audio will be generated. Pausing one<br/>
		/// device does not prevent other unpaused devices from running.<br/>
		/// Pausing a device can be useful to halt all audio without unbinding all the<br/>
		/// audio streams. This might be useful while a game is paused, or a level is<br/>
		/// loading, etc.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PauseAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int PauseAudioStreamDeviceNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[315])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[315])((nint)stream);
			#endif
		}

		/// <summary>
		/// Use this function to pause audio playback on the audio device associated<br/>
		/// with an audio stream.<br/>
		/// This function pauses audio processing for a given device. Any bound audio<br/>
		/// streams will not progress, and no audio will be generated. Pausing one<br/>
		/// device does not prevent other unpaused devices from running.<br/>
		/// Pausing a device can be useful to halt all audio without unbinding all the<br/>
		/// audio streams. This might be useful while a game is paused, or a level is<br/>
		/// loading, etc.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PauseAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PauseAudioStreamDevice([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = PauseAudioStreamDeviceNative(stream);
			return ret;
		}

		/// <summary>
		/// Use this function to pause audio playback on the audio device associated<br/>
		/// with an audio stream.<br/>
		/// This function pauses audio processing for a given device. Any bound audio<br/>
		/// streams will not progress, and no audio will be generated. Pausing one<br/>
		/// device does not prevent other unpaused devices from running.<br/>
		/// Pausing a device can be useful to halt all audio without unbinding all the<br/>
		/// audio streams. This might be useful while a game is paused, or a level is<br/>
		/// loading, etc.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_PauseAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int PauseAudioStreamDevice([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = PauseAudioStreamDeviceNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Use this function to unpause audio playback on the audio device associated<br/>
		/// with an audio stream.<br/>
		/// This function unpauses audio processing for a given device that has<br/>
		/// previously been paused. Once unpaused, any bound audio streams will begin<br/>
		/// to progress again, and audio can be generated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ResumeAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ResumeAudioStreamDeviceNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[316])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[316])((nint)stream);
			#endif
		}

		/// <summary>
		/// Use this function to unpause audio playback on the audio device associated<br/>
		/// with an audio stream.<br/>
		/// This function unpauses audio processing for a given device that has<br/>
		/// previously been paused. Once unpaused, any bound audio streams will begin<br/>
		/// to progress again, and audio can be generated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ResumeAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ResumeAudioStreamDevice([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = ResumeAudioStreamDeviceNative(stream);
			return ret;
		}

		/// <summary>
		/// Use this function to unpause audio playback on the audio device associated<br/>
		/// with an audio stream.<br/>
		/// This function unpauses audio processing for a given device that has<br/>
		/// previously been paused. Once unpaused, any bound audio streams will begin<br/>
		/// to progress again, and audio can be generated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ResumeAudioStreamDevice")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ResumeAudioStreamDevice([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = ResumeAudioStreamDeviceNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Lock an audio stream for serialized access.<br/>
		/// Each SDL_AudioStream has an internal mutex it uses to protect its data<br/>
		/// structures from threading conflicts. This function allows an app to lock<br/>
		/// that mutex, which could be useful if registering callbacks on this stream.<br/>
		/// One does not need to lock a stream to use in it most cases, as the stream<br/>
		/// manages this lock internally. However, this lock is held during callbacks,<br/>
		/// which may run from arbitrary threads at any time, so if an app needs to<br/>
		/// protect shared data during those callbacks, locking the stream guarantees<br/>
		/// that the callback is not running while the lock is held.<br/>
		/// As this is just a wrapper over SDL_LockMutex for an internal lock; it has<br/>
		/// all the same attributes (recursive locks are allowed, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LockAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[317])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[317])((nint)stream);
			#endif
		}

		/// <summary>
		/// Lock an audio stream for serialized access.<br/>
		/// Each SDL_AudioStream has an internal mutex it uses to protect its data<br/>
		/// structures from threading conflicts. This function allows an app to lock<br/>
		/// that mutex, which could be useful if registering callbacks on this stream.<br/>
		/// One does not need to lock a stream to use in it most cases, as the stream<br/>
		/// manages this lock internally. However, this lock is held during callbacks,<br/>
		/// which may run from arbitrary threads at any time, so if an app needs to<br/>
		/// protect shared data during those callbacks, locking the stream guarantees<br/>
		/// that the callback is not running while the lock is held.<br/>
		/// As this is just a wrapper over SDL_LockMutex for an internal lock; it has<br/>
		/// all the same attributes (recursive locks are allowed, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LockAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = LockAudioStreamNative(stream);
			return ret;
		}

		/// <summary>
		/// Lock an audio stream for serialized access.<br/>
		/// Each SDL_AudioStream has an internal mutex it uses to protect its data<br/>
		/// structures from threading conflicts. This function allows an app to lock<br/>
		/// that mutex, which could be useful if registering callbacks on this stream.<br/>
		/// One does not need to lock a stream to use in it most cases, as the stream<br/>
		/// manages this lock internally. However, this lock is held during callbacks,<br/>
		/// which may run from arbitrary threads at any time, so if an app needs to<br/>
		/// protect shared data during those callbacks, locking the stream guarantees<br/>
		/// that the callback is not running while the lock is held.<br/>
		/// As this is just a wrapper over SDL_LockMutex for an internal lock; it has<br/>
		/// all the same attributes (recursive locks are allowed, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LockAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LockAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = LockAudioStreamNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Unlock an audio stream for serialized access.<br/>
		/// This unlocks an audio stream after a call to SDL_LockAudioStream.<br/>
		/// <br/>
		/// <br/>
		/// You should only call this from the same thread that<br/>
		/// previously called SDL_LockAudioStream.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnlockAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int UnlockAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, int>)funcTable[318])(stream);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[318])((nint)stream);
			#endif
		}

		/// <summary>
		/// Unlock an audio stream for serialized access.<br/>
		/// This unlocks an audio stream after a call to SDL_LockAudioStream.<br/>
		/// <br/>
		/// <br/>
		/// You should only call this from the same thread that<br/>
		/// previously called SDL_LockAudioStream.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnlockAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UnlockAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			int ret = UnlockAudioStreamNative(stream);
			return ret;
		}

		/// <summary>
		/// Unlock an audio stream for serialized access.<br/>
		/// This unlocks an audio stream after a call to SDL_LockAudioStream.<br/>
		/// <br/>
		/// <br/>
		/// You should only call this from the same thread that<br/>
		/// previously called SDL_LockAudioStream.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UnlockAudioStream")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int UnlockAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = UnlockAudioStreamNative((SDLAudioStream*)pstream);
				return ret;
			}
		}

		/// <summary>
		/// Set a callback that runs when data is requested from an audio stream.<br/>
		/// This callback is called _before_ data is obtained from the stream, giving<br/>
		/// the callback the chance to add more on-demand.<br/>
		/// The callback can (optionally) call SDL_PutAudioStreamData() to add more<br/>
		/// audio to the stream during this call; if needed, the request that triggered<br/>
		/// this callback will obtain the new data immediately.<br/>
		/// The callback's `approx_request` argument is roughly how many bytes of<br/>
		/// _unconverted_ data (in the stream's input format) is needed by the caller,<br/>
		/// although this may overestimate a little for safety. This takes into account<br/>
		/// how much is already in the stream and only asks for any extra necessary to<br/>
		/// resolve the request, which means the callback may be asked for zero bytes,<br/>
		/// and a different amount on each call.<br/>
		/// The callback is not required to supply exact amounts; it is allowed to<br/>
		/// supply too much or too little or none at all. The caller will get what's<br/>
		/// available, up to the amount they requested, regardless of this callback's<br/>
		/// outcome.<br/>
		/// Clearing or flushing an audio stream does not call this callback.<br/>
		/// This function obtains the stream's lock, which means any existing callback<br/>
		/// (get or put) in progress will finish running before setting the new<br/>
		/// callback.<br/>
		/// Setting a NULL function turns off the callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamGetCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioStreamGetCallbackNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, delegate*<void*, SDLAudioStream*, int, int, void>, void*, int>)funcTable[319])(stream, (delegate*<void*, SDLAudioStream*, int, int, void>)Utils.GetFunctionPointerForDelegate(callback), userdata);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[319])((nint)stream, (nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Set a callback that runs when data is requested from an audio stream.<br/>
		/// This callback is called _before_ data is obtained from the stream, giving<br/>
		/// the callback the chance to add more on-demand.<br/>
		/// The callback can (optionally) call SDL_PutAudioStreamData() to add more<br/>
		/// audio to the stream during this call; if needed, the request that triggered<br/>
		/// this callback will obtain the new data immediately.<br/>
		/// The callback's `approx_request` argument is roughly how many bytes of<br/>
		/// _unconverted_ data (in the stream's input format) is needed by the caller,<br/>
		/// although this may overestimate a little for safety. This takes into account<br/>
		/// how much is already in the stream and only asks for any extra necessary to<br/>
		/// resolve the request, which means the callback may be asked for zero bytes,<br/>
		/// and a different amount on each call.<br/>
		/// The callback is not required to supply exact amounts; it is allowed to<br/>
		/// supply too much or too little or none at all. The caller will get what's<br/>
		/// available, up to the amount they requested, regardless of this callback's<br/>
		/// outcome.<br/>
		/// Clearing or flushing an audio stream does not call this callback.<br/>
		/// This function obtains the stream's lock, which means any existing callback<br/>
		/// (get or put) in progress will finish running before setting the new<br/>
		/// callback.<br/>
		/// Setting a NULL function turns off the callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamGetCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamGetCallback([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			int ret = SetAudioStreamGetCallbackNative(stream, callback, userdata);
			return ret;
		}

		/// <summary>
		/// Set a callback that runs when data is requested from an audio stream.<br/>
		/// This callback is called _before_ data is obtained from the stream, giving<br/>
		/// the callback the chance to add more on-demand.<br/>
		/// The callback can (optionally) call SDL_PutAudioStreamData() to add more<br/>
		/// audio to the stream during this call; if needed, the request that triggered<br/>
		/// this callback will obtain the new data immediately.<br/>
		/// The callback's `approx_request` argument is roughly how many bytes of<br/>
		/// _unconverted_ data (in the stream's input format) is needed by the caller,<br/>
		/// although this may overestimate a little for safety. This takes into account<br/>
		/// how much is already in the stream and only asks for any extra necessary to<br/>
		/// resolve the request, which means the callback may be asked for zero bytes,<br/>
		/// and a different amount on each call.<br/>
		/// The callback is not required to supply exact amounts; it is allowed to<br/>
		/// supply too much or too little or none at all. The caller will get what's<br/>
		/// available, up to the amount they requested, regardless of this callback's<br/>
		/// outcome.<br/>
		/// Clearing or flushing an audio stream does not call this callback.<br/>
		/// This function obtains the stream's lock, which means any existing callback<br/>
		/// (get or put) in progress will finish running before setting the new<br/>
		/// callback.<br/>
		/// Setting a NULL function turns off the callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamGetCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamGetCallback([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = SetAudioStreamGetCallbackNative((SDLAudioStream*)pstream, callback, userdata);
				return ret;
			}
		}

		/// <summary>
		/// Set a callback that runs when data is added to an audio stream.<br/>
		/// This callback is called _after_ the data is added to the stream, giving the<br/>
		/// callback the chance to obtain it immediately.<br/>
		/// The callback can (optionally) call SDL_GetAudioStreamData() to obtain audio<br/>
		/// from the stream during this call.<br/>
		/// The callback's `approx_request` argument is how many bytes of _converted_<br/>
		/// data (in the stream's output format) was provided by the caller, although<br/>
		/// this may underestimate a little for safety. This value might be less than<br/>
		/// what is currently available in the stream, if data was already there, and<br/>
		/// might be less than the caller provided if the stream needs to keep a buffer<br/>
		/// to aid in resampling. Which means the callback may be provided with zero<br/>
		/// bytes, and a different amount on each call.<br/>
		/// The callback may call SDL_GetAudioStreamAvailable to see the total amount<br/>
		/// currently available to read from the stream, instead of the total provided<br/>
		/// by the current call.<br/>
		/// The callback is not required to obtain all data. It is allowed to read less<br/>
		/// or none at all. Anything not read now simply remains in the stream for<br/>
		/// later access.<br/>
		/// Clearing or flushing an audio stream does not call this callback.<br/>
		/// This function obtains the stream's lock, which means any existing callback<br/>
		/// (get or put) in progress will finish running before setting the new<br/>
		/// callback.<br/>
		/// Setting a NULL function turns off the callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamPutCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioStreamPutCallbackNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLAudioStream*, delegate*<void*, SDLAudioStream*, int, int, void>, void*, int>)funcTable[320])(stream, (delegate*<void*, SDLAudioStream*, int, int, void>)Utils.GetFunctionPointerForDelegate(callback), userdata);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[320])((nint)stream, (nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Set a callback that runs when data is added to an audio stream.<br/>
		/// This callback is called _after_ the data is added to the stream, giving the<br/>
		/// callback the chance to obtain it immediately.<br/>
		/// The callback can (optionally) call SDL_GetAudioStreamData() to obtain audio<br/>
		/// from the stream during this call.<br/>
		/// The callback's `approx_request` argument is how many bytes of _converted_<br/>
		/// data (in the stream's output format) was provided by the caller, although<br/>
		/// this may underestimate a little for safety. This value might be less than<br/>
		/// what is currently available in the stream, if data was already there, and<br/>
		/// might be less than the caller provided if the stream needs to keep a buffer<br/>
		/// to aid in resampling. Which means the callback may be provided with zero<br/>
		/// bytes, and a different amount on each call.<br/>
		/// The callback may call SDL_GetAudioStreamAvailable to see the total amount<br/>
		/// currently available to read from the stream, instead of the total provided<br/>
		/// by the current call.<br/>
		/// The callback is not required to obtain all data. It is allowed to read less<br/>
		/// or none at all. Anything not read now simply remains in the stream for<br/>
		/// later access.<br/>
		/// Clearing or flushing an audio stream does not call this callback.<br/>
		/// This function obtains the stream's lock, which means any existing callback<br/>
		/// (get or put) in progress will finish running before setting the new<br/>
		/// callback.<br/>
		/// Setting a NULL function turns off the callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamPutCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamPutCallback([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			int ret = SetAudioStreamPutCallbackNative(stream, callback, userdata);
			return ret;
		}

		/// <summary>
		/// Set a callback that runs when data is added to an audio stream.<br/>
		/// This callback is called _after_ the data is added to the stream, giving the<br/>
		/// callback the chance to obtain it immediately.<br/>
		/// The callback can (optionally) call SDL_GetAudioStreamData() to obtain audio<br/>
		/// from the stream during this call.<br/>
		/// The callback's `approx_request` argument is how many bytes of _converted_<br/>
		/// data (in the stream's output format) was provided by the caller, although<br/>
		/// this may underestimate a little for safety. This value might be less than<br/>
		/// what is currently available in the stream, if data was already there, and<br/>
		/// might be less than the caller provided if the stream needs to keep a buffer<br/>
		/// to aid in resampling. Which means the callback may be provided with zero<br/>
		/// bytes, and a different amount on each call.<br/>
		/// The callback may call SDL_GetAudioStreamAvailable to see the total amount<br/>
		/// currently available to read from the stream, instead of the total provided<br/>
		/// by the current call.<br/>
		/// The callback is not required to obtain all data. It is allowed to read less<br/>
		/// or none at all. Anything not read now simply remains in the stream for<br/>
		/// later access.<br/>
		/// Clearing or flushing an audio stream does not call this callback.<br/>
		/// This function obtains the stream's lock, which means any existing callback<br/>
		/// (get or put) in progress will finish running before setting the new<br/>
		/// callback.<br/>
		/// Setting a NULL function turns off the callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioStreamPutCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioStreamPutCallback([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				int ret = SetAudioStreamPutCallbackNative((SDLAudioStream*)pstream, callback, userdata);
				return ret;
			}
		}

		/// <summary>
		/// Free an audio stream.<br/>
		/// This will release all allocated data, including any audio that is still<br/>
		/// queued. You do not need to manually clear the stream first.<br/>
		/// If this stream was bound to an audio device, it is unbound during this<br/>
		/// call. If this stream was created with SDL_OpenAudioDeviceStream, the audio<br/>
		/// device that was opened alongside this stream's creation will be closed,<br/>
		/// too.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyAudioStreamNative([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLAudioStream*, void>)funcTable[321])(stream);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[321])((nint)stream);
			#endif
		}

		/// <summary>
		/// Free an audio stream.<br/>
		/// This will release all allocated data, including any audio that is still<br/>
		/// queued. You do not need to manually clear the stream first.<br/>
		/// If this stream was bound to an audio device, it is unbound during this<br/>
		/// call. If this stream was created with SDL_OpenAudioDeviceStream, the audio<br/>
		/// device that was opened alongside this stream's creation will be closed,<br/>
		/// too.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream)
		{
			DestroyAudioStreamNative(stream);
		}

		/// <summary>
		/// Free an audio stream.<br/>
		/// This will release all allocated data, including any audio that is still<br/>
		/// queued. You do not need to manually clear the stream first.<br/>
		/// If this stream was bound to an audio device, it is unbound during this<br/>
		/// call. If this stream was created with SDL_OpenAudioDeviceStream, the audio<br/>
		/// device that was opened alongside this stream's creation will be closed,<br/>
		/// too.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_DestroyAudioStream")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyAudioStream([NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] ref SDLAudioStream stream)
		{
			fixed (SDLAudioStream* pstream = &stream)
			{
				DestroyAudioStreamNative((SDLAudioStream*)pstream);
			}
		}

		/// <summary>
		/// Convenience function for straightforward audio init for the common case.<br/>
		/// If all your app intends to do is provide a single source of PCM audio, this<br/>
		/// function allows you to do all your audio setup in a single call.<br/>
		/// This is also intended to be a clean means to migrate apps from SDL2.<br/>
		/// This function will open an audio device, create a stream and bind it.<br/>
		/// Unlike other methods of setup, the audio device will be closed when this<br/>
		/// stream is destroyed, so the app can treat the returned SDL_AudioStream as<br/>
		/// the only object needed to manage audio playback.<br/>
		/// Also unlike other functions, the audio device begins paused. This is to map<br/>
		/// more closely to SDL2-style behavior, since there is no extra step here to<br/>
		/// bind a stream to begin audio flowing. The audio device should be resumed<br/>
		/// with `SDL_ResumeAudioStreamDevice(stream);`<br/>
		/// This function works with both playback and recording devices.<br/>
		/// The `spec` parameter represents the app's side of the audio stream. That<br/>
		/// is, for recording audio, this will be the output format, and for playing<br/>
		/// audio, this will be the input format. If spec is NULL, the system will<br/>
		/// choose the format, and the app can use SDL_GetAudioStreamFormat() to obtain<br/>
		/// this information later.<br/>
		/// If you don't care about opening a specific audio device, you can (and<br/>
		/// probably _should_), use SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and<br/>
		/// SDL_AUDIO_DEVICE_DEFAULT_RECORDING for recording.<br/>
		/// One can optionally provide a callback function; if NULL, the app is<br/>
		/// expected to queue audio data for playback (or unqueue audio data if<br/>
		/// capturing). Otherwise, the callback will begin to fire once the device is<br/>
		/// unpaused.<br/>
		/// Destroying the returned stream with SDL_DestroyAudioStream will also close<br/>
		/// the audio device associated with this stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_OpenAudioDeviceStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLAudioStream* OpenAudioDeviceStreamNative([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, SDLAudioSpec*, delegate*<void*, SDLAudioStream*, int, int, void>, void*, SDLAudioStream*>)funcTable[322])(devid, spec, (delegate*<void*, SDLAudioStream*, int, int, void>)Utils.GetFunctionPointerForDelegate(callback), userdata);
			#else
			return (SDLAudioStream*)((delegate* unmanaged[Cdecl]<uint, nint, nint, nint, nint>)funcTable[322])(devid, (nint)spec, (nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Convenience function for straightforward audio init for the common case.<br/>
		/// If all your app intends to do is provide a single source of PCM audio, this<br/>
		/// function allows you to do all your audio setup in a single call.<br/>
		/// This is also intended to be a clean means to migrate apps from SDL2.<br/>
		/// This function will open an audio device, create a stream and bind it.<br/>
		/// Unlike other methods of setup, the audio device will be closed when this<br/>
		/// stream is destroyed, so the app can treat the returned SDL_AudioStream as<br/>
		/// the only object needed to manage audio playback.<br/>
		/// Also unlike other functions, the audio device begins paused. This is to map<br/>
		/// more closely to SDL2-style behavior, since there is no extra step here to<br/>
		/// bind a stream to begin audio flowing. The audio device should be resumed<br/>
		/// with `SDL_ResumeAudioStreamDevice(stream);`<br/>
		/// This function works with both playback and recording devices.<br/>
		/// The `spec` parameter represents the app's side of the audio stream. That<br/>
		/// is, for recording audio, this will be the output format, and for playing<br/>
		/// audio, this will be the input format. If spec is NULL, the system will<br/>
		/// choose the format, and the app can use SDL_GetAudioStreamFormat() to obtain<br/>
		/// this information later.<br/>
		/// If you don't care about opening a specific audio device, you can (and<br/>
		/// probably _should_), use SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and<br/>
		/// SDL_AUDIO_DEVICE_DEFAULT_RECORDING for recording.<br/>
		/// One can optionally provide a callback function; if NULL, the app is<br/>
		/// expected to queue audio data for playback (or unqueue audio data if<br/>
		/// capturing). Otherwise, the callback will begin to fire once the device is<br/>
		/// unpaused.<br/>
		/// Destroying the returned stream with SDL_DestroyAudioStream will also close<br/>
		/// the audio device associated with this stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_OpenAudioDeviceStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		public static SDLAudioStream* OpenAudioDeviceStream([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			SDLAudioStream* ret = OpenAudioDeviceStreamNative(devid, spec, callback, userdata);
			return ret;
		}

		/// <summary>
		/// Convenience function for straightforward audio init for the common case.<br/>
		/// If all your app intends to do is provide a single source of PCM audio, this<br/>
		/// function allows you to do all your audio setup in a single call.<br/>
		/// This is also intended to be a clean means to migrate apps from SDL2.<br/>
		/// This function will open an audio device, create a stream and bind it.<br/>
		/// Unlike other methods of setup, the audio device will be closed when this<br/>
		/// stream is destroyed, so the app can treat the returned SDL_AudioStream as<br/>
		/// the only object needed to manage audio playback.<br/>
		/// Also unlike other functions, the audio device begins paused. This is to map<br/>
		/// more closely to SDL2-style behavior, since there is no extra step here to<br/>
		/// bind a stream to begin audio flowing. The audio device should be resumed<br/>
		/// with `SDL_ResumeAudioStreamDevice(stream);`<br/>
		/// This function works with both playback and recording devices.<br/>
		/// The `spec` parameter represents the app's side of the audio stream. That<br/>
		/// is, for recording audio, this will be the output format, and for playing<br/>
		/// audio, this will be the input format. If spec is NULL, the system will<br/>
		/// choose the format, and the app can use SDL_GetAudioStreamFormat() to obtain<br/>
		/// this information later.<br/>
		/// If you don't care about opening a specific audio device, you can (and<br/>
		/// probably _should_), use SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and<br/>
		/// SDL_AUDIO_DEVICE_DEFAULT_RECORDING for recording.<br/>
		/// One can optionally provide a callback function; if NULL, the app is<br/>
		/// expected to queue audio data for playback (or unqueue audio data if<br/>
		/// capturing). Otherwise, the callback will begin to fire once the device is<br/>
		/// unpaused.<br/>
		/// Destroying the returned stream with SDL_DestroyAudioStream will also close<br/>
		/// the audio device associated with this stream.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_OpenAudioDeviceStream")]
		[return: NativeName(NativeNameType.Type, "SDL_AudioStream *")]
		public static SDLAudioStream* OpenAudioDeviceStream([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioStreamCallback")] SDLAudioStreamCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			fixed (SDLAudioSpec* pspec = &spec)
			{
				SDLAudioStream* ret = OpenAudioDeviceStreamNative(devid, (SDLAudioSpec*)pspec, callback, userdata);
				return ret;
			}
		}

		/// <summary>
		/// Set a callback that fires when data is about to be fed to an audio device.<br/>
		/// This is useful for accessing the final mix, perhaps for writing a<br/>
		/// visualizer or applying a final effect to the audio data before playback.<br/>
		/// The buffer is the final mix of all bound audio streams on an opened device;<br/>
		/// this callback will fire regularly for any device that is both opened and<br/>
		/// unpaused. If there is no new data to mix, either because no streams are<br/>
		/// bound to the device or all the streams are empty, this callback will still<br/>
		/// fire with the entire buffer set to silence.<br/>
		/// This callback is allowed to make changes to the data; the contents of the<br/>
		/// buffer after this call is what is ultimately passed along to the hardware.<br/>
		/// The callback is always provided the data in float format (values from -1.0f<br/>
		/// to 1.0f), but the number of channels or sample rate may be different than<br/>
		/// the format the app requested when opening the device; SDL might have had to<br/>
		/// manage a conversion behind the scenes, or the playback might have jumped to<br/>
		/// new physical hardware when a system default changed, etc. These details may<br/>
		/// change between calls. Accordingly, the size of the buffer might change<br/>
		/// between calls as well.<br/>
		/// This callback can run at any time, and from any thread; if you need to<br/>
		/// serialize access to your app's data, you should provide and use a mutex or<br/>
		/// other synchronization device.<br/>
		/// All of this to say: there are specific needs this callback can fulfill, but<br/>
		/// it is not the simplest interface. Apps should generally provide audio in<br/>
		/// their preferred format through an SDL_AudioStream and let SDL handle the<br/>
		/// difference.<br/>
		/// This function is extremely time-sensitive; the callback should do the least<br/>
		/// amount of work possible and return as quickly as it can. The longer the<br/>
		/// callback runs, the higher the risk of audio dropouts or other problems.<br/>
		/// This function will block until the audio device is in between iterations,<br/>
		/// so any existing callback that might be running will finish before this<br/>
		/// function sets the new callback and returns.<br/>
		/// Setting a NULL callback function disables any previously-set callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioPostmixCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetAudioPostmixCallbackNative([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioPostmixCallback")] SDLAudioPostmixCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, delegate*<void*, SDLAudioSpec*, float*, int, void>, void*, int>)funcTable[323])(devid, (delegate*<void*, SDLAudioSpec*, float*, int, void>)Utils.GetFunctionPointerForDelegate(callback), userdata);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, nint, int>)funcTable[323])(devid, (nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Set a callback that fires when data is about to be fed to an audio device.<br/>
		/// This is useful for accessing the final mix, perhaps for writing a<br/>
		/// visualizer or applying a final effect to the audio data before playback.<br/>
		/// The buffer is the final mix of all bound audio streams on an opened device;<br/>
		/// this callback will fire regularly for any device that is both opened and<br/>
		/// unpaused. If there is no new data to mix, either because no streams are<br/>
		/// bound to the device or all the streams are empty, this callback will still<br/>
		/// fire with the entire buffer set to silence.<br/>
		/// This callback is allowed to make changes to the data; the contents of the<br/>
		/// buffer after this call is what is ultimately passed along to the hardware.<br/>
		/// The callback is always provided the data in float format (values from -1.0f<br/>
		/// to 1.0f), but the number of channels or sample rate may be different than<br/>
		/// the format the app requested when opening the device; SDL might have had to<br/>
		/// manage a conversion behind the scenes, or the playback might have jumped to<br/>
		/// new physical hardware when a system default changed, etc. These details may<br/>
		/// change between calls. Accordingly, the size of the buffer might change<br/>
		/// between calls as well.<br/>
		/// This callback can run at any time, and from any thread; if you need to<br/>
		/// serialize access to your app's data, you should provide and use a mutex or<br/>
		/// other synchronization device.<br/>
		/// All of this to say: there are specific needs this callback can fulfill, but<br/>
		/// it is not the simplest interface. Apps should generally provide audio in<br/>
		/// their preferred format through an SDL_AudioStream and let SDL handle the<br/>
		/// difference.<br/>
		/// This function is extremely time-sensitive; the callback should do the least<br/>
		/// amount of work possible and return as quickly as it can. The longer the<br/>
		/// callback runs, the higher the risk of audio dropouts or other problems.<br/>
		/// This function will block until the audio device is in between iterations,<br/>
		/// so any existing callback that might be running will finish before this<br/>
		/// function sets the new callback and returns.<br/>
		/// Setting a NULL callback function disables any previously-set callback.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetAudioPostmixCallback")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetAudioPostmixCallback([NativeName(NativeNameType.Param, "devid")] [NativeName(NativeNameType.Type, "SDL_AudioDeviceID")] uint devid, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_AudioPostmixCallback")] SDLAudioPostmixCallback callback, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata)
		{
			int ret = SetAudioPostmixCallbackNative(devid, callback, userdata);
			return ret;
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LoadWAVIONative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLIOStream*, int, SDLAudioSpec*, byte**, uint*, int>)funcTable[324])(src, closeio, spec, audioBuf, audioLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, nint, int>)funcTable[324])((nint)src, closeio, (nint)spec, (nint)audioBuf, (nint)audioLen);
			#endif
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			int ret = LoadWAVIONative(src, closeio, spec, audioBuf, audioLen);
			return ret;
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, spec, audioBuf, audioLen);
				return ret;
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (SDLAudioSpec* pspec = &spec)
			{
				int ret = LoadWAVIONative(src, closeio, (SDLAudioSpec*)pspec, audioBuf, audioLen);
				return ret;
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				fixed (SDLAudioSpec* pspec = &spec)
				{
					int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, (SDLAudioSpec*)pspec, audioBuf, audioLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (byte** paudioBuf = &audioBuf)
			{
				int ret = LoadWAVIONative(src, closeio, spec, (byte**)paudioBuf, audioLen);
				return ret;
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				fixed (byte** paudioBuf = &audioBuf)
				{
					int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, spec, (byte**)paudioBuf, audioLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (SDLAudioSpec* pspec = &spec)
			{
				fixed (byte** paudioBuf = &audioBuf)
				{
					int ret = LoadWAVIONative(src, closeio, (SDLAudioSpec*)pspec, (byte**)paudioBuf, audioLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				fixed (SDLAudioSpec* pspec = &spec)
				{
					fixed (byte** paudioBuf = &audioBuf)
					{
						int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, (SDLAudioSpec*)pspec, (byte**)paudioBuf, audioLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (uint* paudioLen = &audioLen)
			{
				int ret = LoadWAVIONative(src, closeio, spec, audioBuf, (uint*)paudioLen);
				return ret;
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				fixed (uint* paudioLen = &audioLen)
				{
					int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, spec, audioBuf, (uint*)paudioLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (SDLAudioSpec* pspec = &spec)
			{
				fixed (uint* paudioLen = &audioLen)
				{
					int ret = LoadWAVIONative(src, closeio, (SDLAudioSpec*)pspec, audioBuf, (uint*)paudioLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				fixed (SDLAudioSpec* pspec = &spec)
				{
					fixed (uint* paudioLen = &audioLen)
					{
						int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, (SDLAudioSpec*)pspec, audioBuf, (uint*)paudioLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (byte** paudioBuf = &audioBuf)
			{
				fixed (uint* paudioLen = &audioLen)
				{
					int ret = LoadWAVIONative(src, closeio, spec, (byte**)paudioBuf, (uint*)paudioLen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				fixed (byte** paudioBuf = &audioBuf)
				{
					fixed (uint* paudioLen = &audioLen)
					{
						int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, spec, (byte**)paudioBuf, (uint*)paudioLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (SDLAudioSpec* pspec = &spec)
			{
				fixed (byte** paudioBuf = &audioBuf)
				{
					fixed (uint* paudioLen = &audioLen)
					{
						int ret = LoadWAVIONative(src, closeio, (SDLAudioSpec*)pspec, (byte**)paudioBuf, (uint*)paudioLen);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Load the audio data of a WAVE file into memory.<br/>
		/// Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to<br/>
		/// be valid pointers. The entire data portion of the file is then loaded into<br/>
		/// memory and decoded if necessary.<br/>
		/// Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and<br/>
		/// 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and<br/>
		/// A-law and mu-law (8 bits). Other formats are currently unsupported and<br/>
		/// cause an error.<br/>
		/// If this function succeeds, the return value is zero and the pointer to the<br/>
		/// audio data allocated by the function is written to `audio_buf` and its<br/>
		/// length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,<br/>
		/// `channels`, and `format` are set to the values of the audio data in the<br/>
		/// buffer.<br/>
		/// It's necessary to use SDL_free() to free the audio data returned in<br/>
		/// `audio_buf` when it is no longer used.<br/>
		/// Because of the underspecification of the .WAV format, there are many<br/>
		/// problematic files in the wild that cause issues with strict decoders. To<br/>
		/// provide compatibility with these files, this decoder is lenient in regards<br/>
		/// to the truncation of the file, the fact chunk, and the size of the RIFF<br/>
		/// chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,<br/>
		/// `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to<br/>
		/// tune the behavior of the loading process.<br/>
		/// Any file that is invalid (due to truncation, corruption, or wrong values in<br/>
		/// the headers), too big, or unsupported causes an error. Additionally, any<br/>
		/// critical I/O error from the data source will terminate the loading process<br/>
		/// with an error. The function returns NULL on error and in all cases (with<br/>
		/// the exception of `src` being NULL), an appropriate error message will be<br/>
		/// set.<br/>
		/// It is required that the data source supports seeking.<br/>
		/// Example:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile("sample.wav", "rb"), 1, <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// Note that the SDL_LoadWAV function does this same thing for you, but in a<br/>
		/// less messy way:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV("sample.wav", <br/>
		/// &spec<br/>
		/// , <br/>
		/// &buf<br/>
		/// , <br/>
		/// &len<br/>
		/// );<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV_IO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAVIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "SDL_bool")] int closeio, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] ref byte* audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint audioLen)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				fixed (SDLAudioSpec* pspec = &spec)
				{
					fixed (byte** paudioBuf = &audioBuf)
					{
						fixed (uint* paudioLen = &audioLen)
						{
							int ret = LoadWAVIONative((SDLIOStream*)psrc, closeio, (SDLAudioSpec*)pspec, (byte**)paudioBuf, (uint*)paudioLen);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Loads a WAV from a file path.<br/>
		/// This is a convenience function that is effectively the same as:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), 1, spec, audio_buf, audio_len);<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LoadWAVNative([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLAudioSpec*, byte**, uint*, int>)funcTable[325])(path, spec, audioBuf, audioLen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int>)funcTable[325])((nint)path, (nint)spec, (nint)audioBuf, (nint)audioLen);
			#endif
		}

		/// <summary>
		/// Loads a WAV from a file path.<br/>
		/// This is a convenience function that is effectively the same as:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), 1, spec, audio_buf, audio_len);<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAV([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			int ret = LoadWAVNative(path, spec, audioBuf, audioLen);
			return ret;
		}

		/// <summary>
		/// Loads a WAV from a file path.<br/>
		/// This is a convenience function that is effectively the same as:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), 1, spec, audio_buf, audio_len);<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAV([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] ref byte path, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (byte* ppath = &path)
			{
				int ret = LoadWAVNative((byte*)ppath, spec, audioBuf, audioLen);
				return ret;
			}
		}

		/// <summary>
		/// Loads a WAV from a file path.<br/>
		/// This is a convenience function that is effectively the same as:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), 1, spec, audio_buf, audio_len);<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAV([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> path, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (byte* ppath = path)
			{
				int ret = LoadWAVNative((byte*)ppath, spec, audioBuf, audioLen);
				return ret;
			}
		}

		/// <summary>
		/// Loads a WAV from a file path.<br/>
		/// This is a convenience function that is effectively the same as:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), 1, spec, audio_buf, audio_len);<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAV([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] string path, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = LoadWAVNative(pStr0, spec, audioBuf, audioLen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Loads a WAV from a file path.<br/>
		/// This is a convenience function that is effectively the same as:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), 1, spec, audio_buf, audio_len);<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAV([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (SDLAudioSpec* pspec = &spec)
			{
				int ret = LoadWAVNative(path, (SDLAudioSpec*)pspec, audioBuf, audioLen);
				return ret;
			}
		}

		/// <summary>
		/// Loads a WAV from a file path.<br/>
		/// This is a convenience function that is effectively the same as:<br/>
		/// ```c<br/>
		/// SDL_LoadWAV_IO(SDL_IOFromFile(path, "rb"), 1, spec, audio_buf, audio_len);<br/>
		/// ```<br/>
		/// <br/>
		/// This function returns -1 if the .WAV file cannot be opened, uses<br/>
		/// an unknown data format, or is corrupt; call SDL_GetError() for<br/>
		/// more information.<br/>
		/// When the application is done with the data returned in<br/>
		/// `audio_buf`, it should call SDL_free() to dispose of it.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_LoadWAV")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int LoadWAV([NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] ref byte path, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec *")] ref SDLAudioSpec spec, [NativeName(NativeNameType.Param, "audio_buf")] [NativeName(NativeNameType.Type, "Uint8 * *")] byte** audioBuf, [NativeName(NativeNameType.Param, "audio_len")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* audioLen)
		{
			fixed (byte* ppath = &path)
			{
				fixed (SDLAudioSpec* pspec = &spec)
				{
					int ret = LoadWAVNative((byte*)ppath, (SDLAudioSpec*)pspec, audioBuf, audioLen);
					return ret;
				}
			}
		}
	}
}
