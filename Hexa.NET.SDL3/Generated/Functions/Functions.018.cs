// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(string org, byte* app)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (org != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(org);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(org, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetPrefPathNative(pStr0, app));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(byte* org, ref byte app)
		{
			fixed (byte* papp = &app)
			{
				byte* ret = GetPrefPathNative(org, (byte*)papp);
				return ret;
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(byte* org, ref byte app)
		{
			fixed (byte* papp = &app)
			{
				string ret = Utils.DecodeStringUTF8(GetPrefPathNative(org, (byte*)papp));
				return ret;
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(byte* org, ReadOnlySpan<byte> app)
		{
			fixed (byte* papp = app)
			{
				byte* ret = GetPrefPathNative(org, (byte*)papp);
				return ret;
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(byte* org, ReadOnlySpan<byte> app)
		{
			fixed (byte* papp = app)
			{
				string ret = Utils.DecodeStringUTF8(GetPrefPathNative(org, (byte*)papp));
				return ret;
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(byte* org, string app)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (app != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(app);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(app, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = GetPrefPathNative(org, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(byte* org, string app)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (app != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(app);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(app, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetPrefPathNative(org, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(ref byte org, ref byte app)
		{
			fixed (byte* porg = &org)
			{
				fixed (byte* papp = &app)
				{
					byte* ret = GetPrefPathNative((byte*)porg, (byte*)papp);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(ref byte org, ref byte app)
		{
			fixed (byte* porg = &org)
			{
				fixed (byte* papp = &app)
				{
					string ret = Utils.DecodeStringUTF8(GetPrefPathNative((byte*)porg, (byte*)papp));
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(ReadOnlySpan<byte> org, ReadOnlySpan<byte> app)
		{
			fixed (byte* porg = org)
			{
				fixed (byte* papp = app)
				{
					byte* ret = GetPrefPathNative((byte*)porg, (byte*)papp);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(ReadOnlySpan<byte> org, ReadOnlySpan<byte> app)
		{
			fixed (byte* porg = org)
			{
				fixed (byte* papp = app)
				{
					string ret = Utils.DecodeStringUTF8(GetPrefPathNative((byte*)porg, (byte*)papp));
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetPrefPath(string org, string app)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (org != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(org);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(org, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (app != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(app);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(app, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = GetPrefPathNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the user-and-app-specific path where files can be written.<br/>
		/// Get the "pref dir". This is meant to be where users can write personal<br/>
		/// files (preferences and save games, etc) that are specific to your<br/>
		/// application. This directory is unique per user, per application.<br/>
		/// This function will decide the appropriate location in the native<br/>
		/// filesystem, create the directory if necessary, and return a string of the<br/>
		/// absolute path to the directory in UTF-8 encoding.<br/>
		/// On Windows, the string might look like:<br/>
		/// `C:<br/>
		/// \<br/>
		/// Users<br/>
		/// \<br/>
		/// bob<br/>
		/// \<br/>
		/// AppData<br/>
		/// \<br/>
		/// Roaming<br/>
		/// \<br/>
		/// My Company<br/>
		/// \<br/>
		/// My Program Name<br/>
		/// \<br/>
		/// `<br/>
		/// On Linux, the string might look like:<br/>
		/// `/home/bob/.local/share/My Program Name/`<br/>
		/// On macOS, the string might look like:<br/>
		/// `/Users/bob/Library/Application Support/My Program Name/`<br/>
		/// You should assume the path returned by this function is the only safe place<br/>
		/// to write files (and that SDL_GetBasePath(), while it might be writable, or<br/>
		/// even the parent of the returned path, isn't where you should be writing<br/>
		/// things).<br/>
		/// Both the org and app strings may become part of a directory name, so please<br/>
		/// follow these rules:<br/>
		/// - Try to use the same org string (_including case-sensitivity_) for all<br/>
		/// your applications that use this function.<br/>
		/// - Always use a unique app string for each one, and make sure it never<br/>
		/// changes for an app once you've decided on it.<br/>
		/// - Unicode characters are legal, as long as they are UTF-8 encoded, but...<br/>
		/// - ...only use letters, numbers, and spaces. Avoid punctuation like "Game<br/>
		/// Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetPrefPathS(string org, string app)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (org != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(org);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(org, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (app != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(app);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(app, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetPrefPathNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Finds the most suitable user folder for a specific purpose.<br/>
		/// Many OSes provide certain standard folders for certain purposes, such as<br/>
		/// storing pictures, music or videos for a certain user. This function gives<br/>
		/// the path for many of those special locations.<br/>
		/// This function is specifically for _user_ folders, which are meant for the<br/>
		/// user to access and manage. For application-specific folders, meant to hold<br/>
		/// data for the application to manage, see SDL_GetBasePath() and<br/>
		/// SDL_GetPrefPath().<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// If NULL is returned, the error may be obtained with SDL_GetError().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetUserFolderNative(SDLFolder folder)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFolder, byte*>)funcTable[822])(folder);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SDLFolder, nint>)funcTable[822])(folder);
			#endif
		}

		/// <summary>
		/// Finds the most suitable user folder for a specific purpose.<br/>
		/// Many OSes provide certain standard folders for certain purposes, such as<br/>
		/// storing pictures, music or videos for a certain user. This function gives<br/>
		/// the path for many of those special locations.<br/>
		/// This function is specifically for _user_ folders, which are meant for the<br/>
		/// user to access and manage. For application-specific folders, meant to hold<br/>
		/// data for the application to manage, see SDL_GetBasePath() and<br/>
		/// SDL_GetPrefPath().<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// If NULL is returned, the error may be obtained with SDL_GetError().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetUserFolder(SDLFolder folder)
		{
			byte* ret = GetUserFolderNative(folder);
			return ret;
		}

		/// <summary>
		/// Finds the most suitable user folder for a specific purpose.<br/>
		/// Many OSes provide certain standard folders for certain purposes, such as<br/>
		/// storing pictures, music or videos for a certain user. This function gives<br/>
		/// the path for many of those special locations.<br/>
		/// This function is specifically for _user_ folders, which are meant for the<br/>
		/// user to access and manage. For application-specific folders, meant to hold<br/>
		/// data for the application to manage, see SDL_GetBasePath() and<br/>
		/// SDL_GetPrefPath().<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// If NULL is returned, the error may be obtained with SDL_GetError().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetUserFolderS(SDLFolder folder)
		{
			string ret = Utils.DecodeStringUTF8(GetUserFolderNative(folder));
			return ret;
		}

		/// <summary>
		/// Create a directory, and any missing parent directories.<br/>
		/// This reports success if `path` already exists as a directory.<br/>
		/// If parent directories are missing, it will also create them. Note that if<br/>
		/// this fails, it will not remove any parent directories it already made.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CreateDirectoryNative(byte* path)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)funcTable[823])(path);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[823])((nint)path);
			#endif
		}

		/// <summary>
		/// Create a directory, and any missing parent directories.<br/>
		/// This reports success if `path` already exists as a directory.<br/>
		/// If parent directories are missing, it will also create them. Note that if<br/>
		/// this fails, it will not remove any parent directories it already made.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CreateDirectory(byte* path)
		{
			byte ret = CreateDirectoryNative(path);
			return ret != 0;
		}

		/// <summary>
		/// Create a directory, and any missing parent directories.<br/>
		/// This reports success if `path` already exists as a directory.<br/>
		/// If parent directories are missing, it will also create them. Note that if<br/>
		/// this fails, it will not remove any parent directories it already made.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CreateDirectory(ref byte path)
		{
			fixed (byte* ppath = &path)
			{
				byte ret = CreateDirectoryNative((byte*)ppath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a directory, and any missing parent directories.<br/>
		/// This reports success if `path` already exists as a directory.<br/>
		/// If parent directories are missing, it will also create them. Note that if<br/>
		/// this fails, it will not remove any parent directories it already made.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CreateDirectory(ReadOnlySpan<byte> path)
		{
			fixed (byte* ppath = path)
			{
				byte ret = CreateDirectoryNative((byte*)ppath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a directory, and any missing parent directories.<br/>
		/// This reports success if `path` already exists as a directory.<br/>
		/// If parent directories are missing, it will also create them. Note that if<br/>
		/// this fails, it will not remove any parent directories it already made.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CreateDirectory(string path)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CreateDirectoryNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Enumerate a directory through a callback function.<br/>
		/// This function provides every directory entry through an app-provided<br/>
		/// callback, called once for each directory entry, until all results have been<br/>
		/// provided or the callback returns either SDL_ENUM_SUCCESS or<br/>
		/// SDL_ENUM_FAILURE.<br/>
		/// This will return false if there was a system problem in general, or if a<br/>
		/// callback returns SDL_ENUM_FAILURE. A successful return means a callback<br/>
		/// returned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries<br/>
		/// were enumerated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte EnumerateDirectoryNative(byte* path, SDLEnumerateDirectoryCallback callback, void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, delegate*<void*, byte*, byte*, SDLEnumerationResult>, void*, byte>)funcTable[824])(path, (delegate*<void*, byte*, byte*, SDLEnumerationResult>)Utils.GetFunctionPointerForDelegate(callback), userdata);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[824])((nint)path, (nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Enumerate a directory through a callback function.<br/>
		/// This function provides every directory entry through an app-provided<br/>
		/// callback, called once for each directory entry, until all results have been<br/>
		/// provided or the callback returns either SDL_ENUM_SUCCESS or<br/>
		/// SDL_ENUM_FAILURE.<br/>
		/// This will return false if there was a system problem in general, or if a<br/>
		/// callback returns SDL_ENUM_FAILURE. A successful return means a callback<br/>
		/// returned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries<br/>
		/// were enumerated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool EnumerateDirectory(byte* path, SDLEnumerateDirectoryCallback callback, void* userdata)
		{
			byte ret = EnumerateDirectoryNative(path, callback, userdata);
			return ret != 0;
		}

		/// <summary>
		/// Enumerate a directory through a callback function.<br/>
		/// This function provides every directory entry through an app-provided<br/>
		/// callback, called once for each directory entry, until all results have been<br/>
		/// provided or the callback returns either SDL_ENUM_SUCCESS or<br/>
		/// SDL_ENUM_FAILURE.<br/>
		/// This will return false if there was a system problem in general, or if a<br/>
		/// callback returns SDL_ENUM_FAILURE. A successful return means a callback<br/>
		/// returned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries<br/>
		/// were enumerated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool EnumerateDirectory(ref byte path, SDLEnumerateDirectoryCallback callback, void* userdata)
		{
			fixed (byte* ppath = &path)
			{
				byte ret = EnumerateDirectoryNative((byte*)ppath, callback, userdata);
				return ret != 0;
			}
		}

		/// <summary>
		/// Enumerate a directory through a callback function.<br/>
		/// This function provides every directory entry through an app-provided<br/>
		/// callback, called once for each directory entry, until all results have been<br/>
		/// provided or the callback returns either SDL_ENUM_SUCCESS or<br/>
		/// SDL_ENUM_FAILURE.<br/>
		/// This will return false if there was a system problem in general, or if a<br/>
		/// callback returns SDL_ENUM_FAILURE. A successful return means a callback<br/>
		/// returned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries<br/>
		/// were enumerated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool EnumerateDirectory(ReadOnlySpan<byte> path, SDLEnumerateDirectoryCallback callback, void* userdata)
		{
			fixed (byte* ppath = path)
			{
				byte ret = EnumerateDirectoryNative((byte*)ppath, callback, userdata);
				return ret != 0;
			}
		}

		/// <summary>
		/// Enumerate a directory through a callback function.<br/>
		/// This function provides every directory entry through an app-provided<br/>
		/// callback, called once for each directory entry, until all results have been<br/>
		/// provided or the callback returns either SDL_ENUM_SUCCESS or<br/>
		/// SDL_ENUM_FAILURE.<br/>
		/// This will return false if there was a system problem in general, or if a<br/>
		/// callback returns SDL_ENUM_FAILURE. A successful return means a callback<br/>
		/// returned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries<br/>
		/// were enumerated.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool EnumerateDirectory(string path, SDLEnumerateDirectoryCallback callback, void* userdata)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = EnumerateDirectoryNative(pStr0, callback, userdata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Remove a file or an empty directory.<br/>
		/// Directories that are not empty will fail; this function will not recursely<br/>
		/// delete directory trees.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RemovePathNative(byte* path)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)funcTable[825])(path);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[825])((nint)path);
			#endif
		}

		/// <summary>
		/// Remove a file or an empty directory.<br/>
		/// Directories that are not empty will fail; this function will not recursely<br/>
		/// delete directory trees.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RemovePath(byte* path)
		{
			byte ret = RemovePathNative(path);
			return ret != 0;
		}

		/// <summary>
		/// Remove a file or an empty directory.<br/>
		/// Directories that are not empty will fail; this function will not recursely<br/>
		/// delete directory trees.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RemovePath(ref byte path)
		{
			fixed (byte* ppath = &path)
			{
				byte ret = RemovePathNative((byte*)ppath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Remove a file or an empty directory.<br/>
		/// Directories that are not empty will fail; this function will not recursely<br/>
		/// delete directory trees.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RemovePath(ReadOnlySpan<byte> path)
		{
			fixed (byte* ppath = path)
			{
				byte ret = RemovePathNative((byte*)ppath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Remove a file or an empty directory.<br/>
		/// Directories that are not empty will fail; this function will not recursely<br/>
		/// delete directory trees.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RemovePath(string path)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = RemovePathNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RenamePathNative(byte* oldpath, byte* newpath)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte>)funcTable[826])(oldpath, newpath);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[826])((nint)oldpath, (nint)newpath);
			#endif
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(byte* oldpath, byte* newpath)
		{
			byte ret = RenamePathNative(oldpath, newpath);
			return ret != 0;
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(ref byte oldpath, byte* newpath)
		{
			fixed (byte* poldpath = &oldpath)
			{
				byte ret = RenamePathNative((byte*)poldpath, newpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(ReadOnlySpan<byte> oldpath, byte* newpath)
		{
			fixed (byte* poldpath = oldpath)
			{
				byte ret = RenamePathNative((byte*)poldpath, newpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(string oldpath, byte* newpath)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldpath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldpath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldpath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = RenamePathNative(pStr0, newpath);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(byte* oldpath, ref byte newpath)
		{
			fixed (byte* pnewpath = &newpath)
			{
				byte ret = RenamePathNative(oldpath, (byte*)pnewpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(byte* oldpath, ReadOnlySpan<byte> newpath)
		{
			fixed (byte* pnewpath = newpath)
			{
				byte ret = RenamePathNative(oldpath, (byte*)pnewpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(byte* oldpath, string newpath)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (newpath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(newpath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(newpath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = RenamePathNative(oldpath, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(ref byte oldpath, ref byte newpath)
		{
			fixed (byte* poldpath = &oldpath)
			{
				fixed (byte* pnewpath = &newpath)
				{
					byte ret = RenamePathNative((byte*)poldpath, (byte*)pnewpath);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(ReadOnlySpan<byte> oldpath, ReadOnlySpan<byte> newpath)
		{
			fixed (byte* poldpath = oldpath)
			{
				fixed (byte* pnewpath = newpath)
				{
					byte ret = RenamePathNative((byte*)poldpath, (byte*)pnewpath);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Rename a file or directory.<br/>
		/// If the file at `newpath` already exists, it will replaced.<br/>
		/// Note that this will not copy files across filesystems/drives/volumes, as<br/>
		/// that is a much more complicated (and possibly time-consuming) operation.<br/>
		/// Which is to say, if this function fails, SDL_CopyFile() to a temporary file<br/>
		/// in the same directory as `newpath`, then SDL_RenamePath() from the<br/>
		/// temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work<br/>
		/// for files. Renaming a non-empty directory across filesystems is<br/>
		/// dramatically more complex, however.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RenamePath(string oldpath, string newpath)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldpath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldpath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldpath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (newpath != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(newpath);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(newpath, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = RenamePathNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte CopyFileNative(byte* oldpath, byte* newpath)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte>)funcTable[827])(oldpath, newpath);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[827])((nint)oldpath, (nint)newpath);
			#endif
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(byte* oldpath, byte* newpath)
		{
			byte ret = CopyFileNative(oldpath, newpath);
			return ret != 0;
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(ref byte oldpath, byte* newpath)
		{
			fixed (byte* poldpath = &oldpath)
			{
				byte ret = CopyFileNative((byte*)poldpath, newpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(ReadOnlySpan<byte> oldpath, byte* newpath)
		{
			fixed (byte* poldpath = oldpath)
			{
				byte ret = CopyFileNative((byte*)poldpath, newpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(string oldpath, byte* newpath)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldpath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldpath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldpath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CopyFileNative(pStr0, newpath);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(byte* oldpath, ref byte newpath)
		{
			fixed (byte* pnewpath = &newpath)
			{
				byte ret = CopyFileNative(oldpath, (byte*)pnewpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(byte* oldpath, ReadOnlySpan<byte> newpath)
		{
			fixed (byte* pnewpath = newpath)
			{
				byte ret = CopyFileNative(oldpath, (byte*)pnewpath);
				return ret != 0;
			}
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(byte* oldpath, string newpath)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (newpath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(newpath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(newpath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = CopyFileNative(oldpath, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(ref byte oldpath, ref byte newpath)
		{
			fixed (byte* poldpath = &oldpath)
			{
				fixed (byte* pnewpath = &newpath)
				{
					byte ret = CopyFileNative((byte*)poldpath, (byte*)pnewpath);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(ReadOnlySpan<byte> oldpath, ReadOnlySpan<byte> newpath)
		{
			fixed (byte* poldpath = oldpath)
			{
				fixed (byte* pnewpath = newpath)
				{
					byte ret = CopyFileNative((byte*)poldpath, (byte*)pnewpath);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Copy a file.<br/>
		/// If the file at `newpath` already exists, it will be overwritten with the<br/>
		/// contents of the file at `oldpath`.<br/>
		/// This function will block until the copy is complete, which might be a<br/>
		/// significant time for large files on slow disks. On some platforms, the copy<br/>
		/// can be handed off to the OS itself, but on others SDL might just open both<br/>
		/// paths, and read from one and write to the other.<br/>
		/// Note that this is not an atomic operation! If something tries to read from<br/>
		/// `newpath` while the copy is in progress, it will see an incomplete copy of<br/>
		/// the data, and if the calling thread terminates (or the power goes out)<br/>
		/// during the copy, `newpath`'s previous contents will be gone, replaced with<br/>
		/// an incomplete copy of the data. To avoid this risk, it is recommended that<br/>
		/// the app copy to a temporary file in the same directory as `newpath`, and if<br/>
		/// the copy is successful, use SDL_RenamePath() to replace `newpath` with the<br/>
		/// temporary file. This will ensure that reads of `newpath` will either see a<br/>
		/// complete copy of the data, or it will see the pre-copy state of `newpath`.<br/>
		/// This function attempts to synchronize the newly-copied data to disk before<br/>
		/// returning, if the platform allows it, so that the renaming trick will not<br/>
		/// have a problem in a system crash or power failure, where the file could be<br/>
		/// renamed but the contents never made it from the system file cache to the<br/>
		/// physical disk.<br/>
		/// If the copy fails for any reason, the state of `newpath` is undefined. It<br/>
		/// might be half a copy, it might be the untouched data of what was already<br/>
		/// there, or it might be a zero-byte file, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool CopyFile(string oldpath, string newpath)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (oldpath != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(oldpath);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(oldpath, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (newpath != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(newpath);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(newpath, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = CopyFileNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetPathInfoNative(byte* path, SDLPathInfo* info)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLPathInfo*, byte>)funcTable[828])(path, info);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[828])((nint)path, (nint)info);
			#endif
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(byte* path, SDLPathInfo* info)
		{
			byte ret = GetPathInfoNative(path, info);
			return ret != 0;
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(ref byte path, SDLPathInfo* info)
		{
			fixed (byte* ppath = &path)
			{
				byte ret = GetPathInfoNative((byte*)ppath, info);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(ReadOnlySpan<byte> path, SDLPathInfo* info)
		{
			fixed (byte* ppath = path)
			{
				byte ret = GetPathInfoNative((byte*)ppath, info);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(string path, SDLPathInfo* info)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = GetPathInfoNative(pStr0, info);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(byte* path, ref SDLPathInfo info)
		{
			fixed (SDLPathInfo* pinfo = &info)
			{
				byte ret = GetPathInfoNative(path, (SDLPathInfo*)pinfo);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(ref byte path, ref SDLPathInfo info)
		{
			fixed (byte* ppath = &path)
			{
				fixed (SDLPathInfo* pinfo = &info)
				{
					byte ret = GetPathInfoNative((byte*)ppath, (SDLPathInfo*)pinfo);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(ReadOnlySpan<byte> path, ref SDLPathInfo info)
		{
			fixed (byte* ppath = path)
			{
				fixed (SDLPathInfo* pinfo = &info)
				{
					byte ret = GetPathInfoNative((byte*)ppath, (SDLPathInfo*)pinfo);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Get information about a filesystem path.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetPathInfo(string path, ref SDLPathInfo info)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (SDLPathInfo* pinfo = &info)
			{
				byte ret = GetPathInfoNative(pStr0, (SDLPathInfo*)pinfo);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte** GlobDirectoryNative(byte* path, byte* pattern, SDLGlobFlags flags, int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, SDLGlobFlags, int*, byte**>)funcTable[829])(path, pattern, flags, count);
			#else
			return (byte**)((delegate* unmanaged[Cdecl]<nint, nint, SDLGlobFlags, nint, nint>)funcTable[829])((nint)path, (nint)pattern, flags, (nint)count);
			#endif
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, byte* pattern, SDLGlobFlags flags, int* count)
		{
			byte** ret = GlobDirectoryNative(path, pattern, flags, count);
			return ret;
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ref byte path, byte* pattern, SDLGlobFlags flags, int* count)
		{
			fixed (byte* ppath = &path)
			{
				byte** ret = GlobDirectoryNative((byte*)ppath, pattern, flags, count);
				return ret;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ReadOnlySpan<byte> path, byte* pattern, SDLGlobFlags flags, int* count)
		{
			fixed (byte* ppath = path)
			{
				byte** ret = GlobDirectoryNative((byte*)ppath, pattern, flags, count);
				return ret;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(string path, byte* pattern, SDLGlobFlags flags, int* count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte** ret = GlobDirectoryNative(pStr0, pattern, flags, count);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, ref byte pattern, SDLGlobFlags flags, int* count)
		{
			fixed (byte* ppattern = &pattern)
			{
				byte** ret = GlobDirectoryNative(path, (byte*)ppattern, flags, count);
				return ret;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, ReadOnlySpan<byte> pattern, SDLGlobFlags flags, int* count)
		{
			fixed (byte* ppattern = pattern)
			{
				byte** ret = GlobDirectoryNative(path, (byte*)ppattern, flags, count);
				return ret;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, string pattern, SDLGlobFlags flags, int* count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pattern != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pattern);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pattern, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte** ret = GlobDirectoryNative(path, pStr0, flags, count);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ref byte path, ref byte pattern, SDLGlobFlags flags, int* count)
		{
			fixed (byte* ppath = &path)
			{
				fixed (byte* ppattern = &pattern)
				{
					byte** ret = GlobDirectoryNative((byte*)ppath, (byte*)ppattern, flags, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ReadOnlySpan<byte> path, ReadOnlySpan<byte> pattern, SDLGlobFlags flags, int* count)
		{
			fixed (byte* ppath = path)
			{
				fixed (byte* ppattern = pattern)
				{
					byte** ret = GlobDirectoryNative((byte*)ppath, (byte*)ppattern, flags, count);
					return ret;
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(string path, string pattern, SDLGlobFlags flags, int* count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pattern != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pattern);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pattern, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte** ret = GlobDirectoryNative(pStr0, pStr1, flags, count);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, byte* pattern, SDLGlobFlags flags, ref int count)
		{
			fixed (int* pcount = &count)
			{
				byte** ret = GlobDirectoryNative(path, pattern, flags, (int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ref byte path, byte* pattern, SDLGlobFlags flags, ref int count)
		{
			fixed (byte* ppath = &path)
			{
				fixed (int* pcount = &count)
				{
					byte** ret = GlobDirectoryNative((byte*)ppath, pattern, flags, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ReadOnlySpan<byte> path, byte* pattern, SDLGlobFlags flags, ref int count)
		{
			fixed (byte* ppath = path)
			{
				fixed (int* pcount = &count)
				{
					byte** ret = GlobDirectoryNative((byte*)ppath, pattern, flags, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(string path, byte* pattern, SDLGlobFlags flags, ref int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcount = &count)
			{
				byte** ret = GlobDirectoryNative(pStr0, pattern, flags, (int*)pcount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, ref byte pattern, SDLGlobFlags flags, ref int count)
		{
			fixed (byte* ppattern = &pattern)
			{
				fixed (int* pcount = &count)
				{
					byte** ret = GlobDirectoryNative(path, (byte*)ppattern, flags, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, ReadOnlySpan<byte> pattern, SDLGlobFlags flags, ref int count)
		{
			fixed (byte* ppattern = pattern)
			{
				fixed (int* pcount = &count)
				{
					byte** ret = GlobDirectoryNative(path, (byte*)ppattern, flags, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(byte* path, string pattern, SDLGlobFlags flags, ref int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pattern != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pattern);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pattern, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (int* pcount = &count)
			{
				byte** ret = GlobDirectoryNative(path, pStr0, flags, (int*)pcount);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ref byte path, ref byte pattern, SDLGlobFlags flags, ref int count)
		{
			fixed (byte* ppath = &path)
			{
				fixed (byte* ppattern = &pattern)
				{
					fixed (int* pcount = &count)
					{
						byte** ret = GlobDirectoryNative((byte*)ppath, (byte*)ppattern, flags, (int*)pcount);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(ReadOnlySpan<byte> path, ReadOnlySpan<byte> pattern, SDLGlobFlags flags, ref int count)
		{
			fixed (byte* ppath = path)
			{
				fixed (byte* ppattern = pattern)
				{
					fixed (int* pcount = &count)
					{
						byte** ret = GlobDirectoryNative((byte*)ppath, (byte*)ppattern, flags, (int*)pcount);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Enumerate a directory tree, filtered by pattern, and return a list.<br/>
		/// Files are filtered out if they don't match the string in `pattern`, which<br/>
		/// may contain wildcard characters '<br/>
		/// \<br/>
		/// *' (match everything) and '?' (match one<br/>
		/// character). If pattern is NULL, no filtering is done and all results are<br/>
		/// returned. Subdirectories are permitted, and are specified with a path<br/>
		/// separator of '/'. Wildcard characters '<br/>
		/// \<br/>
		/// *' and '?' never match a path<br/>
		/// separator.<br/>
		/// `flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching<br/>
		/// case-insensitive.<br/>
		/// The returned array is always NULL-terminated, for your iterating<br/>
		/// convenience, but if `count` is non-NULL, on return it will contain the<br/>
		/// number of items in the array, not counting the NULL terminator.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte** GlobDirectory(string path, string pattern, SDLGlobFlags flags, ref int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (pattern != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(pattern);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(pattern, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (int* pcount = &count)
			{
				byte** ret = GlobDirectoryNative(pStr0, pStr1, flags, (int*)pcount);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get what the system believes is the "current working directory."<br/>
		/// For systems without a concept of a current working directory, this will<br/>
		/// still attempt to provide something reasonable.<br/>
		/// SDL does not provide a means to _change_ the current working directory; for<br/>
		/// platforms without this concept, this would cause surprises with file access<br/>
		/// outside of SDL.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetCurrentDirectoryNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*>)funcTable[830])();
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint>)funcTable[830])();
			#endif
		}

		/// <summary>
		/// Get what the system believes is the "current working directory."<br/>
		/// For systems without a concept of a current working directory, this will<br/>
		/// still attempt to provide something reasonable.<br/>
		/// SDL does not provide a means to _change_ the current working directory; for<br/>
		/// platforms without this concept, this would cause surprises with file access<br/>
		/// outside of SDL.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetCurrentDirectory()
		{
			byte* ret = GetCurrentDirectoryNative();
			return ret;
		}

		/// <summary>
		/// Get what the system believes is the "current working directory."<br/>
		/// For systems without a concept of a current working directory, this will<br/>
		/// still attempt to provide something reasonable.<br/>
		/// SDL does not provide a means to _change_ the current working directory; for<br/>
		/// platforms without this concept, this would cause surprises with file access<br/>
		/// outside of SDL.<br/>
		/// The returned path is guaranteed to end with a path separator ('<br/>
		/// \<br/>
		/// ' on<br/>
		/// Windows, '/' on most other platforms).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetCurrentDirectoryS()
		{
			string ret = Utils.DecodeStringUTF8(GetCurrentDirectoryNative());
			return ret;
		}

		/// <summary>
		/// Checks for GPU runtime support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GPUSupportsShaderFormatsNative(SDLGPUShaderFormat formatFlags, byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUShaderFormat, byte*, byte>)funcTable[831])(formatFlags, name);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SDLGPUShaderFormat, nint, byte>)funcTable[831])(formatFlags, (nint)name);
			#endif
		}

		/// <summary>
		/// Checks for GPU runtime support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GPUSupportsShaderFormats(SDLGPUShaderFormat formatFlags, byte* name)
		{
			byte ret = GPUSupportsShaderFormatsNative(formatFlags, name);
			return ret != 0;
		}

		/// <summary>
		/// Checks for GPU runtime support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GPUSupportsShaderFormats(SDLGPUShaderFormat formatFlags, ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte ret = GPUSupportsShaderFormatsNative(formatFlags, (byte*)pname);
				return ret != 0;
			}
		}

		/// <summary>
		/// Checks for GPU runtime support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GPUSupportsShaderFormats(SDLGPUShaderFormat formatFlags, ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte ret = GPUSupportsShaderFormatsNative(formatFlags, (byte*)pname);
				return ret != 0;
			}
		}

		/// <summary>
		/// Checks for GPU runtime support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GPUSupportsShaderFormats(SDLGPUShaderFormat formatFlags, string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = GPUSupportsShaderFormatsNative(formatFlags, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Checks for GPU runtime support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GPUSupportsPropertiesNative(uint props)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[832])(props);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[832])(props);
			#endif
		}

		/// <summary>
		/// Checks for GPU runtime support.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GPUSupportsProperties(uint props)
		{
			byte ret = GPUSupportsPropertiesNative(props);
			return ret != 0;
		}

		/// <summary>
		/// Creates a GPU context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUDevice* CreateGPUDeviceNative(SDLGPUShaderFormat formatFlags, byte debugMode, byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUShaderFormat, byte, byte*, SDLGPUDevice*>)funcTable[833])(formatFlags, debugMode, name);
			#else
			return (SDLGPUDevice*)((delegate* unmanaged[Cdecl]<SDLGPUShaderFormat, byte, nint, nint>)funcTable[833])(formatFlags, debugMode, (nint)name);
			#endif
		}

		/// <summary>
		/// Creates a GPU context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUDevice* CreateGPUDevice(SDLGPUShaderFormat formatFlags, bool debugMode, byte* name)
		{
			SDLGPUDevice* ret = CreateGPUDeviceNative(formatFlags, debugMode ? (byte)1 : (byte)0, name);
			return ret;
		}

		/// <summary>
		/// Creates a GPU context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUDevice* CreateGPUDevice(SDLGPUShaderFormat formatFlags, bool debugMode, ref byte name)
		{
			fixed (byte* pname = &name)
			{
				SDLGPUDevice* ret = CreateGPUDeviceNative(formatFlags, debugMode ? (byte)1 : (byte)0, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Creates a GPU context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUDevice* CreateGPUDevice(SDLGPUShaderFormat formatFlags, bool debugMode, ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				SDLGPUDevice* ret = CreateGPUDeviceNative(formatFlags, debugMode ? (byte)1 : (byte)0, (byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Creates a GPU context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUDevice* CreateGPUDevice(SDLGPUShaderFormat formatFlags, bool debugMode, string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLGPUDevice* ret = CreateGPUDeviceNative(formatFlags, debugMode ? (byte)1 : (byte)0, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Creates a GPU context.<br/>
		/// These are the supported properties:<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN`: enable debug mode<br/>
		/// properties and validations, defaults to true.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN`: enable to prefer<br/>
		/// energy efficiency over maximum GPU performance, defaults to false.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING`: the name of the GPU driver to<br/>
		/// use, if a specific one is desired.<br/>
		/// These are the current shader format properties:<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN`: The app is able to<br/>
		/// provide shaders for an NDA platform.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN`: The app is able to<br/>
		/// provide SPIR-V shaders if applicable.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN`: The app is able to<br/>
		/// provide DXBC shaders if applicable<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN`: The app is able to<br/>
		/// provide DXIL shaders if applicable.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN`: The app is able to<br/>
		/// provide MSL shaders if applicable.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN`: The app is able to<br/>
		/// provide Metal shader libraries if applicable.<br/>
		/// With the D3D12 renderer:<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING`: the prefix to<br/>
		/// use for all vertex semantics, default is "TEXCOORD".<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUDevice* CreateGPUDeviceWithPropertiesNative(uint props)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, SDLGPUDevice*>)funcTable[834])(props);
			#else
			return (SDLGPUDevice*)((delegate* unmanaged[Cdecl]<uint, nint>)funcTable[834])(props);
			#endif
		}

		/// <summary>
		/// Creates a GPU context.<br/>
		/// These are the supported properties:<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN`: enable debug mode<br/>
		/// properties and validations, defaults to true.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN`: enable to prefer<br/>
		/// energy efficiency over maximum GPU performance, defaults to false.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING`: the name of the GPU driver to<br/>
		/// use, if a specific one is desired.<br/>
		/// These are the current shader format properties:<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN`: The app is able to<br/>
		/// provide shaders for an NDA platform.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN`: The app is able to<br/>
		/// provide SPIR-V shaders if applicable.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN`: The app is able to<br/>
		/// provide DXBC shaders if applicable<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN`: The app is able to<br/>
		/// provide DXIL shaders if applicable.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN`: The app is able to<br/>
		/// provide MSL shaders if applicable.<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN`: The app is able to<br/>
		/// provide Metal shader libraries if applicable.<br/>
		/// With the D3D12 renderer:<br/>
		/// - `SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING`: the prefix to<br/>
		/// use for all vertex semantics, default is "TEXCOORD".<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUDevice* CreateGPUDeviceWithProperties(uint props)
		{
			SDLGPUDevice* ret = CreateGPUDeviceWithPropertiesNative(props);
			return ret;
		}

		/// <summary>
		/// Destroys a GPU context previously returned by SDL_CreateGPUDevice.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyGPUDeviceNative(SDLGPUDevice* device)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLGPUDevice*, void>)funcTable[835])(device);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[835])((nint)device);
			#endif
		}

		/// <summary>
		/// Destroys a GPU context previously returned by SDL_CreateGPUDevice.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DestroyGPUDevice(SDLGPUDevice* device)
		{
			DestroyGPUDeviceNative(device);
		}

		/// <summary>
		/// Destroys a GPU context previously returned by SDL_CreateGPUDevice.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DestroyGPUDevice(ref SDLGPUDevice device)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				DestroyGPUDeviceNative((SDLGPUDevice*)pdevice);
			}
		}

		/// <summary>
		/// Get the number of GPU drivers compiled into SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumGPUDriversNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[836])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[836])();
			#endif
		}

		/// <summary>
		/// Get the number of GPU drivers compiled into SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int GetNumGPUDrivers()
		{
			int ret = GetNumGPUDriversNative();
			return ret;
		}

		/// <summary>
		/// Get the name of a built in GPU driver.<br/>
		/// The GPU drivers are presented in the order in which they are normally<br/>
		/// checked during initialization.<br/>
		/// The names of drivers are all simple, low-ASCII identifiers, like "vulkan",<br/>
		/// "metal" or "direct3d12". These never have Unicode characters, and are not<br/>
		/// meant to be proper names.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGPUDriverNative(int index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[837])(index);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[837])(index);
			#endif
		}

		/// <summary>
		/// Get the name of a built in GPU driver.<br/>
		/// The GPU drivers are presented in the order in which they are normally<br/>
		/// checked during initialization.<br/>
		/// The names of drivers are all simple, low-ASCII identifiers, like "vulkan",<br/>
		/// "metal" or "direct3d12". These never have Unicode characters, and are not<br/>
		/// meant to be proper names.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetGPUDriver(int index)
		{
			byte* ret = GetGPUDriverNative(index);
			return ret;
		}

		/// <summary>
		/// Get the name of a built in GPU driver.<br/>
		/// The GPU drivers are presented in the order in which they are normally<br/>
		/// checked during initialization.<br/>
		/// The names of drivers are all simple, low-ASCII identifiers, like "vulkan",<br/>
		/// "metal" or "direct3d12". These never have Unicode characters, and are not<br/>
		/// meant to be proper names.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetGPUDriverS(int index)
		{
			string ret = Utils.DecodeStringUTF8(GetGPUDriverNative(index));
			return ret;
		}

		/// <summary>
		/// Returns the name of the backend used to create this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGPUDeviceDriverNative(SDLGPUDevice* device)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, byte*>)funcTable[838])(device);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[838])((nint)device);
			#endif
		}

		/// <summary>
		/// Returns the name of the backend used to create this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetGPUDeviceDriver(SDLGPUDevice* device)
		{
			byte* ret = GetGPUDeviceDriverNative(device);
			return ret;
		}

		/// <summary>
		/// Returns the name of the backend used to create this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetGPUDeviceDriverS(SDLGPUDevice* device)
		{
			string ret = Utils.DecodeStringUTF8(GetGPUDeviceDriverNative(device));
			return ret;
		}

		/// <summary>
		/// Returns the name of the backend used to create this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetGPUDeviceDriver(ref SDLGPUDevice device)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				byte* ret = GetGPUDeviceDriverNative((SDLGPUDevice*)pdevice);
				return ret;
			}
		}

		/// <summary>
		/// Returns the name of the backend used to create this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetGPUDeviceDriverS(ref SDLGPUDevice device)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				string ret = Utils.DecodeStringUTF8(GetGPUDeviceDriverNative((SDLGPUDevice*)pdevice));
				return ret;
			}
		}

		/// <summary>
		/// Returns the supported shader formats for this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUShaderFormat GetGPUShaderFormatsNative(SDLGPUDevice* device)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUShaderFormat>)funcTable[839])(device);
			#else
			return (SDLGPUShaderFormat)((delegate* unmanaged[Cdecl]<nint, SDLGPUShaderFormat>)funcTable[839])((nint)device);
			#endif
		}

		/// <summary>
		/// Returns the supported shader formats for this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUShaderFormat GetGPUShaderFormats(SDLGPUDevice* device)
		{
			SDLGPUShaderFormat ret = GetGPUShaderFormatsNative(device);
			return ret;
		}

		/// <summary>
		/// Returns the supported shader formats for this GPU context.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUShaderFormat GetGPUShaderFormats(ref SDLGPUDevice device)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUShaderFormat ret = GetGPUShaderFormatsNative((SDLGPUDevice*)pdevice);
				return ret;
			}
		}

		/// <summary>
		/// Creates a pipeline object to be used in a compute workflow.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// - 0: Sampled textures, followed by read-only storage textures, followed by<br/>
		/// read-only storage buffers<br/>
		/// - 1: Read-write storage textures, followed by read-write storage buffers<br/>
		/// - 2: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// - (t[n], space0): Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-only storage buffers<br/>
		/// - (u[n], space1): Read-write storage textures, followed by read-write<br/>
		/// storage buffers<br/>
		/// - (b[n], space2): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[buffer]]: Uniform buffers, followed by read-only storage buffers,<br/>
		/// followed by read-write storage buffers<br/>
		/// - [[texture]]: Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-write storage textures<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUComputePipeline* CreateGPUComputePipelineNative(SDLGPUDevice* device, SDLGPUComputePipelineCreateInfo* createinfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUComputePipelineCreateInfo*, SDLGPUComputePipeline*>)funcTable[840])(device, createinfo);
			#else
			return (SDLGPUComputePipeline*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[840])((nint)device, (nint)createinfo);
			#endif
		}

		/// <summary>
		/// Creates a pipeline object to be used in a compute workflow.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// - 0: Sampled textures, followed by read-only storage textures, followed by<br/>
		/// read-only storage buffers<br/>
		/// - 1: Read-write storage textures, followed by read-write storage buffers<br/>
		/// - 2: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// - (t[n], space0): Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-only storage buffers<br/>
		/// - (u[n], space1): Read-write storage textures, followed by read-write<br/>
		/// storage buffers<br/>
		/// - (b[n], space2): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[buffer]]: Uniform buffers, followed by read-only storage buffers,<br/>
		/// followed by read-write storage buffers<br/>
		/// - [[texture]]: Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-write storage textures<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUComputePipeline* CreateGPUComputePipeline(SDLGPUDevice* device, SDLGPUComputePipelineCreateInfo* createinfo)
		{
			SDLGPUComputePipeline* ret = CreateGPUComputePipelineNative(device, createinfo);
			return ret;
		}

		/// <summary>
		/// Creates a pipeline object to be used in a compute workflow.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// - 0: Sampled textures, followed by read-only storage textures, followed by<br/>
		/// read-only storage buffers<br/>
		/// - 1: Read-write storage textures, followed by read-write storage buffers<br/>
		/// - 2: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// - (t[n], space0): Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-only storage buffers<br/>
		/// - (u[n], space1): Read-write storage textures, followed by read-write<br/>
		/// storage buffers<br/>
		/// - (b[n], space2): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[buffer]]: Uniform buffers, followed by read-only storage buffers,<br/>
		/// followed by read-write storage buffers<br/>
		/// - [[texture]]: Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-write storage textures<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUComputePipeline* CreateGPUComputePipeline(ref SDLGPUDevice device, SDLGPUComputePipelineCreateInfo* createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUComputePipeline* ret = CreateGPUComputePipelineNative((SDLGPUDevice*)pdevice, createinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a pipeline object to be used in a compute workflow.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// - 0: Sampled textures, followed by read-only storage textures, followed by<br/>
		/// read-only storage buffers<br/>
		/// - 1: Read-write storage textures, followed by read-write storage buffers<br/>
		/// - 2: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// - (t[n], space0): Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-only storage buffers<br/>
		/// - (u[n], space1): Read-write storage textures, followed by read-write<br/>
		/// storage buffers<br/>
		/// - (b[n], space2): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[buffer]]: Uniform buffers, followed by read-only storage buffers,<br/>
		/// followed by read-write storage buffers<br/>
		/// - [[texture]]: Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-write storage textures<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUComputePipeline* CreateGPUComputePipeline(SDLGPUDevice* device, ref SDLGPUComputePipelineCreateInfo createinfo)
		{
			fixed (SDLGPUComputePipelineCreateInfo* pcreateinfo = &createinfo)
			{
				SDLGPUComputePipeline* ret = CreateGPUComputePipelineNative(device, (SDLGPUComputePipelineCreateInfo*)pcreateinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a pipeline object to be used in a compute workflow.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// - 0: Sampled textures, followed by read-only storage textures, followed by<br/>
		/// read-only storage buffers<br/>
		/// - 1: Read-write storage textures, followed by read-write storage buffers<br/>
		/// - 2: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// - (t[n], space0): Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-only storage buffers<br/>
		/// - (u[n], space1): Read-write storage textures, followed by read-write<br/>
		/// storage buffers<br/>
		/// - (b[n], space2): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[buffer]]: Uniform buffers, followed by read-only storage buffers,<br/>
		/// followed by read-write storage buffers<br/>
		/// - [[texture]]: Sampled textures, followed by read-only storage textures,<br/>
		/// followed by read-write storage textures<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUComputePipeline* CreateGPUComputePipeline(ref SDLGPUDevice device, ref SDLGPUComputePipelineCreateInfo createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUComputePipelineCreateInfo* pcreateinfo = &createinfo)
				{
					SDLGPUComputePipeline* ret = CreateGPUComputePipelineNative((SDLGPUDevice*)pdevice, (SDLGPUComputePipelineCreateInfo*)pcreateinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Creates a pipeline object to be used in a graphics workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUGraphicsPipeline* CreateGPUGraphicsPipelineNative(SDLGPUDevice* device, SDLGPUGraphicsPipelineCreateInfo* createinfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUGraphicsPipelineCreateInfo*, SDLGPUGraphicsPipeline*>)funcTable[841])(device, createinfo);
			#else
			return (SDLGPUGraphicsPipeline*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[841])((nint)device, (nint)createinfo);
			#endif
		}

		/// <summary>
		/// Creates a pipeline object to be used in a graphics workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUGraphicsPipeline* CreateGPUGraphicsPipeline(SDLGPUDevice* device, SDLGPUGraphicsPipelineCreateInfo* createinfo)
		{
			SDLGPUGraphicsPipeline* ret = CreateGPUGraphicsPipelineNative(device, createinfo);
			return ret;
		}

		/// <summary>
		/// Creates a pipeline object to be used in a graphics workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUGraphicsPipeline* CreateGPUGraphicsPipeline(ref SDLGPUDevice device, SDLGPUGraphicsPipelineCreateInfo* createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUGraphicsPipeline* ret = CreateGPUGraphicsPipelineNative((SDLGPUDevice*)pdevice, createinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a pipeline object to be used in a graphics workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUGraphicsPipeline* CreateGPUGraphicsPipeline(SDLGPUDevice* device, ref SDLGPUGraphicsPipelineCreateInfo createinfo)
		{
			fixed (SDLGPUGraphicsPipelineCreateInfo* pcreateinfo = &createinfo)
			{
				SDLGPUGraphicsPipeline* ret = CreateGPUGraphicsPipelineNative(device, (SDLGPUGraphicsPipelineCreateInfo*)pcreateinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a pipeline object to be used in a graphics workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUGraphicsPipeline* CreateGPUGraphicsPipeline(ref SDLGPUDevice device, ref SDLGPUGraphicsPipelineCreateInfo createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUGraphicsPipelineCreateInfo* pcreateinfo = &createinfo)
				{
					SDLGPUGraphicsPipeline* ret = CreateGPUGraphicsPipelineNative((SDLGPUDevice*)pdevice, (SDLGPUGraphicsPipelineCreateInfo*)pcreateinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Creates a sampler object to be used when binding textures in a graphics<br/>
		/// workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUSampler* CreateGPUSamplerNative(SDLGPUDevice* device, SDLGPUSamplerCreateInfo* createinfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUSamplerCreateInfo*, SDLGPUSampler*>)funcTable[842])(device, createinfo);
			#else
			return (SDLGPUSampler*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[842])((nint)device, (nint)createinfo);
			#endif
		}

		/// <summary>
		/// Creates a sampler object to be used when binding textures in a graphics<br/>
		/// workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUSampler* CreateGPUSampler(SDLGPUDevice* device, SDLGPUSamplerCreateInfo* createinfo)
		{
			SDLGPUSampler* ret = CreateGPUSamplerNative(device, createinfo);
			return ret;
		}

		/// <summary>
		/// Creates a sampler object to be used when binding textures in a graphics<br/>
		/// workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUSampler* CreateGPUSampler(ref SDLGPUDevice device, SDLGPUSamplerCreateInfo* createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUSampler* ret = CreateGPUSamplerNative((SDLGPUDevice*)pdevice, createinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a sampler object to be used when binding textures in a graphics<br/>
		/// workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUSampler* CreateGPUSampler(SDLGPUDevice* device, ref SDLGPUSamplerCreateInfo createinfo)
		{
			fixed (SDLGPUSamplerCreateInfo* pcreateinfo = &createinfo)
			{
				SDLGPUSampler* ret = CreateGPUSamplerNative(device, (SDLGPUSamplerCreateInfo*)pcreateinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a sampler object to be used when binding textures in a graphics<br/>
		/// workflow.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUSampler* CreateGPUSampler(ref SDLGPUDevice device, ref SDLGPUSamplerCreateInfo createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUSamplerCreateInfo* pcreateinfo = &createinfo)
				{
					SDLGPUSampler* ret = CreateGPUSamplerNative((SDLGPUDevice*)pdevice, (SDLGPUSamplerCreateInfo*)pcreateinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Creates a shader to be used when creating a graphics pipeline.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// For vertex shaders:<br/>
		/// - 0: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 1: Uniform buffers<br/>
		/// For fragment shaders:<br/>
		/// - 2: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 3: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// For vertex shaders:<br/>
		/// - (t[n], space0): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space0): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space1): Uniform buffers<br/>
		/// For pixel shaders:<br/>
		/// - (t[n], space2): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space2): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space3): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[texture]]: Sampled textures, followed by storage textures<br/>
		/// - [[sampler]]: Samplers with indices corresponding to the sampled textures<br/>
		/// - [[buffer]]: Uniform buffers, followed by storage buffers. Vertex buffer 0<br/>
		/// is bound at [[buffer(14)]], vertex buffer 1 at [[buffer(15)]], and so on.<br/>
		/// Rather than manually authoring vertex buffer indices, use the<br/>
		/// [[stage_in]] attribute which will automatically use the vertex input<br/>
		/// information from the SDL_GPUGraphicsPipeline.<br/>
		/// Shader semantics other than system-value semantics do not matter in D3D12<br/>
		/// and for ease of use the SDL implementation assumes that non system-value<br/>
		/// semantics will all be TEXCOORD. If you are using HLSL as the shader source<br/>
		/// language, your vertex semantics should start at TEXCOORD0 and increment<br/>
		/// like so: TEXCOORD1, TEXCOORD2, etc. If you wish to change the semantic<br/>
		/// prefix to something other than TEXCOORD you can use<br/>
		/// SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING with<br/>
		/// SDL_CreateGPUDeviceWithProperties().<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SHADER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUShader* CreateGPUShaderNative(SDLGPUDevice* device, SDLGPUShaderCreateInfo* createinfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUShaderCreateInfo*, SDLGPUShader*>)funcTable[843])(device, createinfo);
			#else
			return (SDLGPUShader*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[843])((nint)device, (nint)createinfo);
			#endif
		}

		/// <summary>
		/// Creates a shader to be used when creating a graphics pipeline.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// For vertex shaders:<br/>
		/// - 0: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 1: Uniform buffers<br/>
		/// For fragment shaders:<br/>
		/// - 2: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 3: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// For vertex shaders:<br/>
		/// - (t[n], space0): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space0): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space1): Uniform buffers<br/>
		/// For pixel shaders:<br/>
		/// - (t[n], space2): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space2): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space3): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[texture]]: Sampled textures, followed by storage textures<br/>
		/// - [[sampler]]: Samplers with indices corresponding to the sampled textures<br/>
		/// - [[buffer]]: Uniform buffers, followed by storage buffers. Vertex buffer 0<br/>
		/// is bound at [[buffer(14)]], vertex buffer 1 at [[buffer(15)]], and so on.<br/>
		/// Rather than manually authoring vertex buffer indices, use the<br/>
		/// [[stage_in]] attribute which will automatically use the vertex input<br/>
		/// information from the SDL_GPUGraphicsPipeline.<br/>
		/// Shader semantics other than system-value semantics do not matter in D3D12<br/>
		/// and for ease of use the SDL implementation assumes that non system-value<br/>
		/// semantics will all be TEXCOORD. If you are using HLSL as the shader source<br/>
		/// language, your vertex semantics should start at TEXCOORD0 and increment<br/>
		/// like so: TEXCOORD1, TEXCOORD2, etc. If you wish to change the semantic<br/>
		/// prefix to something other than TEXCOORD you can use<br/>
		/// SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING with<br/>
		/// SDL_CreateGPUDeviceWithProperties().<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SHADER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUShader* CreateGPUShader(SDLGPUDevice* device, SDLGPUShaderCreateInfo* createinfo)
		{
			SDLGPUShader* ret = CreateGPUShaderNative(device, createinfo);
			return ret;
		}

		/// <summary>
		/// Creates a shader to be used when creating a graphics pipeline.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// For vertex shaders:<br/>
		/// - 0: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 1: Uniform buffers<br/>
		/// For fragment shaders:<br/>
		/// - 2: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 3: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// For vertex shaders:<br/>
		/// - (t[n], space0): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space0): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space1): Uniform buffers<br/>
		/// For pixel shaders:<br/>
		/// - (t[n], space2): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space2): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space3): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[texture]]: Sampled textures, followed by storage textures<br/>
		/// - [[sampler]]: Samplers with indices corresponding to the sampled textures<br/>
		/// - [[buffer]]: Uniform buffers, followed by storage buffers. Vertex buffer 0<br/>
		/// is bound at [[buffer(14)]], vertex buffer 1 at [[buffer(15)]], and so on.<br/>
		/// Rather than manually authoring vertex buffer indices, use the<br/>
		/// [[stage_in]] attribute which will automatically use the vertex input<br/>
		/// information from the SDL_GPUGraphicsPipeline.<br/>
		/// Shader semantics other than system-value semantics do not matter in D3D12<br/>
		/// and for ease of use the SDL implementation assumes that non system-value<br/>
		/// semantics will all be TEXCOORD. If you are using HLSL as the shader source<br/>
		/// language, your vertex semantics should start at TEXCOORD0 and increment<br/>
		/// like so: TEXCOORD1, TEXCOORD2, etc. If you wish to change the semantic<br/>
		/// prefix to something other than TEXCOORD you can use<br/>
		/// SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING with<br/>
		/// SDL_CreateGPUDeviceWithProperties().<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SHADER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUShader* CreateGPUShader(ref SDLGPUDevice device, SDLGPUShaderCreateInfo* createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUShader* ret = CreateGPUShaderNative((SDLGPUDevice*)pdevice, createinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a shader to be used when creating a graphics pipeline.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// For vertex shaders:<br/>
		/// - 0: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 1: Uniform buffers<br/>
		/// For fragment shaders:<br/>
		/// - 2: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 3: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// For vertex shaders:<br/>
		/// - (t[n], space0): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space0): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space1): Uniform buffers<br/>
		/// For pixel shaders:<br/>
		/// - (t[n], space2): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space2): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space3): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[texture]]: Sampled textures, followed by storage textures<br/>
		/// - [[sampler]]: Samplers with indices corresponding to the sampled textures<br/>
		/// - [[buffer]]: Uniform buffers, followed by storage buffers. Vertex buffer 0<br/>
		/// is bound at [[buffer(14)]], vertex buffer 1 at [[buffer(15)]], and so on.<br/>
		/// Rather than manually authoring vertex buffer indices, use the<br/>
		/// [[stage_in]] attribute which will automatically use the vertex input<br/>
		/// information from the SDL_GPUGraphicsPipeline.<br/>
		/// Shader semantics other than system-value semantics do not matter in D3D12<br/>
		/// and for ease of use the SDL implementation assumes that non system-value<br/>
		/// semantics will all be TEXCOORD. If you are using HLSL as the shader source<br/>
		/// language, your vertex semantics should start at TEXCOORD0 and increment<br/>
		/// like so: TEXCOORD1, TEXCOORD2, etc. If you wish to change the semantic<br/>
		/// prefix to something other than TEXCOORD you can use<br/>
		/// SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING with<br/>
		/// SDL_CreateGPUDeviceWithProperties().<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SHADER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUShader* CreateGPUShader(SDLGPUDevice* device, ref SDLGPUShaderCreateInfo createinfo)
		{
			fixed (SDLGPUShaderCreateInfo* pcreateinfo = &createinfo)
			{
				SDLGPUShader* ret = CreateGPUShaderNative(device, (SDLGPUShaderCreateInfo*)pcreateinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a shader to be used when creating a graphics pipeline.<br/>
		/// Shader resource bindings must be authored to follow a particular order<br/>
		/// depending on the shader format.<br/>
		/// For SPIR-V shaders, use the following resource sets:<br/>
		/// For vertex shaders:<br/>
		/// - 0: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 1: Uniform buffers<br/>
		/// For fragment shaders:<br/>
		/// - 2: Sampled textures, followed by storage textures, followed by storage<br/>
		/// buffers<br/>
		/// - 3: Uniform buffers<br/>
		/// For DXBC and DXIL shaders, use the following register order:<br/>
		/// For vertex shaders:<br/>
		/// - (t[n], space0): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space0): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space1): Uniform buffers<br/>
		/// For pixel shaders:<br/>
		/// - (t[n], space2): Sampled textures, followed by storage textures, followed<br/>
		/// by storage buffers<br/>
		/// - (s[n], space2): Samplers with indices corresponding to the sampled<br/>
		/// textures<br/>
		/// - (b[n], space3): Uniform buffers<br/>
		/// For MSL/metallib, use the following order:<br/>
		/// - [[texture]]: Sampled textures, followed by storage textures<br/>
		/// - [[sampler]]: Samplers with indices corresponding to the sampled textures<br/>
		/// - [[buffer]]: Uniform buffers, followed by storage buffers. Vertex buffer 0<br/>
		/// is bound at [[buffer(14)]], vertex buffer 1 at [[buffer(15)]], and so on.<br/>
		/// Rather than manually authoring vertex buffer indices, use the<br/>
		/// [[stage_in]] attribute which will automatically use the vertex input<br/>
		/// information from the SDL_GPUGraphicsPipeline.<br/>
		/// Shader semantics other than system-value semantics do not matter in D3D12<br/>
		/// and for ease of use the SDL implementation assumes that non system-value<br/>
		/// semantics will all be TEXCOORD. If you are using HLSL as the shader source<br/>
		/// language, your vertex semantics should start at TEXCOORD0 and increment<br/>
		/// like so: TEXCOORD1, TEXCOORD2, etc. If you wish to change the semantic<br/>
		/// prefix to something other than TEXCOORD you can use<br/>
		/// SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING with<br/>
		/// SDL_CreateGPUDeviceWithProperties().<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_SHADER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUShader* CreateGPUShader(ref SDLGPUDevice device, ref SDLGPUShaderCreateInfo createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUShaderCreateInfo* pcreateinfo = &createinfo)
				{
					SDLGPUShader* ret = CreateGPUShaderNative((SDLGPUDevice*)pdevice, (SDLGPUShaderCreateInfo*)pcreateinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Creates a texture object to be used in graphics or compute workflows.<br/>
		/// The contents of this texture are undefined until data is written to the<br/>
		/// texture.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// texture cannot have both the SAMPLER and GRAPHICS_STORAGE_READ flags.<br/>
		/// If you request a sample count higher than the hardware supports, the<br/>
		/// implementation will automatically fall back to the highest available sample<br/>
		/// count.<br/>
		/// There are optional properties that can be provided through<br/>
		/// SDL_GPUTextureCreateInfo's `props`. These are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this red intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this green intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this blue intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this alpha intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT`: (Direct3D 12 only)<br/>
		/// if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET, clear<br/>
		/// the texture to a depth of this value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER`: (Direct3D 12<br/>
		/// only) if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET,<br/>
		/// clear the texture to a stencil of this Uint8 value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUTexture* CreateGPUTextureNative(SDLGPUDevice* device, SDLGPUTextureCreateInfo* createinfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUTextureCreateInfo*, SDLGPUTexture*>)funcTable[844])(device, createinfo);
			#else
			return (SDLGPUTexture*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[844])((nint)device, (nint)createinfo);
			#endif
		}

		/// <summary>
		/// Creates a texture object to be used in graphics or compute workflows.<br/>
		/// The contents of this texture are undefined until data is written to the<br/>
		/// texture.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// texture cannot have both the SAMPLER and GRAPHICS_STORAGE_READ flags.<br/>
		/// If you request a sample count higher than the hardware supports, the<br/>
		/// implementation will automatically fall back to the highest available sample<br/>
		/// count.<br/>
		/// There are optional properties that can be provided through<br/>
		/// SDL_GPUTextureCreateInfo's `props`. These are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this red intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this green intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this blue intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this alpha intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT`: (Direct3D 12 only)<br/>
		/// if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET, clear<br/>
		/// the texture to a depth of this value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER`: (Direct3D 12<br/>
		/// only) if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET,<br/>
		/// clear the texture to a stencil of this Uint8 value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTexture* CreateGPUTexture(SDLGPUDevice* device, SDLGPUTextureCreateInfo* createinfo)
		{
			SDLGPUTexture* ret = CreateGPUTextureNative(device, createinfo);
			return ret;
		}

		/// <summary>
		/// Creates a texture object to be used in graphics or compute workflows.<br/>
		/// The contents of this texture are undefined until data is written to the<br/>
		/// texture.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// texture cannot have both the SAMPLER and GRAPHICS_STORAGE_READ flags.<br/>
		/// If you request a sample count higher than the hardware supports, the<br/>
		/// implementation will automatically fall back to the highest available sample<br/>
		/// count.<br/>
		/// There are optional properties that can be provided through<br/>
		/// SDL_GPUTextureCreateInfo's `props`. These are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this red intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this green intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this blue intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this alpha intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT`: (Direct3D 12 only)<br/>
		/// if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET, clear<br/>
		/// the texture to a depth of this value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER`: (Direct3D 12<br/>
		/// only) if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET,<br/>
		/// clear the texture to a stencil of this Uint8 value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTexture* CreateGPUTexture(ref SDLGPUDevice device, SDLGPUTextureCreateInfo* createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUTexture* ret = CreateGPUTextureNative((SDLGPUDevice*)pdevice, createinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a texture object to be used in graphics or compute workflows.<br/>
		/// The contents of this texture are undefined until data is written to the<br/>
		/// texture.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// texture cannot have both the SAMPLER and GRAPHICS_STORAGE_READ flags.<br/>
		/// If you request a sample count higher than the hardware supports, the<br/>
		/// implementation will automatically fall back to the highest available sample<br/>
		/// count.<br/>
		/// There are optional properties that can be provided through<br/>
		/// SDL_GPUTextureCreateInfo's `props`. These are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this red intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this green intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this blue intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this alpha intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT`: (Direct3D 12 only)<br/>
		/// if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET, clear<br/>
		/// the texture to a depth of this value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER`: (Direct3D 12<br/>
		/// only) if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET,<br/>
		/// clear the texture to a stencil of this Uint8 value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTexture* CreateGPUTexture(SDLGPUDevice* device, ref SDLGPUTextureCreateInfo createinfo)
		{
			fixed (SDLGPUTextureCreateInfo* pcreateinfo = &createinfo)
			{
				SDLGPUTexture* ret = CreateGPUTextureNative(device, (SDLGPUTextureCreateInfo*)pcreateinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a texture object to be used in graphics or compute workflows.<br/>
		/// The contents of this texture are undefined until data is written to the<br/>
		/// texture.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// texture cannot have both the SAMPLER and GRAPHICS_STORAGE_READ flags.<br/>
		/// If you request a sample count higher than the hardware supports, the<br/>
		/// implementation will automatically fall back to the highest available sample<br/>
		/// count.<br/>
		/// There are optional properties that can be provided through<br/>
		/// SDL_GPUTextureCreateInfo's `props`. These are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this red intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this green intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this blue intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT`: (Direct3D 12 only) if<br/>
		/// the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture<br/>
		/// to a color with this alpha intensity. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT`: (Direct3D 12 only)<br/>
		/// if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET, clear<br/>
		/// the texture to a depth of this value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_NUMBER`: (Direct3D 12<br/>
		/// only) if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET,<br/>
		/// clear the texture to a stencil of this Uint8 value. Defaults to zero.<br/>
		/// - `SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING`: a name that can be displayed<br/>
		/// in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTexture* CreateGPUTexture(ref SDLGPUDevice device, ref SDLGPUTextureCreateInfo createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUTextureCreateInfo* pcreateinfo = &createinfo)
				{
					SDLGPUTexture* ret = CreateGPUTextureNative((SDLGPUDevice*)pdevice, (SDLGPUTextureCreateInfo*)pcreateinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Creates a buffer object to be used in graphics or compute workflows.<br/>
		/// The contents of this buffer are undefined until data is written to the<br/>
		/// buffer.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// buffer cannot have both the VERTEX and INDEX flags.<br/>
		/// If you use a STORAGE flag, the data in the buffer must respect std140<br/>
		/// layout conventions. In practical terms this means you must ensure that vec3<br/>
		/// and vec4 fields are 16-byte aligned.<br/>
		/// For better understanding of underlying concepts and memory management with<br/>
		/// SDL GPU API, you may refer<br/>
		/// [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)<br/>
		/// .<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUBuffer* CreateGPUBufferNative(SDLGPUDevice* device, SDLGPUBufferCreateInfo* createinfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUBufferCreateInfo*, SDLGPUBuffer*>)funcTable[845])(device, createinfo);
			#else
			return (SDLGPUBuffer*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[845])((nint)device, (nint)createinfo);
			#endif
		}

		/// <summary>
		/// Creates a buffer object to be used in graphics or compute workflows.<br/>
		/// The contents of this buffer are undefined until data is written to the<br/>
		/// buffer.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// buffer cannot have both the VERTEX and INDEX flags.<br/>
		/// If you use a STORAGE flag, the data in the buffer must respect std140<br/>
		/// layout conventions. In practical terms this means you must ensure that vec3<br/>
		/// and vec4 fields are 16-byte aligned.<br/>
		/// For better understanding of underlying concepts and memory management with<br/>
		/// SDL GPU API, you may refer<br/>
		/// [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)<br/>
		/// .<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUBuffer* CreateGPUBuffer(SDLGPUDevice* device, SDLGPUBufferCreateInfo* createinfo)
		{
			SDLGPUBuffer* ret = CreateGPUBufferNative(device, createinfo);
			return ret;
		}

		/// <summary>
		/// Creates a buffer object to be used in graphics or compute workflows.<br/>
		/// The contents of this buffer are undefined until data is written to the<br/>
		/// buffer.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// buffer cannot have both the VERTEX and INDEX flags.<br/>
		/// If you use a STORAGE flag, the data in the buffer must respect std140<br/>
		/// layout conventions. In practical terms this means you must ensure that vec3<br/>
		/// and vec4 fields are 16-byte aligned.<br/>
		/// For better understanding of underlying concepts and memory management with<br/>
		/// SDL GPU API, you may refer<br/>
		/// [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)<br/>
		/// .<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUBuffer* CreateGPUBuffer(ref SDLGPUDevice device, SDLGPUBufferCreateInfo* createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUBuffer* ret = CreateGPUBufferNative((SDLGPUDevice*)pdevice, createinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a buffer object to be used in graphics or compute workflows.<br/>
		/// The contents of this buffer are undefined until data is written to the<br/>
		/// buffer.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// buffer cannot have both the VERTEX and INDEX flags.<br/>
		/// If you use a STORAGE flag, the data in the buffer must respect std140<br/>
		/// layout conventions. In practical terms this means you must ensure that vec3<br/>
		/// and vec4 fields are 16-byte aligned.<br/>
		/// For better understanding of underlying concepts and memory management with<br/>
		/// SDL GPU API, you may refer<br/>
		/// [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)<br/>
		/// .<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUBuffer* CreateGPUBuffer(SDLGPUDevice* device, ref SDLGPUBufferCreateInfo createinfo)
		{
			fixed (SDLGPUBufferCreateInfo* pcreateinfo = &createinfo)
			{
				SDLGPUBuffer* ret = CreateGPUBufferNative(device, (SDLGPUBufferCreateInfo*)pcreateinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a buffer object to be used in graphics or compute workflows.<br/>
		/// The contents of this buffer are undefined until data is written to the<br/>
		/// buffer.<br/>
		/// Note that certain combinations of usage flags are invalid. For example, a<br/>
		/// buffer cannot have both the VERTEX and INDEX flags.<br/>
		/// If you use a STORAGE flag, the data in the buffer must respect std140<br/>
		/// layout conventions. In practical terms this means you must ensure that vec3<br/>
		/// and vec4 fields are 16-byte aligned.<br/>
		/// For better understanding of underlying concepts and memory management with<br/>
		/// SDL GPU API, you may refer<br/>
		/// [this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)<br/>
		/// .<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING`: a name that can be displayed in<br/>
		/// debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUBuffer* CreateGPUBuffer(ref SDLGPUDevice device, ref SDLGPUBufferCreateInfo createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUBufferCreateInfo* pcreateinfo = &createinfo)
				{
					SDLGPUBuffer* ret = CreateGPUBufferNative((SDLGPUDevice*)pdevice, (SDLGPUBufferCreateInfo*)pcreateinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Creates a transfer buffer to be used when uploading to or downloading from<br/>
		/// graphics resources.<br/>
		/// Download buffers can be particularly expensive to create, so it is good<br/>
		/// practice to reuse them if data will be downloaded regularly.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGPUTransferBuffer* CreateGPUTransferBufferNative(SDLGPUDevice* device, SDLGPUTransferBufferCreateInfo* createinfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUTransferBufferCreateInfo*, SDLGPUTransferBuffer*>)funcTable[846])(device, createinfo);
			#else
			return (SDLGPUTransferBuffer*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[846])((nint)device, (nint)createinfo);
			#endif
		}

		/// <summary>
		/// Creates a transfer buffer to be used when uploading to or downloading from<br/>
		/// graphics resources.<br/>
		/// Download buffers can be particularly expensive to create, so it is good<br/>
		/// practice to reuse them if data will be downloaded regularly.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTransferBuffer* CreateGPUTransferBuffer(SDLGPUDevice* device, SDLGPUTransferBufferCreateInfo* createinfo)
		{
			SDLGPUTransferBuffer* ret = CreateGPUTransferBufferNative(device, createinfo);
			return ret;
		}

		/// <summary>
		/// Creates a transfer buffer to be used when uploading to or downloading from<br/>
		/// graphics resources.<br/>
		/// Download buffers can be particularly expensive to create, so it is good<br/>
		/// practice to reuse them if data will be downloaded regularly.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTransferBuffer* CreateGPUTransferBuffer(ref SDLGPUDevice device, SDLGPUTransferBufferCreateInfo* createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SDLGPUTransferBuffer* ret = CreateGPUTransferBufferNative((SDLGPUDevice*)pdevice, createinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a transfer buffer to be used when uploading to or downloading from<br/>
		/// graphics resources.<br/>
		/// Download buffers can be particularly expensive to create, so it is good<br/>
		/// practice to reuse them if data will be downloaded regularly.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTransferBuffer* CreateGPUTransferBuffer(SDLGPUDevice* device, ref SDLGPUTransferBufferCreateInfo createinfo)
		{
			fixed (SDLGPUTransferBufferCreateInfo* pcreateinfo = &createinfo)
			{
				SDLGPUTransferBuffer* ret = CreateGPUTransferBufferNative(device, (SDLGPUTransferBufferCreateInfo*)pcreateinfo);
				return ret;
			}
		}

		/// <summary>
		/// Creates a transfer buffer to be used when uploading to or downloading from<br/>
		/// graphics resources.<br/>
		/// Download buffers can be particularly expensive to create, so it is good<br/>
		/// practice to reuse them if data will be downloaded regularly.<br/>
		/// There are optional properties that can be provided through `props`. These<br/>
		/// are the supported properties:<br/>
		/// - `SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING`: a name that can be<br/>
		/// displayed in debugging tools.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLGPUTransferBuffer* CreateGPUTransferBuffer(ref SDLGPUDevice device, ref SDLGPUTransferBufferCreateInfo createinfo)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUTransferBufferCreateInfo* pcreateinfo = &createinfo)
				{
					SDLGPUTransferBuffer* ret = CreateGPUTransferBufferNative((SDLGPUDevice*)pdevice, (SDLGPUTransferBufferCreateInfo*)pcreateinfo);
					return ret;
				}
			}
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetGPUBufferNameNative(SDLGPUDevice* device, SDLGPUBuffer* buffer, byte* text)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLGPUDevice*, SDLGPUBuffer*, byte*, void>)funcTable[847])(device, buffer, text);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[847])((nint)device, (nint)buffer, (nint)text);
			#endif
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetGPUBufferName(SDLGPUDevice* device, SDLGPUBuffer* buffer, byte* text)
		{
			SetGPUBufferNameNative(device, buffer, text);
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetGPUBufferName(ref SDLGPUDevice device, SDLGPUBuffer* buffer, byte* text)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				SetGPUBufferNameNative((SDLGPUDevice*)pdevice, buffer, text);
			}
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetGPUBufferName(SDLGPUDevice* device, ref SDLGPUBuffer buffer, byte* text)
		{
			fixed (SDLGPUBuffer* pbuffer = &buffer)
			{
				SetGPUBufferNameNative(device, (SDLGPUBuffer*)pbuffer, text);
			}
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetGPUBufferName(ref SDLGPUDevice device, ref SDLGPUBuffer buffer, byte* text)
		{
			fixed (SDLGPUDevice* pdevice = &device)
			{
				fixed (SDLGPUBuffer* pbuffer = &buffer)
				{
					SetGPUBufferNameNative((SDLGPUDevice*)pdevice, (SDLGPUBuffer*)pbuffer, text);
				}
			}
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetGPUBufferName(SDLGPUDevice* device, SDLGPUBuffer* buffer, ref byte text)
		{
			fixed (byte* ptext = &text)
			{
				SetGPUBufferNameNative(device, buffer, (byte*)ptext);
			}
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetGPUBufferName(SDLGPUDevice* device, SDLGPUBuffer* buffer, ReadOnlySpan<byte> text)
		{
			fixed (byte* ptext = text)
			{
				SetGPUBufferNameNative(device, buffer, (byte*)ptext);
			}
		}

		/// <summary>
		/// Sets an arbitrary string constant to label a buffer.<br/>
		/// You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with<br/>
		/// SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe, you must make sure the<br/>
		/// buffer is not simultaneously used by any other thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void SetGPUBufferName(SDLGPUDevice* device, SDLGPUBuffer* buffer, string text)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetGPUBufferNameNative(device, buffer, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}
	}
}
