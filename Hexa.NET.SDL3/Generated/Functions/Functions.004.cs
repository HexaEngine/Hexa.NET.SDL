// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// This works exactly like vswprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_swprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vswprintf(ref string text, nuint maxlen, string fmt, nint ap)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			fixed (char* pfmt = fmt)
			{
				int ret = VswprintfNative(pStr0, maxlen, pfmt, ap);
				text = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AsprintfNative(byte** strp, byte* fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte**, byte*, int>)funcTable[103])(strp, fmt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[103])((nint)strp, (nint)fmt);
			#endif
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(byte** strp, byte* fmt)
		{
			int ret = AsprintfNative(strp, fmt);
			return ret;
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(ref byte* strp, byte* fmt)
		{
			fixed (byte** pstrp = &strp)
			{
				int ret = AsprintfNative((byte**)pstrp, fmt);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(byte** strp, ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				int ret = AsprintfNative(strp, (byte*)pfmt);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(byte** strp, ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				int ret = AsprintfNative(strp, (byte*)pfmt);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(byte** strp, string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = AsprintfNative(strp, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(ref byte* strp, ref byte fmt)
		{
			fixed (byte** pstrp = &strp)
			{
				fixed (byte* pfmt = &fmt)
				{
					int ret = AsprintfNative((byte**)pstrp, (byte*)pfmt);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(ref byte* strp, ReadOnlySpan<byte> fmt)
		{
			fixed (byte** pstrp = &strp)
			{
				fixed (byte* pfmt = fmt)
				{
					int ret = AsprintfNative((byte**)pstrp, (byte*)pfmt);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like asprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_snprintf(), except it allocates a buffer large<br/>
		/// enough to hold the output string on behalf of the caller.<br/>
		/// On success, this function returns the number of bytes (not characters)<br/>
		/// comprising the output string, not counting the null-terminator character,<br/>
		/// and sets `*strp` to the newly-allocated string.<br/>
		/// On error, this function returns a negative number, and the value of `*strp`<br/>
		/// is undefined.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Asprintf(ref byte* strp, string fmt)
		{
			fixed (byte** pstrp = &strp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = AsprintfNative((byte**)pstrp, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int VasprintfNative(byte** strp, byte* fmt, nint ap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte**, byte*, nint, int>)funcTable[104])(strp, fmt, ap);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[104])((nint)strp, (nint)fmt, ap);
			#endif
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(byte** strp, byte* fmt, nint ap)
		{
			int ret = VasprintfNative(strp, fmt, ap);
			return ret;
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(ref byte* strp, byte* fmt, nint ap)
		{
			fixed (byte** pstrp = &strp)
			{
				int ret = VasprintfNative((byte**)pstrp, fmt, ap);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(byte** strp, ref byte fmt, nint ap)
		{
			fixed (byte* pfmt = &fmt)
			{
				int ret = VasprintfNative(strp, (byte*)pfmt, ap);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(byte** strp, ReadOnlySpan<byte> fmt, nint ap)
		{
			fixed (byte* pfmt = fmt)
			{
				int ret = VasprintfNative(strp, (byte*)pfmt, ap);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(byte** strp, string fmt, nint ap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = VasprintfNative(strp, pStr0, ap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(ref byte* strp, ref byte fmt, nint ap)
		{
			fixed (byte** pstrp = &strp)
			{
				fixed (byte* pfmt = &fmt)
				{
					int ret = VasprintfNative((byte**)pstrp, (byte*)pfmt, ap);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(ref byte* strp, ReadOnlySpan<byte> fmt, nint ap)
		{
			fixed (byte** pstrp = &strp)
			{
				fixed (byte* pfmt = fmt)
				{
					int ret = VasprintfNative((byte**)pstrp, (byte*)pfmt, ap);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like vasprintf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_asprintf(), except it takes a `va_list`<br/>
		/// instead of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Vasprintf(ref byte* strp, string fmt, nint ap)
		{
			fixed (byte** pstrp = &strp)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (fmt != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(fmt);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = VasprintfNative((byte**)pstrp, pStr0, ap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Seeds the pseudo-random number generator.<br/>
		/// Reusing the seed number will cause SDL_rand() to repeat the same stream of<br/>
		/// 'random' numbers.<br/>
		/// <br/>
		/// <br/>
		/// This should be called on the same thread that calls<br/>
		/// SDL_rand()<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SrandNative(ulong seed)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[105])(seed);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[105])(seed);
			#endif
		}

		/// <summary>
		/// Seeds the pseudo-random number generator.<br/>
		/// Reusing the seed number will cause SDL_rand() to repeat the same stream of<br/>
		/// 'random' numbers.<br/>
		/// <br/>
		/// <br/>
		/// This should be called on the same thread that calls<br/>
		/// SDL_rand()<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void Srand(ulong seed)
		{
			SrandNative(seed);
		}

		/// <summary>
		/// Generate a pseudo-random number less than n for positive n<br/>
		/// The method used is faster and of better quality than `rand() % n`. Odds are<br/>
		/// roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and<br/>
		/// much worse as n gets bigger.<br/>
		/// Example: to simulate a d6 use `SDL_rand(6) + 1` The +1 converts 0..5 to<br/>
		/// 1..6<br/>
		/// If you want to generate a pseudo-random number in the full range of Sint32,<br/>
		/// you should use: (Sint32)SDL_rand_bits()<br/>
		/// If you want reproducible output, be sure to initialize with SDL_srand()<br/>
		/// first.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// All calls should be made from a single thread<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RandNative(int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[106])(n);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[106])(n);
			#endif
		}

		/// <summary>
		/// Generate a pseudo-random number less than n for positive n<br/>
		/// The method used is faster and of better quality than `rand() % n`. Odds are<br/>
		/// roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and<br/>
		/// much worse as n gets bigger.<br/>
		/// Example: to simulate a d6 use `SDL_rand(6) + 1` The +1 converts 0..5 to<br/>
		/// 1..6<br/>
		/// If you want to generate a pseudo-random number in the full range of Sint32,<br/>
		/// you should use: (Sint32)SDL_rand_bits()<br/>
		/// If you want reproducible output, be sure to initialize with SDL_srand()<br/>
		/// first.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// All calls should be made from a single thread<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Rand(int n)
		{
			int ret = RandNative(n);
			return ret;
		}

		/// <summary>
		/// Generate a uniform pseudo-random floating point number less than 1.0<br/>
		/// If you want reproducible output, be sure to initialize with SDL_srand()<br/>
		/// first.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// All calls should be made from a single thread<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RandfNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)funcTable[107])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)funcTable[107])();
			#endif
		}

		/// <summary>
		/// Generate a uniform pseudo-random floating point number less than 1.0<br/>
		/// If you want reproducible output, be sure to initialize with SDL_srand()<br/>
		/// first.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// All calls should be made from a single thread<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Randf()
		{
			float ret = RandfNative();
			return ret;
		}

		/// <summary>
		/// Generate 32 pseudo-random bits.<br/>
		/// You likely want to use SDL_rand() to get a psuedo-random number instead.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// All calls should be made from a single thread<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RandBitsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[108])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[108])();
			#endif
		}

		/// <summary>
		/// Generate 32 pseudo-random bits.<br/>
		/// You likely want to use SDL_rand() to get a psuedo-random number instead.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// All calls should be made from a single thread<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static uint RandBits()
		{
			uint ret = RandBitsNative();
			return ret;
		}

		/// <summary>
		/// Generate a pseudo-random number less than n for positive n<br/>
		/// The method used is faster and of better quality than `rand() % n`. Odds are<br/>
		/// roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and<br/>
		/// much worse as n gets bigger.<br/>
		/// Example: to simulate a d6 use `SDL_rand_r(state, 6) + 1` The +1 converts<br/>
		/// 0..5 to 1..6<br/>
		/// If you want to generate a pseudo-random number in the full range of Sint32,<br/>
		/// you should use: (Sint32)SDL_rand_bits_r(state)<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RandRNative(ulong* state, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong*, int, int>)funcTable[109])(state, n);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[109])((nint)state, n);
			#endif
		}

		/// <summary>
		/// Generate a pseudo-random number less than n for positive n<br/>
		/// The method used is faster and of better quality than `rand() % n`. Odds are<br/>
		/// roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and<br/>
		/// much worse as n gets bigger.<br/>
		/// Example: to simulate a d6 use `SDL_rand_r(state, 6) + 1` The +1 converts<br/>
		/// 0..5 to 1..6<br/>
		/// If you want to generate a pseudo-random number in the full range of Sint32,<br/>
		/// you should use: (Sint32)SDL_rand_bits_r(state)<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int RandR(ulong* state, int n)
		{
			int ret = RandRNative(state, n);
			return ret;
		}

		/// <summary>
		/// Generate a pseudo-random number less than n for positive n<br/>
		/// The method used is faster and of better quality than `rand() % n`. Odds are<br/>
		/// roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and<br/>
		/// much worse as n gets bigger.<br/>
		/// Example: to simulate a d6 use `SDL_rand_r(state, 6) + 1` The +1 converts<br/>
		/// 0..5 to 1..6<br/>
		/// If you want to generate a pseudo-random number in the full range of Sint32,<br/>
		/// you should use: (Sint32)SDL_rand_bits_r(state)<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int RandR(ref ulong state, int n)
		{
			fixed (ulong* pstate = &state)
			{
				int ret = RandRNative((ulong*)pstate, n);
				return ret;
			}
		}

		/// <summary>
		/// Generate a uniform pseudo-random floating point number less than 1.0<br/>
		/// If you want reproducible output, be sure to initialize with SDL_srand()<br/>
		/// first.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RandfRNative(ulong* state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong*, float>)funcTable[110])(state);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[110])((nint)state);
			#endif
		}

		/// <summary>
		/// Generate a uniform pseudo-random floating point number less than 1.0<br/>
		/// If you want reproducible output, be sure to initialize with SDL_srand()<br/>
		/// first.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float RandfR(ulong* state)
		{
			float ret = RandfRNative(state);
			return ret;
		}

		/// <summary>
		/// Generate a uniform pseudo-random floating point number less than 1.0<br/>
		/// If you want reproducible output, be sure to initialize with SDL_srand()<br/>
		/// first.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float RandfR(ref ulong state)
		{
			fixed (ulong* pstate = &state)
			{
				float ret = RandfRNative((ulong*)pstate);
				return ret;
			}
		}

		/// <summary>
		/// Generate 32 pseudo-random bits.<br/>
		/// You likely want to use SDL_rand_r() to get a psuedo-random number instead.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint RandBitsRNative(ulong* state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong*, uint>)funcTable[111])(state);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[111])((nint)state);
			#endif
		}

		/// <summary>
		/// Generate 32 pseudo-random bits.<br/>
		/// You likely want to use SDL_rand_r() to get a psuedo-random number instead.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static uint RandBitsR(ulong* state)
		{
			uint ret = RandBitsRNative(state);
			return ret;
		}

		/// <summary>
		/// Generate 32 pseudo-random bits.<br/>
		/// You likely want to use SDL_rand_r() to get a psuedo-random number instead.<br/>
		/// There are no guarantees as to the quality of the random sequence produced,<br/>
		/// and this should not be used for security (cryptography, passwords) or where<br/>
		/// money is on the line (loot-boxes, casinos). There are many random number<br/>
		/// libraries available with different characteristics and you should pick one<br/>
		/// of those to meet any serious needs.<br/>
		/// <br/>
		/// <br/>
		/// This function is thread-safe, as long as the state pointer<br/>
		/// isn't shared between threads.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static uint RandBitsR(ref ulong state)
		{
			fixed (ulong* pstate = &state)
			{
				uint ret = RandBitsRNative((ulong*)pstate);
				return ret;
			}
		}

		/// <summary>
		/// Compute the arc cosine of `x`.<br/>
		/// The definition of `y = acos(x)` is `x = cos(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_acosf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double AcosNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[112])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[112])(x);
			#endif
		}

		/// <summary>
		/// Compute the arc cosine of `x`.<br/>
		/// The definition of `y = acos(x)` is `x = cos(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_acosf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Acos(double x)
		{
			double ret = AcosNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the arc cosine of `x`.<br/>
		/// The definition of `y = acos(x)` is `x = cos(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_acos for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float AcosfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[113])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[113])(x);
			#endif
		}

		/// <summary>
		/// Compute the arc cosine of `x`.<br/>
		/// The definition of `y = acos(x)` is `x = cos(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_acos for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Acosf(float x)
		{
			float ret = AcosfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the arc sine of `x`.<br/>
		/// The definition of `y = asin(x)` is `x = sin(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_asinf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double AsinNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[114])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[114])(x);
			#endif
		}

		/// <summary>
		/// Compute the arc sine of `x`.<br/>
		/// The definition of `y = asin(x)` is `x = sin(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_asinf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Asin(double x)
		{
			double ret = AsinNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the arc sine of `x`.<br/>
		/// The definition of `y = asin(x)` is `x = sin(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_asin for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float AsinfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[115])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[115])(x);
			#endif
		}

		/// <summary>
		/// Compute the arc sine of `x`.<br/>
		/// The definition of `y = asin(x)` is `x = sin(y)`.<br/>
		/// Domain: `-1 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = 1`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_asin for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Asinf(float x)
		{
			float ret = AsinfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the arc tangent of `x`.<br/>
		/// The definition of `y = atan(x)` is `x = tan(y)`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_atanf for single-precision floats.<br/>
		/// To calculate the arc tangent of y / x, use SDL_atan2.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double AtanNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[116])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[116])(x);
			#endif
		}

		/// <summary>
		/// Compute the arc tangent of `x`.<br/>
		/// The definition of `y = atan(x)` is `x = tan(y)`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_atanf for single-precision floats.<br/>
		/// To calculate the arc tangent of y / x, use SDL_atan2.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Atan(double x)
		{
			double ret = AtanNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the arc tangent of `x`.<br/>
		/// The definition of `y = atan(x)` is `x = tan(y)`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_atan for dboule-precision floats.<br/>
		/// To calculate the arc tangent of y / x, use SDL_atan2f.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float AtanfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[117])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[117])(x);
			#endif
		}

		/// <summary>
		/// Compute the arc tangent of `x`.<br/>
		/// The definition of `y = atan(x)` is `x = tan(y)`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_atan for dboule-precision floats.<br/>
		/// To calculate the arc tangent of y / x, use SDL_atan2f.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Atanf(float x)
		{
			float ret = AtanfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the arc tangent of `y / x`, using the signs of x and y to adjust<br/>
		/// the result's quadrant.<br/>
		/// The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant<br/>
		/// of z is determined based on the signs of x and y.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_atan2f for single-precision floats.<br/>
		/// To calculate the arc tangent of a single value, use SDL_atan.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double Atan2Native(double y, double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[118])(y, x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[118])(y, x);
			#endif
		}

		/// <summary>
		/// Compute the arc tangent of `y / x`, using the signs of x and y to adjust<br/>
		/// the result's quadrant.<br/>
		/// The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant<br/>
		/// of z is determined based on the signs of x and y.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_atan2f for single-precision floats.<br/>
		/// To calculate the arc tangent of a single value, use SDL_atan.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Atan2(double y, double x)
		{
			double ret = Atan2Native(y, x);
			return ret;
		}

		/// <summary>
		/// Compute the arc tangent of `y / x`, using the signs of x and y to adjust<br/>
		/// the result's quadrant.<br/>
		/// The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant<br/>
		/// of z is determined based on the signs of x and y.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_atan2 for double-precision floats.<br/>
		/// To calculate the arc tangent of a single value, use SDL_atanf.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float Atan2FNative(float y, float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[119])(y, x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[119])(y, x);
			#endif
		}

		/// <summary>
		/// Compute the arc tangent of `y / x`, using the signs of x and y to adjust<br/>
		/// the result's quadrant.<br/>
		/// The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant<br/>
		/// of z is determined based on the signs of x and y.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-Pi/2 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = Pi/2`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_atan2 for double-precision floats.<br/>
		/// To calculate the arc tangent of a single value, use SDL_atanf.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Atan2F(float y, float x)
		{
			float ret = Atan2FNative(y, x);
			return ret;
		}

		/// <summary>
		/// Compute the ceiling of `x`.<br/>
		/// The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded up to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_ceilf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double CeilNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[120])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[120])(x);
			#endif
		}

		/// <summary>
		/// Compute the ceiling of `x`.<br/>
		/// The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded up to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_ceilf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Ceil(double x)
		{
			double ret = CeilNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the ceiling of `x`.<br/>
		/// The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded up to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_ceil for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float CeilfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[121])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[121])(x);
			#endif
		}

		/// <summary>
		/// Compute the ceiling of `x`.<br/>
		/// The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded up to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_ceil for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Ceilf(float x)
		{
			float ret = CeilfNative(x);
			return ret;
		}

		/// <summary>
		/// Copy the sign of one floating-point value to another.<br/>
		/// The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, ``-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = f``<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_copysignf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double CopysignNative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[122])(x, y);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[122])(x, y);
			#endif
		}

		/// <summary>
		/// Copy the sign of one floating-point value to another.<br/>
		/// The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, ``-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = f``<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_copysignf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Copysign(double x, double y)
		{
			double ret = CopysignNative(x, y);
			return ret;
		}

		/// <summary>
		/// Copy the sign of one floating-point value to another.<br/>
		/// The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, ``-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = f``<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_copysign for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float CopysignfNative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[123])(x, y);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[123])(x, y);
			#endif
		}

		/// <summary>
		/// Copy the sign of one floating-point value to another.<br/>
		/// The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, ``-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = f``<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_copysign for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Copysignf(float x, float y)
		{
			float ret = CopysignfNative(x, y);
			return ret;
		}

		/// <summary>
		/// Compute the cosine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_cosf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double CosNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[124])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[124])(x);
			#endif
		}

		/// <summary>
		/// Compute the cosine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_cosf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Cos(double x)
		{
			double ret = CosNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the cosine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_cos for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float CosfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[125])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[125])(x);
			#endif
		}

		/// <summary>
		/// Compute the cosine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_cos for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Cosf(float x)
		{
			float ret = CosfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the exponential of `x`.<br/>
		/// The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the<br/>
		/// natural logarithm. The inverse is the natural logarithm, SDL_log.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// The output will overflow if `exp(x)` is too large to be represented.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_expf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double ExpNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[126])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[126])(x);
			#endif
		}

		/// <summary>
		/// Compute the exponential of `x`.<br/>
		/// The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the<br/>
		/// natural logarithm. The inverse is the natural logarithm, SDL_log.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// The output will overflow if `exp(x)` is too large to be represented.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_expf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Exp(double x)
		{
			double ret = ExpNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the exponential of `x`.<br/>
		/// The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the<br/>
		/// natural logarithm. The inverse is the natural logarithm, SDL_logf.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// The output will overflow if `exp(x)` is too large to be represented.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_exp for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float ExpfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[127])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[127])(x);
			#endif
		}

		/// <summary>
		/// Compute the exponential of `x`.<br/>
		/// The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the<br/>
		/// natural logarithm. The inverse is the natural logarithm, SDL_logf.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// The output will overflow if `exp(x)` is too large to be represented.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_exp for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Expf(float x)
		{
			float ret = ExpfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the absolute value of `x`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_fabsf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double FabsNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[128])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[128])(x);
			#endif
		}

		/// <summary>
		/// Compute the absolute value of `x`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_fabsf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Fabs(double x)
		{
			double ret = FabsNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the absolute value of `x`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_fabs for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float FabsfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[129])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[129])(x);
			#endif
		}

		/// <summary>
		/// Compute the absolute value of `x`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_fabs for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Fabsf(float x)
		{
			float ret = FabsfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the floor of `x`.<br/>
		/// The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded down to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_floorf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double FloorNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[130])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[130])(x);
			#endif
		}

		/// <summary>
		/// Compute the floor of `x`.<br/>
		/// The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded down to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_floorf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Floor(double x)
		{
			double ret = FloorNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the floor of `x`.<br/>
		/// The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded down to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_floor for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float FloorfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[131])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[131])(x);
			#endif
		}

		/// <summary>
		/// Compute the floor of `x`.<br/>
		/// The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`<br/>
		/// rounded down to the nearest integer.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_floor for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Floorf(float x)
		{
			float ret = FloorfNative(x);
			return ret;
		}

		/// <summary>
		/// Truncate `x` to an integer.<br/>
		/// Rounds `x` to the next closest integer to 0. This is equivalent to removing<br/>
		/// the fractional part of `x`, leaving only the integer part.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_truncf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double TruncNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[132])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[132])(x);
			#endif
		}

		/// <summary>
		/// Truncate `x` to an integer.<br/>
		/// Rounds `x` to the next closest integer to 0. This is equivalent to removing<br/>
		/// the fractional part of `x`, leaving only the integer part.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_truncf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Trunc(double x)
		{
			double ret = TruncNative(x);
			return ret;
		}

		/// <summary>
		/// Truncate `x` to an integer.<br/>
		/// Rounds `x` to the next closest integer to 0. This is equivalent to removing<br/>
		/// the fractional part of `x`, leaving only the integer part.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_trunc for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float TruncfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[133])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[133])(x);
			#endif
		}

		/// <summary>
		/// Truncate `x` to an integer.<br/>
		/// Rounds `x` to the next closest integer to 0. This is equivalent to removing<br/>
		/// the fractional part of `x`, leaving only the integer part.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_trunc for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Truncf(float x)
		{
			float ret = TruncfNative(x);
			return ret;
		}

		/// <summary>
		/// Return the floating-point remainder of `x / y`<br/>
		/// Divides `x` by `y`, and returns the remainder.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, `y != 0`<br/>
		/// Range: `-y <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = y`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_fmodf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double FmodNative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[134])(x, y);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[134])(x, y);
			#endif
		}

		/// <summary>
		/// Return the floating-point remainder of `x / y`<br/>
		/// Divides `x` by `y`, and returns the remainder.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, `y != 0`<br/>
		/// Range: `-y <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = y`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_fmodf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Fmod(double x, double y)
		{
			double ret = FmodNative(x, y);
			return ret;
		}

		/// <summary>
		/// Return the floating-point remainder of `x / y`<br/>
		/// Divides `x` by `y`, and returns the remainder.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, `y != 0`<br/>
		/// Range: `-y <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = y`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_fmod for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float FmodfNative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[135])(x, y);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[135])(x, y);
			#endif
		}

		/// <summary>
		/// Return the floating-point remainder of `x / y`<br/>
		/// Divides `x` by `y`, and returns the remainder.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, `y != 0`<br/>
		/// Range: `-y <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = y`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_fmod for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Fmodf(float x, float y)
		{
			float ret = FmodfNative(x, y);
			return ret;
		}

		/// <summary>
		/// Return whether the value is infinity.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsinfNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, int>)funcTable[136])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, int>)funcTable[136])(x);
			#endif
		}

		/// <summary>
		/// Return whether the value is infinity.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Isinf(double x)
		{
			int ret = IsinfNative(x);
			return ret;
		}

		/// <summary>
		/// Return whether the value is infinity.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsinffNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, int>)funcTable[137])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<float, int>)funcTable[137])(x);
			#endif
		}

		/// <summary>
		/// Return whether the value is infinity.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Isinff(float x)
		{
			int ret = IsinffNative(x);
			return ret;
		}

		/// <summary>
		/// Return whether the value is NaN.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsnanNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, int>)funcTable[138])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, int>)funcTable[138])(x);
			#endif
		}

		/// <summary>
		/// Return whether the value is NaN.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Isnan(double x)
		{
			int ret = IsnanNative(x);
			return ret;
		}

		/// <summary>
		/// Return whether the value is NaN.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IsnanfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, int>)funcTable[139])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<float, int>)funcTable[139])(x);
			#endif
		}

		/// <summary>
		/// Return whether the value is NaN.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Isnanf(float x)
		{
			int ret = IsnanfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the natural logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_logf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double LogNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[140])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[140])(x);
			#endif
		}

		/// <summary>
		/// Compute the natural logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_logf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Log(double x)
		{
			double ret = LogNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the natural logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_log for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float LogfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[141])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[141])(x);
			#endif
		}

		/// <summary>
		/// Compute the natural logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_log for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Logf(float x)
		{
			float ret = LogfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the base-10 logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_log10f for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double Log10Native(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[142])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[142])(x);
			#endif
		}

		/// <summary>
		/// Compute the base-10 logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_log10f for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Log10(double x)
		{
			double ret = Log10Native(x);
			return ret;
		}

		/// <summary>
		/// Compute the base-10 logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_log10 for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float Log10FNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[143])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[143])(x);
			#endif
		}

		/// <summary>
		/// Compute the base-10 logarithm of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// It is an error for `x` to be less than or equal to 0.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_log10 for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Log10F(float x)
		{
			float ret = Log10FNative(x);
			return ret;
		}

		/// <summary>
		/// Split `x` into integer and fractional parts<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_modff for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double ModfNative(double x, double* y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double*, double>)funcTable[144])(x, y);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, nint, double>)funcTable[144])(x, (nint)y);
			#endif
		}

		/// <summary>
		/// Split `x` into integer and fractional parts<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_modff for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Modf(double x, double* y)
		{
			double ret = ModfNative(x, y);
			return ret;
		}

		/// <summary>
		/// Split `x` into integer and fractional parts<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_modff for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Modf(double x, ref double y)
		{
			fixed (double* py = &y)
			{
				double ret = ModfNative(x, (double*)py);
				return ret;
			}
		}

		/// <summary>
		/// Split `x` into integer and fractional parts<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_modf for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float ModffNative(float x, float* y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float*, float>)funcTable[145])(x, y);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, nint, float>)funcTable[145])(x, (nint)y);
			#endif
		}

		/// <summary>
		/// Split `x` into integer and fractional parts<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_modf for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Modff(float x, float* y)
		{
			float ret = ModffNative(x, y);
			return ret;
		}

		/// <summary>
		/// Split `x` into integer and fractional parts<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_modf for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Modff(float x, ref float y)
		{
			fixed (float* py = &y)
			{
				float ret = ModffNative(x, (float*)py);
				return ret;
			}
		}

		/// <summary>
		/// Raise `x` to the power `y`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// If `y` is the base of the natural logarithm (e), consider using SDL_exp<br/>
		/// instead.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_powf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double PowNative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[146])(x, y);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double, double>)funcTable[146])(x, y);
			#endif
		}

		/// <summary>
		/// Raise `x` to the power `y`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// If `y` is the base of the natural logarithm (e), consider using SDL_exp<br/>
		/// instead.<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_powf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Pow(double x, double y)
		{
			double ret = PowNative(x, y);
			return ret;
		}

		/// <summary>
		/// Raise `x` to the power `y`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// If `y` is the base of the natural logarithm (e), consider using SDL_exp<br/>
		/// instead.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_pow for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float PowfNative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[147])(x, y);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float, float>)funcTable[147])(x, y);
			#endif
		}

		/// <summary>
		/// Raise `x` to the power `y`<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = z <br/>
		/// <<br/>
		/// = INF`<br/>
		/// If `y` is the base of the natural logarithm (e), consider using SDL_exp<br/>
		/// instead.<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_pow for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Powf(float x, float y)
		{
			float ret = PowfNative(x, y);
			return ret;
		}

		/// <summary>
		/// Round `x` to the nearest integer.<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_roundf for single-precision floats. To get the result as an integer<br/>
		/// type, use SDL_lround.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double RoundNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[148])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[148])(x);
			#endif
		}

		/// <summary>
		/// Round `x` to the nearest integer.<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_roundf for single-precision floats. To get the result as an integer<br/>
		/// type, use SDL_lround.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Round(double x)
		{
			double ret = RoundNative(x);
			return ret;
		}

		/// <summary>
		/// Round `x` to the nearest integer.<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_round for double-precision floats. To get the result as an integer<br/>
		/// type, use SDL_lroundf.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float RoundfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[149])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[149])(x);
			#endif
		}

		/// <summary>
		/// Round `x` to the nearest integer.<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`, y integer<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_round for double-precision floats. To get the result as an integer<br/>
		/// type, use SDL_lroundf.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Roundf(float x)
		{
			float ret = RoundfNative(x);
			return ret;
		}

		/// <summary>
		/// Round `x` to the nearest integer representable as a long<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `MIN_LONG <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = MAX_LONG`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_lroundf for single-precision floats. To get the result as a<br/>
		/// floating-point type, use SDL_round.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LroundNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, int>)funcTable[150])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, int>)funcTable[150])(x);
			#endif
		}

		/// <summary>
		/// Round `x` to the nearest integer representable as a long<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `MIN_LONG <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = MAX_LONG`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_lroundf for single-precision floats. To get the result as a<br/>
		/// floating-point type, use SDL_round.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Lround(double x)
		{
			int ret = LroundNative(x);
			return ret;
		}

		/// <summary>
		/// Round `x` to the nearest integer representable as a long<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `MIN_LONG <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = MAX_LONG`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_lround for double-precision floats. To get the result as a<br/>
		/// floating-point type, use SDL_roundf.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int LroundfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, int>)funcTable[151])(x);
			#else
			return (int)((delegate* unmanaged[Cdecl]<float, int>)funcTable[151])(x);
			#endif
		}

		/// <summary>
		/// Round `x` to the nearest integer representable as a long<br/>
		/// Rounds `x` to the nearest integer. Values halfway between integers will be<br/>
		/// rounded away from zero.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `MIN_LONG <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = MAX_LONG`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_lround for double-precision floats. To get the result as a<br/>
		/// floating-point type, use SDL_roundf.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Lroundf(float x)
		{
			int ret = LroundfNative(x);
			return ret;
		}

		/// <summary>
		/// Scale `x` by an integer power of two.<br/>
		/// Multiplies `x` by the `n`th power of the floating point radix (always 2).<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `n` integer<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_scalbnf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double ScalbnNative(double x, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, int, double>)funcTable[152])(x, n);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, int, double>)funcTable[152])(x, n);
			#endif
		}

		/// <summary>
		/// Scale `x` by an integer power of two.<br/>
		/// Multiplies `x` by the `n`th power of the floating point radix (always 2).<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `n` integer<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_scalbnf for single-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Scalbn(double x, int n)
		{
			double ret = ScalbnNative(x, n);
			return ret;
		}

		/// <summary>
		/// Scale `x` by an integer power of two.<br/>
		/// Multiplies `x` by the `n`th power of the floating point radix (always 2).<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `n` integer<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_scalbn for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float ScalbnfNative(float x, int n)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, int, float>)funcTable[153])(x, n);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, int, float>)funcTable[153])(x, n);
			#endif
		}

		/// <summary>
		/// Scale `x` by an integer power of two.<br/>
		/// Multiplies `x` by the `n`th power of the floating point radix (always 2).<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`, `n` integer<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_scalbn for double-precision floats.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Scalbnf(float x, int n)
		{
			float ret = ScalbnfNative(x, n);
			return ret;
		}

		/// <summary>
		/// Compute the sine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_sinf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double SinNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[154])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[154])(x);
			#endif
		}

		/// <summary>
		/// Compute the sine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_sinf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Sin(double x)
		{
			double ret = SinNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the sine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_sin for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float SinfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[155])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[155])(x);
			#endif
		}

		/// <summary>
		/// Compute the sine of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-1 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = 1`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_sin for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Sinf(float x)
		{
			float ret = SinfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the square root of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_sqrtf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double SqrtNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[156])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[156])(x);
			#endif
		}

		/// <summary>
		/// Compute the square root of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_sqrtf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Sqrt(double x)
		{
			double ret = SqrtNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the square root of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_sqrt for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float SqrtfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[157])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[157])(x);
			#endif
		}

		/// <summary>
		/// Compute the square root of `x`.<br/>
		/// Domain: `0 <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `0 <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_sqrt for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Sqrtf(float x)
		{
			float ret = SqrtfNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the tangent of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_tanf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double TanNative(double x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double>)funcTable[158])(x);
			#else
			return (double)((delegate* unmanaged[Cdecl]<double, double>)funcTable[158])(x);
			#endif
		}

		/// <summary>
		/// Compute the tangent of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on double-precision floating point values, use<br/>
		/// SDL_tanf for single-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static double Tan(double x)
		{
			double ret = TanNative(x);
			return ret;
		}

		/// <summary>
		/// Compute the tangent of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_tan for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float TanfNative(float x)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float>)funcTable[159])(x);
			#else
			return (float)((delegate* unmanaged[Cdecl]<float, float>)funcTable[159])(x);
			#endif
		}

		/// <summary>
		/// Compute the tangent of `x`.<br/>
		/// Domain: `-INF <br/>
		/// <<br/>
		/// = x <br/>
		/// <<br/>
		/// = INF`<br/>
		/// Range: `-INF <br/>
		/// <<br/>
		/// = y <br/>
		/// <<br/>
		/// = INF`<br/>
		/// This function operates on single-precision floating point values, use<br/>
		/// SDL_tan for double-precision floats.<br/>
		/// This function may use a different approximation across different versions,<br/>
		/// platforms and configurations. i.e, it can return a different value given<br/>
		/// the same input on different machines or operating systems, or if SDL is<br/>
		/// updated.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static float Tanf(float x)
		{
			float ret = TanfNative(x);
			return ret;
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLIconv IconvOpenNative(byte* tocode, byte* fromcode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, SDLIconv>)funcTable[160])(tocode, fromcode);
			#else
			return (SDLIconv)((delegate* unmanaged[Cdecl]<nint, nint, SDLIconv>)funcTable[160])((nint)tocode, (nint)fromcode);
			#endif
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(byte* tocode, byte* fromcode)
		{
			SDLIconv ret = IconvOpenNative(tocode, fromcode);
			return ret;
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(ref byte tocode, byte* fromcode)
		{
			fixed (byte* ptocode = &tocode)
			{
				SDLIconv ret = IconvOpenNative((byte*)ptocode, fromcode);
				return ret;
			}
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(ReadOnlySpan<byte> tocode, byte* fromcode)
		{
			fixed (byte* ptocode = tocode)
			{
				SDLIconv ret = IconvOpenNative((byte*)ptocode, fromcode);
				return ret;
			}
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(string tocode, byte* fromcode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (tocode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(tocode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(tocode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLIconv ret = IconvOpenNative(pStr0, fromcode);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(byte* tocode, ref byte fromcode)
		{
			fixed (byte* pfromcode = &fromcode)
			{
				SDLIconv ret = IconvOpenNative(tocode, (byte*)pfromcode);
				return ret;
			}
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(byte* tocode, ReadOnlySpan<byte> fromcode)
		{
			fixed (byte* pfromcode = fromcode)
			{
				SDLIconv ret = IconvOpenNative(tocode, (byte*)pfromcode);
				return ret;
			}
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(byte* tocode, string fromcode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fromcode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fromcode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fromcode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLIconv ret = IconvOpenNative(tocode, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(ref byte tocode, ref byte fromcode)
		{
			fixed (byte* ptocode = &tocode)
			{
				fixed (byte* pfromcode = &fromcode)
				{
					SDLIconv ret = IconvOpenNative((byte*)ptocode, (byte*)pfromcode);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(ReadOnlySpan<byte> tocode, ReadOnlySpan<byte> fromcode)
		{
			fixed (byte* ptocode = tocode)
			{
				fixed (byte* pfromcode = fromcode)
				{
					SDLIconv ret = IconvOpenNative((byte*)ptocode, (byte*)pfromcode);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function allocates a context for the specified character set<br/>
		/// conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLIconv IconvOpen(string tocode, string fromcode)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (tocode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(tocode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(tocode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fromcode != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fromcode);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fromcode, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SDLIconv ret = IconvOpenNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This function frees a context used for character set conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int IconvCloseNative(SDLIconv cd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLIconv, int>)funcTable[161])(cd);
			#else
			return (int)((delegate* unmanaged[Cdecl]<SDLIconv, int>)funcTable[161])(cd);
			#endif
		}

		/// <summary>
		/// This function frees a context used for character set conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int IconvClose(SDLIconv cd)
		{
			int ret = IconvCloseNative(cd);
			return ret;
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint IconvNative(SDLIconv cd, byte** inbuf, nuint* inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLIconv, byte**, nuint*, byte**, nuint*, nuint>)funcTable[162])(cd, inbuf, inbytesleft, outbuf, outbytesleft);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<SDLIconv, nint, nint, nint, nint, nuint>)funcTable[162])(cd, (nint)inbuf, (nint)inbytesleft, (nint)outbuf, (nint)outbytesleft);
			#endif
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, nuint* inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			nuint ret = IconvNative(cd, inbuf, inbytesleft, outbuf, outbytesleft);
			return ret;
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				nuint ret = IconvNative(cd, (byte**)pinbuf, inbytesleft, outbuf, outbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, ref nuint inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				nuint ret = IconvNative(cd, inbuf, (nuint*)pinbytesleft, outbuf, outbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, byte** outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					nuint ret = IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, outbuf, outbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, nuint* inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (byte** poutbuf = &outbuf)
			{
				nuint ret = IconvNative(cd, inbuf, inbytesleft, (byte**)poutbuf, outbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					nuint ret = IconvNative(cd, (byte**)pinbuf, inbytesleft, (byte**)poutbuf, outbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, ref nuint inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					nuint ret = IconvNative(cd, inbuf, (nuint*)pinbytesleft, (byte**)poutbuf, outbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, ref byte* outbuf, nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (byte** poutbuf = &outbuf)
					{
						nuint ret = IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, (byte**)poutbuf, outbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, nuint* inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (nuint* poutbytesleft = &outbytesleft)
			{
				nuint ret = IconvNative(cd, inbuf, inbytesleft, outbuf, (nuint*)poutbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = IconvNative(cd, (byte**)pinbuf, inbytesleft, outbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, ref nuint inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = IconvNative(cd, inbuf, (nuint*)pinbytesleft, outbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, byte** outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, outbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, nuint* inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (byte** poutbuf = &outbuf)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = IconvNative(cd, inbuf, inbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, nuint* inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = IconvNative(cd, (byte**)pinbuf, inbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, byte** inbuf, ref nuint inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = IconvNative(cd, inbuf, (nuint*)pinbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions on success. On error,<br/>
		/// SDL_ICONV_E2BIG is returned when the output buffer is too small, or<br/>
		/// SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,<br/>
		/// or SDL_ICONV_EINVAL is returned when an incomplete input sequence is<br/>
		/// encountered.<br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte sequence. On<br/>
		/// error, this is the location of the problematic input sequence. On<br/>
		/// success, this is the end of the input sequence.<br/>
		/// - inbytesleft will be set to the number of bytes left to convert, which<br/>
		/// will be 0 on success.<br/>
		/// - outbuf will point to the location where to store the next output byte.<br/>
		/// - outbytesleft will be set to the number of bytes left in the output<br/>
		/// buffer.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Iconv(SDLIconv cd, ref byte* inbuf, ref nuint inbytesleft, ref byte* outbuf, ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (byte** poutbuf = &outbuf)
					{
						fixed (nuint* poutbytesleft = &outbytesleft)
						{
							nuint ret = IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* IconvStringNative(byte* tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*, nuint, byte*>)funcTable[163])(tocode, fromcode, inbuf, inbytesleft);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nuint, nint>)funcTable[163])((nint)tocode, (nint)fromcode, (nint)inbuf, inbytesleft);
			#endif
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* IconvString(byte* tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			byte* ret = IconvStringNative(tocode, fromcode, inbuf, inbytesleft);
			return ret;
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string IconvStringS(byte* tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			string ret = Utils.DecodeStringUTF8(IconvStringNative(tocode, fromcode, inbuf, inbytesleft));
			return ret;
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* IconvString(ref byte tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			fixed (byte* ptocode = &tocode)
			{
				byte* ret = IconvStringNative((byte*)ptocode, fromcode, inbuf, inbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string IconvStringS(ref byte tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			fixed (byte* ptocode = &tocode)
			{
				string ret = Utils.DecodeStringUTF8(IconvStringNative((byte*)ptocode, fromcode, inbuf, inbytesleft));
				return ret;
			}
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* IconvString(ReadOnlySpan<byte> tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			fixed (byte* ptocode = tocode)
			{
				byte* ret = IconvStringNative((byte*)ptocode, fromcode, inbuf, inbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string IconvStringS(ReadOnlySpan<byte> tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			fixed (byte* ptocode = tocode)
			{
				string ret = Utils.DecodeStringUTF8(IconvStringNative((byte*)ptocode, fromcode, inbuf, inbytesleft));
				return ret;
			}
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* IconvString(string tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (tocode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(tocode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(tocode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = IconvStringNative(pStr0, fromcode, inbuf, inbytesleft);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string IconvStringS(string tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (tocode != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(tocode);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(tocode, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(IconvStringNative(pStr0, fromcode, inbuf, inbytesleft));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* IconvString(byte* tocode, ref byte fromcode, byte* inbuf, nuint inbytesleft)
		{
			fixed (byte* pfromcode = &fromcode)
			{
				byte* ret = IconvStringNative(tocode, (byte*)pfromcode, inbuf, inbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// Helper function to convert a string's encoding in one call.<br/>
		/// This function converts a buffer or string between encodings in one pass.<br/>
		/// The string does not need to be NULL-terminated; this function operates on<br/>
		/// the number of bytes specified in `inbytesleft` whether there is a NULL<br/>
		/// character anywhere in the buffer.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string IconvStringS(byte* tocode, ref byte fromcode, byte* inbuf, nuint inbytesleft)
		{
			fixed (byte* pfromcode = &fromcode)
			{
				string ret = Utils.DecodeStringUTF8(IconvStringNative(tocode, (byte*)pfromcode, inbuf, inbytesleft));
				return ret;
			}
		}
	}
}
