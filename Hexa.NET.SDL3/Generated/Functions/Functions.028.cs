// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Unload the Vulkan library previously loaded by SDL_Vulkan_LoadLibrary().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_UnloadLibrary")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VulkanUnloadLibraryNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1263])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1263])();
			#endif
		}

		/// <summary>
		/// Unload the Vulkan library previously loaded by SDL_Vulkan_LoadLibrary().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_UnloadLibrary")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VulkanUnloadLibrary()
		{
			VulkanUnloadLibraryNative();
		}

		/// <summary>
		/// Get the Vulkan instance extensions needed for vkCreateInstance.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// On return, the variable pointed to by `count` will be set to the number of<br/>
		/// elements returned, suitable for using with<br/>
		/// VkInstanceCreateInfo::enabledExtensionCount, and the returned array can be<br/>
		/// used with VkInstanceCreateInfo::ppEnabledExtensionNames, for calling<br/>
		/// Vulkan's vkCreateInstance API.<br/>
		/// You should not free the returned array; it is owned by SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "char const * const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte** VulkanGetInstanceExtensionsNative([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint*, byte**>)funcTable[1264])(count);
			#else
			return (byte**)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[1264])((nint)count);
			#endif
		}

		/// <summary>
		/// Get the Vulkan instance extensions needed for vkCreateInstance.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// On return, the variable pointed to by `count` will be set to the number of<br/>
		/// elements returned, suitable for using with<br/>
		/// VkInstanceCreateInfo::enabledExtensionCount, and the returned array can be<br/>
		/// used with VkInstanceCreateInfo::ppEnabledExtensionNames, for calling<br/>
		/// Vulkan's vkCreateInstance API.<br/>
		/// You should not free the returned array; it is owned by SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "char const * const *")]
		public static byte** VulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "Uint32 *")] uint* count)
		{
			byte** ret = VulkanGetInstanceExtensionsNative(count);
			return ret;
		}

		/// <summary>
		/// Get the Vulkan instance extensions needed for vkCreateInstance.<br/>
		/// This should be called after either calling SDL_Vulkan_LoadLibrary() or<br/>
		/// creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.<br/>
		/// On return, the variable pointed to by `count` will be set to the number of<br/>
		/// elements returned, suitable for using with<br/>
		/// VkInstanceCreateInfo::enabledExtensionCount, and the returned array can be<br/>
		/// used with VkInstanceCreateInfo::ppEnabledExtensionNames, for calling<br/>
		/// Vulkan's vkCreateInstance API.<br/>
		/// You should not free the returned array; it is owned by SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetInstanceExtensions")]
		[return: NativeName(NativeNameType.Type, "char const * const *")]
		public static byte** VulkanGetInstanceExtensions([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "Uint32 *")] ref uint count)
		{
			fixed (uint* pcount = &count)
			{
				byte** ret = VulkanGetInstanceExtensionsNative((uint*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte VulkanCreateSurfaceNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] VkSurfaceKHR* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, VkInstance, VkAllocationCallbacks*, VkSurfaceKHR*, byte>)funcTable[1265])(window, instance, allocator, surface);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, VkInstance, nint, nint, byte>)funcTable[1265])((nint)window, instance, (nint)allocator, (nint)surface);
			#endif
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] VkSurfaceKHR* surface)
		{
			byte ret = VulkanCreateSurfaceNative(window, instance, allocator, surface);
			return ret != 0;
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] VkSurfaceKHR* surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, allocator, surface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] ref VkAllocationCallbacks allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] VkSurfaceKHR* surface)
		{
			fixed (VkAllocationCallbacks* pallocator = &allocator)
			{
				byte ret = VulkanCreateSurfaceNative(window, instance, (VkAllocationCallbacks*)pallocator, surface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] ref VkAllocationCallbacks allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] VkSurfaceKHR* surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (VkAllocationCallbacks* pallocator = &allocator)
				{
					byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, (VkAllocationCallbacks*)pallocator, surface);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] ref VkSurfaceKHR surface)
		{
			fixed (VkSurfaceKHR* psurface = &surface)
			{
				byte ret = VulkanCreateSurfaceNative(window, instance, allocator, (VkSurfaceKHR*)psurface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] ref VkSurfaceKHR surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (VkSurfaceKHR* psurface = &surface)
				{
					byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, allocator, (VkSurfaceKHR*)psurface);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] ref VkAllocationCallbacks allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] ref VkSurfaceKHR surface)
		{
			fixed (VkAllocationCallbacks* pallocator = &allocator)
			{
				fixed (VkSurfaceKHR* psurface = &surface)
				{
					byte ret = VulkanCreateSurfaceNative(window, instance, (VkAllocationCallbacks*)pallocator, (VkSurfaceKHR*)psurface);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Create a Vulkan rendering surface for a window.<br/>
		/// The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and<br/>
		/// `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_CreateSurface")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanCreateSurface([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] ref VkAllocationCallbacks allocator, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR *")] ref VkSurfaceKHR surface)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (VkAllocationCallbacks* pallocator = &allocator)
				{
					fixed (VkSurfaceKHR* psurface = &surface)
					{
						byte ret = VulkanCreateSurfaceNative((SDLWindow*)pwindow, instance, (VkAllocationCallbacks*)pallocator, (VkSurfaceKHR*)psurface);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_DestroySurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VulkanDestroySurfaceNative([NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR")] VkSurfaceKHR surface, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void>)funcTable[1266])(instance, surface, allocator);
			#else
			((delegate* unmanaged[Cdecl]<VkInstance, VkSurfaceKHR, nint, void>)funcTable[1266])(instance, surface, (nint)allocator);
			#endif
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_DestroySurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VulkanDestroySurface([NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR")] VkSurfaceKHR surface, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator)
		{
			VulkanDestroySurfaceNative(instance, surface, allocator);
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_DestroySurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VulkanDestroySurface([NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR")] VkSurfaceKHR surface, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] ref VkAllocationCallbacks allocator)
		{
			fixed (VkAllocationCallbacks* pallocator = &allocator)
			{
				VulkanDestroySurfaceNative(instance, surface, (VkAllocationCallbacks*)pallocator);
			}
		}

		/// <summary>
		/// Query support for presentation via a given physical device and queue<br/>
		/// family.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetPresentationSupport")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte VulkanGetPresentationSupportNative([NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "physicalDevice")] [NativeName(NativeNameType.Type, "VkPhysicalDevice")] VkPhysicalDevice physicalDevice, [NativeName(NativeNameType.Param, "queueFamilyIndex")] [NativeName(NativeNameType.Type, "Uint32")] uint queueFamilyIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkInstance, VkPhysicalDevice, uint, byte>)funcTable[1267])(instance, physicalDevice, queueFamilyIndex);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<VkInstance, VkPhysicalDevice, uint, byte>)funcTable[1267])(instance, physicalDevice, queueFamilyIndex);
			#endif
		}

		/// <summary>
		/// Query support for presentation via a given physical device and queue<br/>
		/// family.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetPresentationSupport")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanGetPresentationSupport([NativeName(NativeNameType.Param, "instance")] [NativeName(NativeNameType.Type, "VkInstance")] VkInstance instance, [NativeName(NativeNameType.Param, "physicalDevice")] [NativeName(NativeNameType.Type, "VkPhysicalDevice")] VkPhysicalDevice physicalDevice, [NativeName(NativeNameType.Param, "queueFamilyIndex")] [NativeName(NativeNameType.Type, "Uint32")] uint queueFamilyIndex)
		{
			byte ret = VulkanGetPresentationSupportNative(instance, physicalDevice, queueFamilyIndex);
			return ret != 0;
		}

	}
}
