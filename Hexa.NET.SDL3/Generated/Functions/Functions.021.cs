// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Create a new haptic effect on a specified device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int CreateHapticEffect(ref SDLHaptic haptic, SDLHapticEffect* effect)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				int ret = CreateHapticEffectNative((SDLHaptic*)phaptic, effect);
				return ret;
			}
		}

		/// <summary>
		/// Create a new haptic effect on a specified device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int CreateHapticEffect(SDLHaptic* haptic, ref SDLHapticEffect effect)
		{
			fixed (SDLHapticEffect* peffect = &effect)
			{
				int ret = CreateHapticEffectNative(haptic, (SDLHapticEffect*)peffect);
				return ret;
			}
		}

		/// <summary>
		/// Create a new haptic effect on a specified device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int CreateHapticEffect(ref SDLHaptic haptic, ref SDLHapticEffect effect)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				fixed (SDLHapticEffect* peffect = &effect)
				{
					int ret = CreateHapticEffectNative((SDLHaptic*)phaptic, (SDLHapticEffect*)peffect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Update the properties of an effect.<br/>
		/// Can be used dynamically, although behavior when dynamically changing<br/>
		/// direction may be strange. Specifically the effect may re-upload itself and<br/>
		/// start playing from the start. You also cannot change the type either when<br/>
		/// running SDL_UpdateHapticEffect().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte UpdateHapticEffectNative(SDLHaptic* haptic, int effect, SDLHapticEffect* data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, int, SDLHapticEffect*, byte>)funcTable[940])(haptic, effect, data);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, nint, byte>)funcTable[940])((nint)haptic, effect, (nint)data);
			#endif
		}

		/// <summary>
		/// Update the properties of an effect.<br/>
		/// Can be used dynamically, although behavior when dynamically changing<br/>
		/// direction may be strange. Specifically the effect may re-upload itself and<br/>
		/// start playing from the start. You also cannot change the type either when<br/>
		/// running SDL_UpdateHapticEffect().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool UpdateHapticEffect(SDLHaptic* haptic, int effect, SDLHapticEffect* data)
		{
			byte ret = UpdateHapticEffectNative(haptic, effect, data);
			return ret != 0;
		}

		/// <summary>
		/// Update the properties of an effect.<br/>
		/// Can be used dynamically, although behavior when dynamically changing<br/>
		/// direction may be strange. Specifically the effect may re-upload itself and<br/>
		/// start playing from the start. You also cannot change the type either when<br/>
		/// running SDL_UpdateHapticEffect().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool UpdateHapticEffect(ref SDLHaptic haptic, int effect, SDLHapticEffect* data)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = UpdateHapticEffectNative((SDLHaptic*)phaptic, effect, data);
				return ret != 0;
			}
		}

		/// <summary>
		/// Update the properties of an effect.<br/>
		/// Can be used dynamically, although behavior when dynamically changing<br/>
		/// direction may be strange. Specifically the effect may re-upload itself and<br/>
		/// start playing from the start. You also cannot change the type either when<br/>
		/// running SDL_UpdateHapticEffect().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool UpdateHapticEffect(SDLHaptic* haptic, int effect, ref SDLHapticEffect data)
		{
			fixed (SDLHapticEffect* pdata = &data)
			{
				byte ret = UpdateHapticEffectNative(haptic, effect, (SDLHapticEffect*)pdata);
				return ret != 0;
			}
		}

		/// <summary>
		/// Update the properties of an effect.<br/>
		/// Can be used dynamically, although behavior when dynamically changing<br/>
		/// direction may be strange. Specifically the effect may re-upload itself and<br/>
		/// start playing from the start. You also cannot change the type either when<br/>
		/// running SDL_UpdateHapticEffect().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool UpdateHapticEffect(ref SDLHaptic haptic, int effect, ref SDLHapticEffect data)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				fixed (SDLHapticEffect* pdata = &data)
				{
					byte ret = UpdateHapticEffectNative((SDLHaptic*)phaptic, effect, (SDLHapticEffect*)pdata);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Run the haptic effect on its associated haptic device.<br/>
		/// To repeat the effect over and over indefinitely, set `iterations` to<br/>
		/// `SDL_HAPTIC_INFINITY`. (Repeats the envelope - attack and fade.) To make<br/>
		/// one instance of the effect last indefinitely (so the effect does not fade),<br/>
		/// set the effect's `length` in its structure/union to `SDL_HAPTIC_INFINITY`<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RunHapticEffectNative(SDLHaptic* haptic, int effect, uint iterations)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, int, uint, byte>)funcTable[941])(haptic, effect, iterations);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, uint, byte>)funcTable[941])((nint)haptic, effect, iterations);
			#endif
		}

		/// <summary>
		/// Run the haptic effect on its associated haptic device.<br/>
		/// To repeat the effect over and over indefinitely, set `iterations` to<br/>
		/// `SDL_HAPTIC_INFINITY`. (Repeats the envelope - attack and fade.) To make<br/>
		/// one instance of the effect last indefinitely (so the effect does not fade),<br/>
		/// set the effect's `length` in its structure/union to `SDL_HAPTIC_INFINITY`<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RunHapticEffect(SDLHaptic* haptic, int effect, uint iterations)
		{
			byte ret = RunHapticEffectNative(haptic, effect, iterations);
			return ret != 0;
		}

		/// <summary>
		/// Run the haptic effect on its associated haptic device.<br/>
		/// To repeat the effect over and over indefinitely, set `iterations` to<br/>
		/// `SDL_HAPTIC_INFINITY`. (Repeats the envelope - attack and fade.) To make<br/>
		/// one instance of the effect last indefinitely (so the effect does not fade),<br/>
		/// set the effect's `length` in its structure/union to `SDL_HAPTIC_INFINITY`<br/>
		/// instead.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RunHapticEffect(ref SDLHaptic haptic, int effect, uint iterations)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = RunHapticEffectNative((SDLHaptic*)phaptic, effect, iterations);
				return ret != 0;
			}
		}

		/// <summary>
		/// Stop the haptic effect on its associated haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte StopHapticEffectNative(SDLHaptic* haptic, int effect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, int, byte>)funcTable[942])(haptic, effect);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[942])((nint)haptic, effect);
			#endif
		}

		/// <summary>
		/// Stop the haptic effect on its associated haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool StopHapticEffect(SDLHaptic* haptic, int effect)
		{
			byte ret = StopHapticEffectNative(haptic, effect);
			return ret != 0;
		}

		/// <summary>
		/// Stop the haptic effect on its associated haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool StopHapticEffect(ref SDLHaptic haptic, int effect)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = StopHapticEffectNative((SDLHaptic*)phaptic, effect);
				return ret != 0;
			}
		}

		/// <summary>
		/// Destroy a haptic effect on the device.<br/>
		/// This will stop the effect if it's running. Effects are automatically<br/>
		/// destroyed when the device is closed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyHapticEffectNative(SDLHaptic* haptic, int effect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLHaptic*, int, void>)funcTable[943])(haptic, effect);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, void>)funcTable[943])((nint)haptic, effect);
			#endif
		}

		/// <summary>
		/// Destroy a haptic effect on the device.<br/>
		/// This will stop the effect if it's running. Effects are automatically<br/>
		/// destroyed when the device is closed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DestroyHapticEffect(SDLHaptic* haptic, int effect)
		{
			DestroyHapticEffectNative(haptic, effect);
		}

		/// <summary>
		/// Destroy a haptic effect on the device.<br/>
		/// This will stop the effect if it's running. Effects are automatically<br/>
		/// destroyed when the device is closed.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DestroyHapticEffect(ref SDLHaptic haptic, int effect)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				DestroyHapticEffectNative((SDLHaptic*)phaptic, effect);
			}
		}

		/// <summary>
		/// Get the status of the current effect on the specified haptic device.<br/>
		/// Device must support the SDL_HAPTIC_STATUS feature.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetHapticEffectStatusNative(SDLHaptic* haptic, int effect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, int, byte>)funcTable[944])(haptic, effect);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[944])((nint)haptic, effect);
			#endif
		}

		/// <summary>
		/// Get the status of the current effect on the specified haptic device.<br/>
		/// Device must support the SDL_HAPTIC_STATUS feature.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetHapticEffectStatus(SDLHaptic* haptic, int effect)
		{
			byte ret = GetHapticEffectStatusNative(haptic, effect);
			return ret != 0;
		}

		/// <summary>
		/// Get the status of the current effect on the specified haptic device.<br/>
		/// Device must support the SDL_HAPTIC_STATUS feature.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetHapticEffectStatus(ref SDLHaptic haptic, int effect)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = GetHapticEffectStatusNative((SDLHaptic*)phaptic, effect);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the global gain of the specified haptic device.<br/>
		/// Device must support the SDL_HAPTIC_GAIN feature.<br/>
		/// The user may specify the maximum gain by setting the environment variable<br/>
		/// `SDL_HAPTIC_GAIN_MAX` which should be between 0 and 100. All calls to<br/>
		/// SDL_SetHapticGain() will scale linearly using `SDL_HAPTIC_GAIN_MAX` as the<br/>
		/// maximum.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetHapticGainNative(SDLHaptic* haptic, int gain)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, int, byte>)funcTable[945])(haptic, gain);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[945])((nint)haptic, gain);
			#endif
		}

		/// <summary>
		/// Set the global gain of the specified haptic device.<br/>
		/// Device must support the SDL_HAPTIC_GAIN feature.<br/>
		/// The user may specify the maximum gain by setting the environment variable<br/>
		/// `SDL_HAPTIC_GAIN_MAX` which should be between 0 and 100. All calls to<br/>
		/// SDL_SetHapticGain() will scale linearly using `SDL_HAPTIC_GAIN_MAX` as the<br/>
		/// maximum.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHapticGain(SDLHaptic* haptic, int gain)
		{
			byte ret = SetHapticGainNative(haptic, gain);
			return ret != 0;
		}

		/// <summary>
		/// Set the global gain of the specified haptic device.<br/>
		/// Device must support the SDL_HAPTIC_GAIN feature.<br/>
		/// The user may specify the maximum gain by setting the environment variable<br/>
		/// `SDL_HAPTIC_GAIN_MAX` which should be between 0 and 100. All calls to<br/>
		/// SDL_SetHapticGain() will scale linearly using `SDL_HAPTIC_GAIN_MAX` as the<br/>
		/// maximum.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHapticGain(ref SDLHaptic haptic, int gain)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = SetHapticGainNative((SDLHaptic*)phaptic, gain);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the global autocenter of the device.<br/>
		/// Autocenter should be between 0 and 100. Setting it to 0 will disable<br/>
		/// autocentering.<br/>
		/// Device must support the SDL_HAPTIC_AUTOCENTER feature.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetHapticAutocenterNative(SDLHaptic* haptic, int autocenter)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, int, byte>)funcTable[946])(haptic, autocenter);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[946])((nint)haptic, autocenter);
			#endif
		}

		/// <summary>
		/// Set the global autocenter of the device.<br/>
		/// Autocenter should be between 0 and 100. Setting it to 0 will disable<br/>
		/// autocentering.<br/>
		/// Device must support the SDL_HAPTIC_AUTOCENTER feature.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHapticAutocenter(SDLHaptic* haptic, int autocenter)
		{
			byte ret = SetHapticAutocenterNative(haptic, autocenter);
			return ret != 0;
		}

		/// <summary>
		/// Set the global autocenter of the device.<br/>
		/// Autocenter should be between 0 and 100. Setting it to 0 will disable<br/>
		/// autocentering.<br/>
		/// Device must support the SDL_HAPTIC_AUTOCENTER feature.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHapticAutocenter(ref SDLHaptic haptic, int autocenter)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = SetHapticAutocenterNative((SDLHaptic*)phaptic, autocenter);
				return ret != 0;
			}
		}

		/// <summary>
		/// Pause a haptic device.<br/>
		/// Device must support the `SDL_HAPTIC_PAUSE` feature. Call SDL_ResumeHaptic()<br/>
		/// to resume playback.<br/>
		/// Do not modify the effects nor add new ones while the device is paused. That<br/>
		/// can cause all sorts of weird errors.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte PauseHapticNative(SDLHaptic* haptic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, byte>)funcTable[947])(haptic);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[947])((nint)haptic);
			#endif
		}

		/// <summary>
		/// Pause a haptic device.<br/>
		/// Device must support the `SDL_HAPTIC_PAUSE` feature. Call SDL_ResumeHaptic()<br/>
		/// to resume playback.<br/>
		/// Do not modify the effects nor add new ones while the device is paused. That<br/>
		/// can cause all sorts of weird errors.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool PauseHaptic(SDLHaptic* haptic)
		{
			byte ret = PauseHapticNative(haptic);
			return ret != 0;
		}

		/// <summary>
		/// Pause a haptic device.<br/>
		/// Device must support the `SDL_HAPTIC_PAUSE` feature. Call SDL_ResumeHaptic()<br/>
		/// to resume playback.<br/>
		/// Do not modify the effects nor add new ones while the device is paused. That<br/>
		/// can cause all sorts of weird errors.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool PauseHaptic(ref SDLHaptic haptic)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = PauseHapticNative((SDLHaptic*)phaptic);
				return ret != 0;
			}
		}

		/// <summary>
		/// Resume a haptic device.<br/>
		/// Call to unpause after SDL_PauseHaptic().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ResumeHapticNative(SDLHaptic* haptic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, byte>)funcTable[948])(haptic);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[948])((nint)haptic);
			#endif
		}

		/// <summary>
		/// Resume a haptic device.<br/>
		/// Call to unpause after SDL_PauseHaptic().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool ResumeHaptic(SDLHaptic* haptic)
		{
			byte ret = ResumeHapticNative(haptic);
			return ret != 0;
		}

		/// <summary>
		/// Resume a haptic device.<br/>
		/// Call to unpause after SDL_PauseHaptic().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool ResumeHaptic(ref SDLHaptic haptic)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = ResumeHapticNative((SDLHaptic*)phaptic);
				return ret != 0;
			}
		}

		/// <summary>
		/// Stop all the currently playing effects on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte StopHapticEffectsNative(SDLHaptic* haptic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, byte>)funcTable[949])(haptic);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[949])((nint)haptic);
			#endif
		}

		/// <summary>
		/// Stop all the currently playing effects on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool StopHapticEffects(SDLHaptic* haptic)
		{
			byte ret = StopHapticEffectsNative(haptic);
			return ret != 0;
		}

		/// <summary>
		/// Stop all the currently playing effects on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool StopHapticEffects(ref SDLHaptic haptic)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = StopHapticEffectsNative((SDLHaptic*)phaptic);
				return ret != 0;
			}
		}

		/// <summary>
		/// Check whether rumble is supported on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte HapticRumbleSupportedNative(SDLHaptic* haptic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, byte>)funcTable[950])(haptic);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[950])((nint)haptic);
			#endif
		}

		/// <summary>
		/// Check whether rumble is supported on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HapticRumbleSupported(SDLHaptic* haptic)
		{
			byte ret = HapticRumbleSupportedNative(haptic);
			return ret != 0;
		}

		/// <summary>
		/// Check whether rumble is supported on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HapticRumbleSupported(ref SDLHaptic haptic)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = HapticRumbleSupportedNative((SDLHaptic*)phaptic);
				return ret != 0;
			}
		}

		/// <summary>
		/// Initialize a haptic device for simple rumble playback.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte InitHapticRumbleNative(SDLHaptic* haptic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, byte>)funcTable[951])(haptic);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[951])((nint)haptic);
			#endif
		}

		/// <summary>
		/// Initialize a haptic device for simple rumble playback.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool InitHapticRumble(SDLHaptic* haptic)
		{
			byte ret = InitHapticRumbleNative(haptic);
			return ret != 0;
		}

		/// <summary>
		/// Initialize a haptic device for simple rumble playback.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool InitHapticRumble(ref SDLHaptic haptic)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = InitHapticRumbleNative((SDLHaptic*)phaptic);
				return ret != 0;
			}
		}

		/// <summary>
		/// Run a simple rumble effect on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte PlayHapticRumbleNative(SDLHaptic* haptic, float strength, uint length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, float, uint, byte>)funcTable[952])(haptic, strength, length);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, float, uint, byte>)funcTable[952])((nint)haptic, strength, length);
			#endif
		}

		/// <summary>
		/// Run a simple rumble effect on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool PlayHapticRumble(SDLHaptic* haptic, float strength, uint length)
		{
			byte ret = PlayHapticRumbleNative(haptic, strength, length);
			return ret != 0;
		}

		/// <summary>
		/// Run a simple rumble effect on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool PlayHapticRumble(ref SDLHaptic haptic, float strength, uint length)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = PlayHapticRumbleNative((SDLHaptic*)phaptic, strength, length);
				return ret != 0;
			}
		}

		/// <summary>
		/// Stop the simple rumble on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte StopHapticRumbleNative(SDLHaptic* haptic)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHaptic*, byte>)funcTable[953])(haptic);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[953])((nint)haptic);
			#endif
		}

		/// <summary>
		/// Stop the simple rumble on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool StopHapticRumble(SDLHaptic* haptic)
		{
			byte ret = StopHapticRumbleNative(haptic);
			return ret != 0;
		}

		/// <summary>
		/// Stop the simple rumble on a haptic device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool StopHapticRumble(ref SDLHaptic haptic)
		{
			fixed (SDLHaptic* phaptic = &haptic)
			{
				byte ret = StopHapticRumbleNative((SDLHaptic*)phaptic);
				return ret != 0;
			}
		}

		/// <summary>
		/// Initialize the HIDAPI library.<br/>
		/// This function initializes the HIDAPI library. Calling it is not strictly<br/>
		/// necessary, as it will be called automatically by SDL_hid_enumerate() and<br/>
		/// any of the SDL_hid_open_*() functions if it is needed. This function should<br/>
		/// be called at the beginning of execution however, if there is a chance of<br/>
		/// HIDAPI handles being opened by different threads simultaneously.<br/>
		/// Each call to this function should have a matching call to SDL_hid_exit()<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidInitNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[954])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[954])();
			#endif
		}

		/// <summary>
		/// Initialize the HIDAPI library.<br/>
		/// This function initializes the HIDAPI library. Calling it is not strictly<br/>
		/// necessary, as it will be called automatically by SDL_hid_enumerate() and<br/>
		/// any of the SDL_hid_open_*() functions if it is needed. This function should<br/>
		/// be called at the beginning of execution however, if there is a chance of<br/>
		/// HIDAPI handles being opened by different threads simultaneously.<br/>
		/// Each call to this function should have a matching call to SDL_hid_exit()<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidInit()
		{
			int ret = HidInitNative();
			return ret;
		}

		/// <summary>
		/// Finalize the HIDAPI library.<br/>
		/// This function frees all of the static data associated with HIDAPI. It<br/>
		/// should be called at the end of execution to avoid memory leaks.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidExitNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[955])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[955])();
			#endif
		}

		/// <summary>
		/// Finalize the HIDAPI library.<br/>
		/// This function frees all of the static data associated with HIDAPI. It<br/>
		/// should be called at the end of execution to avoid memory leaks.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidExit()
		{
			int ret = HidExitNative();
			return ret;
		}

		/// <summary>
		/// Check to see if devices may have been added or removed.<br/>
		/// Enumerating the HID devices is an expensive operation, so you can call this<br/>
		/// to see if there have been any system device changes since the last call to<br/>
		/// this function. A change in the counter returned doesn't necessarily mean<br/>
		/// that anything has changed, but you can call SDL_hid_enumerate() to get an<br/>
		/// updated device list.<br/>
		/// Calling this function for the first time may cause a thread or other system<br/>
		/// resource to be allocated to track device change notifications.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint HidDeviceChangeCountNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[956])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[956])();
			#endif
		}

		/// <summary>
		/// Check to see if devices may have been added or removed.<br/>
		/// Enumerating the HID devices is an expensive operation, so you can call this<br/>
		/// to see if there have been any system device changes since the last call to<br/>
		/// this function. A change in the counter returned doesn't necessarily mean<br/>
		/// that anything has changed, but you can call SDL_hid_enumerate() to get an<br/>
		/// updated device list.<br/>
		/// Calling this function for the first time may cause a thread or other system<br/>
		/// resource to be allocated to track device change notifications.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static uint HidDeviceChangeCount()
		{
			uint ret = HidDeviceChangeCountNative();
			return ret;
		}

		/// <summary>
		/// Enumerate the HID Devices.<br/>
		/// This function returns a linked list of all the HID devices attached to the<br/>
		/// system which match vendor_id and product_id. If `vendor_id` is set to 0<br/>
		/// then any vendor matches. If `product_id` is set to 0 then any product<br/>
		/// matches. If `vendor_id` and `product_id` are both set to 0, then all HID<br/>
		/// devices will be returned.<br/>
		/// By default SDL will only enumerate controllers, to reduce risk of hanging<br/>
		/// or crashing on bad drivers, but SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS<br/>
		/// can be set to "0" to enumerate all HID devices.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLHidDeviceInfo* HidEnumerateNative(ushort vendorId, ushort productId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, SDLHidDeviceInfo*>)funcTable[957])(vendorId, productId);
			#else
			return (SDLHidDeviceInfo*)((delegate* unmanaged[Cdecl]<ushort, ushort, nint>)funcTable[957])(vendorId, productId);
			#endif
		}

		/// <summary>
		/// Enumerate the HID Devices.<br/>
		/// This function returns a linked list of all the HID devices attached to the<br/>
		/// system which match vendor_id and product_id. If `vendor_id` is set to 0<br/>
		/// then any vendor matches. If `product_id` is set to 0 then any product<br/>
		/// matches. If `vendor_id` and `product_id` are both set to 0, then all HID<br/>
		/// devices will be returned.<br/>
		/// By default SDL will only enumerate controllers, to reduce risk of hanging<br/>
		/// or crashing on bad drivers, but SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS<br/>
		/// can be set to "0" to enumerate all HID devices.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDeviceInfo* HidEnumerate(ushort vendorId, ushort productId)
		{
			SDLHidDeviceInfo* ret = HidEnumerateNative(vendorId, productId);
			return ret;
		}

		/// <summary>
		/// Free an enumeration linked list.<br/>
		/// This function frees a linked list created by SDL_hid_enumerate().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void HidFreeEnumerationNative(SDLHidDeviceInfo* devs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLHidDeviceInfo*, void>)funcTable[958])(devs);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[958])((nint)devs);
			#endif
		}

		/// <summary>
		/// Free an enumeration linked list.<br/>
		/// This function frees a linked list created by SDL_hid_enumerate().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void HidFreeEnumeration(SDLHidDeviceInfo* devs)
		{
			HidFreeEnumerationNative(devs);
		}

		/// <summary>
		/// Free an enumeration linked list.<br/>
		/// This function frees a linked list created by SDL_hid_enumerate().<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void HidFreeEnumeration(ref SDLHidDeviceInfo devs)
		{
			fixed (SDLHidDeviceInfo* pdevs = &devs)
			{
				HidFreeEnumerationNative((SDLHidDeviceInfo*)pdevs);
			}
		}

		/// <summary>
		/// Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally<br/>
		/// a serial number.<br/>
		/// If `serial_number` is NULL, the first device with the specified VID and PID<br/>
		/// is opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLHidDevice* HidOpenNative(ushort vendorId, ushort productId, char* serialNumber)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ushort, ushort, char*, SDLHidDevice*>)funcTable[959])(vendorId, productId, serialNumber);
			#else
			return (SDLHidDevice*)((delegate* unmanaged[Cdecl]<ushort, ushort, nint, nint>)funcTable[959])(vendorId, productId, (nint)serialNumber);
			#endif
		}

		/// <summary>
		/// Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally<br/>
		/// a serial number.<br/>
		/// If `serial_number` is NULL, the first device with the specified VID and PID<br/>
		/// is opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpen(ushort vendorId, ushort productId, char* serialNumber)
		{
			SDLHidDevice* ret = HidOpenNative(vendorId, productId, serialNumber);
			return ret;
		}

		/// <summary>
		/// Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally<br/>
		/// a serial number.<br/>
		/// If `serial_number` is NULL, the first device with the specified VID and PID<br/>
		/// is opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpen(ushort vendorId, ushort productId, ref char serialNumber)
		{
			fixed (char* pserialNumber = &serialNumber)
			{
				SDLHidDevice* ret = HidOpenNative(vendorId, productId, (char*)pserialNumber);
				return ret;
			}
		}

		/// <summary>
		/// Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally<br/>
		/// a serial number.<br/>
		/// If `serial_number` is NULL, the first device with the specified VID and PID<br/>
		/// is opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpen(ushort vendorId, ushort productId, ReadOnlySpan<char> serialNumber)
		{
			fixed (char* pserialNumber = serialNumber)
			{
				SDLHidDevice* ret = HidOpenNative(vendorId, productId, (char*)pserialNumber);
				return ret;
			}
		}

		/// <summary>
		/// Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally<br/>
		/// a serial number.<br/>
		/// If `serial_number` is NULL, the first device with the specified VID and PID<br/>
		/// is opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpen(ushort vendorId, ushort productId, string serialNumber)
		{
			fixed (char* pserialNumber = serialNumber)
			{
				SDLHidDevice* ret = HidOpenNative(vendorId, productId, pserialNumber);
				return ret;
			}
		}

		/// <summary>
		/// Open a HID device by its path name.<br/>
		/// The path name be determined by calling SDL_hid_enumerate(), or a<br/>
		/// platform-specific path name can be used (eg: /dev/hidraw0 on Linux).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLHidDevice* HidOpenPathNative(byte* path)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLHidDevice*>)funcTable[960])(path);
			#else
			return (SDLHidDevice*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[960])((nint)path);
			#endif
		}

		/// <summary>
		/// Open a HID device by its path name.<br/>
		/// The path name be determined by calling SDL_hid_enumerate(), or a<br/>
		/// platform-specific path name can be used (eg: /dev/hidraw0 on Linux).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpenPath(byte* path)
		{
			SDLHidDevice* ret = HidOpenPathNative(path);
			return ret;
		}

		/// <summary>
		/// Open a HID device by its path name.<br/>
		/// The path name be determined by calling SDL_hid_enumerate(), or a<br/>
		/// platform-specific path name can be used (eg: /dev/hidraw0 on Linux).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpenPath(ref byte path)
		{
			fixed (byte* ppath = &path)
			{
				SDLHidDevice* ret = HidOpenPathNative((byte*)ppath);
				return ret;
			}
		}

		/// <summary>
		/// Open a HID device by its path name.<br/>
		/// The path name be determined by calling SDL_hid_enumerate(), or a<br/>
		/// platform-specific path name can be used (eg: /dev/hidraw0 on Linux).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpenPath(ReadOnlySpan<byte> path)
		{
			fixed (byte* ppath = path)
			{
				SDLHidDevice* ret = HidOpenPathNative((byte*)ppath);
				return ret;
			}
		}

		/// <summary>
		/// Open a HID device by its path name.<br/>
		/// The path name be determined by calling SDL_hid_enumerate(), or a<br/>
		/// platform-specific path name can be used (eg: /dev/hidraw0 on Linux).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDevice* HidOpenPath(string path)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (path != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(path);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(path, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLHidDevice* ret = HidOpenPathNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Write an Output report to a HID device.<br/>
		/// The first byte of `data` must contain the Report ID. For devices which only<br/>
		/// support a single report, this must be set to 0x0. The remaining bytes<br/>
		/// contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_write() will always contain one more byte than the report contains.<br/>
		/// For example, if a hid report is 16 bytes long, 17 bytes must be passed to<br/>
		/// SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),<br/>
		/// followed by the report data (16 bytes). In this example, the length passed<br/>
		/// in would be 17.<br/>
		/// SDL_hid_write() will send the data on the first OUT endpoint, if one<br/>
		/// exists. If it does not, it will send the data through the Control Endpoint<br/>
		/// (Endpoint 0).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidWriteNative(SDLHidDevice* dev, byte* data, nuint length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, byte*, nuint, int>)funcTable[961])(dev, data, length);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[961])((nint)dev, (nint)data, length);
			#endif
		}

		/// <summary>
		/// Write an Output report to a HID device.<br/>
		/// The first byte of `data` must contain the Report ID. For devices which only<br/>
		/// support a single report, this must be set to 0x0. The remaining bytes<br/>
		/// contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_write() will always contain one more byte than the report contains.<br/>
		/// For example, if a hid report is 16 bytes long, 17 bytes must be passed to<br/>
		/// SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),<br/>
		/// followed by the report data (16 bytes). In this example, the length passed<br/>
		/// in would be 17.<br/>
		/// SDL_hid_write() will send the data on the first OUT endpoint, if one<br/>
		/// exists. If it does not, it will send the data through the Control Endpoint<br/>
		/// (Endpoint 0).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidWrite(SDLHidDevice* dev, byte* data, nuint length)
		{
			int ret = HidWriteNative(dev, data, length);
			return ret;
		}

		/// <summary>
		/// Write an Output report to a HID device.<br/>
		/// The first byte of `data` must contain the Report ID. For devices which only<br/>
		/// support a single report, this must be set to 0x0. The remaining bytes<br/>
		/// contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_write() will always contain one more byte than the report contains.<br/>
		/// For example, if a hid report is 16 bytes long, 17 bytes must be passed to<br/>
		/// SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),<br/>
		/// followed by the report data (16 bytes). In this example, the length passed<br/>
		/// in would be 17.<br/>
		/// SDL_hid_write() will send the data on the first OUT endpoint, if one<br/>
		/// exists. If it does not, it will send the data through the Control Endpoint<br/>
		/// (Endpoint 0).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidWrite(ref SDLHidDevice dev, byte* data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidWriteNative((SDLHidDevice*)pdev, data, length);
				return ret;
			}
		}

		/// <summary>
		/// Write an Output report to a HID device.<br/>
		/// The first byte of `data` must contain the Report ID. For devices which only<br/>
		/// support a single report, this must be set to 0x0. The remaining bytes<br/>
		/// contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_write() will always contain one more byte than the report contains.<br/>
		/// For example, if a hid report is 16 bytes long, 17 bytes must be passed to<br/>
		/// SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),<br/>
		/// followed by the report data (16 bytes). In this example, the length passed<br/>
		/// in would be 17.<br/>
		/// SDL_hid_write() will send the data on the first OUT endpoint, if one<br/>
		/// exists. If it does not, it will send the data through the Control Endpoint<br/>
		/// (Endpoint 0).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidWrite(SDLHidDevice* dev, ref byte data, nuint length)
		{
			fixed (byte* pdata = &data)
			{
				int ret = HidWriteNative(dev, (byte*)pdata, length);
				return ret;
			}
		}

		/// <summary>
		/// Write an Output report to a HID device.<br/>
		/// The first byte of `data` must contain the Report ID. For devices which only<br/>
		/// support a single report, this must be set to 0x0. The remaining bytes<br/>
		/// contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_write() will always contain one more byte than the report contains.<br/>
		/// For example, if a hid report is 16 bytes long, 17 bytes must be passed to<br/>
		/// SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),<br/>
		/// followed by the report data (16 bytes). In this example, the length passed<br/>
		/// in would be 17.<br/>
		/// SDL_hid_write() will send the data on the first OUT endpoint, if one<br/>
		/// exists. If it does not, it will send the data through the Control Endpoint<br/>
		/// (Endpoint 0).<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidWrite(ref SDLHidDevice dev, ref byte data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (byte* pdata = &data)
				{
					int ret = HidWriteNative((SDLHidDevice*)pdev, (byte*)pdata, length);
					return ret;
				}
			}
		}

		/// <summary>
		/// Read an Input report from a HID device with timeout.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidReadTimeoutNative(SDLHidDevice* dev, byte* data, nuint length, int milliseconds)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, byte*, nuint, int, int>)funcTable[962])(dev, data, length, milliseconds);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int, int>)funcTable[962])((nint)dev, (nint)data, length, milliseconds);
			#endif
		}

		/// <summary>
		/// Read an Input report from a HID device with timeout.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidReadTimeout(SDLHidDevice* dev, byte* data, nuint length, int milliseconds)
		{
			int ret = HidReadTimeoutNative(dev, data, length, milliseconds);
			return ret;
		}

		/// <summary>
		/// Read an Input report from a HID device with timeout.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidReadTimeout(ref SDLHidDevice dev, byte* data, nuint length, int milliseconds)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidReadTimeoutNative((SDLHidDevice*)pdev, data, length, milliseconds);
				return ret;
			}
		}

		/// <summary>
		/// Read an Input report from a HID device with timeout.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidReadTimeout(SDLHidDevice* dev, ref byte data, nuint length, int milliseconds)
		{
			fixed (byte* pdata = &data)
			{
				int ret = HidReadTimeoutNative(dev, (byte*)pdata, length, milliseconds);
				return ret;
			}
		}

		/// <summary>
		/// Read an Input report from a HID device with timeout.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidReadTimeout(ref SDLHidDevice dev, ref byte data, nuint length, int milliseconds)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (byte* pdata = &data)
				{
					int ret = HidReadTimeoutNative((SDLHidDevice*)pdev, (byte*)pdata, length, milliseconds);
					return ret;
				}
			}
		}

		/// <summary>
		/// Read an Input report from a HID device.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidReadNative(SDLHidDevice* dev, byte* data, nuint length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, byte*, nuint, int>)funcTable[963])(dev, data, length);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[963])((nint)dev, (nint)data, length);
			#endif
		}

		/// <summary>
		/// Read an Input report from a HID device.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidRead(SDLHidDevice* dev, byte* data, nuint length)
		{
			int ret = HidReadNative(dev, data, length);
			return ret;
		}

		/// <summary>
		/// Read an Input report from a HID device.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidRead(ref SDLHidDevice dev, byte* data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidReadNative((SDLHidDevice*)pdev, data, length);
				return ret;
			}
		}

		/// <summary>
		/// Read an Input report from a HID device.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidRead(SDLHidDevice* dev, ref byte data, nuint length)
		{
			fixed (byte* pdata = &data)
			{
				int ret = HidReadNative(dev, (byte*)pdata, length);
				return ret;
			}
		}

		/// <summary>
		/// Read an Input report from a HID device.<br/>
		/// Input reports are returned to the host through the INTERRUPT IN endpoint.<br/>
		/// The first byte will contain the Report number if the device uses numbered<br/>
		/// reports.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidRead(ref SDLHidDevice dev, ref byte data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (byte* pdata = &data)
				{
					int ret = HidReadNative((SDLHidDevice*)pdev, (byte*)pdata, length);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the device handle to be non-blocking.<br/>
		/// In non-blocking mode calls to SDL_hid_read() will return immediately with a<br/>
		/// value of 0 if there is no data to be read. In blocking mode, SDL_hid_read()<br/>
		/// will wait (block) until there is data to read before returning.<br/>
		/// Nonblocking can be turned on and off at any time.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidSetNonblockingNative(SDLHidDevice* dev, int nonblock)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, int, int>)funcTable[964])(dev, nonblock);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[964])((nint)dev, nonblock);
			#endif
		}

		/// <summary>
		/// Set the device handle to be non-blocking.<br/>
		/// In non-blocking mode calls to SDL_hid_read() will return immediately with a<br/>
		/// value of 0 if there is no data to be read. In blocking mode, SDL_hid_read()<br/>
		/// will wait (block) until there is data to read before returning.<br/>
		/// Nonblocking can be turned on and off at any time.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidSetNonblocking(SDLHidDevice* dev, int nonblock)
		{
			int ret = HidSetNonblockingNative(dev, nonblock);
			return ret;
		}

		/// <summary>
		/// Set the device handle to be non-blocking.<br/>
		/// In non-blocking mode calls to SDL_hid_read() will return immediately with a<br/>
		/// value of 0 if there is no data to be read. In blocking mode, SDL_hid_read()<br/>
		/// will wait (block) until there is data to read before returning.<br/>
		/// Nonblocking can be turned on and off at any time.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidSetNonblocking(ref SDLHidDevice dev, int nonblock)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidSetNonblockingNative((SDLHidDevice*)pdev, nonblock);
				return ret;
			}
		}

		/// <summary>
		/// Send a Feature report to the device.<br/>
		/// Feature reports are sent over the Control endpoint as a Set_Report<br/>
		/// transfer. The first byte of `data` must contain the Report ID. For devices<br/>
		/// which only support a single report, this must be set to 0x0. The remaining<br/>
		/// bytes contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_send_feature_report() will always contain one more byte than the<br/>
		/// report contains. For example, if a hid report is 16 bytes long, 17 bytes<br/>
		/// must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for<br/>
		/// devices which do not use numbered reports), followed by the report data (16<br/>
		/// bytes). In this example, the length passed in would be 17.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidSendFeatureReportNative(SDLHidDevice* dev, byte* data, nuint length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, byte*, nuint, int>)funcTable[965])(dev, data, length);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[965])((nint)dev, (nint)data, length);
			#endif
		}

		/// <summary>
		/// Send a Feature report to the device.<br/>
		/// Feature reports are sent over the Control endpoint as a Set_Report<br/>
		/// transfer. The first byte of `data` must contain the Report ID. For devices<br/>
		/// which only support a single report, this must be set to 0x0. The remaining<br/>
		/// bytes contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_send_feature_report() will always contain one more byte than the<br/>
		/// report contains. For example, if a hid report is 16 bytes long, 17 bytes<br/>
		/// must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for<br/>
		/// devices which do not use numbered reports), followed by the report data (16<br/>
		/// bytes). In this example, the length passed in would be 17.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidSendFeatureReport(SDLHidDevice* dev, byte* data, nuint length)
		{
			int ret = HidSendFeatureReportNative(dev, data, length);
			return ret;
		}

		/// <summary>
		/// Send a Feature report to the device.<br/>
		/// Feature reports are sent over the Control endpoint as a Set_Report<br/>
		/// transfer. The first byte of `data` must contain the Report ID. For devices<br/>
		/// which only support a single report, this must be set to 0x0. The remaining<br/>
		/// bytes contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_send_feature_report() will always contain one more byte than the<br/>
		/// report contains. For example, if a hid report is 16 bytes long, 17 bytes<br/>
		/// must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for<br/>
		/// devices which do not use numbered reports), followed by the report data (16<br/>
		/// bytes). In this example, the length passed in would be 17.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidSendFeatureReport(ref SDLHidDevice dev, byte* data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidSendFeatureReportNative((SDLHidDevice*)pdev, data, length);
				return ret;
			}
		}

		/// <summary>
		/// Send a Feature report to the device.<br/>
		/// Feature reports are sent over the Control endpoint as a Set_Report<br/>
		/// transfer. The first byte of `data` must contain the Report ID. For devices<br/>
		/// which only support a single report, this must be set to 0x0. The remaining<br/>
		/// bytes contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_send_feature_report() will always contain one more byte than the<br/>
		/// report contains. For example, if a hid report is 16 bytes long, 17 bytes<br/>
		/// must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for<br/>
		/// devices which do not use numbered reports), followed by the report data (16<br/>
		/// bytes). In this example, the length passed in would be 17.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidSendFeatureReport(SDLHidDevice* dev, ref byte data, nuint length)
		{
			fixed (byte* pdata = &data)
			{
				int ret = HidSendFeatureReportNative(dev, (byte*)pdata, length);
				return ret;
			}
		}

		/// <summary>
		/// Send a Feature report to the device.<br/>
		/// Feature reports are sent over the Control endpoint as a Set_Report<br/>
		/// transfer. The first byte of `data` must contain the Report ID. For devices<br/>
		/// which only support a single report, this must be set to 0x0. The remaining<br/>
		/// bytes contain the report data. Since the Report ID is mandatory, calls to<br/>
		/// SDL_hid_send_feature_report() will always contain one more byte than the<br/>
		/// report contains. For example, if a hid report is 16 bytes long, 17 bytes<br/>
		/// must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for<br/>
		/// devices which do not use numbered reports), followed by the report data (16<br/>
		/// bytes). In this example, the length passed in would be 17.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidSendFeatureReport(ref SDLHidDevice dev, ref byte data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (byte* pdata = &data)
				{
					int ret = HidSendFeatureReportNative((SDLHidDevice*)pdev, (byte*)pdata, length);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get a feature report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidGetFeatureReportNative(SDLHidDevice* dev, byte* data, nuint length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, byte*, nuint, int>)funcTable[966])(dev, data, length);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[966])((nint)dev, (nint)data, length);
			#endif
		}

		/// <summary>
		/// Get a feature report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetFeatureReport(SDLHidDevice* dev, byte* data, nuint length)
		{
			int ret = HidGetFeatureReportNative(dev, data, length);
			return ret;
		}

		/// <summary>
		/// Get a feature report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetFeatureReport(ref SDLHidDevice dev, byte* data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidGetFeatureReportNative((SDLHidDevice*)pdev, data, length);
				return ret;
			}
		}

		/// <summary>
		/// Get a feature report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetFeatureReport(SDLHidDevice* dev, ref byte data, nuint length)
		{
			fixed (byte* pdata = &data)
			{
				int ret = HidGetFeatureReportNative(dev, (byte*)pdata, length);
				return ret;
			}
		}

		/// <summary>
		/// Get a feature report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetFeatureReport(ref SDLHidDevice dev, ref byte data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (byte* pdata = &data)
				{
					int ret = HidGetFeatureReportNative((SDLHidDevice*)pdev, (byte*)pdata, length);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get an input report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidGetInputReportNative(SDLHidDevice* dev, byte* data, nuint length)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, byte*, nuint, int>)funcTable[967])(dev, data, length);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[967])((nint)dev, (nint)data, length);
			#endif
		}

		/// <summary>
		/// Get an input report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetInputReport(SDLHidDevice* dev, byte* data, nuint length)
		{
			int ret = HidGetInputReportNative(dev, data, length);
			return ret;
		}

		/// <summary>
		/// Get an input report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetInputReport(ref SDLHidDevice dev, byte* data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidGetInputReportNative((SDLHidDevice*)pdev, data, length);
				return ret;
			}
		}

		/// <summary>
		/// Get an input report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetInputReport(SDLHidDevice* dev, ref byte data, nuint length)
		{
			fixed (byte* pdata = &data)
			{
				int ret = HidGetInputReportNative(dev, (byte*)pdata, length);
				return ret;
			}
		}

		/// <summary>
		/// Get an input report from a HID device.<br/>
		/// Set the first byte of `data` to the Report ID of the report to be read.<br/>
		/// Make sure to allow space for this extra byte in `data`. Upon return, the<br/>
		/// first byte will still contain the Report ID, and the report data will start<br/>
		/// in data[1].<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetInputReport(ref SDLHidDevice dev, ref byte data, nuint length)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (byte* pdata = &data)
				{
					int ret = HidGetInputReportNative((SDLHidDevice*)pdev, (byte*)pdata, length);
					return ret;
				}
			}
		}

		/// <summary>
		/// Close a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidCloseNative(SDLHidDevice* dev)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, int>)funcTable[968])(dev);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[968])((nint)dev);
			#endif
		}

		/// <summary>
		/// Close a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidClose(SDLHidDevice* dev)
		{
			int ret = HidCloseNative(dev);
			return ret;
		}

		/// <summary>
		/// Close a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidClose(ref SDLHidDevice dev)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidCloseNative((SDLHidDevice*)pdev);
				return ret;
			}
		}

		/// <summary>
		/// Get The Manufacturer String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidGetManufacturerStringNative(SDLHidDevice* dev, char* str, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, char*, nuint, int>)funcTable[969])(dev, str, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[969])((nint)dev, (nint)str, maxlen);
			#endif
		}

		/// <summary>
		/// Get The Manufacturer String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetManufacturerString(SDLHidDevice* dev, char* str, nuint maxlen)
		{
			int ret = HidGetManufacturerStringNative(dev, str, maxlen);
			return ret;
		}

		/// <summary>
		/// Get The Manufacturer String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetManufacturerString(ref SDLHidDevice dev, char* str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidGetManufacturerStringNative((SDLHidDevice*)pdev, str, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get The Manufacturer String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetManufacturerString(SDLHidDevice* dev, ref char str, nuint maxlen)
		{
			fixed (char* pstr = &str)
			{
				int ret = HidGetManufacturerStringNative(dev, (char*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get The Manufacturer String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetManufacturerString(SDLHidDevice* dev, ref string str, nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = HidGetManufacturerStringNative(dev, pStr0, maxlen);
			str = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get The Manufacturer String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetManufacturerString(ref SDLHidDevice dev, ref char str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (char* pstr = &str)
				{
					int ret = HidGetManufacturerStringNative((SDLHidDevice*)pdev, (char*)pstr, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get The Manufacturer String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetManufacturerString(ref SDLHidDevice dev, ref string str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				int ret = HidGetManufacturerStringNative((SDLHidDevice*)pdev, pStr0, maxlen);
				str = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get The Product String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidGetProductStringNative(SDLHidDevice* dev, char* str, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, char*, nuint, int>)funcTable[970])(dev, str, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[970])((nint)dev, (nint)str, maxlen);
			#endif
		}

		/// <summary>
		/// Get The Product String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetProductString(SDLHidDevice* dev, char* str, nuint maxlen)
		{
			int ret = HidGetProductStringNative(dev, str, maxlen);
			return ret;
		}

		/// <summary>
		/// Get The Product String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetProductString(ref SDLHidDevice dev, char* str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidGetProductStringNative((SDLHidDevice*)pdev, str, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get The Product String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetProductString(SDLHidDevice* dev, ref char str, nuint maxlen)
		{
			fixed (char* pstr = &str)
			{
				int ret = HidGetProductStringNative(dev, (char*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get The Product String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetProductString(SDLHidDevice* dev, ref string str, nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = HidGetProductStringNative(dev, pStr0, maxlen);
			str = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get The Product String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetProductString(ref SDLHidDevice dev, ref char str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (char* pstr = &str)
				{
					int ret = HidGetProductStringNative((SDLHidDevice*)pdev, (char*)pstr, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get The Product String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetProductString(ref SDLHidDevice dev, ref string str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				int ret = HidGetProductStringNative((SDLHidDevice*)pdev, pStr0, maxlen);
				str = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get The Serial Number String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidGetSerialNumberStringNative(SDLHidDevice* dev, char* str, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, char*, nuint, int>)funcTable[971])(dev, str, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[971])((nint)dev, (nint)str, maxlen);
			#endif
		}

		/// <summary>
		/// Get The Serial Number String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetSerialNumberString(SDLHidDevice* dev, char* str, nuint maxlen)
		{
			int ret = HidGetSerialNumberStringNative(dev, str, maxlen);
			return ret;
		}

		/// <summary>
		/// Get The Serial Number String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetSerialNumberString(ref SDLHidDevice dev, char* str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidGetSerialNumberStringNative((SDLHidDevice*)pdev, str, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get The Serial Number String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetSerialNumberString(SDLHidDevice* dev, ref char str, nuint maxlen)
		{
			fixed (char* pstr = &str)
			{
				int ret = HidGetSerialNumberStringNative(dev, (char*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get The Serial Number String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetSerialNumberString(SDLHidDevice* dev, ref string str, nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = HidGetSerialNumberStringNative(dev, pStr0, maxlen);
			str = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get The Serial Number String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetSerialNumberString(ref SDLHidDevice dev, ref char str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (char* pstr = &str)
				{
					int ret = HidGetSerialNumberStringNative((SDLHidDevice*)pdev, (char*)pstr, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get The Serial Number String from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetSerialNumberString(ref SDLHidDevice dev, ref string str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				int ret = HidGetSerialNumberStringNative((SDLHidDevice*)pdev, pStr0, maxlen);
				str = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get a string from a HID device, based on its string index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidGetIndexedStringNative(SDLHidDevice* dev, int stringIndex, char* str, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, int, char*, nuint, int>)funcTable[972])(dev, stringIndex, str, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, nint, nuint, int>)funcTable[972])((nint)dev, stringIndex, (nint)str, maxlen);
			#endif
		}

		/// <summary>
		/// Get a string from a HID device, based on its string index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetIndexedString(SDLHidDevice* dev, int stringIndex, char* str, nuint maxlen)
		{
			int ret = HidGetIndexedStringNative(dev, stringIndex, str, maxlen);
			return ret;
		}

		/// <summary>
		/// Get a string from a HID device, based on its string index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetIndexedString(ref SDLHidDevice dev, int stringIndex, char* str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidGetIndexedStringNative((SDLHidDevice*)pdev, stringIndex, str, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get a string from a HID device, based on its string index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetIndexedString(SDLHidDevice* dev, int stringIndex, ref char str, nuint maxlen)
		{
			fixed (char* pstr = &str)
			{
				int ret = HidGetIndexedStringNative(dev, stringIndex, (char*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Get a string from a HID device, based on its string index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetIndexedString(SDLHidDevice* dev, int stringIndex, ref string str, nuint maxlen)
		{
			char* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF16(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = (char*)pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = '\0';
			}
			int ret = HidGetIndexedStringNative(dev, stringIndex, pStr0, maxlen);
			str = Utils.DecodeStringUTF16(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get a string from a HID device, based on its string index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetIndexedString(ref SDLHidDevice dev, int stringIndex, ref char str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (char* pstr = &str)
				{
					int ret = HidGetIndexedStringNative((SDLHidDevice*)pdev, stringIndex, (char*)pstr, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get a string from a HID device, based on its string index.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetIndexedString(ref SDLHidDevice dev, int stringIndex, ref string str, nuint maxlen)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				char* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF16(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<char>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = (char*)pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF16(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = '\0';
				}
				int ret = HidGetIndexedStringNative((SDLHidDevice*)pdev, stringIndex, pStr0, maxlen);
				str = Utils.DecodeStringUTF16(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get the device info from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLHidDeviceInfo* HidGetDeviceInfoNative(SDLHidDevice* dev)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, SDLHidDeviceInfo*>)funcTable[973])(dev);
			#else
			return (SDLHidDeviceInfo*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[973])((nint)dev);
			#endif
		}

		/// <summary>
		/// Get the device info from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDeviceInfo* HidGetDeviceInfo(SDLHidDevice* dev)
		{
			SDLHidDeviceInfo* ret = HidGetDeviceInfoNative(dev);
			return ret;
		}

		/// <summary>
		/// Get the device info from a HID device.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLHidDeviceInfo* HidGetDeviceInfo(ref SDLHidDevice dev)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				SDLHidDeviceInfo* ret = HidGetDeviceInfoNative((SDLHidDevice*)pdev);
				return ret;
			}
		}

		/// <summary>
		/// Get a report descriptor from a HID device.<br/>
		/// User has to provide a preallocated buffer where descriptor will be copied<br/>
		/// to. The recommended size for a preallocated buffer is 4096 bytes.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HidGetReportDescriptorNative(SDLHidDevice* dev, byte* buf, nuint bufSize)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLHidDevice*, byte*, nuint, int>)funcTable[974])(dev, buf, bufSize);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[974])((nint)dev, (nint)buf, bufSize);
			#endif
		}

		/// <summary>
		/// Get a report descriptor from a HID device.<br/>
		/// User has to provide a preallocated buffer where descriptor will be copied<br/>
		/// to. The recommended size for a preallocated buffer is 4096 bytes.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetReportDescriptor(SDLHidDevice* dev, byte* buf, nuint bufSize)
		{
			int ret = HidGetReportDescriptorNative(dev, buf, bufSize);
			return ret;
		}

		/// <summary>
		/// Get a report descriptor from a HID device.<br/>
		/// User has to provide a preallocated buffer where descriptor will be copied<br/>
		/// to. The recommended size for a preallocated buffer is 4096 bytes.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetReportDescriptor(ref SDLHidDevice dev, byte* buf, nuint bufSize)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				int ret = HidGetReportDescriptorNative((SDLHidDevice*)pdev, buf, bufSize);
				return ret;
			}
		}

		/// <summary>
		/// Get a report descriptor from a HID device.<br/>
		/// User has to provide a preallocated buffer where descriptor will be copied<br/>
		/// to. The recommended size for a preallocated buffer is 4096 bytes.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetReportDescriptor(SDLHidDevice* dev, ref byte buf, nuint bufSize)
		{
			fixed (byte* pbuf = &buf)
			{
				int ret = HidGetReportDescriptorNative(dev, (byte*)pbuf, bufSize);
				return ret;
			}
		}

		/// <summary>
		/// Get a report descriptor from a HID device.<br/>
		/// User has to provide a preallocated buffer where descriptor will be copied<br/>
		/// to. The recommended size for a preallocated buffer is 4096 bytes.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int HidGetReportDescriptor(ref SDLHidDevice dev, ref byte buf, nuint bufSize)
		{
			fixed (SDLHidDevice* pdev = &dev)
			{
				fixed (byte* pbuf = &buf)
				{
					int ret = HidGetReportDescriptorNative((SDLHidDevice*)pdev, (byte*)pbuf, bufSize);
					return ret;
				}
			}
		}

		/// <summary>
		/// Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void HidBleScanNative(byte active)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[975])(active);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[975])(active);
			#endif
		}

		/// <summary>
		/// Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void HidBleScan(bool active)
		{
			HidBleScanNative(active ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetHintWithPriorityNative(byte* name, byte* value, SDLHintPriority priority)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, SDLHintPriority, byte>)funcTable[976])(name, value, priority);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, SDLHintPriority, byte>)funcTable[976])((nint)name, (nint)value, priority);
			#endif
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(byte* name, byte* value, SDLHintPriority priority)
		{
			byte ret = SetHintWithPriorityNative(name, value, priority);
			return ret != 0;
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(ref byte name, byte* value, SDLHintPriority priority)
		{
			fixed (byte* pname = &name)
			{
				byte ret = SetHintWithPriorityNative((byte*)pname, value, priority);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(ReadOnlySpan<byte> name, byte* value, SDLHintPriority priority)
		{
			fixed (byte* pname = name)
			{
				byte ret = SetHintWithPriorityNative((byte*)pname, value, priority);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(string name, byte* value, SDLHintPriority priority)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetHintWithPriorityNative(pStr0, value, priority);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(byte* name, ref byte value, SDLHintPriority priority)
		{
			fixed (byte* pvalue = &value)
			{
				byte ret = SetHintWithPriorityNative(name, (byte*)pvalue, priority);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(byte* name, ReadOnlySpan<byte> value, SDLHintPriority priority)
		{
			fixed (byte* pvalue = value)
			{
				byte ret = SetHintWithPriorityNative(name, (byte*)pvalue, priority);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(byte* name, string value, SDLHintPriority priority)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (value != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(value);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetHintWithPriorityNative(name, pStr0, priority);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(ref byte name, ref byte value, SDLHintPriority priority)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pvalue = &value)
				{
					byte ret = SetHintWithPriorityNative((byte*)pname, (byte*)pvalue, priority);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(ReadOnlySpan<byte> name, ReadOnlySpan<byte> value, SDLHintPriority priority)
		{
			fixed (byte* pname = name)
			{
				fixed (byte* pvalue = value)
				{
					byte ret = SetHintWithPriorityNative((byte*)pname, (byte*)pvalue, priority);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set a hint with a specific priority.<br/>
		/// The priority controls the behavior when setting a hint that already has a<br/>
		/// value. Hints will replace existing hints of their priority and lower.<br/>
		/// Environment variables are considered to have override priority.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHintWithPriority(string name, string value, SDLHintPriority priority)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (value != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(value);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = SetHintWithPriorityNative(pStr0, pStr1, priority);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetHintNative(byte* name, byte* value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte>)funcTable[977])(name, value);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[977])((nint)name, (nint)value);
			#endif
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(byte* name, byte* value)
		{
			byte ret = SetHintNative(name, value);
			return ret != 0;
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(ref byte name, byte* value)
		{
			fixed (byte* pname = &name)
			{
				byte ret = SetHintNative((byte*)pname, value);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(ReadOnlySpan<byte> name, byte* value)
		{
			fixed (byte* pname = name)
			{
				byte ret = SetHintNative((byte*)pname, value);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(string name, byte* value)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetHintNative(pStr0, value);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(byte* name, ref byte value)
		{
			fixed (byte* pvalue = &value)
			{
				byte ret = SetHintNative(name, (byte*)pvalue);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(byte* name, ReadOnlySpan<byte> value)
		{
			fixed (byte* pvalue = value)
			{
				byte ret = SetHintNative(name, (byte*)pvalue);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(byte* name, string value)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (value != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(value);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(value, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetHintNative(name, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(ref byte name, ref byte value)
		{
			fixed (byte* pname = &name)
			{
				fixed (byte* pvalue = &value)
				{
					byte ret = SetHintNative((byte*)pname, (byte*)pvalue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(ReadOnlySpan<byte> name, ReadOnlySpan<byte> value)
		{
			fixed (byte* pname = name)
			{
				fixed (byte* pvalue = value)
				{
					byte ret = SetHintNative((byte*)pname, (byte*)pvalue);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Set a hint with normal priority.<br/>
		/// Hints will not be set if there is an existing override hint or environment<br/>
		/// variable that takes precedence. You can use SDL_SetHintWithPriority() to<br/>
		/// set the hint with override priority instead.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetHint(string name, string value)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (value != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(value);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(value, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = SetHintNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Reset a hint to the default value.<br/>
		/// This will reset a hint to the value of the environment variable, or NULL if<br/>
		/// the environment isn't set. Callbacks will be called normally with this<br/>
		/// change.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ResetHintNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)funcTable[978])(name);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[978])((nint)name);
			#endif
		}

		/// <summary>
		/// Reset a hint to the default value.<br/>
		/// This will reset a hint to the value of the environment variable, or NULL if<br/>
		/// the environment isn't set. Callbacks will be called normally with this<br/>
		/// change.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool ResetHint(byte* name)
		{
			byte ret = ResetHintNative(name);
			return ret != 0;
		}

		/// <summary>
		/// Reset a hint to the default value.<br/>
		/// This will reset a hint to the value of the environment variable, or NULL if<br/>
		/// the environment isn't set. Callbacks will be called normally with this<br/>
		/// change.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool ResetHint(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte ret = ResetHintNative((byte*)pname);
				return ret != 0;
			}
		}

		/// <summary>
		/// Reset a hint to the default value.<br/>
		/// This will reset a hint to the value of the environment variable, or NULL if<br/>
		/// the environment isn't set. Callbacks will be called normally with this<br/>
		/// change.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool ResetHint(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte ret = ResetHintNative((byte*)pname);
				return ret != 0;
			}
		}

		/// <summary>
		/// Reset a hint to the default value.<br/>
		/// This will reset a hint to the value of the environment variable, or NULL if<br/>
		/// the environment isn't set. Callbacks will be called normally with this<br/>
		/// change.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool ResetHint(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ResetHintNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Reset all hints to the default values.<br/>
		/// This will reset all hints to the value of the associated environment<br/>
		/// variable, or NULL if the environment isn't set. Callbacks will be called<br/>
		/// normally with this change.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResetHintsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[979])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[979])();
			#endif
		}

		/// <summary>
		/// Reset all hints to the default values.<br/>
		/// This will reset all hints to the value of the associated environment<br/>
		/// variable, or NULL if the environment isn't set. Callbacks will be called<br/>
		/// normally with this change.<br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void ResetHints()
		{
			ResetHintsNative();
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetHintNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[980])(name);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[980])((nint)name);
			#endif
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetHint(byte* name)
		{
			byte* ret = GetHintNative(name);
			return ret;
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetHintS(byte* name)
		{
			string ret = Utils.DecodeStringUTF8(GetHintNative(name));
			return ret;
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetHint(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				byte* ret = GetHintNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetHintS(ref byte name)
		{
			fixed (byte* pname = &name)
			{
				string ret = Utils.DecodeStringUTF8(GetHintNative((byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetHint(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				byte* ret = GetHintNative((byte*)pname);
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetHintS(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname = name)
			{
				string ret = Utils.DecodeStringUTF8(GetHintNative((byte*)pname));
				return ret;
			}
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* GetHint(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = GetHintNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the value of a hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, however the<br/>
		/// return value only remains valid until the hint is changed; if<br/>
		/// another thread might do so, the app should supply locks<br/>
		/// and/or make a copy of the string. Note that using a hint<br/>
		/// callback instead is always thread-safe, as SDL holds a lock<br/>
		/// on the thread subsystem during the callback.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string GetHintS(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(GetHintNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Get the boolean value of a hint variable.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetHintBooleanNative(byte* name, byte defaultValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte, byte>)funcTable[981])(name, defaultValue);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte, byte>)funcTable[981])((nint)name, defaultValue);
			#endif
		}

		/// <summary>
		/// Get the boolean value of a hint variable.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetHintBoolean(byte* name, bool defaultValue)
		{
			byte ret = GetHintBooleanNative(name, defaultValue ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// Get the boolean value of a hint variable.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetHintBoolean(ref byte name, bool defaultValue)
		{
			fixed (byte* pname = &name)
			{
				byte ret = GetHintBooleanNative((byte*)pname, defaultValue ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the boolean value of a hint variable.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetHintBoolean(ReadOnlySpan<byte> name, bool defaultValue)
		{
			fixed (byte* pname = name)
			{
				byte ret = GetHintBooleanNative((byte*)pname, defaultValue ? (byte)1 : (byte)0);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the boolean value of a hint variable.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetHintBoolean(string name, bool defaultValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = GetHintBooleanNative(pStr0, defaultValue ? (byte)1 : (byte)0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Add a function to watch a particular hint.<br/>
		/// The callback function is called _during_ this function, to provide it an<br/>
		/// initial value, and again each time the hint's value changes.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AddHintCallbackNative(byte* name, SDLHintCallback callback, void* userdata)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, delegate*<void*, byte*, byte*, byte*, void>, void*, byte>)funcTable[982])(name, (delegate*<void*, byte*, byte*, byte*, void>)Utils.GetFunctionPointerForDelegate(callback), userdata);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[982])((nint)name, (nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Add a function to watch a particular hint.<br/>
		/// The callback function is called _during_ this function, to provide it an<br/>
		/// initial value, and again each time the hint's value changes.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddHintCallback(byte* name, SDLHintCallback callback, void* userdata)
		{
			byte ret = AddHintCallbackNative(name, callback, userdata);
			return ret != 0;
		}

		/// <summary>
		/// Add a function to watch a particular hint.<br/>
		/// The callback function is called _during_ this function, to provide it an<br/>
		/// initial value, and again each time the hint's value changes.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddHintCallback(ref byte name, SDLHintCallback callback, void* userdata)
		{
			fixed (byte* pname = &name)
			{
				byte ret = AddHintCallbackNative((byte*)pname, callback, userdata);
				return ret != 0;
			}
		}

		/// <summary>
		/// Add a function to watch a particular hint.<br/>
		/// The callback function is called _during_ this function, to provide it an<br/>
		/// initial value, and again each time the hint's value changes.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddHintCallback(ReadOnlySpan<byte> name, SDLHintCallback callback, void* userdata)
		{
			fixed (byte* pname = name)
			{
				byte ret = AddHintCallbackNative((byte*)pname, callback, userdata);
				return ret != 0;
			}
		}

		/// <summary>
		/// Add a function to watch a particular hint.<br/>
		/// The callback function is called _during_ this function, to provide it an<br/>
		/// initial value, and again each time the hint's value changes.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddHintCallback(string name, SDLHintCallback callback, void* userdata)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = AddHintCallbackNative(pStr0, callback, userdata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Remove a function watching a particular hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RemoveHintCallbackNative(byte* name, SDLHintCallback callback, void* userdata)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, delegate*<void*, byte*, byte*, byte*, void>, void*, void>)funcTable[983])(name, (delegate*<void*, byte*, byte*, byte*, void>)Utils.GetFunctionPointerForDelegate(callback), userdata);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[983])((nint)name, (nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata);
			#endif
		}

		/// <summary>
		/// Remove a function watching a particular hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void RemoveHintCallback(byte* name, SDLHintCallback callback, void* userdata)
		{
			RemoveHintCallbackNative(name, callback, userdata);
		}

		/// <summary>
		/// Remove a function watching a particular hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void RemoveHintCallback(ref byte name, SDLHintCallback callback, void* userdata)
		{
			fixed (byte* pname = &name)
			{
				RemoveHintCallbackNative((byte*)pname, callback, userdata);
			}
		}

		/// <summary>
		/// Remove a function watching a particular hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void RemoveHintCallback(ReadOnlySpan<byte> name, SDLHintCallback callback, void* userdata)
		{
			fixed (byte* pname = name)
			{
				RemoveHintCallbackNative((byte*)pname, callback, userdata);
			}
		}

		/// <summary>
		/// Remove a function watching a particular hint.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void RemoveHintCallback(string name, SDLHintCallback callback, void* userdata)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			RemoveHintCallbackNative(pStr0, callback, userdata);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Initialize the SDL library.<br/>
		/// SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the<br/>
		/// two may be used interchangeably. Though for readability of your code<br/>
		/// SDL_InitSubSystem() might be preferred.<br/>
		/// The file I/O (for example: SDL_IOFromFile) and threading (SDL_CreateThread)<br/>
		/// subsystems are initialized by default. Message boxes<br/>
		/// (SDL_ShowSimpleMessageBox) also attempt to work without initializing the<br/>
		/// video subsystem, in hopes of being useful in showing an error dialog when<br/>
		/// SDL_Init fails. You must specifically initialize other subsystems if you<br/>
		/// use them in your application.<br/>
		/// Logging (such as SDL_Log) works without initialization, too.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_INIT_AUDIO`: audio subsystem; automatically initializes the events<br/>
		/// subsystem<br/>
		/// - `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events<br/>
		/// subsystem, should be initialized on the main thread.<br/>
		/// - `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the<br/>
		/// events subsystem<br/>
		/// - `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem<br/>
		/// - `SDL_INIT_GAMEPAD`: gamepad subsystem; automatically initializes the<br/>
		/// joystick subsystem<br/>
		/// - `SDL_INIT_EVENTS`: events subsystem<br/>
		/// - `SDL_INIT_SENSOR`: sensor subsystem; automatically initializes the events<br/>
		/// subsystem<br/>
		/// - `SDL_INIT_CAMERA`: camera subsystem; automatically initializes the events<br/>
		/// subsystem<br/>
		/// Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()<br/>
		/// for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or<br/>
		/// call SDL_Quit() to force shutdown). If a subsystem is already loaded then<br/>
		/// this call will increase the ref-count and return.<br/>
		/// Consider reporting some basic metadata about your application before<br/>
		/// calling SDL_Init, using either SDL_SetAppMetadata() or<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte InitNative(SDLInitFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLInitFlags, byte>)funcTable[984])(flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SDLInitFlags, byte>)funcTable[984])(flags);
			#endif
		}

		/// <summary>
		/// Initialize the SDL library.<br/>
		/// SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the<br/>
		/// two may be used interchangeably. Though for readability of your code<br/>
		/// SDL_InitSubSystem() might be preferred.<br/>
		/// The file I/O (for example: SDL_IOFromFile) and threading (SDL_CreateThread)<br/>
		/// subsystems are initialized by default. Message boxes<br/>
		/// (SDL_ShowSimpleMessageBox) also attempt to work without initializing the<br/>
		/// video subsystem, in hopes of being useful in showing an error dialog when<br/>
		/// SDL_Init fails. You must specifically initialize other subsystems if you<br/>
		/// use them in your application.<br/>
		/// Logging (such as SDL_Log) works without initialization, too.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_INIT_AUDIO`: audio subsystem; automatically initializes the events<br/>
		/// subsystem<br/>
		/// - `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events<br/>
		/// subsystem, should be initialized on the main thread.<br/>
		/// - `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the<br/>
		/// events subsystem<br/>
		/// - `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem<br/>
		/// - `SDL_INIT_GAMEPAD`: gamepad subsystem; automatically initializes the<br/>
		/// joystick subsystem<br/>
		/// - `SDL_INIT_EVENTS`: events subsystem<br/>
		/// - `SDL_INIT_SENSOR`: sensor subsystem; automatically initializes the events<br/>
		/// subsystem<br/>
		/// - `SDL_INIT_CAMERA`: camera subsystem; automatically initializes the events<br/>
		/// subsystem<br/>
		/// Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()<br/>
		/// for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or<br/>
		/// call SDL_Quit() to force shutdown). If a subsystem is already loaded then<br/>
		/// this call will increase the ref-count and return.<br/>
		/// Consider reporting some basic metadata about your application before<br/>
		/// calling SDL_Init, using either SDL_SetAppMetadata() or<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool Init(SDLInitFlags flags)
		{
			byte ret = InitNative(flags);
			return ret != 0;
		}

		/// <summary>
		/// Compatibility function to initialize the SDL library.<br/>
		/// This function and SDL_Init() are interchangeable.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte InitSubSystemNative(SDLInitFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLInitFlags, byte>)funcTable[985])(flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<SDLInitFlags, byte>)funcTable[985])(flags);
			#endif
		}

		/// <summary>
		/// Compatibility function to initialize the SDL library.<br/>
		/// This function and SDL_Init() are interchangeable.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool InitSubSystem(SDLInitFlags flags)
		{
			byte ret = InitSubSystemNative(flags);
			return ret != 0;
		}

		/// <summary>
		/// Shut down specific SDL subsystems.<br/>
		/// You still need to call SDL_Quit() even if you close all open subsystems<br/>
		/// with SDL_QuitSubSystem().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QuitSubSystemNative(SDLInitFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLInitFlags, void>)funcTable[986])(flags);
			#else
			((delegate* unmanaged[Cdecl]<SDLInitFlags, void>)funcTable[986])(flags);
			#endif
		}

		/// <summary>
		/// Shut down specific SDL subsystems.<br/>
		/// You still need to call SDL_Quit() even if you close all open subsystems<br/>
		/// with SDL_QuitSubSystem().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void QuitSubSystem(SDLInitFlags flags)
		{
			QuitSubSystemNative(flags);
		}

		/// <summary>
		/// Get a mask of the specified subsystems which are currently initialized.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLInitFlags WasInitNative(SDLInitFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLInitFlags, SDLInitFlags>)funcTable[987])(flags);
			#else
			return (SDLInitFlags)((delegate* unmanaged[Cdecl]<SDLInitFlags, SDLInitFlags>)funcTable[987])(flags);
			#endif
		}

		/// <summary>
		/// Get a mask of the specified subsystems which are currently initialized.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLInitFlags WasInit(SDLInitFlags flags)
		{
			SDLInitFlags ret = WasInitNative(flags);
			return ret;
		}

		/// <summary>
		/// Clean up all initialized subsystems.<br/>
		/// You should call this function even if you have already shutdown each<br/>
		/// initialized subsystem with SDL_QuitSubSystem(). It is safe to call this<br/>
		/// function even in the case of errors in initialization.<br/>
		/// You can use this function with atexit() to ensure that it is run when your<br/>
		/// application is shutdown, but it is not wise to do this from a library or<br/>
		/// other dynamically loaded code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QuitNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[988])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[988])();
			#endif
		}

		/// <summary>
		/// Clean up all initialized subsystems.<br/>
		/// You should call this function even if you have already shutdown each<br/>
		/// initialized subsystem with SDL_QuitSubSystem(). It is safe to call this<br/>
		/// function even in the case of errors in initialization.<br/>
		/// You can use this function with atexit() to ensure that it is run when your<br/>
		/// application is shutdown, but it is not wise to do this from a library or<br/>
		/// other dynamically loaded code.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void Quit()
		{
			QuitNative();
		}

		/// <summary>
		/// Return whether this is the main thread.<br/>
		/// On Apple platforms, the main thread is the thread that runs your program's<br/>
		/// main() entry point. On other platforms, the main thread is the one that<br/>
		/// calls SDL_Init(SDL_INIT_VIDEO), which should usually be the one that runs<br/>
		/// your program's main() entry point. If you are using the main callbacks,<br/>
		/// SDL_AppInit(), SDL_AppIterate(), and SDL_AppQuit() are all called on the<br/>
		/// main thread.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsMainThreadNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[989])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[989])();
			#endif
		}

		/// <summary>
		/// Return whether this is the main thread.<br/>
		/// On Apple platforms, the main thread is the thread that runs your program's<br/>
		/// main() entry point. On other platforms, the main thread is the one that<br/>
		/// calls SDL_Init(SDL_INIT_VIDEO), which should usually be the one that runs<br/>
		/// your program's main() entry point. If you are using the main callbacks,<br/>
		/// SDL_AppInit(), SDL_AppIterate(), and SDL_AppQuit() are all called on the<br/>
		/// main thread.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool IsMainThread()
		{
			byte ret = IsMainThreadNative();
			return ret != 0;
		}

		/// <summary>
		/// Call a function on the main thread during event processing.<br/>
		/// If this is called on the main thread, the callback is executed immediately.<br/>
		/// If this is called on another thread, this callback is queued for execution<br/>
		/// on the main thread during event processing.<br/>
		/// Be careful of deadlocks when using this functionality. You should not have<br/>
		/// the main thread wait for the current thread while this function is being<br/>
		/// called with `wait_complete` true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RunOnMainThreadNative(SDLMainThreadCallback callback, void* userdata, byte waitComplete)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<delegate*<void*, void>, void*, byte, byte>)funcTable[990])((delegate*<void*, void>)Utils.GetFunctionPointerForDelegate(callback), userdata, waitComplete);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte, byte>)funcTable[990])((nint)Utils.GetFunctionPointerForDelegate(callback), (nint)userdata, waitComplete);
			#endif
		}

		/// <summary>
		/// Call a function on the main thread during event processing.<br/>
		/// If this is called on the main thread, the callback is executed immediately.<br/>
		/// If this is called on another thread, this callback is queued for execution<br/>
		/// on the main thread during event processing.<br/>
		/// Be careful of deadlocks when using this functionality. You should not have<br/>
		/// the main thread wait for the current thread while this function is being<br/>
		/// called with `wait_complete` true.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool RunOnMainThread(SDLMainThreadCallback callback, void* userdata, bool waitComplete)
		{
			byte ret = RunOnMainThreadNative(callback, userdata, waitComplete ? (byte)1 : (byte)0);
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetAppMetadataNative(byte* appname, byte* appversion, byte* appidentifier)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*, byte>)funcTable[991])(appname, appversion, appidentifier);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[991])((nint)appname, (nint)appversion, (nint)appidentifier);
			#endif
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, byte* appversion, byte* appidentifier)
		{
			byte ret = SetAppMetadataNative(appname, appversion, appidentifier);
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ref byte appname, byte* appversion, byte* appidentifier)
		{
			fixed (byte* pappname = &appname)
			{
				byte ret = SetAppMetadataNative((byte*)pappname, appversion, appidentifier);
				return ret != 0;
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ReadOnlySpan<byte> appname, byte* appversion, byte* appidentifier)
		{
			fixed (byte* pappname = appname)
			{
				byte ret = SetAppMetadataNative((byte*)pappname, appversion, appidentifier);
				return ret != 0;
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(string appname, byte* appversion, byte* appidentifier)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (appname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(appname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(appname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetAppMetadataNative(pStr0, appversion, appidentifier);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, ref byte appversion, byte* appidentifier)
		{
			fixed (byte* pappversion = &appversion)
			{
				byte ret = SetAppMetadataNative(appname, (byte*)pappversion, appidentifier);
				return ret != 0;
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, ReadOnlySpan<byte> appversion, byte* appidentifier)
		{
			fixed (byte* pappversion = appversion)
			{
				byte ret = SetAppMetadataNative(appname, (byte*)pappversion, appidentifier);
				return ret != 0;
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, string appversion, byte* appidentifier)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (appversion != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(appversion);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(appversion, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetAppMetadataNative(appname, pStr0, appidentifier);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ref byte appname, ref byte appversion, byte* appidentifier)
		{
			fixed (byte* pappname = &appname)
			{
				fixed (byte* pappversion = &appversion)
				{
					byte ret = SetAppMetadataNative((byte*)pappname, (byte*)pappversion, appidentifier);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ReadOnlySpan<byte> appname, ReadOnlySpan<byte> appversion, byte* appidentifier)
		{
			fixed (byte* pappname = appname)
			{
				fixed (byte* pappversion = appversion)
				{
					byte ret = SetAppMetadataNative((byte*)pappname, (byte*)pappversion, appidentifier);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(string appname, string appversion, byte* appidentifier)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (appname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(appname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(appname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (appversion != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(appversion);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(appversion, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = SetAppMetadataNative(pStr0, pStr1, appidentifier);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, byte* appversion, ref byte appidentifier)
		{
			fixed (byte* pappidentifier = &appidentifier)
			{
				byte ret = SetAppMetadataNative(appname, appversion, (byte*)pappidentifier);
				return ret != 0;
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, byte* appversion, ReadOnlySpan<byte> appidentifier)
		{
			fixed (byte* pappidentifier = appidentifier)
			{
				byte ret = SetAppMetadataNative(appname, appversion, (byte*)pappidentifier);
				return ret != 0;
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, byte* appversion, string appidentifier)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (appidentifier != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(appidentifier);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(appidentifier, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetAppMetadataNative(appname, appversion, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ref byte appname, byte* appversion, ref byte appidentifier)
		{
			fixed (byte* pappname = &appname)
			{
				fixed (byte* pappidentifier = &appidentifier)
				{
					byte ret = SetAppMetadataNative((byte*)pappname, appversion, (byte*)pappidentifier);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ReadOnlySpan<byte> appname, byte* appversion, ReadOnlySpan<byte> appidentifier)
		{
			fixed (byte* pappname = appname)
			{
				fixed (byte* pappidentifier = appidentifier)
				{
					byte ret = SetAppMetadataNative((byte*)pappname, appversion, (byte*)pappidentifier);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(string appname, byte* appversion, string appidentifier)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (appname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(appname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(appname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (appidentifier != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(appidentifier);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(appidentifier, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = SetAppMetadataNative(pStr0, appversion, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, ref byte appversion, ref byte appidentifier)
		{
			fixed (byte* pappversion = &appversion)
			{
				fixed (byte* pappidentifier = &appidentifier)
				{
					byte ret = SetAppMetadataNative(appname, (byte*)pappversion, (byte*)pappidentifier);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, ReadOnlySpan<byte> appversion, ReadOnlySpan<byte> appidentifier)
		{
			fixed (byte* pappversion = appversion)
			{
				fixed (byte* pappidentifier = appidentifier)
				{
					byte ret = SetAppMetadataNative(appname, (byte*)pappversion, (byte*)pappidentifier);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(byte* appname, string appversion, string appidentifier)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (appversion != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(appversion);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(appversion, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (appidentifier != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(appidentifier);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(appidentifier, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = SetAppMetadataNative(appname, pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ref byte appname, ref byte appversion, ref byte appidentifier)
		{
			fixed (byte* pappname = &appname)
			{
				fixed (byte* pappversion = &appversion)
				{
					fixed (byte* pappidentifier = &appidentifier)
					{
						byte ret = SetAppMetadataNative((byte*)pappname, (byte*)pappversion, (byte*)pappidentifier);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(ReadOnlySpan<byte> appname, ReadOnlySpan<byte> appversion, ReadOnlySpan<byte> appidentifier)
		{
			fixed (byte* pappname = appname)
			{
				fixed (byte* pappversion = appversion)
				{
					fixed (byte* pappidentifier = appidentifier)
					{
						byte ret = SetAppMetadataNative((byte*)pappname, (byte*)pappversion, (byte*)pappidentifier);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Specify basic metadata about your app.<br/>
		/// You can optionally provide metadata about your app to SDL. This is not<br/>
		/// required, but strongly encouraged.<br/>
		/// There are several locations where SDL can make use of metadata (an "About"<br/>
		/// box in the macOS menu bar, the name of the app can be shown on some audio<br/>
		/// mixers, etc). Any piece of metadata can be left as NULL, if a specific<br/>
		/// detail doesn't make sense for the app.<br/>
		/// This function should be called as early as possible, before SDL_Init.<br/>
		/// Multiple calls to this function are allowed, but various state might not<br/>
		/// change once it has been set up with a previous call to this function.<br/>
		/// Passing a NULL removes any previous metadata.<br/>
		/// This is a simplified interface for the most important information. You can<br/>
		/// supply significantly more detailed metadata with<br/>
		/// SDL_SetAppMetadataProperty().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetAppMetadata(string appname, string appversion, string appidentifier)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (appname != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(appname);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(appname, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (appversion != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(appversion);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(appversion, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (appidentifier != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(appidentifier);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(appidentifier, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			byte ret = SetAppMetadataNative(pStr0, pStr1, pStr2);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}
	}
}
