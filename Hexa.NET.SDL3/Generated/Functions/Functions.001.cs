// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Search a wide string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsstrS(ref char haystack, ref char needle)
		{
			fixed (char* phaystack = &haystack)
			{
				fixed (char* pneedle = &needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsstrNative((char*)phaystack, (char*)pneedle));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsstr(ReadOnlySpan<char> haystack, ReadOnlySpan<char> needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsstrNative((char*)phaystack, (char*)pneedle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsstrS(ReadOnlySpan<char> haystack, ReadOnlySpan<char> needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsstrNative((char*)phaystack, (char*)pneedle));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsstr(string haystack, string needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsstrNative(phaystack, pneedle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsstrS(string haystack, string needle)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsstrNative(phaystack, pneedle));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static char* WcsnstrNative(char* haystack, char* needle, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, char*>)funcTable[54])(haystack, needle, maxlen);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nint>)funcTable[54])((nint)haystack, (nint)needle, maxlen);
			#endif
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(char* haystack, char* needle, nuint maxlen)
		{
			char* ret = WcsnstrNative(haystack, needle, maxlen);
			return ret;
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(char* haystack, char* needle, nuint maxlen)
		{
			string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, needle, maxlen));
			return ret;
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(ref char haystack, char* needle, nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				char* ret = WcsnstrNative((char*)phaystack, needle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(ref char haystack, char* needle, nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, needle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(ReadOnlySpan<char> haystack, char* needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				char* ret = WcsnstrNative((char*)phaystack, needle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(ReadOnlySpan<char> haystack, char* needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, needle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(string haystack, char* needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				char* ret = WcsnstrNative(phaystack, needle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(string haystack, char* needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(phaystack, needle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(char* haystack, ref char needle, nuint maxlen)
		{
			fixed (char* pneedle = &needle)
			{
				char* ret = WcsnstrNative(haystack, (char*)pneedle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(char* haystack, ref char needle, nuint maxlen)
		{
			fixed (char* pneedle = &needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, (char*)pneedle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(char* haystack, ReadOnlySpan<char> needle, nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				char* ret = WcsnstrNative(haystack, (char*)pneedle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(char* haystack, ReadOnlySpan<char> needle, nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, (char*)pneedle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(char* haystack, string needle, nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				char* ret = WcsnstrNative(haystack, pneedle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(char* haystack, string needle, nuint maxlen)
		{
			fixed (char* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF16(WcsnstrNative(haystack, pneedle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(ref char haystack, ref char needle, nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				fixed (char* pneedle = &needle)
				{
					char* ret = WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(ref char haystack, ref char needle, nuint maxlen)
		{
			fixed (char* phaystack = &haystack)
			{
				fixed (char* pneedle = &needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(ReadOnlySpan<char> haystack, ReadOnlySpan<char> needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(ReadOnlySpan<char> haystack, ReadOnlySpan<char> needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsnstrNative((char*)phaystack, (char*)pneedle, maxlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static char* Wcsnstr(string haystack, string needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					char* ret = WcsnstrNative(phaystack, pneedle, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a wide string, up to n wide chars, for the first instance of a<br/>
		/// specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// value to end the string, or `maxlen` wide character have been examined. It<br/>
		/// is possible to use this function on a wide string without a null<br/>
		/// terminator.<br/>
		/// Note that this looks for strings of _wide characters_, not _codepoints_, so<br/>
		/// it's legal to search for malformed and incomplete UTF-16 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string WcsnstrS(string haystack, string needle, nuint maxlen)
		{
			fixed (char* phaystack = haystack)
			{
				fixed (char* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF16(WcsnstrNative(phaystack, pneedle, maxlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcscmpNative(char* str1, char* str2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, int>)funcTable[55])(str1, str2);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[55])((nint)str1, (nint)str2);
			#endif
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(char* str1, char* str2)
		{
			int ret = WcscmpNative(str1, str2);
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(ref char str1, char* str2)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcscmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(ReadOnlySpan<char> str1, char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(string str1, char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscmpNative(pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(char* str1, ref char str2)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcscmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(char* str1, ReadOnlySpan<char> str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(char* str1, string str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscmpNative(str1, pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(ref char str1, ref char str2)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcscmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(ReadOnlySpan<char> str1, ReadOnlySpan<char> str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings.<br/>
		/// This only compares wchar_t values until it hits a null-terminating<br/>
		/// character; it does not care if the string is well-formed UTF-16 (or UTF-32,<br/>
		/// depending on your platform's wchar_t size), or uses valid Unicode values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscmp(string str1, string str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscmpNative(pstr1, pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcsncmpNative(char* str1, char* str2, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, int>)funcTable[56])(str1, str2, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[56])((nint)str1, (nint)str2, maxlen);
			#endif
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(char* str1, char* str2, nuint maxlen)
		{
			int ret = WcsncmpNative(str1, str2, maxlen);
			return ret;
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(ref char str1, char* str2, nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcsncmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(ReadOnlySpan<char> str1, char* str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(string str1, char* str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncmpNative(pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(char* str1, ref char str2, nuint maxlen)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcsncmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(char* str1, ReadOnlySpan<char> str2, nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(char* str1, string str2, nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncmpNative(str1, pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(ref char str1, ref char str2, nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcsncmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(ReadOnlySpan<char> str1, ReadOnlySpan<char> str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings up to a number of wchar_t values.<br/>
		/// This only compares wchar_t values; it does not care if the string is<br/>
		/// well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),<br/>
		/// or uses valid Unicode values.<br/>
		/// Note that while this function is intended to be used with UTF-16 (or<br/>
		/// UTF-32, depending on your platform's definition of wchar_t), it is<br/>
		/// comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies<br/>
		/// a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16<br/>
		/// sequence, it will only compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of wchar_t to compare; if the strings<br/>
		/// match to this number of wide chars (or both have matched to a<br/>
		/// null-terminator character before this count), they will be considered<br/>
		/// equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncmp(string str1, string str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncmpNative(pstr1, pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcscasecmpNative(char* str1, char* str2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, int>)funcTable[57])(str1, str2);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[57])((nint)str1, (nint)str2);
			#endif
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(char* str1, char* str2)
		{
			int ret = WcscasecmpNative(str1, str2);
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(ref char str1, char* str2)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcscasecmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(ReadOnlySpan<char> str1, char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscasecmpNative((char*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(string str1, char* str2)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcscasecmpNative(pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(char* str1, ref char str2)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcscasecmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(char* str1, ReadOnlySpan<char> str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscasecmpNative(str1, (char*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(char* str1, string str2)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcscasecmpNative(str1, pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(ref char str1, ref char str2)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcscasecmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(ReadOnlySpan<char> str1, ReadOnlySpan<char> str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscasecmpNative((char*)pstr1, (char*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated wide strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcscasecmp(string str1, string str2)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcscasecmpNative(pstr1, pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcsncasecmpNative(char* str1, char* str2, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char*, nuint, int>)funcTable[58])(str1, str2, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[58])((nint)str1, (nint)str2, maxlen);
			#endif
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(char* str1, char* str2, nuint maxlen)
		{
			int ret = WcsncasecmpNative(str1, str2, maxlen);
			return ret;
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(ref char str1, char* str2, nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				int ret = WcsncasecmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(ReadOnlySpan<char> str1, char* str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncasecmpNative((char*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(string str1, char* str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				int ret = WcsncasecmpNative(pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(char* str1, ref char str2, nuint maxlen)
		{
			fixed (char* pstr2 = &str2)
			{
				int ret = WcsncasecmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(char* str1, ReadOnlySpan<char> str2, nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncasecmpNative(str1, (char*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(char* str1, string str2, nuint maxlen)
		{
			fixed (char* pstr2 = str2)
			{
				int ret = WcsncasecmpNative(str1, pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(ref char str1, ref char str2, nuint maxlen)
		{
			fixed (char* pstr1 = &str1)
			{
				fixed (char* pstr2 = &str2)
				{
					int ret = WcsncasecmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(ReadOnlySpan<char> str1, ReadOnlySpan<char> str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncasecmpNative((char*)pstr1, (char*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two wide strings, case-insensitively, up to a number of wchar_t.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Depending on your platform, "wchar_t" might be 2 bytes, and expected to be<br/>
		/// UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this<br/>
		/// handles Unicode, it expects the string to be well-formed and not a<br/>
		/// null-terminated string of arbitrary bytes. Characters that are not valid<br/>
		/// UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function might deal with variable-sized characters,<br/>
		/// `maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a<br/>
		/// multi-byte UTF-16 sequence, it may convert a portion of the final character<br/>
		/// to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not<br/>
		/// to overflow a buffer.<br/>
		/// `maxlen` specifies a maximum number of wchar_t values to compare; if the<br/>
		/// strings match to this number of wchar_t (or both have matched to a<br/>
		/// null-terminator character before this number of bytes), they will be<br/>
		/// considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static int Wcsncasecmp(string str1, string str2, nuint maxlen)
		{
			fixed (char* pstr1 = str1)
			{
				fixed (char* pstr2 = str2)
				{
					int ret = WcsncasecmpNative(pstr1, pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int WcstolNative(char* str, char** endp, int baseValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<char*, char**, int, int>)funcTable[59])(str, endp, baseValue);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[59])((nint)str, (nint)endp, baseValue);
			#endif
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(char* str, char** endp, int baseValue)
		{
			int ret = WcstolNative(str, endp, baseValue);
			return ret;
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(ref char str, char** endp, int baseValue)
		{
			fixed (char* pstr = &str)
			{
				int ret = WcstolNative((char*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(ReadOnlySpan<char> str, char** endp, int baseValue)
		{
			fixed (char* pstr = str)
			{
				int ret = WcstolNative((char*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(string str, char** endp, int baseValue)
		{
			fixed (char* pstr = str)
			{
				int ret = WcstolNative(pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(char* str, ref char* endp, int baseValue)
		{
			fixed (char** pendp = &endp)
			{
				int ret = WcstolNative(str, (char**)pendp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(ref char str, ref char* endp, int baseValue)
		{
			fixed (char* pstr = &str)
			{
				fixed (char** pendp = &endp)
				{
					int ret = WcstolNative((char*)pstr, (char**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(ReadOnlySpan<char> str, ref char* endp, int baseValue)
		{
			fixed (char* pstr = str)
			{
				fixed (char** pendp = &endp)
				{
					int ret = WcstolNative((char*)pstr, (char**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `long` from a wide string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static int Wcstol(string str, ref char* endp, int baseValue)
		{
			fixed (char* pstr = str)
			{
				fixed (char** pendp = &endp)
				{
					int ret = WcstolNative(pstr, (char**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strlen() but doesn't require access to a C runtime.<br/>
		/// Counts the bytes in `str`, excluding the null terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrlenNative(byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint>)funcTable[60])(str);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint>)funcTable[60])((nint)str);
			#endif
		}

		/// <summary>
		/// This works exactly like strlen() but doesn't require access to a C runtime.<br/>
		/// Counts the bytes in `str`, excluding the null terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlen(byte* str)
		{
			nuint ret = StrlenNative(str);
			return ret;
		}

		/// <summary>
		/// This works exactly like strlen() but doesn't require access to a C runtime.<br/>
		/// Counts the bytes in `str`, excluding the null terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlen(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				nuint ret = StrlenNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strlen() but doesn't require access to a C runtime.<br/>
		/// Counts the bytes in `str`, excluding the null terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlen(ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				nuint ret = StrlenNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strlen() but doesn't require access to a C runtime.<br/>
		/// Counts the bytes in `str`, excluding the null terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlen(string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlenNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` bytes in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strnlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrnlenNative(byte* str, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint, nuint>)funcTable[61])(str, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint, nuint>)funcTable[61])((nint)str, maxlen);
			#endif
		}

		/// <summary>
		/// This works exactly like strnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` bytes in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strnlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strnlen(byte* str, nuint maxlen)
		{
			nuint ret = StrnlenNative(str, maxlen);
			return ret;
		}

		/// <summary>
		/// This works exactly like strnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` bytes in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strnlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strnlen(ref byte str, nuint maxlen)
		{
			fixed (byte* pstr = &str)
			{
				nuint ret = StrnlenNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` bytes in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strnlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strnlen(ReadOnlySpan<byte> str, nuint maxlen)
		{
			fixed (byte* pstr = str)
			{
				nuint ret = StrnlenNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strnlen() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Counts up to a maximum of `maxlen` bytes in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need the length of a UTF-8 string, consider using SDL_utf8strnlen().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strnlen(string str, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrnlenNative(pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrlcpyNative(byte* dst, byte* src, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, nuint>)funcTable[62])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[62])((nint)dst, (nint)src, maxlen);
			#endif
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(byte* dst, byte* src, nuint maxlen)
		{
			nuint ret = StrlcpyNative(dst, src, maxlen);
			return ret;
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(ref byte dst, byte* src, nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				nuint ret = StrlcpyNative((byte*)pdst, src, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(ref string dst, byte* src, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcpyNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(byte* dst, ref byte src, nuint maxlen)
		{
			fixed (byte* psrc = &src)
			{
				nuint ret = StrlcpyNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(byte* dst, ReadOnlySpan<byte> src, nuint maxlen)
		{
			fixed (byte* psrc = src)
			{
				nuint ret = StrlcpyNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(byte* dst, string src, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (src != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(src);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcpyNative(dst, pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(ref byte dst, ref byte src, nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = &src)
				{
					nuint ret = StrlcpyNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(ref byte dst, ReadOnlySpan<byte> src, nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = src)
				{
					nuint ret = StrlcpyNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy a string.<br/>
		/// This function copies up to `maxlen` - 1 characters from `src` to `dst`,<br/>
		/// then appends a null terminator.<br/>
		/// If `maxlen` is 0, no characters are copied and no null terminator is<br/>
		/// written.<br/>
		/// If you want to copy an UTF-8 string but need to ensure that multi-byte<br/>
		/// sequences are not truncated, consider using SDL_utf8strlcpy().<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcpy(ref string dst, string src, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (src != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(src);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(src, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			nuint ret = StrlcpyNative(pStr0, pStr1, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint Utf8StrlcpyNative(byte* dst, byte* src, nuint dstBytes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, nuint>)funcTable[63])(dst, src, dstBytes);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[63])((nint)dst, (nint)src, dstBytes);
			#endif
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(byte* dst, byte* src, nuint dstBytes)
		{
			nuint ret = Utf8StrlcpyNative(dst, src, dstBytes);
			return ret;
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(ref byte dst, byte* src, nuint dstBytes)
		{
			fixed (byte* pdst = &dst)
			{
				nuint ret = Utf8StrlcpyNative((byte*)pdst, src, dstBytes);
				return ret;
			}
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(ref string dst, byte* src, nuint dstBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = Utf8StrlcpyNative(pStr0, src, dstBytes);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(byte* dst, ref byte src, nuint dstBytes)
		{
			fixed (byte* psrc = &src)
			{
				nuint ret = Utf8StrlcpyNative(dst, (byte*)psrc, dstBytes);
				return ret;
			}
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(byte* dst, ReadOnlySpan<byte> src, nuint dstBytes)
		{
			fixed (byte* psrc = src)
			{
				nuint ret = Utf8StrlcpyNative(dst, (byte*)psrc, dstBytes);
				return ret;
			}
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(byte* dst, string src, nuint dstBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (src != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(src);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = Utf8StrlcpyNative(dst, pStr0, dstBytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(ref byte dst, ref byte src, nuint dstBytes)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = &src)
				{
					nuint ret = Utf8StrlcpyNative((byte*)pdst, (byte*)psrc, dstBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(ref byte dst, ReadOnlySpan<byte> src, nuint dstBytes)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = src)
				{
					nuint ret = Utf8StrlcpyNative((byte*)pdst, (byte*)psrc, dstBytes);
					return ret;
				}
			}
		}

		/// <summary>
		/// Copy an UTF-8 string.<br/>
		/// This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while<br/>
		/// also ensuring that the string written to `dst` does not end in a truncated<br/>
		/// multi-byte sequence. Finally, it appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// Note that unlike SDL_strlcpy(), this function returns the number of bytes<br/>
		/// written, not the length of `src`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Utf8Strlcpy(ref string dst, string src, nuint dstBytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (src != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(src);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(src, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			nuint ret = Utf8StrlcpyNative(pStr0, pStr1, dstBytes);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint StrlcatNative(byte* dst, byte* src, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, nuint>)funcTable[64])(dst, src, maxlen);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nuint>)funcTable[64])((nint)dst, (nint)src, maxlen);
			#endif
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(byte* dst, byte* src, nuint maxlen)
		{
			nuint ret = StrlcatNative(dst, src, maxlen);
			return ret;
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(ref byte dst, byte* src, nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				nuint ret = StrlcatNative((byte*)pdst, src, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(ref string dst, byte* src, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcatNative(pStr0, src, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(byte* dst, ref byte src, nuint maxlen)
		{
			fixed (byte* psrc = &src)
			{
				nuint ret = StrlcatNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(byte* dst, ReadOnlySpan<byte> src, nuint maxlen)
		{
			fixed (byte* psrc = src)
			{
				nuint ret = StrlcatNative(dst, (byte*)psrc, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(byte* dst, string src, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (src != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(src);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(src, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = StrlcatNative(dst, pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(ref byte dst, ref byte src, nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = &src)
				{
					nuint ret = StrlcatNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(ref byte dst, ReadOnlySpan<byte> src, nuint maxlen)
		{
			fixed (byte* pdst = &dst)
			{
				fixed (byte* psrc = src)
				{
					nuint ret = StrlcatNative((byte*)pdst, (byte*)psrc, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Concatenate strings.<br/>
		/// This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from<br/>
		/// `src` to the end of the string in `dst`, then appends a null terminator.<br/>
		/// `src` and `dst` must not overlap.<br/>
		/// If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is<br/>
		/// unmodified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static nuint Strlcat(ref string dst, string src, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (src != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(src);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(src, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			nuint ret = StrlcatNative(pStr0, pStr1, maxlen);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrdupNative(byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[65])(str);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[65])((nint)str);
			#endif
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strdup(byte* str)
		{
			byte* ret = StrdupNative(str);
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrdupS(byte* str)
		{
			string ret = Utils.DecodeStringUTF8(StrdupNative(str));
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strdup(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrdupNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrdupS(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrdupNative((byte*)pstr));
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strdup(ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrdupNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrdupS(ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrdupNative((byte*)pstr));
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strdup(string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrdupNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, using<br/>
		/// SDL_malloc, and then makes a copy of the string into this space.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrdupS(string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrdupNative(pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrndupNative(byte* str, nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint, byte*>)funcTable[66])(str, maxlen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nuint, nint>)funcTable[66])((nint)str, maxlen);
			#endif
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strndup(byte* str, nuint maxlen)
		{
			byte* ret = StrndupNative(str, maxlen);
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrndupS(byte* str, nuint maxlen)
		{
			string ret = Utils.DecodeStringUTF8(StrndupNative(str, maxlen));
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strndup(ref byte str, nuint maxlen)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrndupNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrndupS(ref byte str, nuint maxlen)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrndupNative((byte*)pstr, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strndup(ReadOnlySpan<byte> str, nuint maxlen)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrndupNative((byte*)pstr, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrndupS(ReadOnlySpan<byte> str, nuint maxlen)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrndupNative((byte*)pstr, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strndup(string str, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrndupNative(pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Allocate a copy of a string, up to n characters.<br/>
		/// This allocates enough space for a null-terminated copy of `str`, up to<br/>
		/// `maxlen` bytes, using SDL_malloc, and then makes a copy of the string into<br/>
		/// this space.<br/>
		/// If the string is longer than `maxlen` bytes, the returned string will be<br/>
		/// `maxlen` bytes long, plus a null-terminator character that isn't included<br/>
		/// in the count.<br/>
		/// The returned string is owned by the caller, and should be passed to<br/>
		/// SDL_free when no longer needed.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrndupS(string str, nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrndupNative(pStr0, maxlen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Reverse a string's contents.<br/>
		/// This reverses a null-terminated string in-place. Only the content of the<br/>
		/// string is reversed; the null-terminator character remains at the end of the<br/>
		/// reversed string.<br/>
		/// **WARNING**: This function reverses the _bytes_ of the string, not the<br/>
		/// codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this<br/>
		/// will ruin the string data. You should only use this function on strings<br/>
		/// that are completely comprised of low ASCII characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrrevNative(byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[67])(str);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[67])((nint)str);
			#endif
		}

		/// <summary>
		/// Reverse a string's contents.<br/>
		/// This reverses a null-terminated string in-place. Only the content of the<br/>
		/// string is reversed; the null-terminator character remains at the end of the<br/>
		/// reversed string.<br/>
		/// **WARNING**: This function reverses the _bytes_ of the string, not the<br/>
		/// codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this<br/>
		/// will ruin the string data. You should only use this function on strings<br/>
		/// that are completely comprised of low ASCII characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strrev(byte* str)
		{
			byte* ret = StrrevNative(str);
			return ret;
		}

		/// <summary>
		/// Reverse a string's contents.<br/>
		/// This reverses a null-terminated string in-place. Only the content of the<br/>
		/// string is reversed; the null-terminator character remains at the end of the<br/>
		/// reversed string.<br/>
		/// **WARNING**: This function reverses the _bytes_ of the string, not the<br/>
		/// codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this<br/>
		/// will ruin the string data. You should only use this function on strings<br/>
		/// that are completely comprised of low ASCII characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrrevS(byte* str)
		{
			string ret = Utils.DecodeStringUTF8(StrrevNative(str));
			return ret;
		}

		/// <summary>
		/// Reverse a string's contents.<br/>
		/// This reverses a null-terminated string in-place. Only the content of the<br/>
		/// string is reversed; the null-terminator character remains at the end of the<br/>
		/// reversed string.<br/>
		/// **WARNING**: This function reverses the _bytes_ of the string, not the<br/>
		/// codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this<br/>
		/// will ruin the string data. You should only use this function on strings<br/>
		/// that are completely comprised of low ASCII characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strrev(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrrevNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Reverse a string's contents.<br/>
		/// This reverses a null-terminated string in-place. Only the content of the<br/>
		/// string is reversed; the null-terminator character remains at the end of the<br/>
		/// reversed string.<br/>
		/// **WARNING**: This function reverses the _bytes_ of the string, not the<br/>
		/// codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this<br/>
		/// will ruin the string data. You should only use this function on strings<br/>
		/// that are completely comprised of low ASCII characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrrevS(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrrevNative((byte*)pstr));
				return ret;
			}
		}

		/// <summary>
		/// Reverse a string's contents.<br/>
		/// This reverses a null-terminated string in-place. Only the content of the<br/>
		/// string is reversed; the null-terminator character remains at the end of the<br/>
		/// reversed string.<br/>
		/// **WARNING**: This function reverses the _bytes_ of the string, not the<br/>
		/// codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this<br/>
		/// will ruin the string data. You should only use this function on strings<br/>
		/// that are completely comprised of low ASCII characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strrev(ref string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrrevNative(pStr0);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Reverse a string's contents.<br/>
		/// This reverses a null-terminated string in-place. Only the content of the<br/>
		/// string is reversed; the null-terminator character remains at the end of the<br/>
		/// reversed string.<br/>
		/// **WARNING**: This function reverses the _bytes_ of the string, not the<br/>
		/// codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this<br/>
		/// will ruin the string data. You should only use this function on strings<br/>
		/// that are completely comprised of low ASCII characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrrevS(ref string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrrevNative(pStr0));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert a string to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to uppercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their<br/>
		/// uppercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StruprNative(byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[68])(str);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[68])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to uppercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their<br/>
		/// uppercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* Strupr(byte* str)
		{
			byte* ret = StruprNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to uppercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their<br/>
		/// uppercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string StruprS(byte* str)
		{
			string ret = Utils.DecodeStringUTF8(StruprNative(str));
			return ret;
		}

		/// <summary>
		/// Convert a string to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to uppercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their<br/>
		/// uppercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* Strupr(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StruprNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to uppercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their<br/>
		/// uppercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string StruprS(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StruprNative((byte*)pstr));
				return ret;
			}
		}

		/// <summary>
		/// Convert a string to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to uppercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their<br/>
		/// uppercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* Strupr(ref string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StruprNative(pStr0);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert a string to uppercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to uppercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their<br/>
		/// uppercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string StruprS(ref string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StruprNative(pStr0));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert a string to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their<br/>
		/// lowercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrlwrNative(byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*>)funcTable[69])(str);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[69])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their<br/>
		/// lowercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* Strlwr(byte* str)
		{
			byte* ret = StrlwrNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their<br/>
		/// lowercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string StrlwrS(byte* str)
		{
			string ret = Utils.DecodeStringUTF8(StrlwrNative(str));
			return ret;
		}

		/// <summary>
		/// Convert a string to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their<br/>
		/// lowercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* Strlwr(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrlwrNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their<br/>
		/// lowercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string StrlwrS(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrlwrNative((byte*)pstr));
				return ret;
			}
		}

		/// <summary>
		/// Convert a string to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their<br/>
		/// lowercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static byte* Strlwr(ref string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrlwrNative(pStr0);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert a string to lowercase.<br/>
		/// **WARNING**: Regardless of system locale, this will only convert ASCII<br/>
		/// values 'A' through 'Z' to lowercase.<br/>
		/// This function operates on a null-terminated string of bytes--even if it is<br/>
		/// malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their<br/>
		/// lowercase equivalents in-place, returning the original `str` pointer.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static string StrlwrS(ref string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrlwrNative(pStr0));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrchrNative(byte* str, int c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, byte*>)funcTable[70])(str, c);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)funcTable[70])((nint)str, c);
			#endif
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strchr(byte* str, int c)
		{
			byte* ret = StrchrNative(str, c);
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrchrS(byte* str, int c)
		{
			string ret = Utils.DecodeStringUTF8(StrchrNative(str, c));
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strchr(ref byte str, int c)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrchrS(ref byte str, int c)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strchr(ReadOnlySpan<byte> str, int c)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrchrS(ReadOnlySpan<byte> str, int c)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strchr(string str, int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrchrNative(pStr0, c);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrchrS(string str, int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrchrNative(pStr0, c));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrrchrNative(byte* str, int c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, byte*>)funcTable[71])(str, c);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)funcTable[71])((nint)str, c);
			#endif
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strrchr(byte* str, int c)
		{
			byte* ret = StrrchrNative(str, c);
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrrchrS(byte* str, int c)
		{
			string ret = Utils.DecodeStringUTF8(StrrchrNative(str, c));
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strrchr(ref byte str, int c)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrrchrS(ref byte str, int c)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strrchr(ReadOnlySpan<byte> str, int c)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrrchrS(ReadOnlySpan<byte> str, int c)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strrchr(string str, int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrrchrNative(pStr0, c);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrrchrS(string str, int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrrchrNative(pStr0, c));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrstrNative(byte* haystack, byte* needle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)funcTable[72])(haystack, needle);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[72])((nint)haystack, (nint)needle);
			#endif
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strstr(byte* haystack, byte* needle)
		{
			byte* ret = StrstrNative(haystack, needle);
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrstrS(byte* haystack, byte* needle)
		{
			string ret = Utils.DecodeStringUTF8(StrstrNative(haystack, needle));
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strstr(ref byte haystack, byte* needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				byte* ret = StrstrNative((byte*)phaystack, needle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrstrS(ref byte haystack, byte* needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative((byte*)phaystack, needle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strstr(ReadOnlySpan<byte> haystack, byte* needle)
		{
			fixed (byte* phaystack = haystack)
			{
				byte* ret = StrstrNative((byte*)phaystack, needle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrstrS(ReadOnlySpan<byte> haystack, byte* needle)
		{
			fixed (byte* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative((byte*)phaystack, needle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strstr(string haystack, byte* needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrstrNative(pStr0, needle);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrstrS(string haystack, byte* needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrstrNative(pStr0, needle));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strstr(byte* haystack, ref byte needle)
		{
			fixed (byte* pneedle = &needle)
			{
				byte* ret = StrstrNative(haystack, (byte*)pneedle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrstrS(byte* haystack, ref byte needle)
		{
			fixed (byte* pneedle = &needle)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative(haystack, (byte*)pneedle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strstr(byte* haystack, ReadOnlySpan<byte> needle)
		{
			fixed (byte* pneedle = needle)
			{
				byte* ret = StrstrNative(haystack, (byte*)pneedle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static string StrstrS(byte* haystack, ReadOnlySpan<byte> needle)
		{
			fixed (byte* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative(haystack, (byte*)pneedle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static byte* Strstr(byte* haystack, string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (needle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(needle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(needle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrstrNative(haystack, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}
	}
}
