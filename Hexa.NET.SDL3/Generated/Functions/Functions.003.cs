// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Convert an unsigned long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ulltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UlltoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned long long")] ulong value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			string ret = Utils.DecodeStringUTF8(UlltoaNative(value, str, radix));
			return ret;
		}

		/// <summary>
		/// Convert an unsigned long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ulltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Ulltoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned long long")] ulong value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = UlltoaNative(value, (byte*)pstr, radix);
				return ret;
			}
		}

		/// <summary>
		/// Convert an unsigned long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ulltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UlltoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned long long")] ulong value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(UlltoaNative(value, (byte*)pstr, radix));
				return ret;
			}
		}

		/// <summary>
		/// Convert an unsigned long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ulltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Ulltoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned long long")] ulong value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = UlltoaNative(value, pStr0, radix);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert an unsigned long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ulltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UlltoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned long long")] ulong value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(UlltoaNative(value, pStr0, radix));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse an `int` from a string.<br/>
		/// The result of calling `SDL_atoi(str)` is equivalent to<br/>
		/// `(int)SDL_strtol(str, NULL, 10)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atoi")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AtoiNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[82])(str);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[82])((nint)str);
			#endif
		}

		/// <summary>
		/// Parse an `int` from a string.<br/>
		/// The result of calling `SDL_atoi(str)` is equivalent to<br/>
		/// `(int)SDL_strtol(str, NULL, 10)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atoi")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Atoi([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			int ret = AtoiNative(str);
			return ret;
		}

		/// <summary>
		/// Parse an `int` from a string.<br/>
		/// The result of calling `SDL_atoi(str)` is equivalent to<br/>
		/// `(int)SDL_strtol(str, NULL, 10)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atoi")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Atoi([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				int ret = AtoiNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `int` from a string.<br/>
		/// The result of calling `SDL_atoi(str)` is equivalent to<br/>
		/// `(int)SDL_strtol(str, NULL, 10)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atoi")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Atoi([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				int ret = AtoiNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `int` from a string.<br/>
		/// The result of calling `SDL_atoi(str)` is equivalent to<br/>
		/// `(int)SDL_strtol(str, NULL, 10)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atoi")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Atoi([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = AtoiNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// The result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,<br/>
		/// NULL)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atof")]
		[return: NativeName(NativeNameType.Type, "double")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double AtofNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, double>)funcTable[83])(str);
			#else
			return (double)((delegate* unmanaged[Cdecl]<nint, double>)funcTable[83])((nint)str);
			#endif
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// The result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,<br/>
		/// NULL)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atof")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Atof([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			double ret = AtofNative(str);
			return ret;
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// The result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,<br/>
		/// NULL)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atof")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Atof([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				double ret = AtofNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// The result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,<br/>
		/// NULL)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atof")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Atof([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				double ret = AtofNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// The result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,<br/>
		/// NULL)`.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_atof")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Atof([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			double ret = AtofNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int StrtolNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte**, int, int>)funcTable[84])(str, endp, baseValue);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int, int>)funcTable[84])((nint)str, (nint)endp, baseValue);
			#endif
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			int ret = StrtolNative(str, endp, baseValue);
			return ret;
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				int ret = StrtolNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				int ret = StrtolNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrtolNative(pStr0, endp, baseValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte** pendp = &endp)
			{
				int ret = StrtolNative(str, (byte**)pendp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte** pendp = &endp)
				{
					int ret = StrtolNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte** pendp = &endp)
				{
					int ret = StrtolNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long`, the result is clamped to<br/>
		/// the minimum and maximum representable `long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtol")]
		[return: NativeName(NativeNameType.Type, "long")]
		public static int Strtol([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** pendp = &endp)
			{
				int ret = StrtolNative(pStr0, (byte**)pendp, baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint StrtoulNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte**, int, uint>)funcTable[85])(str, endp, baseValue);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, int, uint>)funcTable[85])((nint)str, (nint)endp, baseValue);
			#endif
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			uint ret = StrtoulNative(str, endp, baseValue);
			return ret;
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				uint ret = StrtoulNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				uint ret = StrtoulNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = StrtoulNative(pStr0, endp, baseValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte** pendp = &endp)
			{
				uint ret = StrtoulNative(str, (byte**)pendp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte** pendp = &endp)
				{
					uint ret = StrtoulNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte** pendp = &endp)
				{
					uint ret = StrtoulNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse an `unsigned long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long`, the result is<br/>
		/// clamped to the maximum representable `unsigned long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoul")]
		[return: NativeName(NativeNameType.Type, "unsigned long")]
		public static uint Strtoul([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** pendp = &endp)
			{
				uint ret = StrtoulNative(pStr0, (byte**)pendp, baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static long StrtollNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte**, int, long>)funcTable[86])(str, endp, baseValue);
			#else
			return (long)((delegate* unmanaged[Cdecl]<nint, nint, int, long>)funcTable[86])((nint)str, (nint)endp, baseValue);
			#endif
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			long ret = StrtollNative(str, endp, baseValue);
			return ret;
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				long ret = StrtollNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				long ret = StrtollNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			long ret = StrtollNative(pStr0, endp, baseValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte** pendp = &endp)
			{
				long ret = StrtollNative(str, (byte**)pendp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte** pendp = &endp)
				{
					long ret = StrtollNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte** pendp = &endp)
				{
					long ret = StrtollNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside a `long long`, the result is<br/>
		/// clamped to the minimum and maximum representable `long long` values.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoll")]
		[return: NativeName(NativeNameType.Type, "long long")]
		public static long Strtoll([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** pendp = &endp)
			{
				long ret = StrtollNative(pStr0, (byte**)pendp, baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong StrtoullNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte**, int, ulong>)funcTable[87])(str, endp, baseValue);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, nint, int, ulong>)funcTable[87])((nint)str, (nint)endp, baseValue);
			#endif
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			ulong ret = StrtoullNative(str, endp, baseValue);
			return ret;
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				ulong ret = StrtoullNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				ulong ret = StrtoullNative((byte*)pstr, endp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ulong ret = StrtoullNative(pStr0, endp, baseValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte** pendp = &endp)
			{
				ulong ret = StrtoullNative(str, (byte**)pendp, baseValue);
				return ret;
			}
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte** pendp = &endp)
				{
					ulong ret = StrtoullNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte** pendp = &endp)
				{
					ulong ret = StrtoullNative((byte*)pstr, (byte**)pendp, baseValue);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse an `unsigned long long` from a string.<br/>
		/// If `str` starts with whitespace, then those whitespace characters are<br/>
		/// skipped before attempting to parse the number.<br/>
		/// If the parsed number does not fit inside an `unsigned long long`, the<br/>
		/// result is clamped to the maximum representable `unsigned long long` value.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtoull")]
		[return: NativeName(NativeNameType.Type, "unsigned long long")]
		public static ulong Strtoull([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp, [NativeName(NativeNameType.Param, "base")] [NativeName(NativeNameType.Type, "int")] int baseValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** pendp = &endp)
			{
				ulong ret = StrtoullNative(pStr0, (byte**)pendp, baseValue);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static double StrtodNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte**, double>)funcTable[88])(str, endp);
			#else
			return (double)((delegate* unmanaged[Cdecl]<nint, nint, double>)funcTable[88])((nint)str, (nint)endp);
			#endif
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp)
		{
			double ret = StrtodNative(str, endp);
			return ret;
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp)
		{
			fixed (byte* pstr = &str)
			{
				double ret = StrtodNative((byte*)pstr, endp);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp)
		{
			fixed (byte* pstr = str)
			{
				double ret = StrtodNative((byte*)pstr, endp);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] byte** endp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			double ret = StrtodNative(pStr0, endp);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp)
		{
			fixed (byte** pendp = &endp)
			{
				double ret = StrtodNative(str, (byte**)pendp);
				return ret;
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte** pendp = &endp)
				{
					double ret = StrtodNative((byte*)pstr, (byte**)pendp);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte** pendp = &endp)
				{
					double ret = StrtodNative((byte*)pstr, (byte**)pendp);
					return ret;
				}
			}
		}

		/// <summary>
		/// Parse a `double` from a string.<br/>
		/// This function makes fewer guarantees than the C runtime `strtod`:<br/>
		/// - Only decimal notation is guaranteed to be supported. The handling of<br/>
		/// scientific and hexadecimal notation is unspecified.<br/>
		/// - Whether or not INF and NAN can be parsed is unspecified.<br/>
		/// - The precision of the result is unspecified.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtod")]
		[return: NativeName(NativeNameType.Type, "double")]
		public static double Strtod([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "endp")] [NativeName(NativeNameType.Type, "char * *")] ref byte* endp)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** pendp = &endp)
			{
				double ret = StrtodNative(pStr0, (byte**)pendp);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int StrcmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)funcTable[89])(str1, str2);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[89])((nint)str1, (nint)str2);
			#endif
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			int ret = StrcmpNative(str1, str2);
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			fixed (byte* pstr1 = &str1)
			{
				int ret = StrcmpNative((byte*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			fixed (byte* pstr1 = str1)
			{
				int ret = StrcmpNative((byte*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrcmpNative(pStr0, str2);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2)
		{
			fixed (byte* pstr2 = &str2)
			{
				int ret = StrcmpNative(str1, (byte*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2)
		{
			fixed (byte* pstr2 = str2)
			{
				int ret = StrcmpNative(str1, (byte*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str2 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str2, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrcmpNative(str1, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2)
		{
			fixed (byte* pstr1 = &str1)
			{
				fixed (byte* pstr2 = &str2)
				{
					int ret = StrcmpNative((byte*)pstr1, (byte*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2)
		{
			fixed (byte* pstr1 = str1)
			{
				fixed (byte* pstr2 = str2)
				{
					int ret = StrcmpNative((byte*)pstr1, (byte*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (str2 != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(str2);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(str2, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = StrcmpNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int StrncmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, int>)funcTable[90])(str1, str2, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[90])((nint)str1, (nint)str2, maxlen);
			#endif
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			int ret = StrncmpNative(str1, str2, maxlen);
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = &str1)
			{
				int ret = StrncmpNative((byte*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = str1)
			{
				int ret = StrncmpNative((byte*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrncmpNative(pStr0, str2, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr2 = &str2)
			{
				int ret = StrncmpNative(str1, (byte*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr2 = str2)
			{
				int ret = StrncmpNative(str1, (byte*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str2 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str2, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrncmpNative(str1, pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = &str1)
			{
				fixed (byte* pstr2 = &str2)
				{
					int ret = StrncmpNative((byte*)pstr1, (byte*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = str1)
			{
				fixed (byte* pstr2 = str2)
				{
					int ret = StrncmpNative((byte*)pstr1, (byte*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings up to a number of bytes.<br/>
		/// Due to the nature of UTF-8 encoding, this will work with Unicode strings,<br/>
		/// since effectively this function just compares bytes until it hits a<br/>
		/// null-terminating character. Also due to the nature of UTF-8, this can be<br/>
		/// used with SDL_qsort() to put strings in (roughly) alphabetical order.<br/>
		/// Note that while this function is intended to be used with UTF-8, it is<br/>
		/// doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the<br/>
		/// limit lands in the middle of a multi-byte UTF-8 sequence, it will only<br/>
		/// compare a portion of the final character.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (str2 != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(str2);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(str2, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = StrncmpNative(pStr0, pStr1, maxlen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int StrcasecmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)funcTable[91])(str1, str2);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[91])((nint)str1, (nint)str2);
			#endif
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			int ret = StrcasecmpNative(str1, str2);
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			fixed (byte* pstr1 = &str1)
			{
				int ret = StrcasecmpNative((byte*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			fixed (byte* pstr1 = str1)
			{
				int ret = StrcasecmpNative((byte*)pstr1, str2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrcasecmpNative(pStr0, str2);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2)
		{
			fixed (byte* pstr2 = &str2)
			{
				int ret = StrcasecmpNative(str1, (byte*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2)
		{
			fixed (byte* pstr2 = str2)
			{
				int ret = StrcasecmpNative(str1, (byte*)pstr2);
				return ret;
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str2 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str2, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrcasecmpNative(str1, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2)
		{
			fixed (byte* pstr1 = &str1)
			{
				fixed (byte* pstr2 = &str2)
				{
					int ret = StrcasecmpNative((byte*)pstr1, (byte*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2)
		{
			fixed (byte* pstr1 = str1)
			{
				fixed (byte* pstr2 = str2)
				{
					int ret = StrcasecmpNative((byte*)pstr1, (byte*)pstr2);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two null-terminated UTF-8 strings, case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strcasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (str2 != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(str2);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(str2, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = StrcasecmpNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int StrncasecmpNative([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, int>)funcTable[92])(str1, str2, maxlen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nuint, int>)funcTable[92])((nint)str1, (nint)str2, maxlen);
			#endif
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			int ret = StrncasecmpNative(str1, str2, maxlen);
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = &str1)
			{
				int ret = StrncasecmpNative((byte*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = str1)
			{
				int ret = StrncasecmpNative((byte*)pstr1, str2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] byte* str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrncasecmpNative(pStr0, str2, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr2 = &str2)
			{
				int ret = StrncasecmpNative(str1, (byte*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr2 = str2)
			{
				int ret = StrncasecmpNative(str1, (byte*)pstr2, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] byte* str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str2 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str2);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str2, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = StrncasecmpNative(str1, pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ref byte str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ref byte str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = &str1)
			{
				fixed (byte* pstr2 = &str2)
				{
					int ret = StrncasecmpNative((byte*)pstr1, (byte*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pstr1 = str1)
			{
				fixed (byte* pstr2 = str2)
				{
					int ret = StrncasecmpNative((byte*)pstr1, (byte*)pstr2, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Compare two UTF-8 strings, case-insensitively, up to a number of bytes.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the string to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// Note that while this function is intended to be used with UTF-8, `maxlen`<br/>
		/// specifies a _byte_ limit! If the limit lands in the middle of a multi-byte<br/>
		/// UTF-8 sequence, it may convert a portion of the final character to one or<br/>
		/// more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow<br/>
		/// a buffer.<br/>
		/// `maxlen` specifies a maximum number of bytes to compare; if the strings<br/>
		/// match to this number of bytes (or both have matched to a null-terminator<br/>
		/// character before this number of bytes), they will be considered equal.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strncasecmp")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Strncasecmp([NativeName(NativeNameType.Param, "str1")] [NativeName(NativeNameType.Type, "char const *")] string str1, [NativeName(NativeNameType.Param, "str2")] [NativeName(NativeNameType.Type, "char const *")] string str2, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str1 != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str1);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str1, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (str2 != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(str2);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(str2, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = StrncasecmpNative(pStr0, pStr1, maxlen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrpbrkNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)funcTable[93])(str, breakset);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[93])((nint)str, (nint)breakset);
			#endif
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			byte* ret = StrpbrkNative(str, breakset);
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			string ret = Utils.DecodeStringUTF8(StrpbrkNative(str, breakset));
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrpbrkNative((byte*)pstr, breakset);
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrpbrkNative((byte*)pstr, breakset));
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrpbrkNative((byte*)pstr, breakset);
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrpbrkNative((byte*)pstr, breakset));
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrpbrkNative(pStr0, breakset);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] byte* breakset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrpbrkNative(pStr0, breakset));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ref byte breakset)
		{
			fixed (byte* pbreakset = &breakset)
			{
				byte* ret = StrpbrkNative(str, (byte*)pbreakset);
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ref byte breakset)
		{
			fixed (byte* pbreakset = &breakset)
			{
				string ret = Utils.DecodeStringUTF8(StrpbrkNative(str, (byte*)pbreakset));
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> breakset)
		{
			fixed (byte* pbreakset = breakset)
			{
				byte* ret = StrpbrkNative(str, (byte*)pbreakset);
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> breakset)
		{
			fixed (byte* pbreakset = breakset)
			{
				string ret = Utils.DecodeStringUTF8(StrpbrkNative(str, (byte*)pbreakset));
				return ret;
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] string breakset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (breakset != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(breakset);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(breakset, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrpbrkNative(str, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] string breakset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (breakset != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(breakset);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(breakset, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrpbrkNative(str, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ref byte breakset)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pbreakset = &breakset)
				{
					byte* ret = StrpbrkNative((byte*)pstr, (byte*)pbreakset);
					return ret;
				}
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ref byte breakset)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pbreakset = &breakset)
				{
					string ret = Utils.DecodeStringUTF8(StrpbrkNative((byte*)pstr, (byte*)pbreakset));
					return ret;
				}
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> breakset)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte* pbreakset = breakset)
				{
					byte* ret = StrpbrkNative((byte*)pstr, (byte*)pbreakset);
					return ret;
				}
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> breakset)
		{
			fixed (byte* pstr = str)
			{
				fixed (byte* pbreakset = breakset)
				{
					string ret = Utils.DecodeStringUTF8(StrpbrkNative((byte*)pstr, (byte*)pbreakset));
					return ret;
				}
			}
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strpbrk([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] string breakset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (breakset != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(breakset);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(breakset, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = StrpbrkNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Searches a string for the first occurence of any character contained in a<br/>
		/// breakset, and returns a pointer from the string to that character.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strpbrk")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrpbrkS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "breakset")] [NativeName(NativeNameType.Type, "char const *")] string breakset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (breakset != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(breakset);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(breakset, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrpbrkNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Decode a UTF-8 string, one Unicode codepoint at a time.<br/>
		/// This will return the first Unicode codepoint in the UTF-8 encoded string in<br/>
		/// `*pstr`, and then advance `*pstr` past any consumed bytes before returning.<br/>
		/// It will not access more than `*pslen` bytes from the string. `*pslen` will<br/>
		/// be adjusted, as well, subtracting the number of bytes consumed.<br/>
		/// `pslen` is allowed to be NULL, in which case the string _must_ be<br/>
		/// NULL-terminated, as the function will blindly read until it sees the NULL<br/>
		/// char.<br/>
		/// if `*pslen` is zero, it assumes the end of string is reached and returns a<br/>
		/// zero codepoint regardless of the contents of the string buffer.<br/>
		/// If the resulting codepoint is zero (a NULL terminator), or `*pslen` is<br/>
		/// zero, it will not advance `*pstr` or `*pslen` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameters each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte<br/>
		/// (which is to say, a multibyte sequence might produce several<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid<br/>
		/// UTF-8 sequence).<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint StepUTF8Native([NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr, [NativeName(NativeNameType.Param, "pslen")] [NativeName(NativeNameType.Type, "size_t *")] nuint* pslen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte**, nuint*, uint>)funcTable[94])(pstr, pslen);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)funcTable[94])((nint)pstr, (nint)pslen);
			#endif
		}

		/// <summary>
		/// Decode a UTF-8 string, one Unicode codepoint at a time.<br/>
		/// This will return the first Unicode codepoint in the UTF-8 encoded string in<br/>
		/// `*pstr`, and then advance `*pstr` past any consumed bytes before returning.<br/>
		/// It will not access more than `*pslen` bytes from the string. `*pslen` will<br/>
		/// be adjusted, as well, subtracting the number of bytes consumed.<br/>
		/// `pslen` is allowed to be NULL, in which case the string _must_ be<br/>
		/// NULL-terminated, as the function will blindly read until it sees the NULL<br/>
		/// char.<br/>
		/// if `*pslen` is zero, it assumes the end of string is reached and returns a<br/>
		/// zero codepoint regardless of the contents of the string buffer.<br/>
		/// If the resulting codepoint is zero (a NULL terminator), or `*pslen` is<br/>
		/// zero, it will not advance `*pstr` or `*pslen` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameters each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte<br/>
		/// (which is to say, a multibyte sequence might produce several<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid<br/>
		/// UTF-8 sequence).<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepUTF8([NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr, [NativeName(NativeNameType.Param, "pslen")] [NativeName(NativeNameType.Type, "size_t *")] nuint* pslen)
		{
			uint ret = StepUTF8Native(pstr, pslen);
			return ret;
		}

		/// <summary>
		/// Decode a UTF-8 string, one Unicode codepoint at a time.<br/>
		/// This will return the first Unicode codepoint in the UTF-8 encoded string in<br/>
		/// `*pstr`, and then advance `*pstr` past any consumed bytes before returning.<br/>
		/// It will not access more than `*pslen` bytes from the string. `*pslen` will<br/>
		/// be adjusted, as well, subtracting the number of bytes consumed.<br/>
		/// `pslen` is allowed to be NULL, in which case the string _must_ be<br/>
		/// NULL-terminated, as the function will blindly read until it sees the NULL<br/>
		/// char.<br/>
		/// if `*pslen` is zero, it assumes the end of string is reached and returns a<br/>
		/// zero codepoint regardless of the contents of the string buffer.<br/>
		/// If the resulting codepoint is zero (a NULL terminator), or `*pslen` is<br/>
		/// zero, it will not advance `*pstr` or `*pslen` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameters each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte<br/>
		/// (which is to say, a multibyte sequence might produce several<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid<br/>
		/// UTF-8 sequence).<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepUTF8([NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* pstr, [NativeName(NativeNameType.Param, "pslen")] [NativeName(NativeNameType.Type, "size_t *")] nuint* pslen)
		{
			fixed (byte** ppstr = &pstr)
			{
				uint ret = StepUTF8Native((byte**)ppstr, pslen);
				return ret;
			}
		}

		/// <summary>
		/// Decode a UTF-8 string, one Unicode codepoint at a time.<br/>
		/// This will return the first Unicode codepoint in the UTF-8 encoded string in<br/>
		/// `*pstr`, and then advance `*pstr` past any consumed bytes before returning.<br/>
		/// It will not access more than `*pslen` bytes from the string. `*pslen` will<br/>
		/// be adjusted, as well, subtracting the number of bytes consumed.<br/>
		/// `pslen` is allowed to be NULL, in which case the string _must_ be<br/>
		/// NULL-terminated, as the function will blindly read until it sees the NULL<br/>
		/// char.<br/>
		/// if `*pslen` is zero, it assumes the end of string is reached and returns a<br/>
		/// zero codepoint regardless of the contents of the string buffer.<br/>
		/// If the resulting codepoint is zero (a NULL terminator), or `*pslen` is<br/>
		/// zero, it will not advance `*pstr` or `*pslen` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameters each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte<br/>
		/// (which is to say, a multibyte sequence might produce several<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid<br/>
		/// UTF-8 sequence).<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepUTF8([NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr, [NativeName(NativeNameType.Param, "pslen")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint pslen)
		{
			fixed (nuint* ppslen = &pslen)
			{
				uint ret = StepUTF8Native(pstr, (nuint*)ppslen);
				return ret;
			}
		}

		/// <summary>
		/// Decode a UTF-8 string, one Unicode codepoint at a time.<br/>
		/// This will return the first Unicode codepoint in the UTF-8 encoded string in<br/>
		/// `*pstr`, and then advance `*pstr` past any consumed bytes before returning.<br/>
		/// It will not access more than `*pslen` bytes from the string. `*pslen` will<br/>
		/// be adjusted, as well, subtracting the number of bytes consumed.<br/>
		/// `pslen` is allowed to be NULL, in which case the string _must_ be<br/>
		/// NULL-terminated, as the function will blindly read until it sees the NULL<br/>
		/// char.<br/>
		/// if `*pslen` is zero, it assumes the end of string is reached and returns a<br/>
		/// zero codepoint regardless of the contents of the string buffer.<br/>
		/// If the resulting codepoint is zero (a NULL terminator), or `*pslen` is<br/>
		/// zero, it will not advance `*pstr` or `*pslen` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameters each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte<br/>
		/// (which is to say, a multibyte sequence might produce several<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid<br/>
		/// UTF-8 sequence).<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepUTF8([NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* pstr, [NativeName(NativeNameType.Param, "pslen")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint pslen)
		{
			fixed (byte** ppstr = &pstr)
			{
				fixed (nuint* ppslen = &pslen)
				{
					uint ret = StepUTF8Native((byte**)ppstr, (nuint*)ppslen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint StepBackUTF8Native([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] byte* start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte**, uint>)funcTable[95])(start, pstr);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)funcTable[95])((nint)start, (nint)pstr);
			#endif
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] byte* start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr)
		{
			uint ret = StepBackUTF8Native(start, pstr);
			return ret;
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] ref byte start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr)
		{
			fixed (byte* pstart = &start)
			{
				uint ret = StepBackUTF8Native((byte*)pstart, pstr);
				return ret;
			}
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr)
		{
			fixed (byte* pstart = start)
			{
				uint ret = StepBackUTF8Native((byte*)pstart, pstr);
				return ret;
			}
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] string start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] byte** pstr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (start != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(start);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(start, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = StepBackUTF8Native(pStr0, pstr);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] byte* start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* pstr)
		{
			fixed (byte** ppstr = &pstr)
			{
				uint ret = StepBackUTF8Native(start, (byte**)ppstr);
				return ret;
			}
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] ref byte start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* pstr)
		{
			fixed (byte* pstart = &start)
			{
				fixed (byte** ppstr = &pstr)
				{
					uint ret = StepBackUTF8Native((byte*)pstart, (byte**)ppstr);
					return ret;
				}
			}
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* pstr)
		{
			fixed (byte* pstart = start)
			{
				fixed (byte** ppstr = &pstr)
				{
					uint ret = StepBackUTF8Native((byte*)pstart, (byte**)ppstr);
					return ret;
				}
			}
		}

		/// <summary>
		/// Decode a UTF-8 string in reverse, one Unicode codepoint at a time.<br/>
		/// This will go to the start of the previous Unicode codepoint in the string,<br/>
		/// move `*pstr` to that location and return that codepoint.<br/>
		/// If `*pstr` is already at the start of the string), it will not advance<br/>
		/// `*pstr` at all.<br/>
		/// Generally this function is called in a loop until it returns zero,<br/>
		/// adjusting its parameter each iteration.<br/>
		/// If an invalid UTF-8 sequence is encountered, this function returns<br/>
		/// SDL_INVALID_UNICODE_CODEPOINT.<br/>
		/// Several things can generate invalid UTF-8 sequences, including overlong<br/>
		/// encodings, the use of UTF-16 surrogate values, and truncated data. Please<br/>
		/// refer to<br/>
		/// [RFC3629](https://www.ietf.org/rfc/rfc3629.txt)<br/>
		/// for details.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_StepBackUTF8")]
		[return: NativeName(NativeNameType.Type, "Uint32")]
		public static uint StepBackUTF8([NativeName(NativeNameType.Param, "start")] [NativeName(NativeNameType.Type, "char const *")] string start, [NativeName(NativeNameType.Param, "pstr")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* pstr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (start != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(start);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(start, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** ppstr = &pstr)
			{
				uint ret = StepBackUTF8Native(pStr0, (byte**)ppstr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Convert a single Unicode codepoint to UTF-8.<br/>
		/// The buffer pointed to by `dst` must be at least 4 bytes long, as this<br/>
		/// function may generate between 1 and 4 bytes of output.<br/>
		/// This function returns the first byte _after_ the newly-written UTF-8<br/>
		/// sequence, which is useful for encoding multiple codepoints in a loop, or<br/>
		/// knowing where to write a NULL-terminator character to end the string (in<br/>
		/// either case, plan to have a buffer of _more_ than 4 bytes!).<br/>
		/// If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16<br/>
		/// surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the<br/>
		/// codepoint instead, and not set an error.<br/>
		/// If `dst` is NULL, this returns NULL immediately without writing to the<br/>
		/// pointer and without setting an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UCS4ToUTF8")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* UCS4ToUTF8Native([NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "Uint32")] uint codepoint, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, byte*>)funcTable[96])(codepoint, dst);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<uint, nint, nint>)funcTable[96])(codepoint, (nint)dst);
			#endif
		}

		/// <summary>
		/// Convert a single Unicode codepoint to UTF-8.<br/>
		/// The buffer pointed to by `dst` must be at least 4 bytes long, as this<br/>
		/// function may generate between 1 and 4 bytes of output.<br/>
		/// This function returns the first byte _after_ the newly-written UTF-8<br/>
		/// sequence, which is useful for encoding multiple codepoints in a loop, or<br/>
		/// knowing where to write a NULL-terminator character to end the string (in<br/>
		/// either case, plan to have a buffer of _more_ than 4 bytes!).<br/>
		/// If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16<br/>
		/// surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the<br/>
		/// codepoint instead, and not set an error.<br/>
		/// If `dst` is NULL, this returns NULL immediately without writing to the<br/>
		/// pointer and without setting an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UCS4ToUTF8")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* UCS4ToUTF8([NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "Uint32")] uint codepoint, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst)
		{
			byte* ret = UCS4ToUTF8Native(codepoint, dst);
			return ret;
		}

		/// <summary>
		/// Convert a single Unicode codepoint to UTF-8.<br/>
		/// The buffer pointed to by `dst` must be at least 4 bytes long, as this<br/>
		/// function may generate between 1 and 4 bytes of output.<br/>
		/// This function returns the first byte _after_ the newly-written UTF-8<br/>
		/// sequence, which is useful for encoding multiple codepoints in a loop, or<br/>
		/// knowing where to write a NULL-terminator character to end the string (in<br/>
		/// either case, plan to have a buffer of _more_ than 4 bytes!).<br/>
		/// If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16<br/>
		/// surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the<br/>
		/// codepoint instead, and not set an error.<br/>
		/// If `dst` is NULL, this returns NULL immediately without writing to the<br/>
		/// pointer and without setting an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UCS4ToUTF8")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UCS4ToUTF8S([NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "Uint32")] uint codepoint, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] byte* dst)
		{
			string ret = Utils.DecodeStringUTF8(UCS4ToUTF8Native(codepoint, dst));
			return ret;
		}

		/// <summary>
		/// Convert a single Unicode codepoint to UTF-8.<br/>
		/// The buffer pointed to by `dst` must be at least 4 bytes long, as this<br/>
		/// function may generate between 1 and 4 bytes of output.<br/>
		/// This function returns the first byte _after_ the newly-written UTF-8<br/>
		/// sequence, which is useful for encoding multiple codepoints in a loop, or<br/>
		/// knowing where to write a NULL-terminator character to end the string (in<br/>
		/// either case, plan to have a buffer of _more_ than 4 bytes!).<br/>
		/// If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16<br/>
		/// surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the<br/>
		/// codepoint instead, and not set an error.<br/>
		/// If `dst` is NULL, this returns NULL immediately without writing to the<br/>
		/// pointer and without setting an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UCS4ToUTF8")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* UCS4ToUTF8([NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "Uint32")] uint codepoint, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst)
		{
			fixed (byte* pdst = &dst)
			{
				byte* ret = UCS4ToUTF8Native(codepoint, (byte*)pdst);
				return ret;
			}
		}

		/// <summary>
		/// Convert a single Unicode codepoint to UTF-8.<br/>
		/// The buffer pointed to by `dst` must be at least 4 bytes long, as this<br/>
		/// function may generate between 1 and 4 bytes of output.<br/>
		/// This function returns the first byte _after_ the newly-written UTF-8<br/>
		/// sequence, which is useful for encoding multiple codepoints in a loop, or<br/>
		/// knowing where to write a NULL-terminator character to end the string (in<br/>
		/// either case, plan to have a buffer of _more_ than 4 bytes!).<br/>
		/// If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16<br/>
		/// surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the<br/>
		/// codepoint instead, and not set an error.<br/>
		/// If `dst` is NULL, this returns NULL immediately without writing to the<br/>
		/// pointer and without setting an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UCS4ToUTF8")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UCS4ToUTF8S([NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "Uint32")] uint codepoint, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref byte dst)
		{
			fixed (byte* pdst = &dst)
			{
				string ret = Utils.DecodeStringUTF8(UCS4ToUTF8Native(codepoint, (byte*)pdst));
				return ret;
			}
		}

		/// <summary>
		/// Convert a single Unicode codepoint to UTF-8.<br/>
		/// The buffer pointed to by `dst` must be at least 4 bytes long, as this<br/>
		/// function may generate between 1 and 4 bytes of output.<br/>
		/// This function returns the first byte _after_ the newly-written UTF-8<br/>
		/// sequence, which is useful for encoding multiple codepoints in a loop, or<br/>
		/// knowing where to write a NULL-terminator character to end the string (in<br/>
		/// either case, plan to have a buffer of _more_ than 4 bytes!).<br/>
		/// If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16<br/>
		/// surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the<br/>
		/// codepoint instead, and not set an error.<br/>
		/// If `dst` is NULL, this returns NULL immediately without writing to the<br/>
		/// pointer and without setting an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UCS4ToUTF8")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* UCS4ToUTF8([NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "Uint32")] uint codepoint, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = UCS4ToUTF8Native(codepoint, pStr0);
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert a single Unicode codepoint to UTF-8.<br/>
		/// The buffer pointed to by `dst` must be at least 4 bytes long, as this<br/>
		/// function may generate between 1 and 4 bytes of output.<br/>
		/// This function returns the first byte _after_ the newly-written UTF-8<br/>
		/// sequence, which is useful for encoding multiple codepoints in a loop, or<br/>
		/// knowing where to write a NULL-terminator character to end the string (in<br/>
		/// either case, plan to have a buffer of _more_ than 4 bytes!).<br/>
		/// If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16<br/>
		/// surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the<br/>
		/// codepoint instead, and not set an error.<br/>
		/// If `dst` is NULL, this returns NULL immediately without writing to the<br/>
		/// pointer and without setting an error.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UCS4ToUTF8")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UCS4ToUTF8S([NativeName(NativeNameType.Param, "codepoint")] [NativeName(NativeNameType.Type, "Uint32")] uint codepoint, [NativeName(NativeNameType.Param, "dst")] [NativeName(NativeNameType.Type, "char *")] ref string dst)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (dst != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(dst);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(dst, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(UCS4ToUTF8Native(codepoint, pStr0));
			dst = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SscanfNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, int>)funcTable[97])(text, fmt);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[97])((nint)text, (nint)fmt);
			#endif
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt)
		{
			int ret = SscanfNative(text, fmt);
			return ret;
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt)
		{
			fixed (byte* ptext = &text)
			{
				int ret = SscanfNative((byte*)ptext, fmt);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt)
		{
			fixed (byte* ptext = text)
			{
				int ret = SscanfNative((byte*)ptext, fmt);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SscanfNative(pStr0, fmt);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] ref byte fmt)
		{
			fixed (byte* pfmt = &fmt)
			{
				int ret = SscanfNative(text, (byte*)pfmt);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* pfmt = fmt)
			{
				int ret = SscanfNative(text, (byte*)pfmt);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (fmt != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(fmt, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SscanfNative(text, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] ref byte fmt)
		{
			fixed (byte* ptext = &text)
			{
				fixed (byte* pfmt = &fmt)
				{
					int ret = SscanfNative((byte*)ptext, (byte*)pfmt);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> fmt)
		{
			fixed (byte* ptext = text)
			{
				fixed (byte* pfmt = fmt)
				{
					int ret = SscanfNative((byte*)ptext, (byte*)pfmt);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like sscanf() but doesn't require access to a C runtime.<br/>
		/// Scan a string, matching a format string, converting each '%' item and<br/>
		/// storing it to pointers provided through variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_sscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Sscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] string fmt)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (fmt != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(fmt);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(fmt, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			int ret = SscanfNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like vsscanf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_sscanf(), except it takes a `va_list` instead<br/>
		/// of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_vsscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int VsscanfNative([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt, [NativeName(NativeNameType.Param, "ap")] [NativeName(NativeNameType.Type, "va_list")] nint ap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nint, int>)funcTable[98])(text, fmt, ap);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[98])((nint)text, (nint)fmt, ap);
			#endif
		}

		/// <summary>
		/// This works exactly like vsscanf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_sscanf(), except it takes a `va_list` instead<br/>
		/// of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_vsscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Vsscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] byte* text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt, [NativeName(NativeNameType.Param, "ap")] [NativeName(NativeNameType.Type, "va_list")] nint ap)
		{
			int ret = VsscanfNative(text, fmt, ap);
			return ret;
		}

		/// <summary>
		/// This works exactly like vsscanf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_sscanf(), except it takes a `va_list` instead<br/>
		/// of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_vsscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Vsscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ref byte text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt, [NativeName(NativeNameType.Param, "ap")] [NativeName(NativeNameType.Type, "va_list")] nint ap)
		{
			fixed (byte* ptext = &text)
			{
				int ret = VsscanfNative((byte*)ptext, fmt, ap);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like vsscanf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_sscanf(), except it takes a `va_list` instead<br/>
		/// of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_vsscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Vsscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt, [NativeName(NativeNameType.Param, "ap")] [NativeName(NativeNameType.Type, "va_list")] nint ap)
		{
			fixed (byte* ptext = text)
			{
				int ret = VsscanfNative((byte*)ptext, fmt, ap);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like vsscanf() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Functions identically to SDL_sscanf(), except it takes a `va_list` instead<br/>
		/// of using `...` variable arguments.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_vsscanf")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Vsscanf([NativeName(NativeNameType.Param, "text")] [NativeName(NativeNameType.Type, "char const *")] string text, [NativeName(NativeNameType.Param, "fmt")] [NativeName(NativeNameType.Type, "char const *")] byte* fmt, [NativeName(NativeNameType.Param, "ap")] [NativeName(NativeNameType.Type, "va_list")] nint ap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (text != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(text);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(text, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = VsscanfNative(pStr0, fmt, ap);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}
	}
}
