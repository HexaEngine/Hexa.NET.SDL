// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, byte* r, ref byte g, ref byte b, byte* a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, r, (byte*)pg, (byte*)pb, a);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, ref byte r, ref byte g, ref byte b, byte* a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						GetRGBANative(pixel, format, palette, (byte*)pr, (byte*)pg, (byte*)pb, a);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, ref byte r, ref byte g, ref byte b, byte* a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, (byte*)pr, (byte*)pg, (byte*)pb, a);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, ref byte r, ref byte g, ref byte b, byte* a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							GetRGBANative(pixel, format, (SDLPalette*)ppalette, (byte*)pr, (byte*)pg, (byte*)pb, a);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, ref byte r, ref byte g, ref byte b, byte* a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pr = &r)
					{
						fixed (byte* pg = &g)
						{
							fixed (byte* pb = &b)
							{
								GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, (byte*)pr, (byte*)pg, (byte*)pb, a);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, byte* r, byte* g, byte* b, ref byte a)
		{
			fixed (byte* pa = &a)
			{
				GetRGBANative(pixel, format, palette, r, g, b, (byte*)pa);
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, byte* r, byte* g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pa = &a)
				{
					GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, r, g, b, (byte*)pa);
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, byte* r, byte* g, byte* b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pa = &a)
				{
					GetRGBANative(pixel, format, (SDLPalette*)ppalette, r, g, b, (byte*)pa);
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, byte* r, byte* g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, r, g, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, ref byte r, byte* g, byte* b, ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pa = &a)
				{
					GetRGBANative(pixel, format, palette, (byte*)pr, g, b, (byte*)pa);
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, ref byte r, byte* g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, (byte*)pr, g, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, ref byte r, byte* g, byte* b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, format, (SDLPalette*)ppalette, (byte*)pr, g, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, ref byte r, byte* g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pr = &r)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, (byte*)pr, g, b, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, byte* r, ref byte g, byte* b, ref byte a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pa = &a)
				{
					GetRGBANative(pixel, format, palette, r, (byte*)pg, b, (byte*)pa);
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, byte* r, ref byte g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, r, (byte*)pg, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, byte* r, ref byte g, byte* b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, format, (SDLPalette*)ppalette, r, (byte*)pg, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, byte* r, ref byte g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, r, (byte*)pg, b, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, ref byte r, ref byte g, byte* b, ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, format, palette, (byte*)pr, (byte*)pg, b, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, ref byte r, ref byte g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, (byte*)pr, (byte*)pg, b, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, ref byte r, ref byte g, byte* b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, format, (SDLPalette*)ppalette, (byte*)pr, (byte*)pg, b, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, ref byte r, ref byte g, byte* b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pr = &r)
					{
						fixed (byte* pg = &g)
						{
							fixed (byte* pa = &a)
							{
								GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, (byte*)pr, (byte*)pg, b, (byte*)pa);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, byte* r, byte* g, ref byte b, ref byte a)
		{
			fixed (byte* pb = &b)
			{
				fixed (byte* pa = &a)
				{
					GetRGBANative(pixel, format, palette, r, g, (byte*)pb, (byte*)pa);
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, byte* r, byte* g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, r, g, (byte*)pb, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, byte* r, byte* g, ref byte b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, format, (SDLPalette*)ppalette, r, g, (byte*)pb, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, byte* r, byte* g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, r, g, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, ref byte r, byte* g, ref byte b, ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, format, palette, (byte*)pr, g, (byte*)pb, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, ref byte r, byte* g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, (byte*)pr, g, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, ref byte r, byte* g, ref byte b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, format, (SDLPalette*)ppalette, (byte*)pr, g, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, ref byte r, byte* g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pr = &r)
					{
						fixed (byte* pb = &b)
						{
							fixed (byte* pa = &a)
							{
								GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, (byte*)pr, g, (byte*)pb, (byte*)pa);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, byte* r, ref byte g, ref byte b, ref byte a)
		{
			fixed (byte* pg = &g)
			{
				fixed (byte* pb = &b)
				{
					fixed (byte* pa = &a)
					{
						GetRGBANative(pixel, format, palette, r, (byte*)pg, (byte*)pb, (byte*)pa);
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, byte* r, ref byte g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, r, (byte*)pg, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, byte* r, ref byte g, ref byte b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, format, (SDLPalette*)ppalette, r, (byte*)pg, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, byte* r, ref byte g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							fixed (byte* pa = &a)
							{
								GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, r, (byte*)pg, (byte*)pb, (byte*)pa);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, SDLPalette* palette, ref byte r, ref byte g, ref byte b, ref byte a)
		{
			fixed (byte* pr = &r)
			{
				fixed (byte* pg = &g)
				{
					fixed (byte* pb = &b)
					{
						fixed (byte* pa = &a)
						{
							GetRGBANative(pixel, format, palette, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, SDLPalette* palette, ref byte r, ref byte g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							fixed (byte* pa = &a)
							{
								GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, palette, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, SDLPixelFormatDetails* format, ref SDLPalette palette, ref byte r, ref byte g, ref byte b, ref byte a)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				fixed (byte* pr = &r)
				{
					fixed (byte* pg = &g)
					{
						fixed (byte* pb = &b)
						{
							fixed (byte* pa = &a)
							{
								GetRGBANative(pixel, format, (SDLPalette*)ppalette, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get RGBA values from a pixel in the specified format.<br/>
		/// This function uses the entire 8-bit [0..255] range when converting color<br/>
		/// components from pixel formats with less than 8-bits per RGB component<br/>
		/// (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,<br/>
		/// 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).<br/>
		/// If the surface has no alpha component, the alpha will be returned as 0xff<br/>
		/// (100% opaque).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread, as long as<br/>
		/// the palette is not modified.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void GetRGBA(uint pixel, ref SDLPixelFormatDetails format, ref SDLPalette palette, ref byte r, ref byte g, ref byte b, ref byte a)
		{
			fixed (SDLPixelFormatDetails* pformat = &format)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					fixed (byte* pr = &r)
					{
						fixed (byte* pg = &g)
						{
							fixed (byte* pb = &b)
							{
								fixed (byte* pa = &a)
								{
									GetRGBANative(pixel, (SDLPixelFormatDetails*)pformat, (SDLPalette*)ppalette, (byte*)pr, (byte*)pg, (byte*)pb, (byte*)pa);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte HasRectIntersectionNative(SDLRect* a, SDLRect* b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRect*, SDLRect*, byte>)funcTable[378])(a, b);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[378])((nint)a, (nint)b);
			#endif
		}

		/// <summary>
		/// Determine whether two rectangles intersect.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersection(SDLRect* a, SDLRect* b)
		{
			byte ret = HasRectIntersectionNative(a, b);
			return ret != 0;
		}

		/// <summary>
		/// Determine whether two rectangles intersect.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersection(ref SDLRect a, SDLRect* b)
		{
			fixed (SDLRect* pa = &a)
			{
				byte ret = HasRectIntersectionNative((SDLRect*)pa, b);
				return ret != 0;
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersection(SDLRect* a, ref SDLRect b)
		{
			fixed (SDLRect* pb = &b)
			{
				byte ret = HasRectIntersectionNative(a, (SDLRect*)pb);
				return ret != 0;
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersection(ref SDLRect a, ref SDLRect b)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					byte ret = HasRectIntersectionNative((SDLRect*)pa, (SDLRect*)pb);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectIntersectionNative(SDLRect* a, SDLRect* b, SDLRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRect*, SDLRect*, SDLRect*, byte>)funcTable[379])(a, b, result);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[379])((nint)a, (nint)b, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(SDLRect* a, SDLRect* b, SDLRect* result)
		{
			byte ret = GetRectIntersectionNative(a, b, result);
			return ret != 0;
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(ref SDLRect a, SDLRect* b, SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				byte ret = GetRectIntersectionNative((SDLRect*)pa, b, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(SDLRect* a, ref SDLRect b, SDLRect* result)
		{
			fixed (SDLRect* pb = &b)
			{
				byte ret = GetRectIntersectionNative(a, (SDLRect*)pb, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(ref SDLRect a, ref SDLRect b, SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					byte ret = GetRectIntersectionNative((SDLRect*)pa, (SDLRect*)pb, result);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(SDLRect* a, SDLRect* b, ref SDLRect result)
		{
			fixed (SDLRect* presult = &result)
			{
				byte ret = GetRectIntersectionNative(a, b, (SDLRect*)presult);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(ref SDLRect a, SDLRect* b, ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* presult = &result)
				{
					byte ret = GetRectIntersectionNative((SDLRect*)pa, b, (SDLRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(SDLRect* a, ref SDLRect b, ref SDLRect result)
		{
			fixed (SDLRect* pb = &b)
			{
				fixed (SDLRect* presult = &result)
				{
					byte ret = GetRectIntersectionNative(a, (SDLRect*)pb, (SDLRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersection(ref SDLRect a, ref SDLRect b, ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					fixed (SDLRect* presult = &result)
					{
						byte ret = GetRectIntersectionNative((SDLRect*)pa, (SDLRect*)pb, (SDLRect*)presult);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectUnionNative(SDLRect* a, SDLRect* b, SDLRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRect*, SDLRect*, SDLRect*, byte>)funcTable[380])(a, b, result);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[380])((nint)a, (nint)b, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(SDLRect* a, SDLRect* b, SDLRect* result)
		{
			byte ret = GetRectUnionNative(a, b, result);
			return ret != 0;
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(ref SDLRect a, SDLRect* b, SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				byte ret = GetRectUnionNative((SDLRect*)pa, b, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(SDLRect* a, ref SDLRect b, SDLRect* result)
		{
			fixed (SDLRect* pb = &b)
			{
				byte ret = GetRectUnionNative(a, (SDLRect*)pb, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(ref SDLRect a, ref SDLRect b, SDLRect* result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					byte ret = GetRectUnionNative((SDLRect*)pa, (SDLRect*)pb, result);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(SDLRect* a, SDLRect* b, ref SDLRect result)
		{
			fixed (SDLRect* presult = &result)
			{
				byte ret = GetRectUnionNative(a, b, (SDLRect*)presult);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(ref SDLRect a, SDLRect* b, ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* presult = &result)
				{
					byte ret = GetRectUnionNative((SDLRect*)pa, b, (SDLRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(SDLRect* a, ref SDLRect b, ref SDLRect result)
		{
			fixed (SDLRect* pb = &b)
			{
				fixed (SDLRect* presult = &result)
				{
					byte ret = GetRectUnionNative(a, (SDLRect*)pb, (SDLRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnion(ref SDLRect a, ref SDLRect b, ref SDLRect result)
		{
			fixed (SDLRect* pa = &a)
			{
				fixed (SDLRect* pb = &b)
				{
					fixed (SDLRect* presult = &result)
					{
						byte ret = GetRectUnionNative((SDLRect*)pa, (SDLRect*)pb, (SDLRect*)presult);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectEnclosingPointsNative(SDLPoint* points, int count, SDLRect* clip, SDLRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLPoint*, int, SDLRect*, SDLRect*, byte>)funcTable[381])(points, count, clip, result);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, byte>)funcTable[381])((nint)points, count, (nint)clip, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(SDLPoint* points, int count, SDLRect* clip, SDLRect* result)
		{
			byte ret = GetRectEnclosingPointsNative(points, count, clip, result);
			return ret != 0;
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(ref SDLPoint points, int count, SDLRect* clip, SDLRect* result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				byte ret = GetRectEnclosingPointsNative((SDLPoint*)ppoints, count, clip, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(SDLPoint* points, int count, ref SDLRect clip, SDLRect* result)
		{
			fixed (SDLRect* pclip = &clip)
			{
				byte ret = GetRectEnclosingPointsNative(points, count, (SDLRect*)pclip, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(ref SDLPoint points, int count, ref SDLRect clip, SDLRect* result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				fixed (SDLRect* pclip = &clip)
				{
					byte ret = GetRectEnclosingPointsNative((SDLPoint*)ppoints, count, (SDLRect*)pclip, result);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(SDLPoint* points, int count, SDLRect* clip, ref SDLRect result)
		{
			fixed (SDLRect* presult = &result)
			{
				byte ret = GetRectEnclosingPointsNative(points, count, clip, (SDLRect*)presult);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(ref SDLPoint points, int count, SDLRect* clip, ref SDLRect result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				fixed (SDLRect* presult = &result)
				{
					byte ret = GetRectEnclosingPointsNative((SDLPoint*)ppoints, count, clip, (SDLRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(SDLPoint* points, int count, ref SDLRect clip, ref SDLRect result)
		{
			fixed (SDLRect* pclip = &clip)
			{
				fixed (SDLRect* presult = &result)
				{
					byte ret = GetRectEnclosingPointsNative(points, count, (SDLRect*)pclip, (SDLRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPoints(ref SDLPoint points, int count, ref SDLRect clip, ref SDLRect result)
		{
			fixed (SDLPoint* ppoints = &points)
			{
				fixed (SDLRect* pclip = &clip)
				{
					fixed (SDLRect* presult = &result)
					{
						byte ret = GetRectEnclosingPointsNative((SDLPoint*)ppoints, count, (SDLRect*)pclip, (SDLRect*)presult);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectAndLineIntersectionNative(SDLRect* rect, int* x1, int* y1, int* x2, int* y2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLRect*, int*, int*, int*, int*, byte>)funcTable[382])(rect, x1, y1, x2, y2);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, byte>)funcTable[382])((nint)rect, (nint)x1, (nint)y1, (nint)x2, (nint)y2);
			#endif
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, int* y1, int* x2, int* y2)
		{
			byte ret = GetRectAndLineIntersectionNative(rect, x1, y1, x2, y2);
			return ret != 0;
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, int* y1, int* x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, y1, x2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, int* y1, int* x2, int* y2)
		{
			fixed (int* px1 = &x1)
			{
				byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, y1, x2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, int* y1, int* x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, y1, x2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, ref int y1, int* x2, int* y2)
		{
			fixed (int* py1 = &y1)
			{
				byte ret = GetRectAndLineIntersectionNative(rect, x1, (int*)py1, x2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, ref int y1, int* x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, (int*)py1, x2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, ref int y1, int* x2, int* y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, (int*)py1, x2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, ref int y1, int* x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, (int*)py1, x2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, int* y1, ref int x2, int* y2)
		{
			fixed (int* px2 = &x2)
			{
				byte ret = GetRectAndLineIntersectionNative(rect, x1, y1, (int*)px2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, int* y1, ref int x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px2 = &x2)
				{
					byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, y1, (int*)px2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, int* y1, ref int x2, int* y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* px2 = &x2)
				{
					byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, y1, (int*)px2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, int* y1, ref int x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* px2 = &x2)
					{
						byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, y1, (int*)px2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, ref int y1, ref int x2, int* y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* px2 = &x2)
				{
					byte ret = GetRectAndLineIntersectionNative(rect, x1, (int*)py1, (int*)px2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, ref int y1, ref int x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, (int*)py1, (int*)px2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, ref int y1, ref int x2, int* y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, (int*)py1, (int*)px2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, ref int y1, ref int x2, int* y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* px2 = &x2)
						{
							byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, (int*)py1, (int*)px2, y2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, int* y1, int* x2, ref int y2)
		{
			fixed (int* py2 = &y2)
			{
				byte ret = GetRectAndLineIntersectionNative(rect, x1, y1, x2, (int*)py2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, int* y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, y1, x2, (int*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, int* y1, int* x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, y1, x2, (int*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, int* y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, y1, x2, (int*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, ref int y1, int* x2, ref int y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionNative(rect, x1, (int*)py1, x2, (int*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, ref int y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, (int*)py1, x2, (int*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, ref int y1, int* x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, (int*)py1, x2, (int*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, ref int y1, int* x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, (int*)py1, x2, (int*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, int* y1, ref int x2, ref int y2)
		{
			fixed (int* px2 = &x2)
			{
				fixed (int* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionNative(rect, x1, y1, (int*)px2, (int*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, int* y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, y1, (int*)px2, (int*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, int* y1, ref int x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, y1, (int*)px2, (int*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, int* y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, y1, (int*)px2, (int*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, int* x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (int* py1 = &y1)
			{
				fixed (int* px2 = &x2)
				{
					fixed (int* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionNative(rect, x1, (int*)py1, (int*)px2, (int*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, int* x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, x1, (int*)py1, (int*)px2, (int*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(SDLRect* rect, ref int x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (int* px1 = &x1)
			{
				fixed (int* py1 = &y1)
				{
					fixed (int* px2 = &x2)
					{
						fixed (int* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionNative(rect, (int*)px1, (int*)py1, (int*)px2, (int*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersection(ref SDLRect rect, ref int x1, ref int y1, ref int x2, ref int y2)
		{
			fixed (SDLRect* prect = &rect)
			{
				fixed (int* px1 = &x1)
				{
					fixed (int* py1 = &y1)
					{
						fixed (int* px2 = &x2)
						{
							fixed (int* py2 = &y2)
							{
								byte ret = GetRectAndLineIntersectionNative((SDLRect*)prect, (int*)px1, (int*)py1, (int*)px2, (int*)py2);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte HasRectIntersectionFloatNative(SDLFRect* a, SDLFRect* b)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFRect*, SDLFRect*, byte>)funcTable[383])(a, b);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[383])((nint)a, (nint)b);
			#endif
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersectionFloat(SDLFRect* a, SDLFRect* b)
		{
			byte ret = HasRectIntersectionFloatNative(a, b);
			return ret != 0;
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersectionFloat(ref SDLFRect a, SDLFRect* b)
		{
			fixed (SDLFRect* pa = &a)
			{
				byte ret = HasRectIntersectionFloatNative((SDLFRect*)pa, b);
				return ret != 0;
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersectionFloat(SDLFRect* a, ref SDLFRect b)
		{
			fixed (SDLFRect* pb = &b)
			{
				byte ret = HasRectIntersectionFloatNative(a, (SDLFRect*)pb);
				return ret != 0;
			}
		}

		/// <summary>
		/// Determine whether two rectangles intersect with float precision.<br/>
		/// If either pointer is NULL the function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool HasRectIntersectionFloat(ref SDLFRect a, ref SDLFRect b)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					byte ret = HasRectIntersectionFloatNative((SDLFRect*)pa, (SDLFRect*)pb);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectIntersectionFloatNative(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFRect*, SDLFRect*, SDLFRect*, byte>)funcTable[384])(a, b, result);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[384])((nint)a, (nint)b, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			byte ret = GetRectIntersectionFloatNative(a, b, result);
			return ret != 0;
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(ref SDLFRect a, SDLFRect* b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				byte ret = GetRectIntersectionFloatNative((SDLFRect*)pa, b, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(SDLFRect* a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pb = &b)
			{
				byte ret = GetRectIntersectionFloatNative(a, (SDLFRect*)pb, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(ref SDLFRect a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					byte ret = GetRectIntersectionFloatNative((SDLFRect*)pa, (SDLFRect*)pb, result);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(SDLFRect* a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				byte ret = GetRectIntersectionFloatNative(a, b, (SDLFRect*)presult);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(ref SDLFRect a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* presult = &result)
				{
					byte ret = GetRectIntersectionFloatNative((SDLFRect*)pa, b, (SDLFRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(SDLFRect* a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pb = &b)
			{
				fixed (SDLFRect* presult = &result)
				{
					byte ret = GetRectIntersectionFloatNative(a, (SDLFRect*)pb, (SDLFRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of two rectangles with float precision.<br/>
		/// If `result` is NULL then this function will return false.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectIntersectionFloat(ref SDLFRect a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					fixed (SDLFRect* presult = &result)
					{
						byte ret = GetRectIntersectionFloatNative((SDLFRect*)pa, (SDLFRect*)pb, (SDLFRect*)presult);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectUnionFloatNative(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFRect*, SDLFRect*, SDLFRect*, byte>)funcTable[385])(a, b, result);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[385])((nint)a, (nint)b, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(SDLFRect* a, SDLFRect* b, SDLFRect* result)
		{
			byte ret = GetRectUnionFloatNative(a, b, result);
			return ret != 0;
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(ref SDLFRect a, SDLFRect* b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				byte ret = GetRectUnionFloatNative((SDLFRect*)pa, b, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(SDLFRect* a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pb = &b)
			{
				byte ret = GetRectUnionFloatNative(a, (SDLFRect*)pb, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(ref SDLFRect a, ref SDLFRect b, SDLFRect* result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					byte ret = GetRectUnionFloatNative((SDLFRect*)pa, (SDLFRect*)pb, result);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(SDLFRect* a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				byte ret = GetRectUnionFloatNative(a, b, (SDLFRect*)presult);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(ref SDLFRect a, SDLFRect* b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* presult = &result)
				{
					byte ret = GetRectUnionFloatNative((SDLFRect*)pa, b, (SDLFRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(SDLFRect* a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pb = &b)
			{
				fixed (SDLFRect* presult = &result)
				{
					byte ret = GetRectUnionFloatNative(a, (SDLFRect*)pb, (SDLFRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the union of two rectangles with float precision.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectUnionFloat(ref SDLFRect a, ref SDLFRect b, ref SDLFRect result)
		{
			fixed (SDLFRect* pa = &a)
			{
				fixed (SDLFRect* pb = &b)
				{
					fixed (SDLFRect* presult = &result)
					{
						byte ret = GetRectUnionFloatNative((SDLFRect*)pa, (SDLFRect*)pb, (SDLFRect*)presult);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectEnclosingPointsFloatNative(SDLFPoint* points, int count, SDLFRect* clip, SDLFRect* result)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFPoint*, int, SDLFRect*, SDLFRect*, byte>)funcTable[386])(points, count, clip, result);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, byte>)funcTable[386])((nint)points, count, (nint)clip, (nint)result);
			#endif
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(SDLFPoint* points, int count, SDLFRect* clip, SDLFRect* result)
		{
			byte ret = GetRectEnclosingPointsFloatNative(points, count, clip, result);
			return ret != 0;
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(ref SDLFPoint points, int count, SDLFRect* clip, SDLFRect* result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				byte ret = GetRectEnclosingPointsFloatNative((SDLFPoint*)ppoints, count, clip, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(SDLFPoint* points, int count, ref SDLFRect clip, SDLFRect* result)
		{
			fixed (SDLFRect* pclip = &clip)
			{
				byte ret = GetRectEnclosingPointsFloatNative(points, count, (SDLFRect*)pclip, result);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(ref SDLFPoint points, int count, ref SDLFRect clip, SDLFRect* result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* pclip = &clip)
				{
					byte ret = GetRectEnclosingPointsFloatNative((SDLFPoint*)ppoints, count, (SDLFRect*)pclip, result);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(SDLFPoint* points, int count, SDLFRect* clip, ref SDLFRect result)
		{
			fixed (SDLFRect* presult = &result)
			{
				byte ret = GetRectEnclosingPointsFloatNative(points, count, clip, (SDLFRect*)presult);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(ref SDLFPoint points, int count, SDLFRect* clip, ref SDLFRect result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* presult = &result)
				{
					byte ret = GetRectEnclosingPointsFloatNative((SDLFPoint*)ppoints, count, clip, (SDLFRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(SDLFPoint* points, int count, ref SDLFRect clip, ref SDLFRect result)
		{
			fixed (SDLFRect* pclip = &clip)
			{
				fixed (SDLFRect* presult = &result)
				{
					byte ret = GetRectEnclosingPointsFloatNative(points, count, (SDLFRect*)pclip, (SDLFRect*)presult);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate a minimal rectangle enclosing a set of points with float<br/>
		/// precision.<br/>
		/// If `clip` is not NULL then only points inside of the clipping rectangle are<br/>
		/// considered.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectEnclosingPointsFloat(ref SDLFPoint points, int count, ref SDLFRect clip, ref SDLFRect result)
		{
			fixed (SDLFPoint* ppoints = &points)
			{
				fixed (SDLFRect* pclip = &clip)
				{
					fixed (SDLFRect* presult = &result)
					{
						byte ret = GetRectEnclosingPointsFloatNative((SDLFPoint*)ppoints, count, (SDLFRect*)pclip, (SDLFRect*)presult);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetRectAndLineIntersectionFloatNative(SDLFRect* rect, float* x1, float* y1, float* x2, float* y2)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLFRect*, float*, float*, float*, float*, byte>)funcTable[387])(rect, x1, y1, x2, y2);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, byte>)funcTable[387])((nint)rect, (nint)x1, (nint)y1, (nint)x2, (nint)y2);
			#endif
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, float* y1, float* x2, float* y2)
		{
			byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, y1, x2, y2);
			return ret != 0;
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, float* y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, y1, x2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, float* y1, float* x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, y1, x2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, float* y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, y1, x2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, ref float y1, float* x2, float* y2)
		{
			fixed (float* py1 = &y1)
			{
				byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, (float*)py1, x2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, ref float y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, (float*)py1, x2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, ref float y1, float* x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, (float*)py1, x2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, ref float y1, float* x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, (float*)py1, x2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, float* y1, ref float x2, float* y2)
		{
			fixed (float* px2 = &x2)
			{
				byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, y1, (float*)px2, y2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, float* y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px2 = &x2)
				{
					byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, y1, (float*)px2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, float* y1, ref float x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* px2 = &x2)
				{
					byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, y1, (float*)px2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, float* y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* px2 = &x2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, y1, (float*)px2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, ref float y1, ref float x2, float* y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* px2 = &x2)
				{
					byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, (float*)py1, (float*)px2, y2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, ref float y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, (float*)py1, (float*)px2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, ref float y1, ref float x2, float* y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, (float*)py1, (float*)px2, y2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, ref float y1, ref float x2, float* y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* px2 = &x2)
						{
							byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, (float*)py1, (float*)px2, y2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, float* y1, float* x2, ref float y2)
		{
			fixed (float* py2 = &y2)
			{
				byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, y1, x2, (float*)py2);
				return ret != 0;
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, float* y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, y1, x2, (float*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, float* y1, float* x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, y1, x2, (float*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, float* y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, y1, x2, (float*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, ref float y1, float* x2, ref float y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, (float*)py1, x2, (float*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, ref float y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, (float*)py1, x2, (float*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, ref float y1, float* x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, (float*)py1, x2, (float*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, ref float y1, float* x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, (float*)py1, x2, (float*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, float* y1, ref float x2, ref float y2)
		{
			fixed (float* px2 = &x2)
			{
				fixed (float* py2 = &y2)
				{
					byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, y1, (float*)px2, (float*)py2);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, float* y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, y1, (float*)px2, (float*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, float* y1, ref float x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, y1, (float*)px2, (float*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, float* y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, y1, (float*)px2, (float*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, float* x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (float* py1 = &y1)
			{
				fixed (float* px2 = &x2)
				{
					fixed (float* py2 = &y2)
					{
						byte ret = GetRectAndLineIntersectionFloatNative(rect, x1, (float*)py1, (float*)px2, (float*)py2);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, float* x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, x1, (float*)py1, (float*)px2, (float*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(SDLFRect* rect, ref float x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (float* px1 = &x1)
			{
				fixed (float* py1 = &y1)
				{
					fixed (float* px2 = &x2)
					{
						fixed (float* py2 = &y2)
						{
							byte ret = GetRectAndLineIntersectionFloatNative(rect, (float*)px1, (float*)py1, (float*)px2, (float*)py2);
							return ret != 0;
						}
					}
				}
			}
		}

		/// <summary>
		/// Calculate the intersection of a rectangle and line segment with float<br/>
		/// precision.<br/>
		/// This function is used to clip a line segment to a rectangle. A line segment<br/>
		/// contained entirely within the rectangle or that does not intersect will<br/>
		/// remain unchanged. A line segment that crosses the rectangle at either or<br/>
		/// both ends will be clipped to the boundary of the rectangle and the new<br/>
		/// coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool GetRectAndLineIntersectionFloat(ref SDLFRect rect, ref float x1, ref float y1, ref float x2, ref float y2)
		{
			fixed (SDLFRect* prect = &rect)
			{
				fixed (float* px1 = &x1)
				{
					fixed (float* py1 = &y1)
					{
						fixed (float* px2 = &x2)
						{
							fixed (float* py2 = &y2)
							{
								byte ret = GetRectAndLineIntersectionFloatNative((SDLFRect*)prect, (float*)px1, (float*)py1, (float*)px2, (float*)py2);
								return ret != 0;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Allocate a new surface with a specific pixel format.<br/>
		/// The pixels of the new surface are initialized to zero.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* CreateSurfaceNative(int width, int height, SDLPixelFormat format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, SDLPixelFormat, SDLSurface*>)funcTable[388])(width, height, format);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<int, int, SDLPixelFormat, nint>)funcTable[388])(width, height, format);
			#endif
		}

		/// <summary>
		/// Allocate a new surface with a specific pixel format.<br/>
		/// The pixels of the new surface are initialized to zero.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* CreateSurface(int width, int height, SDLPixelFormat format)
		{
			SDLSurface* ret = CreateSurfaceNative(width, height, format);
			return ret;
		}

		/// <summary>
		/// Allocate a new surface with a specific pixel format and existing pixel<br/>
		/// data.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// Pitch is the offset in bytes from one row of pixels to the next, e.g.<br/>
		/// `width*4` for `SDL_PIXELFORMAT_RGBA8888`.<br/>
		/// You may pass NULL for pixels and 0 for pitch to create a surface that you<br/>
		/// will fill in with valid values later.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* CreateSurfaceFromNative(int width, int height, SDLPixelFormat format, void* pixels, int pitch)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, SDLPixelFormat, void*, int, SDLSurface*>)funcTable[389])(width, height, format, pixels, pitch);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<int, int, SDLPixelFormat, nint, int, nint>)funcTable[389])(width, height, format, (nint)pixels, pitch);
			#endif
		}

		/// <summary>
		/// Allocate a new surface with a specific pixel format and existing pixel<br/>
		/// data.<br/>
		/// No copy is made of the pixel data. Pixel data is not managed automatically;<br/>
		/// you must free the surface before you free the pixel data.<br/>
		/// Pitch is the offset in bytes from one row of pixels to the next, e.g.<br/>
		/// `width*4` for `SDL_PIXELFORMAT_RGBA8888`.<br/>
		/// You may pass NULL for pixels and 0 for pitch to create a surface that you<br/>
		/// will fill in with valid values later.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* CreateSurfaceFrom(int width, int height, SDLPixelFormat format, void* pixels, int pitch)
		{
			SDLSurface* ret = CreateSurfaceFromNative(width, height, format, pixels, pitch);
			return ret;
		}

		/// <summary>
		/// Free a surface.<br/>
		/// It is safe to pass NULL to this function.<br/>
		/// <br/>
		/// <br/>
		/// No other thread should be using the surface when it is freed.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroySurfaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSurface*, void>)funcTable[390])(surface);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[390])((nint)surface);
			#endif
		}

		/// <summary>
		/// Free a surface.<br/>
		/// It is safe to pass NULL to this function.<br/>
		/// <br/>
		/// <br/>
		/// No other thread should be using the surface when it is freed.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DestroySurface(SDLSurface* surface)
		{
			DestroySurfaceNative(surface);
		}

		/// <summary>
		/// Free a surface.<br/>
		/// It is safe to pass NULL to this function.<br/>
		/// <br/>
		/// <br/>
		/// No other thread should be using the surface when it is freed.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void DestroySurface(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				DestroySurfaceNative((SDLSurface*)psurface);
			}
		}

		/// <summary>
		/// Get the properties associated with a surface.<br/>
		/// The following properties are understood by SDL:<br/>
		/// - `SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point<br/>
		/// surfaces, this defines the value of 100% diffuse white, with higher<br/>
		/// values being displayed in the High Dynamic Range headroom. This defaults<br/>
		/// to 203 for HDR10 surfaces and 1.0 for floating point surfaces.<br/>
		/// - `SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point<br/>
		/// surfaces, this defines the maximum dynamic range used by the content, in<br/>
		/// terms of the SDR white point. This defaults to 0.0, which disables tone<br/>
		/// mapping.<br/>
		/// - `SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING`: the tone mapping operator<br/>
		/// used when compressing from a surface with high dynamic range to another<br/>
		/// with lower dynamic range. Currently this supports "chrome", which uses<br/>
		/// the same tone mapping that Chrome uses for HDR content, the form "*=N",<br/>
		/// where N is a floating point scale factor applied in linear space, and<br/>
		/// "none", which disables tone mapping. This defaults to "chrome".<br/>
		/// - `SDL_PROP_SURFACE_HOTSPOT_X_NUMBER`: the hotspot pixel offset from the<br/>
		/// left edge of the image, if this surface is being used as a cursor.<br/>
		/// - `SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER`: the hotspot pixel offset from the<br/>
		/// top edge of the image, if this surface is being used as a cursor.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetSurfacePropertiesNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, uint>)funcTable[391])(surface);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[391])((nint)surface);
			#endif
		}

		/// <summary>
		/// Get the properties associated with a surface.<br/>
		/// The following properties are understood by SDL:<br/>
		/// - `SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point<br/>
		/// surfaces, this defines the value of 100% diffuse white, with higher<br/>
		/// values being displayed in the High Dynamic Range headroom. This defaults<br/>
		/// to 203 for HDR10 surfaces and 1.0 for floating point surfaces.<br/>
		/// - `SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point<br/>
		/// surfaces, this defines the maximum dynamic range used by the content, in<br/>
		/// terms of the SDR white point. This defaults to 0.0, which disables tone<br/>
		/// mapping.<br/>
		/// - `SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING`: the tone mapping operator<br/>
		/// used when compressing from a surface with high dynamic range to another<br/>
		/// with lower dynamic range. Currently this supports "chrome", which uses<br/>
		/// the same tone mapping that Chrome uses for HDR content, the form "*=N",<br/>
		/// where N is a floating point scale factor applied in linear space, and<br/>
		/// "none", which disables tone mapping. This defaults to "chrome".<br/>
		/// - `SDL_PROP_SURFACE_HOTSPOT_X_NUMBER`: the hotspot pixel offset from the<br/>
		/// left edge of the image, if this surface is being used as a cursor.<br/>
		/// - `SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER`: the hotspot pixel offset from the<br/>
		/// top edge of the image, if this surface is being used as a cursor.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static uint GetSurfaceProperties(SDLSurface* surface)
		{
			uint ret = GetSurfacePropertiesNative(surface);
			return ret;
		}

		/// <summary>
		/// Get the properties associated with a surface.<br/>
		/// The following properties are understood by SDL:<br/>
		/// - `SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point<br/>
		/// surfaces, this defines the value of 100% diffuse white, with higher<br/>
		/// values being displayed in the High Dynamic Range headroom. This defaults<br/>
		/// to 203 for HDR10 surfaces and 1.0 for floating point surfaces.<br/>
		/// - `SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point<br/>
		/// surfaces, this defines the maximum dynamic range used by the content, in<br/>
		/// terms of the SDR white point. This defaults to 0.0, which disables tone<br/>
		/// mapping.<br/>
		/// - `SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING`: the tone mapping operator<br/>
		/// used when compressing from a surface with high dynamic range to another<br/>
		/// with lower dynamic range. Currently this supports "chrome", which uses<br/>
		/// the same tone mapping that Chrome uses for HDR content, the form "*=N",<br/>
		/// where N is a floating point scale factor applied in linear space, and<br/>
		/// "none", which disables tone mapping. This defaults to "chrome".<br/>
		/// - `SDL_PROP_SURFACE_HOTSPOT_X_NUMBER`: the hotspot pixel offset from the<br/>
		/// left edge of the image, if this surface is being used as a cursor.<br/>
		/// - `SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER`: the hotspot pixel offset from the<br/>
		/// top edge of the image, if this surface is being used as a cursor.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		public static uint GetSurfaceProperties(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				uint ret = GetSurfacePropertiesNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Set the colorspace used by a surface.<br/>
		/// Setting the colorspace doesn't change the pixels, only how they are<br/>
		/// interpreted in color operations.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetSurfaceColorspaceNative(SDLSurface* surface, SDLColorspace colorspace)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLColorspace, byte>)funcTable[392])(surface, colorspace);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, SDLColorspace, byte>)funcTable[392])((nint)surface, colorspace);
			#endif
		}

		/// <summary>
		/// Set the colorspace used by a surface.<br/>
		/// Setting the colorspace doesn't change the pixels, only how they are<br/>
		/// interpreted in color operations.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetSurfaceColorspace(SDLSurface* surface, SDLColorspace colorspace)
		{
			byte ret = SetSurfaceColorspaceNative(surface, colorspace);
			return ret != 0;
		}

		/// <summary>
		/// Set the colorspace used by a surface.<br/>
		/// Setting the colorspace doesn't change the pixels, only how they are<br/>
		/// interpreted in color operations.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetSurfaceColorspace(ref SDLSurface surface, SDLColorspace colorspace)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				byte ret = SetSurfaceColorspaceNative((SDLSurface*)psurface, colorspace);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the colorspace used by a surface.<br/>
		/// The colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point<br/>
		/// formats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for<br/>
		/// other RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLColorspace GetSurfaceColorspaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLColorspace>)funcTable[393])(surface);
			#else
			return (SDLColorspace)((delegate* unmanaged[Cdecl]<nint, SDLColorspace>)funcTable[393])((nint)surface);
			#endif
		}

		/// <summary>
		/// Get the colorspace used by a surface.<br/>
		/// The colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point<br/>
		/// formats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for<br/>
		/// other RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLColorspace GetSurfaceColorspace(SDLSurface* surface)
		{
			SDLColorspace ret = GetSurfaceColorspaceNative(surface);
			return ret;
		}

		/// <summary>
		/// Get the colorspace used by a surface.<br/>
		/// The colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point<br/>
		/// formats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for<br/>
		/// other RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLColorspace GetSurfaceColorspace(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLColorspace ret = GetSurfaceColorspaceNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Create a palette and associate it with a surface.<br/>
		/// This function creates a palette compatible with the provided surface. The<br/>
		/// palette is then returned for you to modify, and the surface will<br/>
		/// automatically use the new palette in future operations. You do not need to<br/>
		/// destroy the returned palette, it will be freed when the reference count<br/>
		/// reaches 0, usually when the surface is destroyed.<br/>
		/// Bitmap surfaces (with format SDL_PIXELFORMAT_INDEX1LSB or<br/>
		/// SDL_PIXELFORMAT_INDEX1MSB) will have the palette initialized with 0 as<br/>
		/// white and 1 as black. Other surfaces will get a palette initialized with<br/>
		/// white in every entry.<br/>
		/// If this function is called for a surface that already has a palette, a new<br/>
		/// palette will be created to replace it.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLPalette* CreateSurfacePaletteNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLPalette*>)funcTable[394])(surface);
			#else
			return (SDLPalette*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[394])((nint)surface);
			#endif
		}

		/// <summary>
		/// Create a palette and associate it with a surface.<br/>
		/// This function creates a palette compatible with the provided surface. The<br/>
		/// palette is then returned for you to modify, and the surface will<br/>
		/// automatically use the new palette in future operations. You do not need to<br/>
		/// destroy the returned palette, it will be freed when the reference count<br/>
		/// reaches 0, usually when the surface is destroyed.<br/>
		/// Bitmap surfaces (with format SDL_PIXELFORMAT_INDEX1LSB or<br/>
		/// SDL_PIXELFORMAT_INDEX1MSB) will have the palette initialized with 0 as<br/>
		/// white and 1 as black. Other surfaces will get a palette initialized with<br/>
		/// white in every entry.<br/>
		/// If this function is called for a surface that already has a palette, a new<br/>
		/// palette will be created to replace it.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLPalette* CreateSurfacePalette(SDLSurface* surface)
		{
			SDLPalette* ret = CreateSurfacePaletteNative(surface);
			return ret;
		}

		/// <summary>
		/// Create a palette and associate it with a surface.<br/>
		/// This function creates a palette compatible with the provided surface. The<br/>
		/// palette is then returned for you to modify, and the surface will<br/>
		/// automatically use the new palette in future operations. You do not need to<br/>
		/// destroy the returned palette, it will be freed when the reference count<br/>
		/// reaches 0, usually when the surface is destroyed.<br/>
		/// Bitmap surfaces (with format SDL_PIXELFORMAT_INDEX1LSB or<br/>
		/// SDL_PIXELFORMAT_INDEX1MSB) will have the palette initialized with 0 as<br/>
		/// white and 1 as black. Other surfaces will get a palette initialized with<br/>
		/// white in every entry.<br/>
		/// If this function is called for a surface that already has a palette, a new<br/>
		/// palette will be created to replace it.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLPalette* CreateSurfacePalette(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLPalette* ret = CreateSurfacePaletteNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetSurfacePaletteNative(SDLSurface* surface, SDLPalette* palette)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLPalette*, byte>)funcTable[395])(surface, palette);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[395])((nint)surface, (nint)palette);
			#endif
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetSurfacePalette(SDLSurface* surface, SDLPalette* palette)
		{
			byte ret = SetSurfacePaletteNative(surface, palette);
			return ret != 0;
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetSurfacePalette(ref SDLSurface surface, SDLPalette* palette)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				byte ret = SetSurfacePaletteNative((SDLSurface*)psurface, palette);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetSurfacePalette(SDLSurface* surface, ref SDLPalette palette)
		{
			fixed (SDLPalette* ppalette = &palette)
			{
				byte ret = SetSurfacePaletteNative(surface, (SDLPalette*)ppalette);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the palette used by a surface.<br/>
		/// A single palette can be shared with many surfaces.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SetSurfacePalette(ref SDLSurface surface, ref SDLPalette palette)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLPalette* ppalette = &palette)
				{
					byte ret = SetSurfacePaletteNative((SDLSurface*)psurface, (SDLPalette*)ppalette);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Get the palette used by a surface.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLPalette* GetSurfacePaletteNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLPalette*>)funcTable[396])(surface);
			#else
			return (SDLPalette*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[396])((nint)surface);
			#endif
		}

		/// <summary>
		/// Get the palette used by a surface.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLPalette* GetSurfacePalette(SDLSurface* surface)
		{
			SDLPalette* ret = GetSurfacePaletteNative(surface);
			return ret;
		}

		/// <summary>
		/// Get the palette used by a surface.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLPalette* GetSurfacePalette(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLPalette* ret = GetSurfacePaletteNative((SDLSurface*)psurface);
				return ret;
			}
		}

		/// <summary>
		/// Add an alternate version of a surface.<br/>
		/// This function adds an alternate version of this surface, usually used for<br/>
		/// content with high DPI representations like cursors or icons. The size,<br/>
		/// format, and content do not need to match the original surface, and these<br/>
		/// alternate versions will not be updated when the original surface changes.<br/>
		/// This function adds a reference to the alternate version, so you should call<br/>
		/// SDL_DestroySurface() on the image after this call.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AddSurfaceAlternateImageNative(SDLSurface* surface, SDLSurface* image)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLSurface*, byte>)funcTable[397])(surface, image);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[397])((nint)surface, (nint)image);
			#endif
		}

		/// <summary>
		/// Add an alternate version of a surface.<br/>
		/// This function adds an alternate version of this surface, usually used for<br/>
		/// content with high DPI representations like cursors or icons. The size,<br/>
		/// format, and content do not need to match the original surface, and these<br/>
		/// alternate versions will not be updated when the original surface changes.<br/>
		/// This function adds a reference to the alternate version, so you should call<br/>
		/// SDL_DestroySurface() on the image after this call.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddSurfaceAlternateImage(SDLSurface* surface, SDLSurface* image)
		{
			byte ret = AddSurfaceAlternateImageNative(surface, image);
			return ret != 0;
		}

		/// <summary>
		/// Add an alternate version of a surface.<br/>
		/// This function adds an alternate version of this surface, usually used for<br/>
		/// content with high DPI representations like cursors or icons. The size,<br/>
		/// format, and content do not need to match the original surface, and these<br/>
		/// alternate versions will not be updated when the original surface changes.<br/>
		/// This function adds a reference to the alternate version, so you should call<br/>
		/// SDL_DestroySurface() on the image after this call.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddSurfaceAlternateImage(ref SDLSurface surface, SDLSurface* image)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				byte ret = AddSurfaceAlternateImageNative((SDLSurface*)psurface, image);
				return ret != 0;
			}
		}

		/// <summary>
		/// Add an alternate version of a surface.<br/>
		/// This function adds an alternate version of this surface, usually used for<br/>
		/// content with high DPI representations like cursors or icons. The size,<br/>
		/// format, and content do not need to match the original surface, and these<br/>
		/// alternate versions will not be updated when the original surface changes.<br/>
		/// This function adds a reference to the alternate version, so you should call<br/>
		/// SDL_DestroySurface() on the image after this call.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddSurfaceAlternateImage(SDLSurface* surface, ref SDLSurface image)
		{
			fixed (SDLSurface* pimage = &image)
			{
				byte ret = AddSurfaceAlternateImageNative(surface, (SDLSurface*)pimage);
				return ret != 0;
			}
		}

		/// <summary>
		/// Add an alternate version of a surface.<br/>
		/// This function adds an alternate version of this surface, usually used for<br/>
		/// content with high DPI representations like cursors or icons. The size,<br/>
		/// format, and content do not need to match the original surface, and these<br/>
		/// alternate versions will not be updated when the original surface changes.<br/>
		/// This function adds a reference to the alternate version, so you should call<br/>
		/// SDL_DestroySurface() on the image after this call.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool AddSurfaceAlternateImage(ref SDLSurface surface, ref SDLSurface image)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (SDLSurface* pimage = &image)
				{
					byte ret = AddSurfaceAlternateImageNative((SDLSurface*)psurface, (SDLSurface*)pimage);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Return whether a surface has alternate versions available.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SurfaceHasAlternateImagesNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte>)funcTable[398])(surface);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[398])((nint)surface);
			#endif
		}

		/// <summary>
		/// Return whether a surface has alternate versions available.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SurfaceHasAlternateImages(SDLSurface* surface)
		{
			byte ret = SurfaceHasAlternateImagesNative(surface);
			return ret != 0;
		}

		/// <summary>
		/// Return whether a surface has alternate versions available.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool SurfaceHasAlternateImages(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				byte ret = SurfaceHasAlternateImagesNative((SDLSurface*)psurface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get an array including all versions of a surface.<br/>
		/// This returns all versions of a surface, with the surface being queried as<br/>
		/// the first element in the returned array.<br/>
		/// Freeing the array of surfaces does not affect the surfaces in the array.<br/>
		/// They are still referenced by the surface being queried and will be cleaned<br/>
		/// up normally.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface** GetSurfaceImagesNative(SDLSurface* surface, int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, int*, SDLSurface**>)funcTable[399])(surface, count);
			#else
			return (SDLSurface**)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[399])((nint)surface, (nint)count);
			#endif
		}

		/// <summary>
		/// Get an array including all versions of a surface.<br/>
		/// This returns all versions of a surface, with the surface being queried as<br/>
		/// the first element in the returned array.<br/>
		/// Freeing the array of surfaces does not affect the surfaces in the array.<br/>
		/// They are still referenced by the surface being queried and will be cleaned<br/>
		/// up normally.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface** GetSurfaceImages(SDLSurface* surface, int* count)
		{
			SDLSurface** ret = GetSurfaceImagesNative(surface, count);
			return ret;
		}

		/// <summary>
		/// Get an array including all versions of a surface.<br/>
		/// This returns all versions of a surface, with the surface being queried as<br/>
		/// the first element in the returned array.<br/>
		/// Freeing the array of surfaces does not affect the surfaces in the array.<br/>
		/// They are still referenced by the surface being queried and will be cleaned<br/>
		/// up normally.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface** GetSurfaceImages(ref SDLSurface surface, int* count)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				SDLSurface** ret = GetSurfaceImagesNative((SDLSurface*)psurface, count);
				return ret;
			}
		}

		/// <summary>
		/// Get an array including all versions of a surface.<br/>
		/// This returns all versions of a surface, with the surface being queried as<br/>
		/// the first element in the returned array.<br/>
		/// Freeing the array of surfaces does not affect the surfaces in the array.<br/>
		/// They are still referenced by the surface being queried and will be cleaned<br/>
		/// up normally.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface** GetSurfaceImages(SDLSurface* surface, ref int count)
		{
			fixed (int* pcount = &count)
			{
				SDLSurface** ret = GetSurfaceImagesNative(surface, (int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Get an array including all versions of a surface.<br/>
		/// This returns all versions of a surface, with the surface being queried as<br/>
		/// the first element in the returned array.<br/>
		/// Freeing the array of surfaces does not affect the surfaces in the array.<br/>
		/// They are still referenced by the surface being queried and will be cleaned<br/>
		/// up normally.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface** GetSurfaceImages(ref SDLSurface surface, ref int count)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				fixed (int* pcount = &count)
				{
					SDLSurface** ret = GetSurfaceImagesNative((SDLSurface*)psurface, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Remove all alternate versions of a surface.<br/>
		/// This function removes a reference from all the alternative versions,<br/>
		/// destroying them if this is the last reference to them.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RemoveSurfaceAlternateImagesNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSurface*, void>)funcTable[400])(surface);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[400])((nint)surface);
			#endif
		}

		/// <summary>
		/// Remove all alternate versions of a surface.<br/>
		/// This function removes a reference from all the alternative versions,<br/>
		/// destroying them if this is the last reference to them.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void RemoveSurfaceAlternateImages(SDLSurface* surface)
		{
			RemoveSurfaceAlternateImagesNative(surface);
		}

		/// <summary>
		/// Remove all alternate versions of a surface.<br/>
		/// This function removes a reference from all the alternative versions,<br/>
		/// destroying them if this is the last reference to them.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void RemoveSurfaceAlternateImages(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				RemoveSurfaceAlternateImagesNative((SDLSurface*)psurface);
			}
		}

		/// <summary>
		/// Set up a surface for directly accessing the pixels.<br/>
		/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>
		/// and read from `surface->pixels`, using the pixel format stored in<br/>
		/// `surface->format`. Once you are done accessing the surface, you should use<br/>
		/// SDL_UnlockSurface() to release it.<br/>
		/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>
		/// 0, then you can read and write to the surface at any time, and the pixel<br/>
		/// format of the surface will not change.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe. The locking referred to by<br/>
		/// this function is making the pixels available for direct<br/>
		/// access, not thread-safe locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte LockSurfaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, byte>)funcTable[401])(surface);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[401])((nint)surface);
			#endif
		}

		/// <summary>
		/// Set up a surface for directly accessing the pixels.<br/>
		/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>
		/// and read from `surface->pixels`, using the pixel format stored in<br/>
		/// `surface->format`. Once you are done accessing the surface, you should use<br/>
		/// SDL_UnlockSurface() to release it.<br/>
		/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>
		/// 0, then you can read and write to the surface at any time, and the pixel<br/>
		/// format of the surface will not change.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe. The locking referred to by<br/>
		/// this function is making the pixels available for direct<br/>
		/// access, not thread-safe locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool LockSurface(SDLSurface* surface)
		{
			byte ret = LockSurfaceNative(surface);
			return ret != 0;
		}

		/// <summary>
		/// Set up a surface for directly accessing the pixels.<br/>
		/// Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to<br/>
		/// and read from `surface->pixels`, using the pixel format stored in<br/>
		/// `surface->format`. Once you are done accessing the surface, you should use<br/>
		/// SDL_UnlockSurface() to release it.<br/>
		/// Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to<br/>
		/// 0, then you can read and write to the surface at any time, and the pixel<br/>
		/// format of the surface will not change.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe. The locking referred to by<br/>
		/// this function is making the pixels available for direct<br/>
		/// access, not thread-safe locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static bool LockSurface(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				byte ret = LockSurfaceNative((SDLSurface*)psurface);
				return ret != 0;
			}
		}

		/// <summary>
		/// Release a surface after directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe. The locking referred to by<br/>
		/// this function is making the pixels available for direct<br/>
		/// access, not thread-safe locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UnlockSurfaceNative(SDLSurface* surface)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLSurface*, void>)funcTable[402])(surface);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[402])((nint)surface);
			#endif
		}

		/// <summary>
		/// Release a surface after directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe. The locking referred to by<br/>
		/// this function is making the pixels available for direct<br/>
		/// access, not thread-safe locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnlockSurface(SDLSurface* surface)
		{
			UnlockSurfaceNative(surface);
		}

		/// <summary>
		/// Release a surface after directly accessing the pixels.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe. The locking referred to by<br/>
		/// this function is making the pixels available for direct<br/>
		/// access, not thread-safe locking.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static void UnlockSurface(ref SDLSurface surface)
		{
			fixed (SDLSurface* psurface = &surface)
			{
				UnlockSurfaceNative((SDLSurface*)psurface);
			}
		}

		/// <summary>
		/// Load a BMP image from a seekable SDL data stream.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* LoadBMPIONative(SDLIOStream* src, byte closeio)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLIOStream*, byte, SDLSurface*>)funcTable[403])(src, closeio);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, byte, nint>)funcTable[403])((nint)src, closeio);
			#endif
		}

		/// <summary>
		/// Load a BMP image from a seekable SDL data stream.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMPIO(SDLIOStream* src, bool closeio)
		{
			SDLSurface* ret = LoadBMPIONative(src, closeio ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Load a BMP image from a seekable SDL data stream.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMPIO(ref SDLIOStream src, bool closeio)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				SDLSurface* ret = LoadBMPIONative((SDLIOStream*)psrc, closeio ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// Load a BMP image from a file.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLSurface* LoadBMPNative(byte* file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLSurface*>)funcTable[404])(file);
			#else
			return (SDLSurface*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[404])((nint)file);
			#endif
		}

		/// <summary>
		/// Load a BMP image from a file.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMP(byte* file)
		{
			SDLSurface* ret = LoadBMPNative(file);
			return ret;
		}

		/// <summary>
		/// Load a BMP image from a file.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMP(ref byte file)
		{
			fixed (byte* pfile = &file)
			{
				SDLSurface* ret = LoadBMPNative((byte*)pfile);
				return ret;
			}
		}

		/// <summary>
		/// Load a BMP image from a file.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMP(ReadOnlySpan<byte> file)
		{
			fixed (byte* pfile = file)
			{
				SDLSurface* ret = LoadBMPNative((byte*)pfile);
				return ret;
			}
		}

		/// <summary>
		/// Load a BMP image from a file.<br/>
		/// The new surface should be freed with SDL_DestroySurface(). Not doing so<br/>
		/// will result in a memory leak.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		public static SDLSurface* LoadBMP(string file)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (file != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(file);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(file, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLSurface* ret = LoadBMPNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Save a surface to a seekable SDL data stream in BMP format.<br/>
		/// Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the<br/>
		/// BMP directly. Other RGB formats with 8-bit or higher get converted to a<br/>
		/// 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit<br/>
		/// surface before they are saved. YUV and paletted 1-bit and 4-bit formats are<br/>
		/// not supported.<br/>
		/// <br/>
		/// <br/>
		/// This function is not thread safe.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SaveBMPIONative(SDLSurface* surface, SDLIOStream* dst, byte closeio)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLSurface*, SDLIOStream*, byte, byte>)funcTable[405])(surface, dst, closeio);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte, byte>)funcTable[405])((nint)surface, (nint)dst, closeio);
			#endif
		}
	}
}
