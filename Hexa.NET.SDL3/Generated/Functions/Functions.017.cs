// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Get the firmware version of an opened joystick, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetJoystickFirmwareVersion([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				ushort ret = GetJoystickFirmwareVersionNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetJoystickSerialNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte*>)funcTable[654])(joystick);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[654])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetJoystickSerial([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			byte* ret = GetJoystickSerialNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetJoystickSerialS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			string ret = Utils.DecodeStringUTF8(GetJoystickSerialNative(joystick));
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetJoystickSerial([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte* ret = GetJoystickSerialNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened joystick, if available.<br/>
		/// Returns the serial number of the joystick, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetJoystickSerialS([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				string ret = Utils.DecodeStringUTF8(GetJoystickSerialNative((SDLJoystick*)pjoystick));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystickType GetJoystickTypeNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLJoystickType>)funcTable[655])(joystick);
			#else
			return (SDLJoystickType)((delegate* unmanaged[Cdecl]<nint, SDLJoystickType>)funcTable[655])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		public static SDLJoystickType GetJoystickType([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			SDLJoystickType ret = GetJoystickTypeNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the type of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickType")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickType")]
		public static SDLJoystickType GetJoystickType([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickType ret = GetJoystickTypeNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetJoystickGUIDInfoNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SdlGuid, ushort*, ushort*, ushort*, ushort*, void>)funcTable[656])(guid, vendor, product, version, crc16);
			#else
			((delegate* unmanaged[Cdecl]<SdlGuid, nint, nint, nint, nint, void>)funcTable[656])(guid, (nint)vendor, (nint)product, (nint)version, (nint)crc16);
			#endif
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			GetJoystickGUIDInfoNative(guid, vendor, product, version, crc16);
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, version, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, version, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, version, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			fixed (ushort* pversion = &version)
			{
				GetJoystickGUIDInfoNative(guid, vendor, product, (ushort*)pversion, crc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pversion = &version)
				{
					GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, (ushort*)pversion, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pversion = &version)
				{
					GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, (ushort*)pversion, crc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pversion = &version)
					{
						GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, (ushort*)pversion, crc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pcrc16 = &crc16)
			{
				GetJoystickGUIDInfoNative(guid, vendor, product, version, (ushort*)pcrc16);
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, version, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, version, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, version, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pversion = &version)
			{
				fixed (ushort* pcrc16 = &crc16)
				{
					GetJoystickGUIDInfoNative(guid, vendor, product, (ushort*)pversion, (ushort*)pcrc16);
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pversion = &version)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, product, (ushort*)pversion, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ushort* vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pproduct = &product)
			{
				fixed (ushort* pversion = &version)
				{
					fixed (ushort* pcrc16 = &crc16)
					{
						GetJoystickGUIDInfoNative(guid, vendor, (ushort*)pproduct, (ushort*)pversion, (ushort*)pcrc16);
					}
				}
			}
		}

		/// <summary>
		/// Get the device information encoded in a SDL_GUID structure.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickGUIDInfo")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetJoystickGUIDInfo([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid, [NativeName(NativeNameType.Param, "vendor")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort vendor, [NativeName(NativeNameType.Param, "product")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort product, [NativeName(NativeNameType.Param, "version")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort version, [NativeName(NativeNameType.Param, "crc16")] [NativeName(NativeNameType.Type, "Uint16 *")] ref ushort crc16)
		{
			fixed (ushort* pvendor = &vendor)
			{
				fixed (ushort* pproduct = &product)
				{
					fixed (ushort* pversion = &version)
					{
						fixed (ushort* pcrc16 = &crc16)
						{
							GetJoystickGUIDInfoNative(guid, (ushort*)pvendor, (ushort*)pproduct, (ushort*)pversion, (ushort*)pcrc16);
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickConnected")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte JoystickConnectedNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte>)funcTable[657])(joystick);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[657])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickConnected")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool JoystickConnected([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			byte ret = JoystickConnectedNative(joystick);
			return ret != 0;
		}

		/// <summary>
		/// Get the status of a specified joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickConnected")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool JoystickConnected([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = JoystickConnectedNative((SDLJoystick*)pjoystick);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetJoystickIDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[658])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[658])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int GetJoystickID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			int ret = GetJoystickIDNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of an opened joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int GetJoystickID([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = GetJoystickIDNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumJoystickAxesNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[659])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[659])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickAxes([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			int ret = GetNumJoystickAxesNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of general axis controls on a joystick.<br/>
		/// Often, the directional pad on a game controller will either look like 4<br/>
		/// separate buttons or a POV hat, and not axes, but all of this is up to the<br/>
		/// device and platform.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickAxes")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickAxes([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = GetNumJoystickAxesNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumJoystickBallsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[660])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[660])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickBalls([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			int ret = GetNumJoystickBallsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of trackballs on a joystick.<br/>
		/// Joystick trackballs have only relative motion events associated with them<br/>
		/// and their state cannot be polled.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickBalls")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickBalls([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = GetNumJoystickBallsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumJoystickHatsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[661])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[661])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickHats([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			int ret = GetNumJoystickHatsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of POV hats on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickHats")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickHats([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = GetNumJoystickHatsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNumJoystickButtonsNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int>)funcTable[662])(joystick);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[662])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickButtons([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			int ret = GetNumJoystickButtonsNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the number of buttons on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetNumJoystickButtons")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetNumJoystickButtons([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				int ret = GetNumJoystickButtonsNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Set the state of joystick event processing.<br/>
		/// If joystick events are disabled, you must call SDL_UpdateJoysticks()<br/>
		/// yourself and check the state of the joystick when you want joystick<br/>
		/// information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetJoystickEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetJoystickEventsEnabledNative([NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] byte enabled)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[663])(enabled);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[663])(enabled);
			#endif
		}

		/// <summary>
		/// Set the state of joystick event processing.<br/>
		/// If joystick events are disabled, you must call SDL_UpdateJoysticks()<br/>
		/// yourself and check the state of the joystick when you want joystick<br/>
		/// information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetJoystickEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetJoystickEventsEnabled([NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			SetJoystickEventsEnabledNative(enabled ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Query the state of joystick event processing.<br/>
		/// If joystick events are disabled, you must call SDL_UpdateJoysticks()<br/>
		/// yourself and check the state of the joystick when you want joystick<br/>
		/// information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte JoystickEventsEnabledNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[664])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[664])();
			#endif
		}

		/// <summary>
		/// Query the state of joystick event processing.<br/>
		/// If joystick events are disabled, you must call SDL_UpdateJoysticks()<br/>
		/// yourself and check the state of the joystick when you want joystick<br/>
		/// information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_JoystickEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool JoystickEventsEnabled()
		{
			byte ret = JoystickEventsEnabledNative();
			return ret != 0;
		}

		/// <summary>
		/// Update the current state of the open joysticks.<br/>
		/// This is called automatically by the event loop if any joystick events are<br/>
		/// enabled.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpdateJoysticks")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UpdateJoysticksNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[665])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[665])();
			#endif
		}

		/// <summary>
		/// Update the current state of the open joysticks.<br/>
		/// This is called automatically by the event loop if any joystick events are<br/>
		/// enabled.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpdateJoysticks")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateJoysticks()
		{
			UpdateJoysticksNative();
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_GetJoystickAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static short GetJoystickAxisNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, short>)funcTable[666])(joystick, axis);
			#else
			return (short)((delegate* unmanaged[Cdecl]<nint, int, short>)funcTable[666])((nint)joystick, axis);
			#endif
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_GetJoystickAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short GetJoystickAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			short ret = GetJoystickAxisNative(joystick, axis);
			return ret;
		}

		/// <summary>
		/// Get the current state of an axis control on a joystick.<br/>
		/// SDL makes no promises about what part of the joystick any given axis refers<br/>
		/// to. Your game should have some sort of configuration UI to let users<br/>
		/// specify what each axis should be bound to. Alternately, SDL's higher-level<br/>
		/// Game Controller API makes a great effort to apply order to this lower-level<br/>
		/// interface, so you know that a specific axis is the "left thumb stick," etc.<br/>
		/// The value returned by SDL_GetJoystickAxis() is a signed integer (-32768 to<br/>
		/// 32767) representing the current position of the axis. It may be necessary<br/>
		/// to impose certain tolerances on these values to account for jitter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short GetJoystickAxis([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				short ret = GetJoystickAxisNative((SDLJoystick*)pjoystick, axis);
				return ret;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetJoystickAxisInitialStateNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16 *")] short* state)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, short*, byte>)funcTable[667])(joystick, axis, state);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, nint, byte>)funcTable[667])((nint)joystick, axis, (nint)state);
			#endif
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16 *")] short* state)
		{
			byte ret = GetJoystickAxisInitialStateNative(joystick, axis, state);
			return ret != 0;
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16 *")] short* state)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = GetJoystickAxisInitialStateNative((SDLJoystick*)pjoystick, axis, state);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16 *")] ref short state)
		{
			fixed (short* pstate = &state)
			{
				byte ret = GetJoystickAxisInitialStateNative(joystick, axis, (short*)pstate);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the initial state of an axis control on a joystick.<br/>
		/// The state is a value ranging from -32768 to 32767.<br/>
		/// The axis indices start at index 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickAxisInitialState")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickAxisInitialState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "int")] int axis, [NativeName(NativeNameType.Param, "state")] [NativeName(NativeNameType.Type, "Sint16 *")] ref short state)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (short* pstate = &state)
				{
					byte ret = GetJoystickAxisInitialStateNative((SDLJoystick*)pjoystick, axis, (short*)pstate);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetJoystickBallNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] int* dy)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, int*, int*, byte>)funcTable[668])(joystick, ball, dx, dy);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, nint, nint, byte>)funcTable[668])((nint)joystick, ball, (nint)dx, (nint)dy);
			#endif
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] int* dy)
		{
			byte ret = GetJoystickBallNative(joystick, ball, dx, dy);
			return ret != 0;
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] int* dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = GetJoystickBallNative((SDLJoystick*)pjoystick, ball, dx, dy);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] int* dy)
		{
			fixed (int* pdx = &dx)
			{
				byte ret = GetJoystickBallNative(joystick, ball, (int*)pdx, dy);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] int* dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdx = &dx)
				{
					byte ret = GetJoystickBallNative((SDLJoystick*)pjoystick, ball, (int*)pdx, dy);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] ref int dy)
		{
			fixed (int* pdy = &dy)
			{
				byte ret = GetJoystickBallNative(joystick, ball, dx, (int*)pdy);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] int* dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] ref int dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdy = &dy)
				{
					byte ret = GetJoystickBallNative((SDLJoystick*)pjoystick, ball, dx, (int*)pdy);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] ref int dy)
		{
			fixed (int* pdx = &dx)
			{
				fixed (int* pdy = &dy)
				{
					byte ret = GetJoystickBallNative(joystick, ball, (int*)pdx, (int*)pdy);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// Get the ball axis change since the last poll.<br/>
		/// Trackballs can only return relative motion since the last call to<br/>
		/// SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.<br/>
		/// Most joysticks do not have trackballs.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickBall")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickBall([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "ball")] [NativeName(NativeNameType.Type, "int")] int ball, [NativeName(NativeNameType.Param, "dx")] [NativeName(NativeNameType.Type, "int *")] ref int dx, [NativeName(NativeNameType.Param, "dy")] [NativeName(NativeNameType.Type, "int *")] ref int dy)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* pdx = &dx)
				{
					fixed (int* pdy = &dy)
					{
						byte ret = GetJoystickBallNative((SDLJoystick*)pjoystick, ball, (int*)pdx, (int*)pdy);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the `SDL_HAT_*` values.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetJoystickHatNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte>)funcTable[669])(joystick, hat);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[669])((nint)joystick, hat);
			#endif
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the `SDL_HAT_*` values.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte GetJoystickHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			byte ret = GetJoystickHatNative(joystick, hat);
			return ret;
		}

		/// <summary>
		/// Get the current state of a POV hat on a joystick.<br/>
		/// The returned value will be one of the `SDL_HAT_*` values.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickHat")]
		[return: NativeName(NativeNameType.Type, "Uint8")]
		public static byte GetJoystickHat([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "hat")] [NativeName(NativeNameType.Type, "int")] int hat)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = GetJoystickHatNative((SDLJoystick*)pjoystick, hat);
				return ret;
			}
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetJoystickButtonNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int, byte>)funcTable[670])(joystick, button);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[670])((nint)joystick, button);
			#endif
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			byte ret = GetJoystickButtonNative(joystick, button);
			return ret != 0;
		}

		/// <summary>
		/// Get the current state of a button on a joystick.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickButton")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GetJoystickButton([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "int")] int button)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = GetJoystickButtonNative((SDLJoystick*)pjoystick, button);
				return ret != 0;
			}
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// This function requires you to process SDL events or call<br/>
		/// SDL_UpdateJoysticks() to update rumble state.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RumbleJoystick")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RumbleJoystickNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort, ushort, uint, byte>)funcTable[671])(joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, byte>)funcTable[671])((nint)joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// This function requires you to process SDL events or call<br/>
		/// SDL_UpdateJoysticks() to update rumble state.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RumbleJoystick")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RumbleJoystick([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			byte ret = RumbleJoystickNative(joystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
			return ret != 0;
		}

		/// <summary>
		/// Start a rumble effect.<br/>
		/// Each call to this function cancels any previous rumble effect, and calling<br/>
		/// it with 0 intensity stops any rumbling.<br/>
		/// This function requires you to process SDL events or call<br/>
		/// SDL_UpdateJoysticks() to update rumble state.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RumbleJoystick")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RumbleJoystick([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = RumbleJoystickNative((SDLJoystick*)pjoystick, lowFrequencyRumble, highFrequencyRumble, durationMs);
				return ret != 0;
			}
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers.<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_RumbleJoystick()<br/>
		/// instead.<br/>
		/// This function requires you to process SDL events or call<br/>
		/// SDL_UpdateJoysticks() to update rumble state.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RumbleJoystickTriggers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte RumbleJoystickTriggersNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, ushort, ushort, uint, byte>)funcTable[672])(joystick, leftRumble, rightRumble, durationMs);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ushort, ushort, uint, byte>)funcTable[672])((nint)joystick, leftRumble, rightRumble, durationMs);
			#endif
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers.<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_RumbleJoystick()<br/>
		/// instead.<br/>
		/// This function requires you to process SDL events or call<br/>
		/// SDL_UpdateJoysticks() to update rumble state.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RumbleJoystickTriggers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RumbleJoystickTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			byte ret = RumbleJoystickTriggersNative(joystick, leftRumble, rightRumble, durationMs);
			return ret != 0;
		}

		/// <summary>
		/// Start a rumble effect in the joystick's triggers.<br/>
		/// Each call to this function cancels any previous trigger rumble effect, and<br/>
		/// calling it with 0 intensity stops any rumbling.<br/>
		/// Note that this is rumbling of the _triggers_ and not the game controller as<br/>
		/// a whole. This is currently only supported on Xbox One controllers. If you<br/>
		/// want the (more common) whole-controller rumble, use SDL_RumbleJoystick()<br/>
		/// instead.<br/>
		/// This function requires you to process SDL events or call<br/>
		/// SDL_UpdateJoysticks() to update rumble state.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RumbleJoystickTriggers")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool RumbleJoystickTriggers([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble, [NativeName(NativeNameType.Param, "duration_ms")] [NativeName(NativeNameType.Type, "Uint32")] uint durationMs)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = RumbleJoystickTriggersNative((SDLJoystick*)pjoystick, leftRumble, rightRumble, durationMs);
				return ret != 0;
			}
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// For joysticks with a single color LED, the maximum of the RGB values will<br/>
		/// be used as the LED brightness.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetJoystickLED")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetJoystickLEDNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, byte, byte, byte, byte>)funcTable[673])(joystick, red, green, blue);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte, byte, byte, byte>)funcTable[673])((nint)joystick, red, green, blue);
			#endif
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// For joysticks with a single color LED, the maximum of the RGB values will<br/>
		/// be used as the LED brightness.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetJoystickLED")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetJoystickLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			byte ret = SetJoystickLEDNative(joystick, red, green, blue);
			return ret != 0;
		}

		/// <summary>
		/// Update a joystick's LED color.<br/>
		/// An example of a joystick LED is the light on the back of a PlayStation 4's<br/>
		/// DualShock 4 controller.<br/>
		/// For joysticks with a single color LED, the maximum of the RGB values will<br/>
		/// be used as the LED brightness.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetJoystickLED")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetJoystickLED([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = SetJoystickLEDNative((SDLJoystick*)pjoystick, red, green, blue);
				return ret != 0;
			}
		}

		/// <summary>
		/// Send a joystick specific effect packet.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SendJoystickEffect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SendJoystickEffectNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, void*, int, byte>)funcTable[674])(joystick, data, size);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, int, byte>)funcTable[674])((nint)joystick, (nint)data, size);
			#endif
		}

		/// <summary>
		/// Send a joystick specific effect packet.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SendJoystickEffect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SendJoystickEffect([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			byte ret = SendJoystickEffectNative(joystick, data, size);
			return ret != 0;
		}

		/// <summary>
		/// Send a joystick specific effect packet.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SendJoystickEffect")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SendJoystickEffect([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				byte ret = SendJoystickEffectNative((SDLJoystick*)pjoystick, data, size);
				return ret != 0;
			}
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_OpenJoystick().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CloseJoystick")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CloseJoystickNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<SDLJoystick*, void>)funcTable[675])(joystick);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[675])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_OpenJoystick().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CloseJoystick")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CloseJoystick([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			CloseJoystickNative(joystick);
		}

		/// <summary>
		/// Close a joystick previously opened with SDL_OpenJoystick().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CloseJoystick")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void CloseJoystick([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				CloseJoystickNative((SDLJoystick*)pjoystick);
			}
		}

		/// <summary>
		/// Get the connection state of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickConnectionState")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickConnectionState")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystickConnectionState GetJoystickConnectionStateNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, SDLJoystickConnectionState>)funcTable[676])(joystick);
			#else
			return (SDLJoystickConnectionState)((delegate* unmanaged[Cdecl]<nint, SDLJoystickConnectionState>)funcTable[676])((nint)joystick);
			#endif
		}

		/// <summary>
		/// Get the connection state of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickConnectionState")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickConnectionState")]
		public static SDLJoystickConnectionState GetJoystickConnectionState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick)
		{
			SDLJoystickConnectionState ret = GetJoystickConnectionStateNative(joystick);
			return ret;
		}

		/// <summary>
		/// Get the connection state of a joystick.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickConnectionState")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickConnectionState")]
		public static SDLJoystickConnectionState GetJoystickConnectionState([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLJoystickConnectionState ret = GetJoystickConnectionStateNative((SDLJoystick*)pjoystick);
				return ret;
			}
		}

		/// <summary>
		/// Get the battery state of a joystick.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLPowerState GetJoystickPowerInfoNative([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] int* percent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLJoystick*, int*, SDLPowerState>)funcTable[677])(joystick, percent);
			#else
			return (SDLPowerState)((delegate* unmanaged[Cdecl]<nint, nint, SDLPowerState>)funcTable[677])((nint)joystick, (nint)percent);
			#endif
		}

		/// <summary>
		/// Get the battery state of a joystick.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetJoystickPowerInfo([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] int* percent)
		{
			SDLPowerState ret = GetJoystickPowerInfoNative(joystick, percent);
			return ret;
		}

		/// <summary>
		/// Get the battery state of a joystick.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetJoystickPowerInfo([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] int* percent)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				SDLPowerState ret = GetJoystickPowerInfoNative((SDLJoystick*)pjoystick, percent);
				return ret;
			}
		}

		/// <summary>
		/// Get the battery state of a joystick.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetJoystickPowerInfo([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] SDLJoystick* joystick, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] ref int percent)
		{
			fixed (int* ppercent = &percent)
			{
				SDLPowerState ret = GetJoystickPowerInfoNative(joystick, (int*)ppercent);
				return ret;
			}
		}

		/// <summary>
		/// Get the battery state of a joystick.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetJoystickPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetJoystickPowerInfo([NativeName(NativeNameType.Param, "joystick")] [NativeName(NativeNameType.Type, "SDL_Joystick *")] ref SDLJoystick joystick, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] ref int percent)
		{
			fixed (SDLJoystick* pjoystick = &joystick)
			{
				fixed (int* ppercent = &percent)
				{
					SDLPowerState ret = GetJoystickPowerInfoNative((SDLJoystick*)pjoystick, (int*)ppercent);
					return ret;
				}
			}
		}

		/// <summary>
		/// Add support for gamepads that SDL is unaware of or change the binding of an<br/>
		/// existing gamepad.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_GUIDToString(), name is the human readable string for<br/>
		/// the device and mappings are gamepad mappings to joystick ones. Under<br/>
		/// Windows there is a reserved GUID of "xinput" that covers all XInput<br/>
		/// devices. The mapping format for joystick is:<br/>
		/// - `bX`: a joystick button, index X<br/>
		/// - `hX.Y`: hat X with value Y<br/>
		/// - `aX`: axis X of the joystick<br/>
		/// Buttons can be used as a gamepad axes and vice versa.<br/>
		/// If a device with this GUID is already plugged in, SDL will generate an<br/>
		/// SDL_EVENT_GAMEPAD_ADDED event.<br/>
		/// This string shows an example of a valid mapping for a gamepad:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AddGamepadMappingNative([NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] byte* mapping)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[678])(mapping);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[678])((nint)mapping);
			#endif
		}

		/// <summary>
		/// Add support for gamepads that SDL is unaware of or change the binding of an<br/>
		/// existing gamepad.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_GUIDToString(), name is the human readable string for<br/>
		/// the device and mappings are gamepad mappings to joystick ones. Under<br/>
		/// Windows there is a reserved GUID of "xinput" that covers all XInput<br/>
		/// devices. The mapping format for joystick is:<br/>
		/// - `bX`: a joystick button, index X<br/>
		/// - `hX.Y`: hat X with value Y<br/>
		/// - `aX`: axis X of the joystick<br/>
		/// Buttons can be used as a gamepad axes and vice versa.<br/>
		/// If a device with this GUID is already plugged in, SDL will generate an<br/>
		/// SDL_EVENT_GAMEPAD_ADDED event.<br/>
		/// This string shows an example of a valid mapping for a gamepad:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMapping([NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] byte* mapping)
		{
			int ret = AddGamepadMappingNative(mapping);
			return ret;
		}

		/// <summary>
		/// Add support for gamepads that SDL is unaware of or change the binding of an<br/>
		/// existing gamepad.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_GUIDToString(), name is the human readable string for<br/>
		/// the device and mappings are gamepad mappings to joystick ones. Under<br/>
		/// Windows there is a reserved GUID of "xinput" that covers all XInput<br/>
		/// devices. The mapping format for joystick is:<br/>
		/// - `bX`: a joystick button, index X<br/>
		/// - `hX.Y`: hat X with value Y<br/>
		/// - `aX`: axis X of the joystick<br/>
		/// Buttons can be used as a gamepad axes and vice versa.<br/>
		/// If a device with this GUID is already plugged in, SDL will generate an<br/>
		/// SDL_EVENT_GAMEPAD_ADDED event.<br/>
		/// This string shows an example of a valid mapping for a gamepad:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMapping([NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] ref byte mapping)
		{
			fixed (byte* pmapping = &mapping)
			{
				int ret = AddGamepadMappingNative((byte*)pmapping);
				return ret;
			}
		}

		/// <summary>
		/// Add support for gamepads that SDL is unaware of or change the binding of an<br/>
		/// existing gamepad.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_GUIDToString(), name is the human readable string for<br/>
		/// the device and mappings are gamepad mappings to joystick ones. Under<br/>
		/// Windows there is a reserved GUID of "xinput" that covers all XInput<br/>
		/// devices. The mapping format for joystick is:<br/>
		/// - `bX`: a joystick button, index X<br/>
		/// - `hX.Y`: hat X with value Y<br/>
		/// - `aX`: axis X of the joystick<br/>
		/// Buttons can be used as a gamepad axes and vice versa.<br/>
		/// If a device with this GUID is already plugged in, SDL will generate an<br/>
		/// SDL_EVENT_GAMEPAD_ADDED event.<br/>
		/// This string shows an example of a valid mapping for a gamepad:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMapping([NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> mapping)
		{
			fixed (byte* pmapping = mapping)
			{
				int ret = AddGamepadMappingNative((byte*)pmapping);
				return ret;
			}
		}

		/// <summary>
		/// Add support for gamepads that SDL is unaware of or change the binding of an<br/>
		/// existing gamepad.<br/>
		/// The mapping string has the format "GUID,name,mapping", where GUID is the<br/>
		/// string value from SDL_GUIDToString(), name is the human readable string for<br/>
		/// the device and mappings are gamepad mappings to joystick ones. Under<br/>
		/// Windows there is a reserved GUID of "xinput" that covers all XInput<br/>
		/// devices. The mapping format for joystick is:<br/>
		/// - `bX`: a joystick button, index X<br/>
		/// - `hX.Y`: hat X with value Y<br/>
		/// - `aX`: axis X of the joystick<br/>
		/// Buttons can be used as a gamepad axes and vice versa.<br/>
		/// If a device with this GUID is already plugged in, SDL will generate an<br/>
		/// SDL_EVENT_GAMEPAD_ADDED event.<br/>
		/// This string shows an example of a valid mapping for a gamepad:<br/>
		/// ```c<br/>
		/// "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7"<br/>
		/// ```<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMapping([NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] string mapping)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mapping != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mapping);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mapping, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = AddGamepadMappingNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Load a set of gamepad mappings from an SDL_IOStream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromIO")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AddGamepadMappingsFromIONative([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "bool")] byte closeio)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLIOStream*, byte, int>)funcTable[679])(src, closeio);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, byte, int>)funcTable[679])((nint)src, closeio);
			#endif
		}

		/// <summary>
		/// Load a set of gamepad mappings from an SDL_IOStream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromIO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMappingsFromIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] SDLIOStream* src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "bool")] bool closeio)
		{
			int ret = AddGamepadMappingsFromIONative(src, closeio ? (byte)1 : (byte)0);
			return ret;
		}

		/// <summary>
		/// Load a set of gamepad mappings from an SDL_IOStream.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// This function will load the text database entirely in memory before<br/>
		/// processing it, so take this into consideration if you are in a memory<br/>
		/// constrained environment.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromIO")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMappingsFromIO([NativeName(NativeNameType.Param, "src")] [NativeName(NativeNameType.Type, "SDL_IOStream *")] ref SDLIOStream src, [NativeName(NativeNameType.Param, "closeio")] [NativeName(NativeNameType.Type, "bool")] bool closeio)
		{
			fixed (SDLIOStream* psrc = &src)
			{
				int ret = AddGamepadMappingsFromIONative((SDLIOStream*)psrc, closeio ? (byte)1 : (byte)0);
				return ret;
			}
		}

		/// <summary>
		/// Load a set of gamepad mappings from a file.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromFile")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int AddGamepadMappingsFromFileNative([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "char const *")] byte* file)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int>)funcTable[680])(file);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[680])((nint)file);
			#endif
		}

		/// <summary>
		/// Load a set of gamepad mappings from a file.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromFile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMappingsFromFile([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "char const *")] byte* file)
		{
			int ret = AddGamepadMappingsFromFileNative(file);
			return ret;
		}

		/// <summary>
		/// Load a set of gamepad mappings from a file.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromFile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMappingsFromFile([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "char const *")] ref byte file)
		{
			fixed (byte* pfile = &file)
			{
				int ret = AddGamepadMappingsFromFileNative((byte*)pfile);
				return ret;
			}
		}

		/// <summary>
		/// Load a set of gamepad mappings from a file.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromFile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMappingsFromFile([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> file)
		{
			fixed (byte* pfile = file)
			{
				int ret = AddGamepadMappingsFromFileNative((byte*)pfile);
				return ret;
			}
		}

		/// <summary>
		/// Load a set of gamepad mappings from a file.<br/>
		/// You can call this function several times, if needed, to load different<br/>
		/// database files.<br/>
		/// If a new mapping is loaded for an already known gamepad GUID, the later<br/>
		/// version will overwrite the one currently loaded.<br/>
		/// Any new mappings for already plugged in controllers will generate<br/>
		/// SDL_EVENT_GAMEPAD_ADDED events.<br/>
		/// Mappings not belonging to the current platform or with no platform field<br/>
		/// specified will be ignored (i.e. mappings for Linux will be ignored in<br/>
		/// Windows, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_AddGamepadMappingsFromFile")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int AddGamepadMappingsFromFile([NativeName(NativeNameType.Param, "file")] [NativeName(NativeNameType.Type, "char const *")] string file)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (file != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(file);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(file, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = AddGamepadMappingsFromFileNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Reinitialize the SDL mapping database to its initial state.<br/>
		/// This will generate gamepad events as needed if device mappings change.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ReloadGamepadMappings")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ReloadGamepadMappingsNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[681])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[681])();
			#endif
		}

		/// <summary>
		/// Reinitialize the SDL mapping database to its initial state.<br/>
		/// This will generate gamepad events as needed if device mappings change.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ReloadGamepadMappings")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ReloadGamepadMappings()
		{
			byte ret = ReloadGamepadMappingsNative();
			return ret != 0;
		}

		/// <summary>
		/// Get the current gamepad mappings.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappings")]
		[return: NativeName(NativeNameType.Type, "char * *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte** GetGamepadMappingsNative([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*, byte**>)funcTable[682])(count);
			#else
			return (byte**)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[682])((nint)count);
			#endif
		}

		/// <summary>
		/// Get the current gamepad mappings.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappings")]
		[return: NativeName(NativeNameType.Type, "char * *")]
		public static byte** GetGamepadMappings([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			byte** ret = GetGamepadMappingsNative(count);
			return ret;
		}

		/// <summary>
		/// Get the current gamepad mappings.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappings")]
		[return: NativeName(NativeNameType.Type, "char * *")]
		public static byte** GetGamepadMappings([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (int* pcount = &count)
			{
				byte** ret = GetGamepadMappingsNative((int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Get the gamepad mapping string for a given GUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadMappingForGUIDNative([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SdlGuid, byte*>)funcTable[683])(guid);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SdlGuid, nint>)funcTable[683])(guid);
			#endif
		}

		/// <summary>
		/// Get the gamepad mapping string for a given GUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* GetGamepadMappingForGUID([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid)
		{
			byte* ret = GetGamepadMappingForGUIDNative(guid);
			return ret;
		}

		/// <summary>
		/// Get the gamepad mapping string for a given GUID.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappingForGUID")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string GetGamepadMappingForGUIDS([NativeName(NativeNameType.Param, "guid")] [NativeName(NativeNameType.Type, "SDL_GUID")] SdlGuid guid)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadMappingForGUIDNative(guid));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadMappingNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, byte*>)funcTable[684])(gamepad);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[684])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the current mapping of a gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* GetGamepadMapping([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			byte* ret = GetGamepadMappingNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string GetGamepadMappingS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadMappingNative(gamepad));
			return ret;
		}

		/// <summary>
		/// Get the current mapping of a gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* GetGamepadMapping([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				byte* ret = GetGamepadMappingNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the current mapping of a gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string GetGamepadMappingS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				string ret = Utils.DecodeStringUTF8(GetGamepadMappingNative((SDLGamepad*)pgamepad));
				return ret;
			}
		}

		/// <summary>
		/// Set the current mapping of a joystick or gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetGamepadMappingNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId, [NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] byte* mapping)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*, byte>)funcTable[685])(instanceId, mapping);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, nint, byte>)funcTable[685])(instanceId, (nint)mapping);
			#endif
		}

		/// <summary>
		/// Set the current mapping of a joystick or gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetGamepadMapping([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId, [NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] byte* mapping)
		{
			byte ret = SetGamepadMappingNative(instanceId, mapping);
			return ret != 0;
		}

		/// <summary>
		/// Set the current mapping of a joystick or gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetGamepadMapping([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId, [NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] ref byte mapping)
		{
			fixed (byte* pmapping = &mapping)
			{
				byte ret = SetGamepadMappingNative(instanceId, (byte*)pmapping);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the current mapping of a joystick or gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetGamepadMapping([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId, [NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> mapping)
		{
			fixed (byte* pmapping = mapping)
			{
				byte ret = SetGamepadMappingNative(instanceId, (byte*)pmapping);
				return ret != 0;
			}
		}

		/// <summary>
		/// Set the current mapping of a joystick or gamepad.<br/>
		/// Details about mappings are discussed with SDL_AddGamepadMapping().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadMapping")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetGamepadMapping([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId, [NativeName(NativeNameType.Param, "mapping")] [NativeName(NativeNameType.Type, "char const *")] string mapping)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mapping != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mapping);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mapping, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = SetGamepadMappingNative(instanceId, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Return whether a gamepad is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HasGamepad")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte HasGamepadNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[686])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[686])();
			#endif
		}

		/// <summary>
		/// Return whether a gamepad is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HasGamepad")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool HasGamepad()
		{
			byte ret = HasGamepadNative();
			return ret != 0;
		}

		/// <summary>
		/// Get a list of currently connected gamepads.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepads")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int* GetGamepadsNative([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*, int*>)funcTable[687])(count);
			#else
			return (int*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[687])((nint)count);
			#endif
		}

		/// <summary>
		/// Get a list of currently connected gamepads.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepads")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID *")]
		public static int* GetGamepads([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			int* ret = GetGamepadsNative(count);
			return ret;
		}

		/// <summary>
		/// Get a list of currently connected gamepads.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepads")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID *")]
		public static int* GetGamepads([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (int* pcount = &count)
			{
				int* ret = GetGamepadsNative((int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Check if the given joystick is supported by the gamepad interface.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsGamepad")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsGamepadNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte>)funcTable[688])(instanceId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, byte>)funcTable[688])(instanceId);
			#endif
		}

		/// <summary>
		/// Check if the given joystick is supported by the gamepad interface.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_IsGamepad")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsGamepad([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			byte ret = IsGamepadNative(instanceId);
			return ret != 0;
		}

		/// <summary>
		/// Get the implementation dependent name of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadNameForID")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadNameForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[689])(instanceId);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[689])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent name of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadNameForID")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadNameForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			byte* ret = GetGamepadNameForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent name of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadNameForID")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadNameForIDS([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadNameForIDNative(instanceId));
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPathForID")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadPathForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[690])(instanceId);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[690])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the implementation dependent path of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPathForID")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadPathForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			byte* ret = GetGamepadPathForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the implementation dependent path of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPathForID")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadPathForIDS([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadPathForIDNative(instanceId));
			return ret;
		}

		/// <summary>
		/// Get the player index of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPlayerIndexForID")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetGamepadPlayerIndexForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[691])(instanceId);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[691])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the player index of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPlayerIndexForID")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetGamepadPlayerIndexForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			int ret = GetGamepadPlayerIndexForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent GUID of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadGUIDForID")]
		[return: NativeName(NativeNameType.Type, "SDL_GUID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SdlGuid GetGamepadGUIDForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SdlGuid>)funcTable[692])(instanceId);
			#else
			return (SdlGuid)((delegate* unmanaged[Cdecl]<int, SdlGuid>)funcTable[692])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent GUID of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadGUIDForID")]
		[return: NativeName(NativeNameType.Type, "SDL_GUID")]
		public static SdlGuid GetGamepadGUIDForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			SdlGuid ret = GetGamepadGUIDForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the USB vendor ID of a gamepad, if available.<br/>
		/// This can be called before any gamepads are opened. If the vendor ID isn't<br/>
		/// available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadVendorForID")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GetGamepadVendorForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[693])(instanceId);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[693])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the USB vendor ID of a gamepad, if available.<br/>
		/// This can be called before any gamepads are opened. If the vendor ID isn't<br/>
		/// available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadVendorForID")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadVendorForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			ushort ret = GetGamepadVendorForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the USB product ID of a gamepad, if available.<br/>
		/// This can be called before any gamepads are opened. If the product ID isn't<br/>
		/// available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProductForID")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GetGamepadProductForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[694])(instanceId);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[694])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the USB product ID of a gamepad, if available.<br/>
		/// This can be called before any gamepads are opened. If the product ID isn't<br/>
		/// available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProductForID")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadProductForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			ushort ret = GetGamepadProductForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the product version of a gamepad, if available.<br/>
		/// This can be called before any gamepads are opened. If the product version<br/>
		/// isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProductVersionForID")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GetGamepadProductVersionForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[695])(instanceId);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<int, ushort>)funcTable[695])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the product version of a gamepad, if available.<br/>
		/// This can be called before any gamepads are opened. If the product version<br/>
		/// isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProductVersionForID")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadProductVersionForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			ushort ret = GetGamepadProductVersionForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the type of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadTypeForID")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadType GetGamepadTypeForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGamepadType>)funcTable[696])(instanceId);
			#else
			return (SDLGamepadType)((delegate* unmanaged[Cdecl]<int, SDLGamepadType>)funcTable[696])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the type of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadTypeForID")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetGamepadTypeForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			SDLGamepadType ret = GetGamepadTypeForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the type of a gamepad, ignoring any mapping override.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRealGamepadTypeForID")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadType GetRealGamepadTypeForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGamepadType>)funcTable[697])(instanceId);
			#else
			return (SDLGamepadType)((delegate* unmanaged[Cdecl]<int, SDLGamepadType>)funcTable[697])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the type of a gamepad, ignoring any mapping override.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRealGamepadTypeForID")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetRealGamepadTypeForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			SDLGamepadType ret = GetRealGamepadTypeForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappingForID")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadMappingForIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*>)funcTable[698])(instanceId);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[698])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the mapping of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappingForID")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* GetGamepadMappingForID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			byte* ret = GetGamepadMappingForIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the mapping of a gamepad.<br/>
		/// This can be called before any gamepads are opened.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadMappingForID")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string GetGamepadMappingForIDS([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadMappingForIDNative(instanceId));
			return ret;
		}

		/// <summary>
		/// Open a gamepad for use.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_OpenGamepad")]
		[return: NativeName(NativeNameType.Type, "SDL_Gamepad *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepad* OpenGamepadNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGamepad*>)funcTable[699])(instanceId);
			#else
			return (SDLGamepad*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[699])(instanceId);
			#endif
		}

		/// <summary>
		/// Open a gamepad for use.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_OpenGamepad")]
		[return: NativeName(NativeNameType.Type, "SDL_Gamepad *")]
		public static SDLGamepad* OpenGamepad([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			SDLGamepad* ret = OpenGamepadNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the SDL_Gamepad associated with a joystick instance ID, if it has been<br/>
		/// opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadFromID")]
		[return: NativeName(NativeNameType.Type, "SDL_Gamepad *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepad* GetGamepadFromIDNative([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGamepad*>)funcTable[700])(instanceId);
			#else
			return (SDLGamepad*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[700])(instanceId);
			#endif
		}

		/// <summary>
		/// Get the SDL_Gamepad associated with a joystick instance ID, if it has been<br/>
		/// opened.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadFromID")]
		[return: NativeName(NativeNameType.Type, "SDL_Gamepad *")]
		public static SDLGamepad* GetGamepadFromID([NativeName(NativeNameType.Param, "instance_id")] [NativeName(NativeNameType.Type, "SDL_JoystickID")] int instanceId)
		{
			SDLGamepad* ret = GetGamepadFromIDNative(instanceId);
			return ret;
		}

		/// <summary>
		/// Get the SDL_Gamepad associated with a player index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_Gamepad *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepad* GetGamepadFromPlayerIndexNative([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, SDLGamepad*>)funcTable[701])(playerIndex);
			#else
			return (SDLGamepad*)((delegate* unmanaged[Cdecl]<int, nint>)funcTable[701])(playerIndex);
			#endif
		}

		/// <summary>
		/// Get the SDL_Gamepad associated with a player index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadFromPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "SDL_Gamepad *")]
		public static SDLGamepad* GetGamepadFromPlayerIndex([NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			SDLGamepad* ret = GetGamepadFromPlayerIndexNative(playerIndex);
			return ret;
		}

		/// <summary>
		/// Get the properties associated with an opened gamepad.<br/>
		/// These properties are shared with the underlying joystick object.<br/>
		/// The following read-only properties are provided by SDL:<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN`: true if this gamepad has an LED<br/>
		/// that has adjustable brightness<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN`: true if this gamepad has an LED<br/>
		/// that has adjustable color<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN`: true if this gamepad has a<br/>
		/// player LED<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN`: true if this gamepad has<br/>
		/// left/right rumble<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN`: true if this gamepad has<br/>
		/// simple trigger rumble<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetGamepadPropertiesNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, uint>)funcTable[702])(gamepad);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[702])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the properties associated with an opened gamepad.<br/>
		/// These properties are shared with the underlying joystick object.<br/>
		/// The following read-only properties are provided by SDL:<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN`: true if this gamepad has an LED<br/>
		/// that has adjustable brightness<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN`: true if this gamepad has an LED<br/>
		/// that has adjustable color<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN`: true if this gamepad has a<br/>
		/// player LED<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN`: true if this gamepad has<br/>
		/// left/right rumble<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN`: true if this gamepad has<br/>
		/// simple trigger rumble<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		public static uint GetGamepadProperties([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			uint ret = GetGamepadPropertiesNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the properties associated with an opened gamepad.<br/>
		/// These properties are shared with the underlying joystick object.<br/>
		/// The following read-only properties are provided by SDL:<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN`: true if this gamepad has an LED<br/>
		/// that has adjustable brightness<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN`: true if this gamepad has an LED<br/>
		/// that has adjustable color<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN`: true if this gamepad has a<br/>
		/// player LED<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN`: true if this gamepad has<br/>
		/// left/right rumble<br/>
		/// - `SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN`: true if this gamepad has<br/>
		/// simple trigger rumble<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		public static uint GetGamepadProperties([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				uint ret = GetGamepadPropertiesNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the instance ID of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetGamepadIDNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, int>)funcTable[703])(gamepad);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[703])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the instance ID of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int GetGamepadID([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			int ret = GetGamepadIDNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the instance ID of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadID")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickID")]
		public static int GetGamepadID([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				int ret = GetGamepadIDNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadNameNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, byte*>)funcTable[704])(gamepad);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[704])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadName([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			byte* ret = GetGamepadNameNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadNameS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadNameNative(gamepad));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadName([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				byte* ret = GetGamepadNameNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent name for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadName")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadNameS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				string ret = Utils.DecodeStringUTF8(GetGamepadNameNative((SDLGamepad*)pgamepad));
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPath")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadPathNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, byte*>)funcTable[705])(gamepad);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[705])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPath")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadPath([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			byte* ret = GetGamepadPathNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPath")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadPathS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadPathNative(gamepad));
			return ret;
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPath")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadPath([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				byte* ret = GetGamepadPathNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the implementation-dependent path for an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPath")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadPathS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				string ret = Utils.DecodeStringUTF8(GetGamepadPathNative((SDLGamepad*)pgamepad));
				return ret;
			}
		}

		/// <summary>
		/// Get the type of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadType")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadType GetGamepadTypeNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, SDLGamepadType>)funcTable[706])(gamepad);
			#else
			return (SDLGamepadType)((delegate* unmanaged[Cdecl]<nint, SDLGamepadType>)funcTable[706])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the type of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadType")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetGamepadType([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			SDLGamepadType ret = GetGamepadTypeNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the type of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadType")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetGamepadType([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				SDLGamepadType ret = GetGamepadTypeNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the type of an opened gamepad, ignoring any mapping override.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRealGamepadType")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadType GetRealGamepadTypeNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, SDLGamepadType>)funcTable[707])(gamepad);
			#else
			return (SDLGamepadType)((delegate* unmanaged[Cdecl]<nint, SDLGamepadType>)funcTable[707])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the type of an opened gamepad, ignoring any mapping override.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRealGamepadType")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetRealGamepadType([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			SDLGamepadType ret = GetRealGamepadTypeNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the type of an opened gamepad, ignoring any mapping override.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetRealGamepadType")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetRealGamepadType([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				SDLGamepadType ret = GetRealGamepadTypeNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the player index of an opened gamepad.<br/>
		/// For XInput gamepads this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetGamepadPlayerIndexNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, int>)funcTable[708])(gamepad);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[708])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the player index of an opened gamepad.<br/>
		/// For XInput gamepads this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetGamepadPlayerIndex([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			int ret = GetGamepadPlayerIndexNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the player index of an opened gamepad.<br/>
		/// For XInput gamepads this returns the XInput user index.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetGamepadPlayerIndex([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				int ret = GetGamepadPlayerIndexNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Set the player index of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte SetGamepadPlayerIndexNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, int, byte>)funcTable[709])(gamepad, playerIndex);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, int, byte>)funcTable[709])((nint)gamepad, playerIndex);
			#endif
		}

		/// <summary>
		/// Set the player index of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetGamepadPlayerIndex([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			byte ret = SetGamepadPlayerIndexNative(gamepad, playerIndex);
			return ret != 0;
		}

		/// <summary>
		/// Set the player index of an opened gamepad.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadPlayerIndex")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool SetGamepadPlayerIndex([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				byte ret = SetGamepadPlayerIndexNative((SDLGamepad*)pgamepad, playerIndex);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the USB vendor ID of an opened gamepad, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GetGamepadVendorNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, ushort>)funcTable[710])(gamepad);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[710])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the USB vendor ID of an opened gamepad, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadVendor([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			ushort ret = GetGamepadVendorNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the USB vendor ID of an opened gamepad, if available.<br/>
		/// If the vendor ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadVendor")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadVendor([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				ushort ret = GetGamepadVendorNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the USB product ID of an opened gamepad, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GetGamepadProductNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, ushort>)funcTable[711])(gamepad);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[711])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the USB product ID of an opened gamepad, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadProduct([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			ushort ret = GetGamepadProductNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the USB product ID of an opened gamepad, if available.<br/>
		/// If the product ID isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProduct")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadProduct([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				ushort ret = GetGamepadProductNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the product version of an opened gamepad, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GetGamepadProductVersionNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, ushort>)funcTable[712])(gamepad);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[712])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the product version of an opened gamepad, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadProductVersion([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			ushort ret = GetGamepadProductVersionNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the product version of an opened gamepad, if available.<br/>
		/// If the product version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadProductVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadProductVersion([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				ushort ret = GetGamepadProductVersionNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the firmware version of an opened gamepad, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ushort GetGamepadFirmwareVersionNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, ushort>)funcTable[713])(gamepad);
			#else
			return (ushort)((delegate* unmanaged[Cdecl]<nint, ushort>)funcTable[713])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the firmware version of an opened gamepad, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadFirmwareVersion([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			ushort ret = GetGamepadFirmwareVersionNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the firmware version of an opened gamepad, if available.<br/>
		/// If the firmware version isn't available this function returns 0.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadFirmwareVersion")]
		[return: NativeName(NativeNameType.Type, "Uint16")]
		public static ushort GetGamepadFirmwareVersion([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				ushort ret = GetGamepadFirmwareVersionNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened gamepad, if available.<br/>
		/// Returns the serial number of the gamepad, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadSerialNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, byte*>)funcTable[714])(gamepad);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[714])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the serial number of an opened gamepad, if available.<br/>
		/// Returns the serial number of the gamepad, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadSerial([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			byte* ret = GetGamepadSerialNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened gamepad, if available.<br/>
		/// Returns the serial number of the gamepad, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadSerialS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadSerialNative(gamepad));
			return ret;
		}

		/// <summary>
		/// Get the serial number of an opened gamepad, if available.<br/>
		/// Returns the serial number of the gamepad, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadSerial([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				byte* ret = GetGamepadSerialNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the serial number of an opened gamepad, if available.<br/>
		/// Returns the serial number of the gamepad, or NULL if it is not available.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSerial")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadSerialS([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				string ret = Utils.DecodeStringUTF8(GetGamepadSerialNative((SDLGamepad*)pgamepad));
				return ret;
			}
		}

		/// <summary>
		/// Get the Steam Input handle of an opened gamepad, if available.<br/>
		/// Returns an InputHandle_t for the gamepad that can be used with Steam Input<br/>
		/// API: https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSteamHandle")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong GetGamepadSteamHandleNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, ulong>)funcTable[715])(gamepad);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<nint, ulong>)funcTable[715])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the Steam Input handle of an opened gamepad, if available.<br/>
		/// Returns an InputHandle_t for the gamepad that can be used with Steam Input<br/>
		/// API: https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSteamHandle")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong GetGamepadSteamHandle([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			ulong ret = GetGamepadSteamHandleNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the Steam Input handle of an opened gamepad, if available.<br/>
		/// Returns an InputHandle_t for the gamepad that can be used with Steam Input<br/>
		/// API: https://partner.steamgames.com/doc/api/ISteamInput<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadSteamHandle")]
		[return: NativeName(NativeNameType.Type, "Uint64")]
		public static ulong GetGamepadSteamHandle([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				ulong ret = GetGamepadSteamHandleNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the connection state of a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadConnectionState")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickConnectionState")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystickConnectionState GetGamepadConnectionStateNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, SDLJoystickConnectionState>)funcTable[716])(gamepad);
			#else
			return (SDLJoystickConnectionState)((delegate* unmanaged[Cdecl]<nint, SDLJoystickConnectionState>)funcTable[716])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the connection state of a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadConnectionState")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickConnectionState")]
		public static SDLJoystickConnectionState GetGamepadConnectionState([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			SDLJoystickConnectionState ret = GetGamepadConnectionStateNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the connection state of a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadConnectionState")]
		[return: NativeName(NativeNameType.Type, "SDL_JoystickConnectionState")]
		public static SDLJoystickConnectionState GetGamepadConnectionState([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				SDLJoystickConnectionState ret = GetGamepadConnectionStateNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Get the battery state of a gamepad.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLPowerState GetGamepadPowerInfoNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] int* percent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, int*, SDLPowerState>)funcTable[717])(gamepad, percent);
			#else
			return (SDLPowerState)((delegate* unmanaged[Cdecl]<nint, nint, SDLPowerState>)funcTable[717])((nint)gamepad, (nint)percent);
			#endif
		}

		/// <summary>
		/// Get the battery state of a gamepad.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetGamepadPowerInfo([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] int* percent)
		{
			SDLPowerState ret = GetGamepadPowerInfoNative(gamepad, percent);
			return ret;
		}

		/// <summary>
		/// Get the battery state of a gamepad.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetGamepadPowerInfo([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] int* percent)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				SDLPowerState ret = GetGamepadPowerInfoNative((SDLGamepad*)pgamepad, percent);
				return ret;
			}
		}

		/// <summary>
		/// Get the battery state of a gamepad.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetGamepadPowerInfo([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] ref int percent)
		{
			fixed (int* ppercent = &percent)
			{
				SDLPowerState ret = GetGamepadPowerInfoNative(gamepad, (int*)ppercent);
				return ret;
			}
		}

		/// <summary>
		/// Get the battery state of a gamepad.<br/>
		/// You should never take a battery status as absolute truth. Batteries<br/>
		/// (especially failing batteries) are delicate hardware, and the values<br/>
		/// reported here are best estimates based on what that hardware reports. It's<br/>
		/// not uncommon for older batteries to lose stored power much faster than it<br/>
		/// reports, or completely drain when reporting it has 20 percent left, etc.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadPowerInfo")]
		[return: NativeName(NativeNameType.Type, "SDL_PowerState")]
		public static SDLPowerState GetGamepadPowerInfo([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad, [NativeName(NativeNameType.Param, "percent")] [NativeName(NativeNameType.Type, "int *")] ref int percent)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				fixed (int* ppercent = &percent)
				{
					SDLPowerState ret = GetGamepadPowerInfoNative((SDLGamepad*)pgamepad, (int*)ppercent);
					return ret;
				}
			}
		}

		/// <summary>
		/// Check if a gamepad has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadConnected")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GamepadConnectedNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, byte>)funcTable[718])(gamepad);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[718])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Check if a gamepad has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadConnected")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GamepadConnected([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			byte ret = GamepadConnectedNative(gamepad);
			return ret != 0;
		}

		/// <summary>
		/// Check if a gamepad has been opened and is currently connected.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadConnected")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GamepadConnected([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				byte ret = GamepadConnectedNative((SDLGamepad*)pgamepad);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the underlying joystick from a gamepad.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_Gamepad object. This would be useful<br/>
		/// for getting a joystick's position at any given time, even if it hasn't<br/>
		/// moved (moving it would produce an event, which would have the axis' value).<br/>
		/// The pointer returned is owned by the SDL_Gamepad. You should not call<br/>
		/// SDL_CloseJoystick() on it, for example, since doing so will likely cause<br/>
		/// SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadJoystick")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLJoystick* GetGamepadJoystickNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, SDLJoystick*>)funcTable[719])(gamepad);
			#else
			return (SDLJoystick*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[719])((nint)gamepad);
			#endif
		}

		/// <summary>
		/// Get the underlying joystick from a gamepad.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_Gamepad object. This would be useful<br/>
		/// for getting a joystick's position at any given time, even if it hasn't<br/>
		/// moved (moving it would produce an event, which would have the axis' value).<br/>
		/// The pointer returned is owned by the SDL_Gamepad. You should not call<br/>
		/// SDL_CloseJoystick() on it, for example, since doing so will likely cause<br/>
		/// SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadJoystick")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick *")]
		public static SDLJoystick* GetGamepadJoystick([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad)
		{
			SDLJoystick* ret = GetGamepadJoystickNative(gamepad);
			return ret;
		}

		/// <summary>
		/// Get the underlying joystick from a gamepad.<br/>
		/// This function will give you a SDL_Joystick object, which allows you to use<br/>
		/// the SDL_Joystick functions with a SDL_Gamepad object. This would be useful<br/>
		/// for getting a joystick's position at any given time, even if it hasn't<br/>
		/// moved (moving it would produce an event, which would have the axis' value).<br/>
		/// The pointer returned is owned by the SDL_Gamepad. You should not call<br/>
		/// SDL_CloseJoystick() on it, for example, since doing so will likely cause<br/>
		/// SDL to crash.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadJoystick")]
		[return: NativeName(NativeNameType.Type, "SDL_Joystick *")]
		public static SDLJoystick* GetGamepadJoystick([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				SDLJoystick* ret = GetGamepadJoystickNative((SDLGamepad*)pgamepad);
				return ret;
			}
		}

		/// <summary>
		/// Set the state of gamepad event processing.<br/>
		/// If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself<br/>
		/// and check the state of the gamepad when you want gamepad information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetGamepadEventsEnabledNative([NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] byte enabled)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[720])(enabled);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[720])(enabled);
			#endif
		}

		/// <summary>
		/// Set the state of gamepad event processing.<br/>
		/// If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself<br/>
		/// and check the state of the gamepad when you want gamepad information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetGamepadEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetGamepadEventsEnabled([NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] bool enabled)
		{
			SetGamepadEventsEnabledNative(enabled ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Query the state of gamepad event processing.<br/>
		/// If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself<br/>
		/// and check the state of the gamepad when you want gamepad information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GamepadEventsEnabledNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[721])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[721])();
			#endif
		}

		/// <summary>
		/// Query the state of gamepad event processing.<br/>
		/// If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself<br/>
		/// and check the state of the gamepad when you want gamepad information.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadEventsEnabled")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GamepadEventsEnabled()
		{
			byte ret = GamepadEventsEnabledNative();
			return ret != 0;
		}

		/// <summary>
		/// Get the SDL joystick layer bindings for a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadBindings")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadBinding * *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadBinding** GetGamepadBindingsNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, int*, SDLGamepadBinding**>)funcTable[722])(gamepad, count);
			#else
			return (SDLGamepadBinding**)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[722])((nint)gamepad, (nint)count);
			#endif
		}

		/// <summary>
		/// Get the SDL joystick layer bindings for a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadBindings")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadBinding * *")]
		public static SDLGamepadBinding** GetGamepadBindings([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			SDLGamepadBinding** ret = GetGamepadBindingsNative(gamepad, count);
			return ret;
		}

		/// <summary>
		/// Get the SDL joystick layer bindings for a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadBindings")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadBinding * *")]
		public static SDLGamepadBinding** GetGamepadBindings([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				SDLGamepadBinding** ret = GetGamepadBindingsNative((SDLGamepad*)pgamepad, count);
				return ret;
			}
		}

		/// <summary>
		/// Get the SDL joystick layer bindings for a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadBindings")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadBinding * *")]
		public static SDLGamepadBinding** GetGamepadBindings([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (int* pcount = &count)
			{
				SDLGamepadBinding** ret = GetGamepadBindingsNative(gamepad, (int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Get the SDL joystick layer bindings for a gamepad.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadBindings")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadBinding * *")]
		public static SDLGamepadBinding** GetGamepadBindings([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				fixed (int* pcount = &count)
				{
					SDLGamepadBinding** ret = GetGamepadBindingsNative((SDLGamepad*)pgamepad, (int*)pcount);
					return ret;
				}
			}
		}

		/// <summary>
		/// Manually pump gamepad updates if not using the loop.<br/>
		/// This function is called automatically by the event loop if events are<br/>
		/// enabled. Under such circumstances, it will not be necessary to call this<br/>
		/// function.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpdateGamepads")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UpdateGamepadsNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[723])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[723])();
			#endif
		}

		/// <summary>
		/// Manually pump gamepad updates if not using the loop.<br/>
		/// This function is called automatically by the event loop if events are<br/>
		/// enabled. Under such circumstances, it will not be necessary to call this<br/>
		/// function.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_UpdateGamepads")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void UpdateGamepads()
		{
			UpdateGamepadsNative();
		}

		/// <summary>
		/// Convert a string into SDL_GamepadType enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadTypeFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadType GetGamepadTypeFromStringNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLGamepadType>)funcTable[724])(str);
			#else
			return (SDLGamepadType)((delegate* unmanaged[Cdecl]<nint, SDLGamepadType>)funcTable[724])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string into SDL_GamepadType enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadTypeFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetGamepadTypeFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			SDLGamepadType ret = GetGamepadTypeFromStringNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string into SDL_GamepadType enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadTypeFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetGamepadTypeFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				SDLGamepadType ret = GetGamepadTypeFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into SDL_GamepadType enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadTypeFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetGamepadTypeFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				SDLGamepadType ret = GetGamepadTypeFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into SDL_GamepadType enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadTypeFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadType")]
		public static SDLGamepadType GetGamepadTypeFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLGamepadType ret = GetGamepadTypeFromStringNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GamepadType enum to a string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadStringForType")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadStringForTypeNative([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "SDL_GamepadType")] SDLGamepadType type)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepadType, byte*>)funcTable[725])(type);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SDLGamepadType, nint>)funcTable[725])(type);
			#endif
		}

		/// <summary>
		/// Convert from an SDL_GamepadType enum to a string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadStringForType")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadStringForType([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "SDL_GamepadType")] SDLGamepadType type)
		{
			byte* ret = GetGamepadStringForTypeNative(type);
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GamepadType enum to a string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadStringForType")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadStringForTypeS([NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "SDL_GamepadType")] SDLGamepadType type)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadStringForTypeNative(type));
			return ret;
		}

		/// <summary>
		/// Convert a string into SDL_GamepadAxis enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_GAMEPAD_AXIS_RIGHT_TRIGGER` and `SDL_GAMEPAD_AXIS_LEFT_TRIGGER`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadAxis")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadAxis GetGamepadAxisFromStringNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLGamepadAxis>)funcTable[726])(str);
			#else
			return (SDLGamepadAxis)((delegate* unmanaged[Cdecl]<nint, SDLGamepadAxis>)funcTable[726])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string into SDL_GamepadAxis enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_GAMEPAD_AXIS_RIGHT_TRIGGER` and `SDL_GAMEPAD_AXIS_LEFT_TRIGGER`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadAxis")]
		public static SDLGamepadAxis GetGamepadAxisFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			SDLGamepadAxis ret = GetGamepadAxisFromStringNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string into SDL_GamepadAxis enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_GAMEPAD_AXIS_RIGHT_TRIGGER` and `SDL_GAMEPAD_AXIS_LEFT_TRIGGER`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadAxis")]
		public static SDLGamepadAxis GetGamepadAxisFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				SDLGamepadAxis ret = GetGamepadAxisFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into SDL_GamepadAxis enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_GAMEPAD_AXIS_RIGHT_TRIGGER` and `SDL_GAMEPAD_AXIS_LEFT_TRIGGER`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadAxis")]
		public static SDLGamepadAxis GetGamepadAxisFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				SDLGamepadAxis ret = GetGamepadAxisFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into SDL_GamepadAxis enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// Note specially that "righttrigger" and "lefttrigger" map to<br/>
		/// `SDL_GAMEPAD_AXIS_RIGHT_TRIGGER` and `SDL_GAMEPAD_AXIS_LEFT_TRIGGER`,<br/>
		/// respectively.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxisFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadAxis")]
		public static SDLGamepadAxis GetGamepadAxisFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLGamepadAxis ret = GetGamepadAxisFromStringNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GamepadAxis enum to a string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadStringForAxis")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadStringForAxisNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepadAxis, byte*>)funcTable[727])(axis);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SDLGamepadAxis, nint>)funcTable[727])(axis);
			#endif
		}

		/// <summary>
		/// Convert from an SDL_GamepadAxis enum to a string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadStringForAxis")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetGamepadStringForAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			byte* ret = GetGamepadStringForAxisNative(axis);
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GamepadAxis enum to a string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadStringForAxis")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetGamepadStringForAxisS([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			string ret = Utils.DecodeStringUTF8(GetGamepadStringForAxisNative(axis));
			return ret;
		}

		/// <summary>
		/// Query whether a gamepad has a given axis.<br/>
		/// This merely reports whether the gamepad's mapping defined this axis, as<br/>
		/// that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadHasAxis")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GamepadHasAxisNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, SDLGamepadAxis, byte>)funcTable[728])(gamepad, axis);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, SDLGamepadAxis, byte>)funcTable[728])((nint)gamepad, axis);
			#endif
		}

		/// <summary>
		/// Query whether a gamepad has a given axis.<br/>
		/// This merely reports whether the gamepad's mapping defined this axis, as<br/>
		/// that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadHasAxis")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GamepadHasAxis([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			byte ret = GamepadHasAxisNative(gamepad, axis);
			return ret != 0;
		}

		/// <summary>
		/// Query whether a gamepad has a given axis.<br/>
		/// This merely reports whether the gamepad's mapping defined this axis, as<br/>
		/// that is all the information SDL has about the physical device.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GamepadHasAxis")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool GamepadHasAxis([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				byte ret = GamepadHasAxisNative((SDLGamepad*)pgamepad, axis);
				return ret != 0;
			}
		}

		/// <summary>
		/// Get the current state of an axis control on a gamepad.<br/>
		/// The axis indices start at index 0.<br/>
		/// For thumbsticks, the state is a value ranging from -32768 (up/left) to<br/>
		/// 32767 (down/right).<br/>
		/// Triggers range from 0 when released to 32767 when fully pressed, and never<br/>
		/// return a negative value. Note that this differs from the value reported by<br/>
		/// the lower-level SDL_GetJoystickAxis(), which normally uses the full range.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static short GetGamepadAxisNative([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepad*, SDLGamepadAxis, short>)funcTable[729])(gamepad, axis);
			#else
			return (short)((delegate* unmanaged[Cdecl]<nint, SDLGamepadAxis, short>)funcTable[729])((nint)gamepad, axis);
			#endif
		}

		/// <summary>
		/// Get the current state of an axis control on a gamepad.<br/>
		/// The axis indices start at index 0.<br/>
		/// For thumbsticks, the state is a value ranging from -32768 (up/left) to<br/>
		/// 32767 (down/right).<br/>
		/// Triggers range from 0 when released to 32767 when fully pressed, and never<br/>
		/// return a negative value. Note that this differs from the value reported by<br/>
		/// the lower-level SDL_GetJoystickAxis(), which normally uses the full range.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short GetGamepadAxis([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] SDLGamepad* gamepad, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			short ret = GetGamepadAxisNative(gamepad, axis);
			return ret;
		}

		/// <summary>
		/// Get the current state of an axis control on a gamepad.<br/>
		/// The axis indices start at index 0.<br/>
		/// For thumbsticks, the state is a value ranging from -32768 (up/left) to<br/>
		/// 32767 (down/right).<br/>
		/// Triggers range from 0 when released to 32767 when fully pressed, and never<br/>
		/// return a negative value. Note that this differs from the value reported by<br/>
		/// the lower-level SDL_GetJoystickAxis(), which normally uses the full range.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadAxis")]
		[return: NativeName(NativeNameType.Type, "Sint16")]
		public static short GetGamepadAxis([NativeName(NativeNameType.Param, "gamepad")] [NativeName(NativeNameType.Type, "SDL_Gamepad *")] ref SDLGamepad gamepad, [NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "SDL_GamepadAxis")] SDLGamepadAxis axis)
		{
			fixed (SDLGamepad* pgamepad = &gamepad)
			{
				short ret = GetGamepadAxisNative((SDLGamepad*)pgamepad, axis);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into an SDL_GamepadButton enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadButtonFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadButton")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLGamepadButton GetGamepadButtonFromStringNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, SDLGamepadButton>)funcTable[730])(str);
			#else
			return (SDLGamepadButton)((delegate* unmanaged[Cdecl]<nint, SDLGamepadButton>)funcTable[730])((nint)str);
			#endif
		}

		/// <summary>
		/// Convert a string into an SDL_GamepadButton enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadButtonFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadButton")]
		public static SDLGamepadButton GetGamepadButtonFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			SDLGamepadButton ret = GetGamepadButtonFromStringNative(str);
			return ret;
		}

		/// <summary>
		/// Convert a string into an SDL_GamepadButton enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadButtonFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadButton")]
		public static SDLGamepadButton GetGamepadButtonFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				SDLGamepadButton ret = GetGamepadButtonFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into an SDL_GamepadButton enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadButtonFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadButton")]
		public static SDLGamepadButton GetGamepadButtonFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				SDLGamepadButton ret = GetGamepadButtonFromStringNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Convert a string into an SDL_GamepadButton enum.<br/>
		/// This function is called internally to translate SDL_Gamepad mapping strings<br/>
		/// for the underlying joystick device into the consistent SDL_Gamepad mapping.<br/>
		/// You do not normally need to call this function unless you are parsing<br/>
		/// SDL_Gamepad mappings in your own code.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadButtonFromString")]
		[return: NativeName(NativeNameType.Type, "SDL_GamepadButton")]
		public static SDLGamepadButton GetGamepadButtonFromString([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLGamepadButton ret = GetGamepadButtonFromStringNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert from an SDL_GamepadButton enum to a string.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetGamepadStringForButton")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetGamepadStringForButtonNative([NativeName(NativeNameType.Param, "button")] [NativeName(NativeNameType.Type, "SDL_GamepadButton")] SDLGamepadButton button)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLGamepadButton, byte*>)funcTable[731])(button);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<SDLGamepadButton, nint>)funcTable[731])(button);
			#endif
		}
	}
}
