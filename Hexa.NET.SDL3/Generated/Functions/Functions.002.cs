// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrchrNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, byte*>)funcTable[70])(str, c);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)funcTable[70])((nint)str, c);
			#endif
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			byte* ret = StrchrNative(str, c);
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			string ret = Utils.DecodeStringUTF8(StrchrNative(str, c));
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrchrNative(pStr0, c);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific byte.<br/>
		/// The search ends once it finds the requested byte value, or a null<br/>
		/// terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrchrNative(pStr0, c));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrrchrNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, byte*>)funcTable[71])(str, c);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, int, nint>)funcTable[71])((nint)str, c);
			#endif
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strrchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			byte* ret = StrrchrNative(str, c);
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			string ret = Utils.DecodeStringUTF8(StrrchrNative(str, c));
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strrchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strrchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = str)
			{
				byte* ret = StrrchrNative((byte*)pstr, c);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			fixed (byte* pstr = str)
			{
				string ret = Utils.DecodeStringUTF8(StrrchrNative((byte*)pstr, c));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strrchr([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrrchrNative(pStr0, c);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the last instance of a specific byte.<br/>
		/// The search must go until it finds a null terminator byte to end the string.<br/>
		/// Note that this looks for _bytes_, not _characters_, so you cannot match<br/>
		/// against a Unicode codepoint > 255, regardless of character encoding.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strrchr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrrchrS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "c")] [NativeName(NativeNameType.Type, "int")] int c)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrrchrNative(pStr0, c));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrstrNative([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)funcTable[72])(haystack, needle);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[72])((nint)haystack, (nint)needle);
			#endif
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			byte* ret = StrstrNative(haystack, needle);
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			string ret = Utils.DecodeStringUTF8(StrstrNative(haystack, needle));
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				byte* ret = StrstrNative((byte*)phaystack, needle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative((byte*)phaystack, needle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = haystack)
			{
				byte* ret = StrstrNative((byte*)phaystack, needle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative((byte*)phaystack, needle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrstrNative(pStr0, needle);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrstrNative(pStr0, needle));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* pneedle = &needle)
			{
				byte* ret = StrstrNative(haystack, (byte*)pneedle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* pneedle = &needle)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative(haystack, (byte*)pneedle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* pneedle = needle)
			{
				byte* ret = StrstrNative(haystack, (byte*)pneedle);
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF8(StrstrNative(haystack, (byte*)pneedle));
				return ret;
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (needle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(needle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(needle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrstrNative(haystack, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (needle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(needle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(needle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrstrNative(haystack, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				fixed (byte* pneedle = &needle)
				{
					byte* ret = StrstrNative((byte*)phaystack, (byte*)pneedle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				fixed (byte* pneedle = &needle)
				{
					string ret = Utils.DecodeStringUTF8(StrstrNative((byte*)phaystack, (byte*)pneedle));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* phaystack = haystack)
			{
				fixed (byte* pneedle = needle)
				{
					byte* ret = StrstrNative((byte*)phaystack, (byte*)pneedle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* phaystack = haystack)
			{
				fixed (byte* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF8(StrstrNative((byte*)phaystack, (byte*)pneedle));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (needle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(needle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(needle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = StrstrNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string for the first instance of a specific substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (needle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(needle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(needle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrstrNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrnstrNative([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, nuint, byte*>)funcTable[73])(haystack, needle, maxlen);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nuint, nint>)funcTable[73])((nint)haystack, (nint)needle, maxlen);
			#endif
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* ret = StrnstrNative(haystack, needle, maxlen);
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			string ret = Utils.DecodeStringUTF8(StrnstrNative(haystack, needle, maxlen));
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = &haystack)
			{
				byte* ret = StrnstrNative((byte*)phaystack, needle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = &haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrnstrNative((byte*)phaystack, needle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = haystack)
			{
				byte* ret = StrnstrNative((byte*)phaystack, needle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrnstrNative((byte*)phaystack, needle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrnstrNative(pStr0, needle, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrnstrNative(pStr0, needle, maxlen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pneedle = &needle)
			{
				byte* ret = StrnstrNative(haystack, (byte*)pneedle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pneedle = &needle)
			{
				string ret = Utils.DecodeStringUTF8(StrnstrNative(haystack, (byte*)pneedle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pneedle = needle)
			{
				byte* ret = StrnstrNative(haystack, (byte*)pneedle, maxlen);
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF8(StrnstrNative(haystack, (byte*)pneedle, maxlen));
				return ret;
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (needle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(needle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(needle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrnstrNative(haystack, pStr0, maxlen);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (needle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(needle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(needle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrnstrNative(haystack, pStr0, maxlen));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = &haystack)
			{
				fixed (byte* pneedle = &needle)
				{
					byte* ret = StrnstrNative((byte*)phaystack, (byte*)pneedle, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = &haystack)
			{
				fixed (byte* pneedle = &needle)
				{
					string ret = Utils.DecodeStringUTF8(StrnstrNative((byte*)phaystack, (byte*)pneedle, maxlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = haystack)
			{
				fixed (byte* pneedle = needle)
				{
					byte* ret = StrnstrNative((byte*)phaystack, (byte*)pneedle, maxlen);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			fixed (byte* phaystack = haystack)
			{
				fixed (byte* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF8(StrnstrNative((byte*)phaystack, (byte*)pneedle, maxlen));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strnstr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (needle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(needle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(needle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = StrnstrNative(pStr0, pStr1, maxlen);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a string, up to n bytes, for the first instance of a specific<br/>
		/// substring.<br/>
		/// The search ends once it finds the requested substring, or a null terminator<br/>
		/// byte to end the string, or `maxlen` bytes have been examined. It is<br/>
		/// possible to use this function on a string without a null terminator.<br/>
		/// Note that this looks for strings of _bytes_, not _characters_, so it's<br/>
		/// legal to search for malformed and incomplete UTF-8 sequences.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strnstr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrnstrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle, [NativeName(NativeNameType.Param, "maxlen")] [NativeName(NativeNameType.Type, "size_t")] nuint maxlen)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (needle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(needle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(needle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrnstrNative(pStr0, pStr1, maxlen));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrcasestrNative([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte*>)funcTable[74])(haystack, needle);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[74])((nint)haystack, (nint)needle);
			#endif
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			byte* ret = StrcasestrNative(haystack, needle);
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			string ret = Utils.DecodeStringUTF8(StrcasestrNative(haystack, needle));
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				byte* ret = StrcasestrNative((byte*)phaystack, needle);
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrcasestrNative((byte*)phaystack, needle));
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = haystack)
			{
				byte* ret = StrcasestrNative((byte*)phaystack, needle);
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			fixed (byte* phaystack = haystack)
			{
				string ret = Utils.DecodeStringUTF8(StrcasestrNative((byte*)phaystack, needle));
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrcasestrNative(pStr0, needle);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] byte* needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrcasestrNative(pStr0, needle));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* pneedle = &needle)
			{
				byte* ret = StrcasestrNative(haystack, (byte*)pneedle);
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* pneedle = &needle)
			{
				string ret = Utils.DecodeStringUTF8(StrcasestrNative(haystack, (byte*)pneedle));
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* pneedle = needle)
			{
				byte* ret = StrcasestrNative(haystack, (byte*)pneedle);
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* pneedle = needle)
			{
				string ret = Utils.DecodeStringUTF8(StrcasestrNative(haystack, (byte*)pneedle));
				return ret;
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (needle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(needle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(needle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrcasestrNative(haystack, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] byte* haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (needle != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(needle);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(needle, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrcasestrNative(haystack, pStr0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				fixed (byte* pneedle = &needle)
				{
					byte* ret = StrcasestrNative((byte*)phaystack, (byte*)pneedle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ref byte haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ref byte needle)
		{
			fixed (byte* phaystack = &haystack)
			{
				fixed (byte* pneedle = &needle)
				{
					string ret = Utils.DecodeStringUTF8(StrcasestrNative((byte*)phaystack, (byte*)pneedle));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* phaystack = haystack)
			{
				fixed (byte* pneedle = needle)
				{
					byte* ret = StrcasestrNative((byte*)phaystack, (byte*)pneedle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> needle)
		{
			fixed (byte* phaystack = haystack)
			{
				fixed (byte* pneedle = needle)
				{
					string ret = Utils.DecodeStringUTF8(StrcasestrNative((byte*)phaystack, (byte*)pneedle));
					return ret;
				}
			}
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Strcasestr([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (needle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(needle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(needle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = StrcasestrNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Search a UTF-8 string for the first instance of a specific substring,<br/>
		/// case-insensitively.<br/>
		/// This will work with Unicode strings, using a technique called<br/>
		/// "case-folding" to handle the vast majority of case-sensitive human<br/>
		/// languages regardless of system locale. It can deal with expanding values: a<br/>
		/// German Eszett character can compare against two ASCII 's' chars and be<br/>
		/// considered a match, for example. A notable exception: it does not handle<br/>
		/// the Turkish 'i' character; human language is complicated!<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), which is to say two strings of random bits may turn out to<br/>
		/// match if they convert to the same amount of replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strcasestr")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrcasestrS([NativeName(NativeNameType.Param, "haystack")] [NativeName(NativeNameType.Type, "char const *")] string haystack, [NativeName(NativeNameType.Param, "needle")] [NativeName(NativeNameType.Type, "char const *")] string needle)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (haystack != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(haystack);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(haystack, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (needle != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(needle);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(needle, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrcasestrNative(pStr0, pStr1));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* StrtokRNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte**, byte*>)funcTable[75])(str, delim, saveptr);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint>)funcTable[75])((nint)str, (nint)delim, (nint)saveptr);
			#endif
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			byte* ret = StrtokRNative(str, delim, saveptr);
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			string ret = Utils.DecodeStringUTF8(StrtokRNative(str, delim, saveptr));
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = StrtokRNative((byte*)pstr, delim, saveptr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(StrtokRNative((byte*)pstr, delim, saveptr));
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrtokRNative(pStr0, delim, saveptr);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrtokRNative(pStr0, delim, saveptr));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pdelim = &delim)
			{
				byte* ret = StrtokRNative(str, (byte*)pdelim, saveptr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pdelim = &delim)
			{
				string ret = Utils.DecodeStringUTF8(StrtokRNative(str, (byte*)pdelim, saveptr));
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pdelim = delim)
			{
				byte* ret = StrtokRNative(str, (byte*)pdelim, saveptr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pdelim = delim)
			{
				string ret = Utils.DecodeStringUTF8(StrtokRNative(str, (byte*)pdelim, saveptr));
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (delim != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(delim);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(delim, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = StrtokRNative(str, pStr0, saveptr);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (delim != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(delim);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(delim, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrtokRNative(str, pStr0, saveptr));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = &delim)
				{
					byte* ret = StrtokRNative((byte*)pstr, (byte*)pdelim, saveptr);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = &delim)
				{
					string ret = Utils.DecodeStringUTF8(StrtokRNative((byte*)pstr, (byte*)pdelim, saveptr));
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = delim)
				{
					byte* ret = StrtokRNative((byte*)pstr, (byte*)pdelim, saveptr);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = delim)
				{
					string ret = Utils.DecodeStringUTF8(StrtokRNative((byte*)pstr, (byte*)pdelim, saveptr));
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (delim != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(delim);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(delim, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* ret = StrtokRNative(pStr0, pStr1, saveptr);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] byte** saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (delim != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(delim);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(delim, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			string ret = Utils.DecodeStringUTF8(StrtokRNative(pStr0, pStr1, saveptr));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte** psaveptr = &saveptr)
			{
				byte* ret = StrtokRNative(str, delim, (byte**)psaveptr);
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte** psaveptr = &saveptr)
			{
				string ret = Utils.DecodeStringUTF8(StrtokRNative(str, delim, (byte**)psaveptr));
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte** psaveptr = &saveptr)
				{
					byte* ret = StrtokRNative((byte*)pstr, delim, (byte**)psaveptr);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte** psaveptr = &saveptr)
				{
					string ret = Utils.DecodeStringUTF8(StrtokRNative((byte*)pstr, delim, (byte**)psaveptr));
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** psaveptr = &saveptr)
			{
				byte* ret = StrtokRNative(pStr0, delim, (byte**)psaveptr);
				str = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] byte* delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** psaveptr = &saveptr)
			{
				string ret = Utils.DecodeStringUTF8(StrtokRNative(pStr0, delim, (byte**)psaveptr));
				str = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pdelim = &delim)
			{
				fixed (byte** psaveptr = &saveptr)
				{
					byte* ret = StrtokRNative(str, (byte*)pdelim, (byte**)psaveptr);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pdelim = &delim)
			{
				fixed (byte** psaveptr = &saveptr)
				{
					string ret = Utils.DecodeStringUTF8(StrtokRNative(str, (byte*)pdelim, (byte**)psaveptr));
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pdelim = delim)
			{
				fixed (byte** psaveptr = &saveptr)
				{
					byte* ret = StrtokRNative(str, (byte*)pdelim, (byte**)psaveptr);
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pdelim = delim)
			{
				fixed (byte** psaveptr = &saveptr)
				{
					string ret = Utils.DecodeStringUTF8(StrtokRNative(str, (byte*)pdelim, (byte**)psaveptr));
					return ret;
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (delim != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(delim);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(delim, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** psaveptr = &saveptr)
			{
				byte* ret = StrtokRNative(str, pStr0, (byte**)psaveptr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (delim != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(delim);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(delim, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte** psaveptr = &saveptr)
			{
				string ret = Utils.DecodeStringUTF8(StrtokRNative(str, pStr0, (byte**)psaveptr));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = &delim)
				{
					fixed (byte** psaveptr = &saveptr)
					{
						byte* ret = StrtokRNative((byte*)pstr, (byte*)pdelim, (byte**)psaveptr);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ref byte delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = &delim)
				{
					fixed (byte** psaveptr = &saveptr)
					{
						string ret = Utils.DecodeStringUTF8(StrtokRNative((byte*)pstr, (byte*)pdelim, (byte**)psaveptr));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = delim)
				{
					fixed (byte** psaveptr = &saveptr)
					{
						byte* ret = StrtokRNative((byte*)pstr, (byte*)pdelim, (byte**)psaveptr);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			fixed (byte* pstr = &str)
			{
				fixed (byte* pdelim = delim)
				{
					fixed (byte** psaveptr = &saveptr)
					{
						string ret = Utils.DecodeStringUTF8(StrtokRNative((byte*)pstr, (byte*)pdelim, (byte**)psaveptr));
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* StrtokR([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (delim != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(delim);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(delim, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte** psaveptr = &saveptr)
			{
				byte* ret = StrtokRNative(pStr0, pStr1, (byte**)psaveptr);
				str = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// This works exactly like strtok_r() but doesn't require access to a C<br/>
		/// runtime.<br/>
		/// Break a string up into a series of tokens.<br/>
		/// To start tokenizing a new string, `str` should be the non-NULL address of<br/>
		/// the string to start tokenizing. Future calls to get the next token from the<br/>
		/// same string should specify a NULL.<br/>
		/// Note that this function will overwrite pieces of `str` with null chars to<br/>
		/// split it into tokens. This function cannot be used with const/read-only<br/>
		/// strings!<br/>
		/// `saveptr` just needs to point to a `char *` that can be overwritten; SDL<br/>
		/// will use this to save tokenizing state between calls. It is initialized if<br/>
		/// `str` is non-NULL, and used to resume tokenizing when `str` is NULL.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_strtok_r")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string StrtokRS([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "delim")] [NativeName(NativeNameType.Type, "char const *")] string delim, [NativeName(NativeNameType.Param, "saveptr")] [NativeName(NativeNameType.Type, "char * *")] ref byte* saveptr)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (delim != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(delim);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(delim, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte** psaveptr = &saveptr)
			{
				string ret = Utils.DecodeStringUTF8(StrtokRNative(pStr0, pStr1, (byte**)psaveptr));
				str = Utils.DecodeStringUTF8(pStr0);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strlen().<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint Utf8StrlenNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint>)funcTable[76])(str);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint>)funcTable[76])((nint)str);
			#endif
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strlen().<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str)
		{
			nuint ret = Utf8StrlenNative(str);
			return ret;
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strlen().<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				nuint ret = Utf8StrlenNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strlen().<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				nuint ret = Utf8StrlenNative((byte*)pstr);
				return ret;
			}
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strlen().<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = Utf8StrlenNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string, up to n bytes.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strnlen().<br/>
		/// The counting stops at `bytes` bytes (not codepoints!). This seems<br/>
		/// counterintuitive, but makes it easy to express the total size of the<br/>
		/// string's buffer.<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nuint Utf8StrnlenNative([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint bytes)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, nuint, nuint>)funcTable[77])(str, bytes);
			#else
			return (nuint)((delegate* unmanaged[Cdecl]<nint, nuint, nuint>)funcTable[77])((nint)str, bytes);
			#endif
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string, up to n bytes.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strnlen().<br/>
		/// The counting stops at `bytes` bytes (not codepoints!). This seems<br/>
		/// counterintuitive, but makes it easy to express the total size of the<br/>
		/// string's buffer.<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] byte* str, [NativeName(NativeNameType.Param, "bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint bytes)
		{
			nuint ret = Utf8StrnlenNative(str, bytes);
			return ret;
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string, up to n bytes.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strnlen().<br/>
		/// The counting stops at `bytes` bytes (not codepoints!). This seems<br/>
		/// counterintuitive, but makes it easy to express the total size of the<br/>
		/// string's buffer.<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ref byte str, [NativeName(NativeNameType.Param, "bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint bytes)
		{
			fixed (byte* pstr = &str)
			{
				nuint ret = Utf8StrnlenNative((byte*)pstr, bytes);
				return ret;
			}
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string, up to n bytes.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strnlen().<br/>
		/// The counting stops at `bytes` bytes (not codepoints!). This seems<br/>
		/// counterintuitive, but makes it easy to express the total size of the<br/>
		/// string's buffer.<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> str, [NativeName(NativeNameType.Param, "bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint bytes)
		{
			fixed (byte* pstr = str)
			{
				nuint ret = Utf8StrnlenNative((byte*)pstr, bytes);
				return ret;
			}
		}

		/// <summary>
		/// Count the number of codepoints in a UTF-8 string, up to n bytes.<br/>
		/// Counts the _codepoints_, not _bytes_, in `str`, excluding the null<br/>
		/// terminator.<br/>
		/// If you need to count the bytes in a string instead, consider using<br/>
		/// SDL_strnlen().<br/>
		/// The counting stops at `bytes` bytes (not codepoints!). This seems<br/>
		/// counterintuitive, but makes it easy to express the total size of the<br/>
		/// string's buffer.<br/>
		/// Since this handles Unicode, it expects the strings to be well-formed UTF-8<br/>
		/// and not a null-terminated string of arbitrary bytes. Bytes that are not<br/>
		/// valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT<br/>
		/// CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the<br/>
		/// count by several replacement characters.<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_utf8strnlen")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Utf8Strnlen([NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char const *")] string str, [NativeName(NativeNameType.Param, "bytes")] [NativeName(NativeNameType.Type, "size_t")] nuint bytes)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			nuint ret = Utf8StrnlenNative(pStr0, bytes);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert an integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_itoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* ItoaNative([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, byte*, int, byte*>)funcTable[78])(value, str, radix);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<int, nint, int, nint>)funcTable[78])(value, (nint)str, radix);
			#endif
		}

		/// <summary>
		/// Convert an integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_itoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Itoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* ret = ItoaNative(value, str, radix);
			return ret;
		}

		/// <summary>
		/// Convert an integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_itoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string ItoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			string ret = Utils.DecodeStringUTF8(ItoaNative(value, str, radix));
			return ret;
		}

		/// <summary>
		/// Convert an integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_itoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Itoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = ItoaNative(value, (byte*)pstr, radix);
				return ret;
			}
		}

		/// <summary>
		/// Convert an integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_itoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string ItoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(ItoaNative(value, (byte*)pstr, radix));
				return ret;
			}
		}

		/// <summary>
		/// Convert an integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_itoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Itoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = ItoaNative(value, pStr0, radix);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert an integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_itoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string ItoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "int")] int value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(ItoaNative(value, pStr0, radix));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert an unsigned integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_uitoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* UitoaNative([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int, byte*>)funcTable[79])(value, str, radix);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<uint, nint, int, nint>)funcTable[79])(value, (nint)str, radix);
			#endif
		}

		/// <summary>
		/// Convert an unsigned integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_uitoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Uitoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* ret = UitoaNative(value, str, radix);
			return ret;
		}

		/// <summary>
		/// Convert an unsigned integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_uitoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UitoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			string ret = Utils.DecodeStringUTF8(UitoaNative(value, str, radix));
			return ret;
		}

		/// <summary>
		/// Convert an unsigned integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_uitoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Uitoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = UitoaNative(value, (byte*)pstr, radix);
				return ret;
			}
		}

		/// <summary>
		/// Convert an unsigned integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_uitoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UitoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(UitoaNative(value, (byte*)pstr, radix));
				return ret;
			}
		}

		/// <summary>
		/// Convert an unsigned integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_uitoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Uitoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = UitoaNative(value, pStr0, radix);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert an unsigned integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_uitoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string UitoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned int")] uint value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(UitoaNative(value, pStr0, radix));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert a long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_lltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* LltoaNative([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "long long")] long value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<long, byte*, int, byte*>)funcTable[80])(value, str, radix);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<long, nint, int, nint>)funcTable[80])(value, (nint)str, radix);
			#endif
		}

		/// <summary>
		/// Convert a long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_lltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Lltoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "long long")] long value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* ret = LltoaNative(value, str, radix);
			return ret;
		}

		/// <summary>
		/// Convert a long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_lltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string LltoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "long long")] long value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			string ret = Utils.DecodeStringUTF8(LltoaNative(value, str, radix));
			return ret;
		}

		/// <summary>
		/// Convert a long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_lltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Lltoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "long long")] long value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				byte* ret = LltoaNative(value, (byte*)pstr, radix);
				return ret;
			}
		}

		/// <summary>
		/// Convert a long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_lltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string LltoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "long long")] long value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref byte str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			fixed (byte* pstr = &str)
			{
				string ret = Utils.DecodeStringUTF8(LltoaNative(value, (byte*)pstr, radix));
				return ret;
			}
		}

		/// <summary>
		/// Convert a long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_lltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Lltoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "long long")] long value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* ret = LltoaNative(value, pStr0, radix);
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert a long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget possible negative<br/>
		/// signs, null terminator bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_lltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static string LltoaS([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "long long")] long value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] ref string str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			string ret = Utils.DecodeStringUTF8(LltoaNative(value, pStr0, radix));
			str = Utils.DecodeStringUTF8(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Convert an unsigned long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ulltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* UlltoaNative([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned long long")] ulong value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong, byte*, int, byte*>)funcTable[81])(value, str, radix);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<ulong, nint, int, nint>)funcTable[81])(value, (nint)str, radix);
			#endif
		}

		/// <summary>
		/// Convert an unsigned long long integer into a string.<br/>
		/// This requires a radix to specified for string format. Specifying 10<br/>
		/// produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2<br/>
		/// to 36.<br/>
		/// Note that this function will overflow a buffer if `str` is not large enough<br/>
		/// to hold the output! It may be safer to use SDL_snprintf to clamp output, or<br/>
		/// SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate<br/>
		/// much more space than you expect to use (and don't forget null terminator<br/>
		/// bytes, etc).<br/>
		/// <br/>
		/// <br/>
		/// It is safe to call this function from any thread.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ulltoa")]
		[return: NativeName(NativeNameType.Type, "char *")]
		public static byte* Ulltoa([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "unsigned long long")] ulong value, [NativeName(NativeNameType.Param, "str")] [NativeName(NativeNameType.Type, "char *")] byte* str, [NativeName(NativeNameType.Param, "radix")] [NativeName(NativeNameType.Type, "int")] int radix)
		{
			byte* ret = UlltoaNative(value, str, radix);
			return ret;
		}
	}
}
