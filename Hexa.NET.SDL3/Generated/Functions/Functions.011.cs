// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public unsafe partial class SDL
	{

		/// <summary>
		/// Query the display mode to use when a window is visible at fullscreen.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFullscreenMode")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayMode const *")]
		public static SDLDisplayMode* GetWindowFullscreenMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			SDLDisplayMode* ret = GetWindowFullscreenModeNative(window);
			return ret;
		}

		/// <summary>
		/// Query the display mode to use when a window is visible at fullscreen.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFullscreenMode")]
		[return: NativeName(NativeNameType.Type, "SDL_DisplayMode const *")]
		public static SDLDisplayMode* GetWindowFullscreenMode([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLDisplayMode* ret = GetWindowFullscreenModeNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get the raw ICC profile data for the screen the window is currently on.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* GetWindowICCProfileNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, nuint*, void*>)funcTable[433])(window, size);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<nint, nint, nint>)funcTable[433])((nint)window, (nint)size);
			#endif
		}

		/// <summary>
		/// Get the raw ICC profile data for the screen the window is currently on.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* GetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			void* ret = GetWindowICCProfileNative(window, size);
			return ret;
		}

		/// <summary>
		/// Get the raw ICC profile data for the screen the window is currently on.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* GetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				void* ret = GetWindowICCProfileNative((SDLWindow*)pwindow, size);
				return ret;
			}
		}

		/// <summary>
		/// Get the raw ICC profile data for the screen the window is currently on.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* GetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint size)
		{
			fixed (nuint* psize = &size)
			{
				void* ret = GetWindowICCProfileNative(window, (nuint*)psize);
				return ret;
			}
		}

		/// <summary>
		/// Get the raw ICC profile data for the screen the window is currently on.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowICCProfile")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* GetWindowICCProfile([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint size)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (nuint* psize = &size)
				{
					void* ret = GetWindowICCProfileNative((SDLWindow*)pwindow, (nuint*)psize);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the pixel format associated with the window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPixelFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_PixelFormat")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLPixelFormat GetWindowPixelFormatNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLPixelFormat>)funcTable[434])(window);
			#else
			return (SDLPixelFormat)((delegate* unmanaged[Cdecl]<nint, SDLPixelFormat>)funcTable[434])((nint)window);
			#endif
		}

		/// <summary>
		/// Get the pixel format associated with the window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPixelFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_PixelFormat")]
		public static SDLPixelFormat GetWindowPixelFormat([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			SDLPixelFormat ret = GetWindowPixelFormatNative(window);
			return ret;
		}

		/// <summary>
		/// Get the pixel format associated with the window.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPixelFormat")]
		[return: NativeName(NativeNameType.Type, "SDL_PixelFormat")]
		public static SDLPixelFormat GetWindowPixelFormat([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLPixelFormat ret = GetWindowPixelFormatNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get a list of valid windows.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindows")]
		[return: NativeName(NativeNameType.Type, "SDL_Window * *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLWindow** GetWindowsNative([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*, SDLWindow**>)funcTable[435])(count);
			#else
			return (SDLWindow**)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[435])((nint)count);
			#endif
		}

		/// <summary>
		/// Get a list of valid windows.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindows")]
		[return: NativeName(NativeNameType.Type, "SDL_Window * *")]
		public static SDLWindow** GetWindows([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] int* count)
		{
			SDLWindow** ret = GetWindowsNative(count);
			return ret;
		}

		/// <summary>
		/// Get a list of valid windows.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindows")]
		[return: NativeName(NativeNameType.Type, "SDL_Window * *")]
		public static SDLWindow** GetWindows([NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int *")] ref int count)
		{
			fixed (int* pcount = &count)
			{
				SDLWindow** ret = GetWindowsNative((int*)pcount);
				return ret;
			}
		}

		/// <summary>
		/// Create a window with the specified dimensions and flags.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution<br/>
		/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>
		/// - `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another<br/>
		/// window<br/>
		/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>
		/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>
		/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>
		/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>
		/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>
		/// - `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus<br/>
		/// - `SDL_WINDOW_INPUT_FOCUS`: window has input focus<br/>
		/// - `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus<br/>
		/// - `SDL_WINDOW_EXTERNAL`: window not created by SDL<br/>
		/// - `SDL_WINDOW_MODAL`: window is modal<br/>
		/// - `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back<br/>
		/// buffer if possible<br/>
		/// - `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to<br/>
		/// MOUSE_GRABBED)<br/>
		/// - `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others<br/>
		/// - `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not<br/>
		/// showing in the task bar and window list<br/>
		/// - `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not<br/>
		/// get mouse or keyboard focus, requires a parent window<br/>
		/// - `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,<br/>
		/// requires a parent window<br/>
		/// - `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input<br/>
		/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>
		/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>
		/// - `SDL_WINDOW_TRANSPARENT`: window with transparent buffer<br/>
		/// - `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable<br/>
		/// The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.<br/>
		/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>
		/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSize() to query<br/>
		/// the client area's size in window coordinates, and<br/>
		/// SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the<br/>
		/// drawable size in pixels. Note that the drawable size can vary after the<br/>
		/// window is created and should be queried again if you get an<br/>
		/// SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.<br/>
		/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>
		/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>
		/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>
		/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>
		/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>
		/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>
		/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>
		/// SDL_CreateWindow() will fail.<br/>
		/// If you intend to use this window with an SDL_Renderer, you should use<br/>
		/// SDL_CreateWindowAndRenderer() instead of this function, to avoid window<br/>
		/// flicker.<br/>
		/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>
		/// loader or link to a dynamic library version. This limitation may be removed<br/>
		/// in a future version of SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLWindow* CreateWindowNative([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] byte* title, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, int, int, SDLWindowFlags, SDLWindow*>)funcTable[436])(title, w, h, flags);
			#else
			return (SDLWindow*)((delegate* unmanaged[Cdecl]<nint, int, int, SDLWindowFlags, nint>)funcTable[436])((nint)title, w, h, flags);
			#endif
		}

		/// <summary>
		/// Create a window with the specified dimensions and flags.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution<br/>
		/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>
		/// - `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another<br/>
		/// window<br/>
		/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>
		/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>
		/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>
		/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>
		/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>
		/// - `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus<br/>
		/// - `SDL_WINDOW_INPUT_FOCUS`: window has input focus<br/>
		/// - `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus<br/>
		/// - `SDL_WINDOW_EXTERNAL`: window not created by SDL<br/>
		/// - `SDL_WINDOW_MODAL`: window is modal<br/>
		/// - `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back<br/>
		/// buffer if possible<br/>
		/// - `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to<br/>
		/// MOUSE_GRABBED)<br/>
		/// - `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others<br/>
		/// - `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not<br/>
		/// showing in the task bar and window list<br/>
		/// - `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not<br/>
		/// get mouse or keyboard focus, requires a parent window<br/>
		/// - `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,<br/>
		/// requires a parent window<br/>
		/// - `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input<br/>
		/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>
		/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>
		/// - `SDL_WINDOW_TRANSPARENT`: window with transparent buffer<br/>
		/// - `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable<br/>
		/// The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.<br/>
		/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>
		/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSize() to query<br/>
		/// the client area's size in window coordinates, and<br/>
		/// SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the<br/>
		/// drawable size in pixels. Note that the drawable size can vary after the<br/>
		/// window is created and should be queried again if you get an<br/>
		/// SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.<br/>
		/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>
		/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>
		/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>
		/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>
		/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>
		/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>
		/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>
		/// SDL_CreateWindow() will fail.<br/>
		/// If you intend to use this window with an SDL_Renderer, you should use<br/>
		/// SDL_CreateWindowAndRenderer() instead of this function, to avoid window<br/>
		/// flicker.<br/>
		/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>
		/// loader or link to a dynamic library version. This limitation may be removed<br/>
		/// in a future version of SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* CreateWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] byte* title, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			SDLWindow* ret = CreateWindowNative(title, w, h, flags);
			return ret;
		}

		/// <summary>
		/// Create a window with the specified dimensions and flags.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution<br/>
		/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>
		/// - `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another<br/>
		/// window<br/>
		/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>
		/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>
		/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>
		/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>
		/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>
		/// - `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus<br/>
		/// - `SDL_WINDOW_INPUT_FOCUS`: window has input focus<br/>
		/// - `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus<br/>
		/// - `SDL_WINDOW_EXTERNAL`: window not created by SDL<br/>
		/// - `SDL_WINDOW_MODAL`: window is modal<br/>
		/// - `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back<br/>
		/// buffer if possible<br/>
		/// - `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to<br/>
		/// MOUSE_GRABBED)<br/>
		/// - `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others<br/>
		/// - `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not<br/>
		/// showing in the task bar and window list<br/>
		/// - `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not<br/>
		/// get mouse or keyboard focus, requires a parent window<br/>
		/// - `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,<br/>
		/// requires a parent window<br/>
		/// - `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input<br/>
		/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>
		/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>
		/// - `SDL_WINDOW_TRANSPARENT`: window with transparent buffer<br/>
		/// - `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable<br/>
		/// The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.<br/>
		/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>
		/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSize() to query<br/>
		/// the client area's size in window coordinates, and<br/>
		/// SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the<br/>
		/// drawable size in pixels. Note that the drawable size can vary after the<br/>
		/// window is created and should be queried again if you get an<br/>
		/// SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.<br/>
		/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>
		/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>
		/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>
		/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>
		/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>
		/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>
		/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>
		/// SDL_CreateWindow() will fail.<br/>
		/// If you intend to use this window with an SDL_Renderer, you should use<br/>
		/// SDL_CreateWindowAndRenderer() instead of this function, to avoid window<br/>
		/// flicker.<br/>
		/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>
		/// loader or link to a dynamic library version. This limitation may be removed<br/>
		/// in a future version of SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* CreateWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] ref byte title, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			fixed (byte* ptitle = &title)
			{
				SDLWindow* ret = CreateWindowNative((byte*)ptitle, w, h, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create a window with the specified dimensions and flags.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution<br/>
		/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>
		/// - `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another<br/>
		/// window<br/>
		/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>
		/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>
		/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>
		/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>
		/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>
		/// - `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus<br/>
		/// - `SDL_WINDOW_INPUT_FOCUS`: window has input focus<br/>
		/// - `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus<br/>
		/// - `SDL_WINDOW_EXTERNAL`: window not created by SDL<br/>
		/// - `SDL_WINDOW_MODAL`: window is modal<br/>
		/// - `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back<br/>
		/// buffer if possible<br/>
		/// - `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to<br/>
		/// MOUSE_GRABBED)<br/>
		/// - `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others<br/>
		/// - `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not<br/>
		/// showing in the task bar and window list<br/>
		/// - `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not<br/>
		/// get mouse or keyboard focus, requires a parent window<br/>
		/// - `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,<br/>
		/// requires a parent window<br/>
		/// - `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input<br/>
		/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>
		/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>
		/// - `SDL_WINDOW_TRANSPARENT`: window with transparent buffer<br/>
		/// - `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable<br/>
		/// The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.<br/>
		/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>
		/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSize() to query<br/>
		/// the client area's size in window coordinates, and<br/>
		/// SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the<br/>
		/// drawable size in pixels. Note that the drawable size can vary after the<br/>
		/// window is created and should be queried again if you get an<br/>
		/// SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.<br/>
		/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>
		/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>
		/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>
		/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>
		/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>
		/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>
		/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>
		/// SDL_CreateWindow() will fail.<br/>
		/// If you intend to use this window with an SDL_Renderer, you should use<br/>
		/// SDL_CreateWindowAndRenderer() instead of this function, to avoid window<br/>
		/// flicker.<br/>
		/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>
		/// loader or link to a dynamic library version. This limitation may be removed<br/>
		/// in a future version of SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* CreateWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> title, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			fixed (byte* ptitle = title)
			{
				SDLWindow* ret = CreateWindowNative((byte*)ptitle, w, h, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create a window with the specified dimensions and flags.<br/>
		/// `flags` may be any of the following OR'd together:<br/>
		/// - `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution<br/>
		/// - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context<br/>
		/// - `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another<br/>
		/// window<br/>
		/// - `SDL_WINDOW_HIDDEN`: window is not visible<br/>
		/// - `SDL_WINDOW_BORDERLESS`: no window decoration<br/>
		/// - `SDL_WINDOW_RESIZABLE`: window can be resized<br/>
		/// - `SDL_WINDOW_MINIMIZED`: window is minimized<br/>
		/// - `SDL_WINDOW_MAXIMIZED`: window is maximized<br/>
		/// - `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus<br/>
		/// - `SDL_WINDOW_INPUT_FOCUS`: window has input focus<br/>
		/// - `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus<br/>
		/// - `SDL_WINDOW_EXTERNAL`: window not created by SDL<br/>
		/// - `SDL_WINDOW_MODAL`: window is modal<br/>
		/// - `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back<br/>
		/// buffer if possible<br/>
		/// - `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to<br/>
		/// MOUSE_GRABBED)<br/>
		/// - `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others<br/>
		/// - `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not<br/>
		/// showing in the task bar and window list<br/>
		/// - `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not<br/>
		/// get mouse or keyboard focus, requires a parent window<br/>
		/// - `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,<br/>
		/// requires a parent window<br/>
		/// - `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input<br/>
		/// - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance<br/>
		/// - `SDL_WINDOW_METAL`: window usable with a Metal instance<br/>
		/// - `SDL_WINDOW_TRANSPARENT`: window with transparent buffer<br/>
		/// - `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable<br/>
		/// The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.<br/>
		/// On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist<br/>
		/// property to YES, otherwise you will not receive a High-DPI OpenGL canvas.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSize() to query<br/>
		/// the client area's size in window coordinates, and<br/>
		/// SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the<br/>
		/// drawable size in pixels. Note that the drawable size can vary after the<br/>
		/// window is created and should be queried again if you get an<br/>
		/// SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.<br/>
		/// If the window is created with any of the SDL_WINDOW_OPENGL or<br/>
		/// SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function<br/>
		/// (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the<br/>
		/// corresponding UnloadLibrary function is called by SDL_DestroyWindow().<br/>
		/// If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,<br/>
		/// SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.<br/>
		/// If SDL_WINDOW_METAL is specified on an OS that does not support Metal,<br/>
		/// SDL_CreateWindow() will fail.<br/>
		/// If you intend to use this window with an SDL_Renderer, you should use<br/>
		/// SDL_CreateWindowAndRenderer() instead of this function, to avoid window<br/>
		/// flicker.<br/>
		/// On non-Apple devices, SDL requires you to either not link to the Vulkan<br/>
		/// loader or link to a dynamic library version. This limitation may be removed<br/>
		/// in a future version of SDL.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* CreateWindow([NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] string title, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (title != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(title);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(title, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SDLWindow* ret = CreateWindowNative(pStr0, w, h, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Create a child popup window of the specified parent window.<br/>
		/// 'flags' **must** contain exactly one of the following: -<br/>
		/// 'SDL_WINDOW_TOOLTIP': The popup window is a tooltip and will not pass any<br/>
		/// input events. - 'SDL_WINDOW_POPUP_MENU': The popup window is a popup menu.<br/>
		/// The topmost popup menu will implicitly gain the keyboard focus.<br/>
		/// The following flags are not relevant to popup window creation and will be<br/>
		/// ignored:<br/>
		/// - 'SDL_WINDOW_MINIMIZED'<br/>
		/// - 'SDL_WINDOW_MAXIMIZED'<br/>
		/// - 'SDL_WINDOW_FULLSCREEN'<br/>
		/// - 'SDL_WINDOW_BORDERLESS'<br/>
		/// The parent parameter **must** be non-null and a valid window. The parent of<br/>
		/// a popup window can be either a regular, toplevel window, or another popup<br/>
		/// window.<br/>
		/// Popup windows cannot be minimized, maximized, made fullscreen, raised,<br/>
		/// flash, be made a modal window, be the parent of a modal window, or grab the<br/>
		/// mouse and/or keyboard. Attempts to do so will fail.<br/>
		/// Popup windows implicitly do not have a border/decorations and do not appear<br/>
		/// on the taskbar/dock or in lists of windows such as alt-tab menus.<br/>
		/// If a parent window is hidden, any child popup windows will be recursively<br/>
		/// hidden as well. Child popup windows not explicitly hidden will be restored<br/>
		/// when the parent is shown.<br/>
		/// If the parent window is destroyed, any child popup windows will be<br/>
		/// recursively destroyed as well.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreatePopupWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLWindow* CreatePopupWindowNative([NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* parent, [NativeName(NativeNameType.Param, "offset_x")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offset_y")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, int, int, SDLWindowFlags, SDLWindow*>)funcTable[437])(parent, offsetX, offsetY, w, h, flags);
			#else
			return (SDLWindow*)((delegate* unmanaged[Cdecl]<nint, int, int, int, int, SDLWindowFlags, nint>)funcTable[437])((nint)parent, offsetX, offsetY, w, h, flags);
			#endif
		}

		/// <summary>
		/// Create a child popup window of the specified parent window.<br/>
		/// 'flags' **must** contain exactly one of the following: -<br/>
		/// 'SDL_WINDOW_TOOLTIP': The popup window is a tooltip and will not pass any<br/>
		/// input events. - 'SDL_WINDOW_POPUP_MENU': The popup window is a popup menu.<br/>
		/// The topmost popup menu will implicitly gain the keyboard focus.<br/>
		/// The following flags are not relevant to popup window creation and will be<br/>
		/// ignored:<br/>
		/// - 'SDL_WINDOW_MINIMIZED'<br/>
		/// - 'SDL_WINDOW_MAXIMIZED'<br/>
		/// - 'SDL_WINDOW_FULLSCREEN'<br/>
		/// - 'SDL_WINDOW_BORDERLESS'<br/>
		/// The parent parameter **must** be non-null and a valid window. The parent of<br/>
		/// a popup window can be either a regular, toplevel window, or another popup<br/>
		/// window.<br/>
		/// Popup windows cannot be minimized, maximized, made fullscreen, raised,<br/>
		/// flash, be made a modal window, be the parent of a modal window, or grab the<br/>
		/// mouse and/or keyboard. Attempts to do so will fail.<br/>
		/// Popup windows implicitly do not have a border/decorations and do not appear<br/>
		/// on the taskbar/dock or in lists of windows such as alt-tab menus.<br/>
		/// If a parent window is hidden, any child popup windows will be recursively<br/>
		/// hidden as well. Child popup windows not explicitly hidden will be restored<br/>
		/// when the parent is shown.<br/>
		/// If the parent window is destroyed, any child popup windows will be<br/>
		/// recursively destroyed as well.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreatePopupWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* CreatePopupWindow([NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* parent, [NativeName(NativeNameType.Param, "offset_x")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offset_y")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			SDLWindow* ret = CreatePopupWindowNative(parent, offsetX, offsetY, w, h, flags);
			return ret;
		}

		/// <summary>
		/// Create a child popup window of the specified parent window.<br/>
		/// 'flags' **must** contain exactly one of the following: -<br/>
		/// 'SDL_WINDOW_TOOLTIP': The popup window is a tooltip and will not pass any<br/>
		/// input events. - 'SDL_WINDOW_POPUP_MENU': The popup window is a popup menu.<br/>
		/// The topmost popup menu will implicitly gain the keyboard focus.<br/>
		/// The following flags are not relevant to popup window creation and will be<br/>
		/// ignored:<br/>
		/// - 'SDL_WINDOW_MINIMIZED'<br/>
		/// - 'SDL_WINDOW_MAXIMIZED'<br/>
		/// - 'SDL_WINDOW_FULLSCREEN'<br/>
		/// - 'SDL_WINDOW_BORDERLESS'<br/>
		/// The parent parameter **must** be non-null and a valid window. The parent of<br/>
		/// a popup window can be either a regular, toplevel window, or another popup<br/>
		/// window.<br/>
		/// Popup windows cannot be minimized, maximized, made fullscreen, raised,<br/>
		/// flash, be made a modal window, be the parent of a modal window, or grab the<br/>
		/// mouse and/or keyboard. Attempts to do so will fail.<br/>
		/// Popup windows implicitly do not have a border/decorations and do not appear<br/>
		/// on the taskbar/dock or in lists of windows such as alt-tab menus.<br/>
		/// If a parent window is hidden, any child popup windows will be recursively<br/>
		/// hidden as well. Child popup windows not explicitly hidden will be restored<br/>
		/// when the parent is shown.<br/>
		/// If the parent window is destroyed, any child popup windows will be<br/>
		/// recursively destroyed as well.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreatePopupWindow")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* CreatePopupWindow([NativeName(NativeNameType.Param, "parent")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow parent, [NativeName(NativeNameType.Param, "offset_x")] [NativeName(NativeNameType.Type, "int")] int offsetX, [NativeName(NativeNameType.Param, "offset_y")] [NativeName(NativeNameType.Type, "int")] int offsetY, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "SDL_WindowFlags")] SDLWindowFlags flags)
		{
			fixed (SDLWindow* pparent = &parent)
			{
				SDLWindow* ret = CreatePopupWindowNative((SDLWindow*)pparent, offsetX, offsetY, w, h, flags);
				return ret;
			}
		}

		/// <summary>
		/// Create a window with the specified properties.<br/>
		/// These are the supported properties:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN`: true if the window should<br/>
		/// be always on top<br/>
		/// - `SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN`: true if the window has no<br/>
		/// window decoration<br/>
		/// - `SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN`: true if the<br/>
		/// window will be used with an externally managed graphics context.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN`: true if the window should<br/>
		/// accept keyboard input (defaults true)<br/>
		/// - `SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN`: true if the window should<br/>
		/// start in fullscreen mode at desktop resolution<br/>
		/// - `SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER`: the height of the window<br/>
		/// - `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN`: true if the window should start<br/>
		/// hidden<br/>
		/// - `SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN`: true if the window<br/>
		/// uses a high pixel density buffer if possible<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN`: true if the window should<br/>
		/// start maximized<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN`: true if the window is a popup menu<br/>
		/// - `SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN`: true if the window will be used<br/>
		/// with Metal rendering<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN`: true if the window should<br/>
		/// start minimized<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN`: true if the window is modal to<br/>
		/// its parent<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN`: true if the window starts<br/>
		/// with grabbed mouse focus<br/>
		/// - `SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`: true if the window will be used<br/>
		/// with OpenGL rendering<br/>
		/// - `SDL_PROP_WINDOW_CREATE_PARENT_POINTER`: an SDL_Window that will be the<br/>
		/// parent of this window, required for windows with the "toolip", "menu",<br/>
		/// and "modal" properties<br/>
		/// - `SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN`: true if the window should be<br/>
		/// resizable<br/>
		/// - `SDL_PROP_WINDOW_CREATE_TITLE_STRING`: the title of the window, in UTF-8<br/>
		/// encoding<br/>
		/// - `SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN`: true if the window show<br/>
		/// transparent in the areas with alpha of 0<br/>
		/// - `SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN`: true if the window is a tooltip<br/>
		/// - `SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN`: true if the window is a utility<br/>
		/// window, not showing in the task bar and window list<br/>
		/// - `SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN`: true if the window will be used<br/>
		/// with Vulkan rendering<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER`: the width of the window<br/>
		/// - `SDL_PROP_WINDOW_CREATE_X_NUMBER`: the x position of the window, or<br/>
		/// `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is<br/>
		/// relative to the parent for windows with the "parent" property set.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_Y_NUMBER`: the y position of the window, or<br/>
		/// `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is<br/>
		/// relative to the parent for windows with the "parent" property set.<br/>
		/// These are additional supported properties on macOS:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER`: the<br/>
		/// `(__unsafe_unretained)` NSWindow associated with the window, if you want<br/>
		/// to wrap an existing window.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// NSView associated with the window, defaults to `[window contentView]`<br/>
		/// These are additional supported properties on Wayland:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN` - true if<br/>
		/// the application wants to use the Wayland surface for a custom role and<br/>
		/// does not want it attached to an XDG toplevel window. See<br/>
		/// [README/wayland](README/wayland) for more information on using custom<br/>
		/// surfaces.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN` - true if the<br/>
		/// application wants an associated `wl_egl_window` object to be created,<br/>
		/// even if the window does not have the OpenGL property or flag set.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER` - the wl_surface<br/>
		/// associated with the window, if you want to wrap an existing window. See<br/>
		/// [README/wayland](README/wayland) for more information.<br/>
		/// These are additional supported properties on Windows:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER`: the HWND associated with the<br/>
		/// window, if you want to wrap an existing window.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER`: optional,<br/>
		/// another window to share pixel format with, useful for OpenGL windows<br/>
		/// These are additional supported properties with X11:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER`: the X11 Window associated<br/>
		/// with the window, if you want to wrap an existing window.<br/>
		/// The window is implicitly shown if the "hidden" property is not set.<br/>
		/// Windows with the "tooltip" and "menu" properties are popup windows and have<br/>
		/// the behaviors and guidelines outlined in SDL_CreatePopupWindow().<br/>
		/// If this window is being created to be used with an SDL_Renderer, you should<br/>
		/// not add a graphics API specific property<br/>
		/// (`SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`, etc), as SDL will handle that<br/>
		/// internally when it chooses a renderer. However, SDL might need to recreate<br/>
		/// your window at that point, which may cause the window to appear briefly,<br/>
		/// and then flicker as it is recreated. The correct approach to this is to<br/>
		/// create the window with the `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN` property<br/>
		/// set to true, then create the renderer, then show the window with<br/>
		/// SDL_ShowWindow().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindowWithProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLWindow* CreateWindowWithPropertiesNative([NativeName(NativeNameType.Param, "props")] [NativeName(NativeNameType.Type, "SDL_PropertiesID")] uint props)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, SDLWindow*>)funcTable[438])(props);
			#else
			return (SDLWindow*)((delegate* unmanaged[Cdecl]<uint, nint>)funcTable[438])(props);
			#endif
		}

		/// <summary>
		/// Create a window with the specified properties.<br/>
		/// These are the supported properties:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN`: true if the window should<br/>
		/// be always on top<br/>
		/// - `SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN`: true if the window has no<br/>
		/// window decoration<br/>
		/// - `SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN`: true if the<br/>
		/// window will be used with an externally managed graphics context.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN`: true if the window should<br/>
		/// accept keyboard input (defaults true)<br/>
		/// - `SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN`: true if the window should<br/>
		/// start in fullscreen mode at desktop resolution<br/>
		/// - `SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER`: the height of the window<br/>
		/// - `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN`: true if the window should start<br/>
		/// hidden<br/>
		/// - `SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN`: true if the window<br/>
		/// uses a high pixel density buffer if possible<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN`: true if the window should<br/>
		/// start maximized<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN`: true if the window is a popup menu<br/>
		/// - `SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN`: true if the window will be used<br/>
		/// with Metal rendering<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN`: true if the window should<br/>
		/// start minimized<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN`: true if the window is modal to<br/>
		/// its parent<br/>
		/// - `SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN`: true if the window starts<br/>
		/// with grabbed mouse focus<br/>
		/// - `SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`: true if the window will be used<br/>
		/// with OpenGL rendering<br/>
		/// - `SDL_PROP_WINDOW_CREATE_PARENT_POINTER`: an SDL_Window that will be the<br/>
		/// parent of this window, required for windows with the "toolip", "menu",<br/>
		/// and "modal" properties<br/>
		/// - `SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN`: true if the window should be<br/>
		/// resizable<br/>
		/// - `SDL_PROP_WINDOW_CREATE_TITLE_STRING`: the title of the window, in UTF-8<br/>
		/// encoding<br/>
		/// - `SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN`: true if the window show<br/>
		/// transparent in the areas with alpha of 0<br/>
		/// - `SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN`: true if the window is a tooltip<br/>
		/// - `SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN`: true if the window is a utility<br/>
		/// window, not showing in the task bar and window list<br/>
		/// - `SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN`: true if the window will be used<br/>
		/// with Vulkan rendering<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER`: the width of the window<br/>
		/// - `SDL_PROP_WINDOW_CREATE_X_NUMBER`: the x position of the window, or<br/>
		/// `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is<br/>
		/// relative to the parent for windows with the "parent" property set.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_Y_NUMBER`: the y position of the window, or<br/>
		/// `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is<br/>
		/// relative to the parent for windows with the "parent" property set.<br/>
		/// These are additional supported properties on macOS:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER`: the<br/>
		/// `(__unsafe_unretained)` NSWindow associated with the window, if you want<br/>
		/// to wrap an existing window.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// NSView associated with the window, defaults to `[window contentView]`<br/>
		/// These are additional supported properties on Wayland:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN` - true if<br/>
		/// the application wants to use the Wayland surface for a custom role and<br/>
		/// does not want it attached to an XDG toplevel window. See<br/>
		/// [README/wayland](README/wayland) for more information on using custom<br/>
		/// surfaces.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN` - true if the<br/>
		/// application wants an associated `wl_egl_window` object to be created,<br/>
		/// even if the window does not have the OpenGL property or flag set.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER` - the wl_surface<br/>
		/// associated with the window, if you want to wrap an existing window. See<br/>
		/// [README/wayland](README/wayland) for more information.<br/>
		/// These are additional supported properties on Windows:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER`: the HWND associated with the<br/>
		/// window, if you want to wrap an existing window.<br/>
		/// - `SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER`: optional,<br/>
		/// another window to share pixel format with, useful for OpenGL windows<br/>
		/// These are additional supported properties with X11:<br/>
		/// - `SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER`: the X11 Window associated<br/>
		/// with the window, if you want to wrap an existing window.<br/>
		/// The window is implicitly shown if the "hidden" property is not set.<br/>
		/// Windows with the "tooltip" and "menu" properties are popup windows and have<br/>
		/// the behaviors and guidelines outlined in SDL_CreatePopupWindow().<br/>
		/// If this window is being created to be used with an SDL_Renderer, you should<br/>
		/// not add a graphics API specific property<br/>
		/// (`SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`, etc), as SDL will handle that<br/>
		/// internally when it chooses a renderer. However, SDL might need to recreate<br/>
		/// your window at that point, which may cause the window to appear briefly,<br/>
		/// and then flicker as it is recreated. The correct approach to this is to<br/>
		/// create the window with the `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN` property<br/>
		/// set to true, then create the renderer, then show the window with<br/>
		/// SDL_ShowWindow().<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_CreateWindowWithProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* CreateWindowWithProperties([NativeName(NativeNameType.Param, "props")] [NativeName(NativeNameType.Type, "SDL_PropertiesID")] uint props)
		{
			SDLWindow* ret = CreateWindowWithPropertiesNative(props);
			return ret;
		}

		/// <summary>
		/// Get the numeric ID of a window.<br/>
		/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>
		/// these events to specific SDL_Window objects.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowID")]
		[return: NativeName(NativeNameType.Type, "SDL_WindowID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetWindowIDNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, uint>)funcTable[439])(window);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[439])((nint)window);
			#endif
		}

		/// <summary>
		/// Get the numeric ID of a window.<br/>
		/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>
		/// these events to specific SDL_Window objects.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowID")]
		[return: NativeName(NativeNameType.Type, "SDL_WindowID")]
		public static uint GetWindowID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			uint ret = GetWindowIDNative(window);
			return ret;
		}

		/// <summary>
		/// Get the numeric ID of a window.<br/>
		/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>
		/// these events to specific SDL_Window objects.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowID")]
		[return: NativeName(NativeNameType.Type, "SDL_WindowID")]
		public static uint GetWindowID([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				uint ret = GetWindowIDNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get a window from a stored ID.<br/>
		/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>
		/// these events to specific SDL_Window objects.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFromID")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLWindow* GetWindowFromIDNative([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SDL_WindowID")] uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, SDLWindow*>)funcTable[440])(id);
			#else
			return (SDLWindow*)((delegate* unmanaged[Cdecl]<uint, nint>)funcTable[440])(id);
			#endif
		}

		/// <summary>
		/// Get a window from a stored ID.<br/>
		/// The numeric ID is what SDL_WindowEvent references, and is necessary to map<br/>
		/// these events to specific SDL_Window objects.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFromID")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* GetWindowFromID([NativeName(NativeNameType.Param, "id")] [NativeName(NativeNameType.Type, "SDL_WindowID")] uint id)
		{
			SDLWindow* ret = GetWindowFromIDNative(id);
			return ret;
		}

		/// <summary>
		/// Get parent of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowParent")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLWindow* GetWindowParentNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLWindow*>)funcTable[441])(window);
			#else
			return (SDLWindow*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[441])((nint)window);
			#endif
		}

		/// <summary>
		/// Get parent of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowParent")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* GetWindowParent([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			SDLWindow* ret = GetWindowParentNative(window);
			return ret;
		}

		/// <summary>
		/// Get parent of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowParent")]
		[return: NativeName(NativeNameType.Type, "SDL_Window *")]
		public static SDLWindow* GetWindowParent([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLWindow* ret = GetWindowParentNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get the properties associated with a window.<br/>
		/// The following read-only properties are provided by SDL:<br/>
		/// - `SDL_PROP_WINDOW_SHAPE_POINTER`: the surface associated with a shaped<br/>
		/// window<br/>
		/// - `SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN`: true if the window has HDR<br/>
		/// headroom above the SDR white point. This property can change dynamically<br/>
		/// when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// - `SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT`: the value of SDR white in the<br/>
		/// SDL_COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the<br/>
		/// SDR white level in scRGB colorspace, and on Apple platforms this is<br/>
		/// always 1.0 for EDR content. This property can change dynamically when<br/>
		/// SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// - `SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT`: the additional high dynamic range<br/>
		/// that can be displayed, in terms of the SDR white point. When HDR is not<br/>
		/// enabled, this will be 1.0. This property can change dynamically when<br/>
		/// SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// On Android:<br/>
		/// - `SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER`: the ANativeWindow associated<br/>
		/// with the window<br/>
		/// - `SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER`: the EGLSurface associated with<br/>
		/// the window<br/>
		/// On iOS:<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// UIWindow associated with the window<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER`: the NSInteger tag<br/>
		/// assocated with metal views on the window<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER`: the OpenGL view's<br/>
		/// framebuffer object. It must be bound when rendering to the screen using<br/>
		/// OpenGL.<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER`: the OpenGL view's<br/>
		/// renderbuffer object. It must be bound when SDL_GL_SwapWindow is called.<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER`: the OpenGL<br/>
		/// view's resolve framebuffer, when MSAA is used.<br/>
		/// On KMS/DRM:<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER`: the device index associated<br/>
		/// with the window (e.g. the X in /dev/dri/cardX)<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER`: the DRM FD associated with the<br/>
		/// window<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER`: the GBM device associated<br/>
		/// with the window<br/>
		/// On macOS:<br/>
		/// - `SDL_PROP_WINDOW_COCOA_WINDOW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// NSWindow associated with the window<br/>
		/// - `SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER`: the NSInteger tag<br/>
		/// assocated with metal views on the window<br/>
		/// On Vivante:<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER`: the EGLNativeDisplayType<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER`: the EGLNativeWindowType<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER`: the EGLSurface associated with<br/>
		/// the window<br/>
		/// On UWP:<br/>
		/// - `SDL_PROP_WINDOW_WINRT_WINDOW_POINTER`: the IInspectable CoreWindow<br/>
		/// associated with the window<br/>
		/// On Windows:<br/>
		/// - `SDL_PROP_WINDOW_WIN32_HWND_POINTER`: the HWND associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WIN32_HDC_POINTER`: the HDC associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER`: the HINSTANCE associated with<br/>
		/// the window<br/>
		/// On Wayland:<br/>
		/// Note: The `xdg_*` window objects do not internally persist across window<br/>
		/// show/hide calls. They will be null if the window is hidden and must be<br/>
		/// queried each time it is shown.<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER`: the wl_display associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER`: the wl_surface associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER`: the wl_egl_window<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER`: the xdg_surface associated<br/>
		/// with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER`: the xdg_toplevel role<br/>
		/// associated with the window<br/>
		/// - 'SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING': the export<br/>
		/// handle associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER`: the xdg_popup role<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER`: the xdg_positioner<br/>
		/// associated with the window, in popup mode<br/>
		/// On X11:<br/>
		/// - `SDL_PROP_WINDOW_X11_DISPLAY_POINTER`: the X11 Display associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_X11_SCREEN_NUMBER`: the screen number associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_X11_WINDOW_NUMBER`: the X11 Window associated with the<br/>
		/// window<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetWindowPropertiesNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, uint>)funcTable[442])(window);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, uint>)funcTable[442])((nint)window);
			#endif
		}

		/// <summary>
		/// Get the properties associated with a window.<br/>
		/// The following read-only properties are provided by SDL:<br/>
		/// - `SDL_PROP_WINDOW_SHAPE_POINTER`: the surface associated with a shaped<br/>
		/// window<br/>
		/// - `SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN`: true if the window has HDR<br/>
		/// headroom above the SDR white point. This property can change dynamically<br/>
		/// when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// - `SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT`: the value of SDR white in the<br/>
		/// SDL_COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the<br/>
		/// SDR white level in scRGB colorspace, and on Apple platforms this is<br/>
		/// always 1.0 for EDR content. This property can change dynamically when<br/>
		/// SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// - `SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT`: the additional high dynamic range<br/>
		/// that can be displayed, in terms of the SDR white point. When HDR is not<br/>
		/// enabled, this will be 1.0. This property can change dynamically when<br/>
		/// SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// On Android:<br/>
		/// - `SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER`: the ANativeWindow associated<br/>
		/// with the window<br/>
		/// - `SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER`: the EGLSurface associated with<br/>
		/// the window<br/>
		/// On iOS:<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// UIWindow associated with the window<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER`: the NSInteger tag<br/>
		/// assocated with metal views on the window<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER`: the OpenGL view's<br/>
		/// framebuffer object. It must be bound when rendering to the screen using<br/>
		/// OpenGL.<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER`: the OpenGL view's<br/>
		/// renderbuffer object. It must be bound when SDL_GL_SwapWindow is called.<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER`: the OpenGL<br/>
		/// view's resolve framebuffer, when MSAA is used.<br/>
		/// On KMS/DRM:<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER`: the device index associated<br/>
		/// with the window (e.g. the X in /dev/dri/cardX)<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER`: the DRM FD associated with the<br/>
		/// window<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER`: the GBM device associated<br/>
		/// with the window<br/>
		/// On macOS:<br/>
		/// - `SDL_PROP_WINDOW_COCOA_WINDOW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// NSWindow associated with the window<br/>
		/// - `SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER`: the NSInteger tag<br/>
		/// assocated with metal views on the window<br/>
		/// On Vivante:<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER`: the EGLNativeDisplayType<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER`: the EGLNativeWindowType<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER`: the EGLSurface associated with<br/>
		/// the window<br/>
		/// On UWP:<br/>
		/// - `SDL_PROP_WINDOW_WINRT_WINDOW_POINTER`: the IInspectable CoreWindow<br/>
		/// associated with the window<br/>
		/// On Windows:<br/>
		/// - `SDL_PROP_WINDOW_WIN32_HWND_POINTER`: the HWND associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WIN32_HDC_POINTER`: the HDC associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER`: the HINSTANCE associated with<br/>
		/// the window<br/>
		/// On Wayland:<br/>
		/// Note: The `xdg_*` window objects do not internally persist across window<br/>
		/// show/hide calls. They will be null if the window is hidden and must be<br/>
		/// queried each time it is shown.<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER`: the wl_display associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER`: the wl_surface associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER`: the wl_egl_window<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER`: the xdg_surface associated<br/>
		/// with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER`: the xdg_toplevel role<br/>
		/// associated with the window<br/>
		/// - 'SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING': the export<br/>
		/// handle associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER`: the xdg_popup role<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER`: the xdg_positioner<br/>
		/// associated with the window, in popup mode<br/>
		/// On X11:<br/>
		/// - `SDL_PROP_WINDOW_X11_DISPLAY_POINTER`: the X11 Display associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_X11_SCREEN_NUMBER`: the screen number associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_X11_WINDOW_NUMBER`: the X11 Window associated with the<br/>
		/// window<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		public static uint GetWindowProperties([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			uint ret = GetWindowPropertiesNative(window);
			return ret;
		}

		/// <summary>
		/// Get the properties associated with a window.<br/>
		/// The following read-only properties are provided by SDL:<br/>
		/// - `SDL_PROP_WINDOW_SHAPE_POINTER`: the surface associated with a shaped<br/>
		/// window<br/>
		/// - `SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN`: true if the window has HDR<br/>
		/// headroom above the SDR white point. This property can change dynamically<br/>
		/// when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// - `SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT`: the value of SDR white in the<br/>
		/// SDL_COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the<br/>
		/// SDR white level in scRGB colorspace, and on Apple platforms this is<br/>
		/// always 1.0 for EDR content. This property can change dynamically when<br/>
		/// SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// - `SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT`: the additional high dynamic range<br/>
		/// that can be displayed, in terms of the SDR white point. When HDR is not<br/>
		/// enabled, this will be 1.0. This property can change dynamically when<br/>
		/// SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.<br/>
		/// On Android:<br/>
		/// - `SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER`: the ANativeWindow associated<br/>
		/// with the window<br/>
		/// - `SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER`: the EGLSurface associated with<br/>
		/// the window<br/>
		/// On iOS:<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// UIWindow associated with the window<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER`: the NSInteger tag<br/>
		/// assocated with metal views on the window<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER`: the OpenGL view's<br/>
		/// framebuffer object. It must be bound when rendering to the screen using<br/>
		/// OpenGL.<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER`: the OpenGL view's<br/>
		/// renderbuffer object. It must be bound when SDL_GL_SwapWindow is called.<br/>
		/// - `SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER`: the OpenGL<br/>
		/// view's resolve framebuffer, when MSAA is used.<br/>
		/// On KMS/DRM:<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER`: the device index associated<br/>
		/// with the window (e.g. the X in /dev/dri/cardX)<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER`: the DRM FD associated with the<br/>
		/// window<br/>
		/// - `SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER`: the GBM device associated<br/>
		/// with the window<br/>
		/// On macOS:<br/>
		/// - `SDL_PROP_WINDOW_COCOA_WINDOW_POINTER`: the `(__unsafe_unretained)`<br/>
		/// NSWindow associated with the window<br/>
		/// - `SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER`: the NSInteger tag<br/>
		/// assocated with metal views on the window<br/>
		/// On Vivante:<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER`: the EGLNativeDisplayType<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER`: the EGLNativeWindowType<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER`: the EGLSurface associated with<br/>
		/// the window<br/>
		/// On UWP:<br/>
		/// - `SDL_PROP_WINDOW_WINRT_WINDOW_POINTER`: the IInspectable CoreWindow<br/>
		/// associated with the window<br/>
		/// On Windows:<br/>
		/// - `SDL_PROP_WINDOW_WIN32_HWND_POINTER`: the HWND associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WIN32_HDC_POINTER`: the HDC associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER`: the HINSTANCE associated with<br/>
		/// the window<br/>
		/// On Wayland:<br/>
		/// Note: The `xdg_*` window objects do not internally persist across window<br/>
		/// show/hide calls. They will be null if the window is hidden and must be<br/>
		/// queried each time it is shown.<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER`: the wl_display associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER`: the wl_surface associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER`: the wl_egl_window<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER`: the xdg_surface associated<br/>
		/// with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER`: the xdg_toplevel role<br/>
		/// associated with the window<br/>
		/// - 'SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING': the export<br/>
		/// handle associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER`: the xdg_popup role<br/>
		/// associated with the window<br/>
		/// - `SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER`: the xdg_positioner<br/>
		/// associated with the window, in popup mode<br/>
		/// On X11:<br/>
		/// - `SDL_PROP_WINDOW_X11_DISPLAY_POINTER`: the X11 Display associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_X11_SCREEN_NUMBER`: the screen number associated with<br/>
		/// the window<br/>
		/// - `SDL_PROP_WINDOW_X11_WINDOW_NUMBER`: the X11 Window associated with the<br/>
		/// window<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowProperties")]
		[return: NativeName(NativeNameType.Type, "SDL_PropertiesID")]
		public static uint GetWindowProperties([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				uint ret = GetWindowPropertiesNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get the window flags.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFlags")]
		[return: NativeName(NativeNameType.Type, "SDL_WindowFlags")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static SDLWindowFlags GetWindowFlagsNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLWindowFlags>)funcTable[443])(window);
			#else
			return (SDLWindowFlags)((delegate* unmanaged[Cdecl]<nint, SDLWindowFlags>)funcTable[443])((nint)window);
			#endif
		}

		/// <summary>
		/// Get the window flags.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFlags")]
		[return: NativeName(NativeNameType.Type, "SDL_WindowFlags")]
		public static SDLWindowFlags GetWindowFlags([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			SDLWindowFlags ret = GetWindowFlagsNative(window);
			return ret;
		}

		/// <summary>
		/// Get the window flags.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowFlags")]
		[return: NativeName(NativeNameType.Type, "SDL_WindowFlags")]
		public static SDLWindowFlags GetWindowFlags([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				SDLWindowFlags ret = GetWindowFlagsNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowTitleNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] byte* title)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte*, int>)funcTable[444])(window, title);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[444])((nint)window, (nint)title);
			#endif
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] byte* title)
		{
			int ret = SetWindowTitleNative(window, title);
			return ret;
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] byte* title)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowTitleNative((SDLWindow*)pwindow, title);
				return ret;
			}
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] ref byte title)
		{
			fixed (byte* ptitle = &title)
			{
				int ret = SetWindowTitleNative(window, (byte*)ptitle);
				return ret;
			}
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> title)
		{
			fixed (byte* ptitle = title)
			{
				int ret = SetWindowTitleNative(window, (byte*)ptitle);
				return ret;
			}
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] string title)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (title != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(title);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(title, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SetWindowTitleNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] ref byte title)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (byte* ptitle = &title)
				{
					int ret = SetWindowTitleNative((SDLWindow*)pwindow, (byte*)ptitle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] ReadOnlySpan<byte> title)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (byte* ptitle = title)
				{
					int ret = SetWindowTitleNative((SDLWindow*)pwindow, (byte*)ptitle);
					return ret;
				}
			}
		}

		/// <summary>
		/// Set the title of a window.<br/>
		/// This string is expected to be in UTF-8 encoding.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "title")] [NativeName(NativeNameType.Type, "char const *")] string title)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (title != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(title);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(title, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = SetWindowTitleNative((SDLWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// Get the title of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetWindowTitleNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, byte*>)funcTable[445])(window);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[445])((nint)window);
			#endif
		}

		/// <summary>
		/// Get the title of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			byte* ret = GetWindowTitleNative(window);
			return ret;
		}

		/// <summary>
		/// Get the title of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetWindowTitleS([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			string ret = Utils.DecodeStringUTF8(GetWindowTitleNative(window));
			return ret;
		}

		/// <summary>
		/// Get the title of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* GetWindowTitle([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				byte* ret = GetWindowTitleNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Get the title of a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowTitle")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string GetWindowTitleS([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				string ret = Utils.DecodeStringUTF8(GetWindowTitleNative((SDLWindow*)pwindow));
				return ret;
			}
		}

		/// <summary>
		/// Set the icon for a window.<br/>
		/// If this function is passed a surface with alternate representations, the<br/>
		/// surface will be interpreted as the content to be used for 100% display<br/>
		/// scale, and the alternate representations will be used for high DPI<br/>
		/// situations. For example, if the original surface is 32x32, then on a 2x<br/>
		/// macOS display or 200% display scale on Windows, a 64x64 version of the<br/>
		/// image will be used, if available. If a matching version of the image isn't<br/>
		/// available, the closest larger size image will be downscaled to the<br/>
		/// appropriate size and be used instead, if available. Otherwise, the closest<br/>
		/// smaller image will be upscaled and be used instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowIconNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface *")] SDLSurface* icon)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLSurface*, int>)funcTable[446])(window, icon);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[446])((nint)window, (nint)icon);
			#endif
		}

		/// <summary>
		/// Set the icon for a window.<br/>
		/// If this function is passed a surface with alternate representations, the<br/>
		/// surface will be interpreted as the content to be used for 100% display<br/>
		/// scale, and the alternate representations will be used for high DPI<br/>
		/// situations. For example, if the original surface is 32x32, then on a 2x<br/>
		/// macOS display or 200% display scale on Windows, a 64x64 version of the<br/>
		/// image will be used, if available. If a matching version of the image isn't<br/>
		/// available, the closest larger size image will be downscaled to the<br/>
		/// appropriate size and be used instead, if available. Otherwise, the closest<br/>
		/// smaller image will be upscaled and be used instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface *")] SDLSurface* icon)
		{
			int ret = SetWindowIconNative(window, icon);
			return ret;
		}

		/// <summary>
		/// Set the icon for a window.<br/>
		/// If this function is passed a surface with alternate representations, the<br/>
		/// surface will be interpreted as the content to be used for 100% display<br/>
		/// scale, and the alternate representations will be used for high DPI<br/>
		/// situations. For example, if the original surface is 32x32, then on a 2x<br/>
		/// macOS display or 200% display scale on Windows, a 64x64 version of the<br/>
		/// image will be used, if available. If a matching version of the image isn't<br/>
		/// available, the closest larger size image will be downscaled to the<br/>
		/// appropriate size and be used instead, if available. Otherwise, the closest<br/>
		/// smaller image will be upscaled and be used instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface *")] SDLSurface* icon)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowIconNative((SDLWindow*)pwindow, icon);
				return ret;
			}
		}

		/// <summary>
		/// Set the icon for a window.<br/>
		/// If this function is passed a surface with alternate representations, the<br/>
		/// surface will be interpreted as the content to be used for 100% display<br/>
		/// scale, and the alternate representations will be used for high DPI<br/>
		/// situations. For example, if the original surface is 32x32, then on a 2x<br/>
		/// macOS display or 200% display scale on Windows, a 64x64 version of the<br/>
		/// image will be used, if available. If a matching version of the image isn't<br/>
		/// available, the closest larger size image will be downscaled to the<br/>
		/// appropriate size and be used instead, if available. Otherwise, the closest<br/>
		/// smaller image will be upscaled and be used instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface *")] ref SDLSurface icon)
		{
			fixed (SDLSurface* picon = &icon)
			{
				int ret = SetWindowIconNative(window, (SDLSurface*)picon);
				return ret;
			}
		}

		/// <summary>
		/// Set the icon for a window.<br/>
		/// If this function is passed a surface with alternate representations, the<br/>
		/// surface will be interpreted as the content to be used for 100% display<br/>
		/// scale, and the alternate representations will be used for high DPI<br/>
		/// situations. For example, if the original surface is 32x32, then on a 2x<br/>
		/// macOS display or 200% display scale on Windows, a 64x64 version of the<br/>
		/// image will be used, if available. If a matching version of the image isn't<br/>
		/// available, the closest larger size image will be downscaled to the<br/>
		/// appropriate size and be used instead, if available. Otherwise, the closest<br/>
		/// smaller image will be upscaled and be used instead.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowIcon")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowIcon([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "icon")] [NativeName(NativeNameType.Type, "SDL_Surface *")] ref SDLSurface icon)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLSurface* picon = &icon)
				{
					int ret = SetWindowIconNative((SDLWindow*)pwindow, (SDLSurface*)picon);
					return ret;
				}
			}
		}

		/// <summary>
		/// Request that the window's position be set.<br/>
		/// If, at the time of this request, the window is in a fixed-size state such<br/>
		/// as maximized, this request may be deferred until the window returns to a<br/>
		/// resizable state.<br/>
		/// This can be used to reposition fullscreen-desktop windows onto a different<br/>
		/// display, however, exclusive fullscreen windows are locked to a specific<br/>
		/// display and can only be repositioned programmatically via<br/>
		/// SDL_SetWindowFullscreenMode().<br/>
		/// On some windowing systems this request is asynchronous and the new<br/>
		/// coordinates may not have have been applied immediately upon the return of<br/>
		/// this function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window position changes, an SDL_EVENT_WINDOW_MOVED event will be<br/>
		/// emitted with the window's new coordinates. Note that the new coordinates<br/>
		/// may not match the exact coordinates requested, as some windowing systems<br/>
		/// can restrict the position of the window in certain scenarios (e.g.<br/>
		/// constraining the position so the window is always within desktop bounds).<br/>
		/// Additionally, as this is just a request, it can be denied by the windowing<br/>
		/// system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowPositionNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, int>)funcTable[447])(window, x, y);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int>)funcTable[447])((nint)window, x, y);
			#endif
		}

		/// <summary>
		/// Request that the window's position be set.<br/>
		/// If, at the time of this request, the window is in a fixed-size state such<br/>
		/// as maximized, this request may be deferred until the window returns to a<br/>
		/// resizable state.<br/>
		/// This can be used to reposition fullscreen-desktop windows onto a different<br/>
		/// display, however, exclusive fullscreen windows are locked to a specific<br/>
		/// display and can only be repositioned programmatically via<br/>
		/// SDL_SetWindowFullscreenMode().<br/>
		/// On some windowing systems this request is asynchronous and the new<br/>
		/// coordinates may not have have been applied immediately upon the return of<br/>
		/// this function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window position changes, an SDL_EVENT_WINDOW_MOVED event will be<br/>
		/// emitted with the window's new coordinates. Note that the new coordinates<br/>
		/// may not match the exact coordinates requested, as some windowing systems<br/>
		/// can restrict the position of the window in certain scenarios (e.g.<br/>
		/// constraining the position so the window is always within desktop bounds).<br/>
		/// Additionally, as this is just a request, it can be denied by the windowing<br/>
		/// system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			int ret = SetWindowPositionNative(window, x, y);
			return ret;
		}

		/// <summary>
		/// Request that the window's position be set.<br/>
		/// If, at the time of this request, the window is in a fixed-size state such<br/>
		/// as maximized, this request may be deferred until the window returns to a<br/>
		/// resizable state.<br/>
		/// This can be used to reposition fullscreen-desktop windows onto a different<br/>
		/// display, however, exclusive fullscreen windows are locked to a specific<br/>
		/// display and can only be repositioned programmatically via<br/>
		/// SDL_SetWindowFullscreenMode().<br/>
		/// On some windowing systems this request is asynchronous and the new<br/>
		/// coordinates may not have have been applied immediately upon the return of<br/>
		/// this function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window position changes, an SDL_EVENT_WINDOW_MOVED event will be<br/>
		/// emitted with the window's new coordinates. Note that the new coordinates<br/>
		/// may not match the exact coordinates requested, as some windowing systems<br/>
		/// can restrict the position of the window in certain scenarios (e.g.<br/>
		/// constraining the position so the window is always within desktop bounds).<br/>
		/// Additionally, as this is just a request, it can be denied by the windowing<br/>
		/// system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int")] int y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowPositionNative((SDLWindow*)pwindow, x, y);
				return ret;
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowPositionNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] int* y)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, int>)funcTable[448])(window, x, y);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[448])((nint)window, (nint)x, (nint)y);
			#endif
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] int* y)
		{
			int ret = GetWindowPositionNative(window, x, y);
			return ret;
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] int* y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowPositionNative((SDLWindow*)pwindow, x, y);
				return ret;
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] int* y)
		{
			fixed (int* px = &x)
			{
				int ret = GetWindowPositionNative(window, (int*)px, y);
				return ret;
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] int* y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* px = &x)
				{
					int ret = GetWindowPositionNative((SDLWindow*)pwindow, (int*)px, y);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] ref int y)
		{
			fixed (int* py = &y)
			{
				int ret = GetWindowPositionNative(window, x, (int*)py);
				return ret;
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] int* x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] ref int y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* py = &y)
				{
					int ret = GetWindowPositionNative((SDLWindow*)pwindow, x, (int*)py);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] ref int y)
		{
			fixed (int* px = &x)
			{
				fixed (int* py = &y)
				{
					int ret = GetWindowPositionNative(window, (int*)px, (int*)py);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the position of a window.<br/>
		/// This is the current position of the window as last reported by the<br/>
		/// windowing system.<br/>
		/// If you do not need the value for one of the positions a NULL may be passed<br/>
		/// in the `x` or `y` parameter.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowPosition")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowPosition([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "int *")] ref int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "int *")] ref int y)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* px = &x)
				{
					fixed (int* py = &y)
					{
						int ret = GetWindowPositionNative((SDLWindow*)pwindow, (int*)px, (int*)py);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Request that the size of a window's client area be set.<br/>
		/// If, at the time of this request, the window in a fixed-size state, such as<br/>
		/// maximized or fullscreen, the request will be deferred until the window<br/>
		/// exits this state and becomes resizable again.<br/>
		/// To change the fullscreen mode of a window, use<br/>
		/// SDL_SetWindowFullscreenMode()<br/>
		/// On some windowing systems, this request is asynchronous and the new window<br/>
		/// size may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be<br/>
		/// emitted with the new window dimensions. Note that the new dimensions may<br/>
		/// not match the exact size requested, as some windowing systems can restrict<br/>
		/// the window size in certain scenarios (e.g. constraining the size of the<br/>
		/// content area to remain within the usable desktop bounds). Additionally, as<br/>
		/// this is just a request, it can be denied by the windowing system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, int>)funcTable[449])(window, w, h);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int>)funcTable[449])((nint)window, w, h);
			#endif
		}

		/// <summary>
		/// Request that the size of a window's client area be set.<br/>
		/// If, at the time of this request, the window in a fixed-size state, such as<br/>
		/// maximized or fullscreen, the request will be deferred until the window<br/>
		/// exits this state and becomes resizable again.<br/>
		/// To change the fullscreen mode of a window, use<br/>
		/// SDL_SetWindowFullscreenMode()<br/>
		/// On some windowing systems, this request is asynchronous and the new window<br/>
		/// size may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be<br/>
		/// emitted with the new window dimensions. Note that the new dimensions may<br/>
		/// not match the exact size requested, as some windowing systems can restrict<br/>
		/// the window size in certain scenarios (e.g. constraining the size of the<br/>
		/// content area to remain within the usable desktop bounds). Additionally, as<br/>
		/// this is just a request, it can be denied by the windowing system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			int ret = SetWindowSizeNative(window, w, h);
			return ret;
		}

		/// <summary>
		/// Request that the size of a window's client area be set.<br/>
		/// If, at the time of this request, the window in a fixed-size state, such as<br/>
		/// maximized or fullscreen, the request will be deferred until the window<br/>
		/// exits this state and becomes resizable again.<br/>
		/// To change the fullscreen mode of a window, use<br/>
		/// SDL_SetWindowFullscreenMode()<br/>
		/// On some windowing systems, this request is asynchronous and the new window<br/>
		/// size may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be<br/>
		/// emitted with the new window dimensions. Note that the new dimensions may<br/>
		/// not match the exact size requested, as some windowing systems can restrict<br/>
		/// the window size in certain scenarios (e.g. constraining the size of the<br/>
		/// content area to remain within the usable desktop bounds). Additionally, as<br/>
		/// this is just a request, it can be denied by the windowing system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int")] int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int")] int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowSizeNative((SDLWindow*)pwindow, w, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, int>)funcTable[450])(window, w, h);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[450])((nint)window, (nint)w, (nint)h);
			#endif
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			int ret = GetWindowSizeNative(window, w, h);
			return ret;
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowSizeNative((SDLWindow*)pwindow, w, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (int* pw = &w)
			{
				int ret = GetWindowSizeNative(window, (int*)pw, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					int ret = GetWindowSizeNative((SDLWindow*)pwindow, (int*)pw, h);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* ph = &h)
			{
				int ret = GetWindowSizeNative(window, w, (int*)ph);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowSizeNative((SDLWindow*)pwindow, w, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowSizeNative(window, (int*)pw, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// The window pixel size may differ from its window coordinate size if the<br/>
		/// window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()<br/>
		/// or SDL_GetRenderOutputSize() to get the real client area size in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						int ret = GetWindowSizeNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the safe area for this window.<br/>
		/// Some devices have portions of the screen which are partially obscured or<br/>
		/// not interactive, possibly due to on-screen controls, curved edges, camera<br/>
		/// notches, TV overscan, etc. This function provides the area of the window<br/>
		/// which is safe to have interactible content. You should continue rendering<br/>
		/// into the rest of the window, but it should not contain visually important<br/>
		/// or interactible content.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSafeArea")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowSafeAreaNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect *")] SDLRect* rect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, SDLRect*, int>)funcTable[451])(window, rect);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, int>)funcTable[451])((nint)window, (nint)rect);
			#endif
		}

		/// <summary>
		/// Get the safe area for this window.<br/>
		/// Some devices have portions of the screen which are partially obscured or<br/>
		/// not interactive, possibly due to on-screen controls, curved edges, camera<br/>
		/// notches, TV overscan, etc. This function provides the area of the window<br/>
		/// which is safe to have interactible content. You should continue rendering<br/>
		/// into the rest of the window, but it should not contain visually important<br/>
		/// or interactible content.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSafeArea")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSafeArea([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect *")] SDLRect* rect)
		{
			int ret = GetWindowSafeAreaNative(window, rect);
			return ret;
		}

		/// <summary>
		/// Get the safe area for this window.<br/>
		/// Some devices have portions of the screen which are partially obscured or<br/>
		/// not interactive, possibly due to on-screen controls, curved edges, camera<br/>
		/// notches, TV overscan, etc. This function provides the area of the window<br/>
		/// which is safe to have interactible content. You should continue rendering<br/>
		/// into the rest of the window, but it should not contain visually important<br/>
		/// or interactible content.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSafeArea")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSafeArea([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect *")] SDLRect* rect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowSafeAreaNative((SDLWindow*)pwindow, rect);
				return ret;
			}
		}

		/// <summary>
		/// Get the safe area for this window.<br/>
		/// Some devices have portions of the screen which are partially obscured or<br/>
		/// not interactive, possibly due to on-screen controls, curved edges, camera<br/>
		/// notches, TV overscan, etc. This function provides the area of the window<br/>
		/// which is safe to have interactible content. You should continue rendering<br/>
		/// into the rest of the window, but it should not contain visually important<br/>
		/// or interactible content.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSafeArea")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSafeArea([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect *")] ref SDLRect rect)
		{
			fixed (SDLRect* prect = &rect)
			{
				int ret = GetWindowSafeAreaNative(window, (SDLRect*)prect);
				return ret;
			}
		}

		/// <summary>
		/// Get the safe area for this window.<br/>
		/// Some devices have portions of the screen which are partially obscured or<br/>
		/// not interactive, possibly due to on-screen controls, curved edges, camera<br/>
		/// notches, TV overscan, etc. This function provides the area of the window<br/>
		/// which is safe to have interactible content. You should continue rendering<br/>
		/// into the rest of the window, but it should not contain visually important<br/>
		/// or interactible content.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSafeArea")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSafeArea([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "rect")] [NativeName(NativeNameType.Type, "SDL_Rect *")] ref SDLRect rect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (SDLRect* prect = &rect)
				{
					int ret = GetWindowSafeAreaNative((SDLWindow*)pwindow, (SDLRect*)prect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Request that the aspect ratio of a window's client area be set.<br/>
		/// The aspect ratio is the ratio of width divided by height, e.g. 2560x1600<br/>
		/// would be 1.6. Larger aspect ratios are wider and smaller aspect ratios are<br/>
		/// narrower.<br/>
		/// If, at the time of this request, the window in a fixed-size state, such as<br/>
		/// maximized or fullscreen, the request will be deferred until the window<br/>
		/// exits this state and becomes resizable again.<br/>
		/// On some windowing systems, this request is asynchronous and the new window<br/>
		/// aspect ratio may not have have been applied immediately upon the return of<br/>
		/// this function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be<br/>
		/// emitted with the new window dimensions. Note that the new dimensions may<br/>
		/// not match the exact aspect ratio requested, as some windowing systems can<br/>
		/// restrict the window size in certain scenarios (e.g. constraining the size<br/>
		/// of the content area to remain within the usable desktop bounds).<br/>
		/// Additionally, as this is just a request, it can be denied by the windowing<br/>
		/// system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowAspectRatioNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float")] float minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float")] float maxAspect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, float, float, int>)funcTable[452])(window, minAspect, maxAspect);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, float, float, int>)funcTable[452])((nint)window, minAspect, maxAspect);
			#endif
		}

		/// <summary>
		/// Request that the aspect ratio of a window's client area be set.<br/>
		/// The aspect ratio is the ratio of width divided by height, e.g. 2560x1600<br/>
		/// would be 1.6. Larger aspect ratios are wider and smaller aspect ratios are<br/>
		/// narrower.<br/>
		/// If, at the time of this request, the window in a fixed-size state, such as<br/>
		/// maximized or fullscreen, the request will be deferred until the window<br/>
		/// exits this state and becomes resizable again.<br/>
		/// On some windowing systems, this request is asynchronous and the new window<br/>
		/// aspect ratio may not have have been applied immediately upon the return of<br/>
		/// this function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be<br/>
		/// emitted with the new window dimensions. Note that the new dimensions may<br/>
		/// not match the exact aspect ratio requested, as some windowing systems can<br/>
		/// restrict the window size in certain scenarios (e.g. constraining the size<br/>
		/// of the content area to remain within the usable desktop bounds).<br/>
		/// Additionally, as this is just a request, it can be denied by the windowing<br/>
		/// system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float")] float minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float")] float maxAspect)
		{
			int ret = SetWindowAspectRatioNative(window, minAspect, maxAspect);
			return ret;
		}

		/// <summary>
		/// Request that the aspect ratio of a window's client area be set.<br/>
		/// The aspect ratio is the ratio of width divided by height, e.g. 2560x1600<br/>
		/// would be 1.6. Larger aspect ratios are wider and smaller aspect ratios are<br/>
		/// narrower.<br/>
		/// If, at the time of this request, the window in a fixed-size state, such as<br/>
		/// maximized or fullscreen, the request will be deferred until the window<br/>
		/// exits this state and becomes resizable again.<br/>
		/// On some windowing systems, this request is asynchronous and the new window<br/>
		/// aspect ratio may not have have been applied immediately upon the return of<br/>
		/// this function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be<br/>
		/// emitted with the new window dimensions. Note that the new dimensions may<br/>
		/// not match the exact aspect ratio requested, as some windowing systems can<br/>
		/// restrict the window size in certain scenarios (e.g. constraining the size<br/>
		/// of the content area to remain within the usable desktop bounds).<br/>
		/// Additionally, as this is just a request, it can be denied by the windowing<br/>
		/// system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float")] float minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float")] float maxAspect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowAspectRatioNative((SDLWindow*)pwindow, minAspect, maxAspect);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowAspectRatioNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] float* minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] float* maxAspect)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, float*, float*, int>)funcTable[453])(window, minAspect, maxAspect);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[453])((nint)window, (nint)minAspect, (nint)maxAspect);
			#endif
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] float* minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] float* maxAspect)
		{
			int ret = GetWindowAspectRatioNative(window, minAspect, maxAspect);
			return ret;
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] float* minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] float* maxAspect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowAspectRatioNative((SDLWindow*)pwindow, minAspect, maxAspect);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] float* maxAspect)
		{
			fixed (float* pminAspect = &minAspect)
			{
				int ret = GetWindowAspectRatioNative(window, (float*)pminAspect, maxAspect);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] float* maxAspect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (float* pminAspect = &minAspect)
				{
					int ret = GetWindowAspectRatioNative((SDLWindow*)pwindow, (float*)pminAspect, maxAspect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] float* minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float maxAspect)
		{
			fixed (float* pmaxAspect = &maxAspect)
			{
				int ret = GetWindowAspectRatioNative(window, minAspect, (float*)pmaxAspect);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] float* minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float maxAspect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (float* pmaxAspect = &maxAspect)
				{
					int ret = GetWindowAspectRatioNative((SDLWindow*)pwindow, minAspect, (float*)pmaxAspect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float maxAspect)
		{
			fixed (float* pminAspect = &minAspect)
			{
				fixed (float* pmaxAspect = &maxAspect)
				{
					int ret = GetWindowAspectRatioNative(window, (float*)pminAspect, (float*)pmaxAspect);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowAspectRatio")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowAspectRatio([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "min_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float minAspect, [NativeName(NativeNameType.Param, "max_aspect")] [NativeName(NativeNameType.Type, "float *")] ref float maxAspect)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (float* pminAspect = &minAspect)
				{
					fixed (float* pmaxAspect = &maxAspect)
					{
						int ret = GetWindowAspectRatioNative((SDLWindow*)pwindow, (float*)pminAspect, (float*)pmaxAspect);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowBordersSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, int*, int*, int>)funcTable[454])(window, top, left, bottom, right);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, nint, int>)funcTable[454])((nint)window, (nint)top, (nint)left, (nint)bottom, (nint)right);
			#endif
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			int ret = GetWindowBordersSizeNative(window, top, left, bottom, right);
			return ret;
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, bottom, right);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (int* ptop = &top)
			{
				int ret = GetWindowBordersSizeNative(window, (int*)ptop, left, bottom, right);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, bottom, right);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (int* pleft = &left)
			{
				int ret = GetWindowBordersSizeNative(window, top, (int*)pleft, bottom, right);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, bottom, right);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					int ret = GetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, bottom, right);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, bottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (int* pbottom = &bottom)
			{
				int ret = GetWindowBordersSizeNative(window, top, left, (int*)pbottom, right);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pbottom = &bottom)
				{
					int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, (int*)pbottom, right);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pbottom = &bottom)
				{
					int ret = GetWindowBordersSizeNative(window, (int*)ptop, left, (int*)pbottom, right);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pbottom = &bottom)
					{
						int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, (int*)pbottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (int* pleft = &left)
			{
				fixed (int* pbottom = &bottom)
				{
					int ret = GetWindowBordersSizeNative(window, top, (int*)pleft, (int*)pbottom, right);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, (int*)pbottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						int ret = GetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, (int*)pbottom, right);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] int* right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						fixed (int* pbottom = &bottom)
						{
							int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, (int*)pbottom, right);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* pright = &right)
			{
				int ret = GetWindowBordersSizeNative(window, top, left, bottom, (int*)pright);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pright = &right)
				{
					int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, bottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pright = &right)
				{
					int ret = GetWindowBordersSizeNative(window, (int*)ptop, left, bottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pright = &right)
					{
						int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, bottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* pleft = &left)
			{
				fixed (int* pright = &right)
				{
					int ret = GetWindowBordersSizeNative(window, top, (int*)pleft, bottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pright = &right)
					{
						int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, bottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pright = &right)
					{
						int ret = GetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, bottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] int* bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						fixed (int* pright = &right)
						{
							int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, bottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* pbottom = &bottom)
			{
				fixed (int* pright = &right)
				{
					int ret = GetWindowBordersSizeNative(window, top, left, (int*)pbottom, (int*)pright);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pbottom = &bottom)
				{
					fixed (int* pright = &right)
					{
						int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, left, (int*)pbottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pbottom = &bottom)
				{
					fixed (int* pright = &right)
					{
						int ret = GetWindowBordersSizeNative(window, (int*)ptop, left, (int*)pbottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] int* left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pbottom = &bottom)
					{
						fixed (int* pright = &right)
						{
							int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, left, (int*)pbottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* pleft = &left)
			{
				fixed (int* pbottom = &bottom)
				{
					fixed (int* pright = &right)
					{
						int ret = GetWindowBordersSizeNative(window, top, (int*)pleft, (int*)pbottom, (int*)pright);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] int* top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						fixed (int* pright = &right)
						{
							int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, top, (int*)pleft, (int*)pbottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (int* ptop = &top)
			{
				fixed (int* pleft = &left)
				{
					fixed (int* pbottom = &bottom)
					{
						fixed (int* pright = &right)
						{
							int ret = GetWindowBordersSizeNative(window, (int*)ptop, (int*)pleft, (int*)pbottom, (int*)pright);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's borders (decorations) around the client area.<br/>
		/// Note: If this function fails (returns -1), the size values will be<br/>
		/// initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the<br/>
		/// window in question was borderless.<br/>
		/// Note: This function may fail on systems where the window has not yet been<br/>
		/// decorated by the display server (for example, immediately after calling<br/>
		/// SDL_CreateWindow). It is recommended that you wait at least until the<br/>
		/// window has been presented and composited, so that the window system has a<br/>
		/// chance to decorate the window and provide the border dimensions to SDL.<br/>
		/// This function also returns -1 if getting the information is not supported.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowBordersSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowBordersSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "int *")] ref int top, [NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "int *")] ref int left, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "int *")] ref int bottom, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "int *")] ref int right)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ptop = &top)
				{
					fixed (int* pleft = &left)
					{
						fixed (int* pbottom = &bottom)
						{
							fixed (int* pright = &right)
							{
								int ret = GetWindowBordersSizeNative((SDLWindow*)pwindow, (int*)ptop, (int*)pleft, (int*)pbottom, (int*)pright);
								return ret;
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowSizeInPixelsNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, int>)funcTable[455])(window, w, h);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[455])((nint)window, (nint)w, (nint)h);
			#endif
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			int ret = GetWindowSizeInPixelsNative(window, w, h);
			return ret;
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowSizeInPixelsNative((SDLWindow*)pwindow, w, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (int* pw = &w)
			{
				int ret = GetWindowSizeInPixelsNative(window, (int*)pw, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					int ret = GetWindowSizeInPixelsNative((SDLWindow*)pwindow, (int*)pw, h);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* ph = &h)
			{
				int ret = GetWindowSizeInPixelsNative(window, w, (int*)ph);
				return ret;
			}
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowSizeInPixelsNative((SDLWindow*)pwindow, w, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowSizeInPixelsNative(window, (int*)pw, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the size of a window's client area, in pixels.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowSizeInPixels")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowSizeInPixels([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						int ret = GetWindowSizeInPixelsNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Set the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowMinimumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_w")] [NativeName(NativeNameType.Type, "int")] int minW, [NativeName(NativeNameType.Param, "min_h")] [NativeName(NativeNameType.Type, "int")] int minH)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, int>)funcTable[456])(window, minW, minH);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int>)funcTable[456])((nint)window, minW, minH);
			#endif
		}

		/// <summary>
		/// Set the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "min_w")] [NativeName(NativeNameType.Type, "int")] int minW, [NativeName(NativeNameType.Param, "min_h")] [NativeName(NativeNameType.Type, "int")] int minH)
		{
			int ret = SetWindowMinimumSizeNative(window, minW, minH);
			return ret;
		}

		/// <summary>
		/// Set the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "min_w")] [NativeName(NativeNameType.Type, "int")] int minW, [NativeName(NativeNameType.Param, "min_h")] [NativeName(NativeNameType.Type, "int")] int minH)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowMinimumSizeNative((SDLWindow*)pwindow, minW, minH);
				return ret;
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowMinimumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, int>)funcTable[457])(window, w, h);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[457])((nint)window, (nint)w, (nint)h);
			#endif
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			int ret = GetWindowMinimumSizeNative(window, w, h);
			return ret;
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowMinimumSizeNative((SDLWindow*)pwindow, w, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (int* pw = &w)
			{
				int ret = GetWindowMinimumSizeNative(window, (int*)pw, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					int ret = GetWindowMinimumSizeNative((SDLWindow*)pwindow, (int*)pw, h);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* ph = &h)
			{
				int ret = GetWindowMinimumSizeNative(window, w, (int*)ph);
				return ret;
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowMinimumSizeNative((SDLWindow*)pwindow, w, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowMinimumSizeNative(window, (int*)pw, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the minimum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMinimumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMinimumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						int ret = GetWindowMinimumSizeNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Set the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowMaximumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "max_w")] [NativeName(NativeNameType.Type, "int")] int maxW, [NativeName(NativeNameType.Param, "max_h")] [NativeName(NativeNameType.Type, "int")] int maxH)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int, int>)funcTable[458])(window, maxW, maxH);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int, int>)funcTable[458])((nint)window, maxW, maxH);
			#endif
		}

		/// <summary>
		/// Set the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "max_w")] [NativeName(NativeNameType.Type, "int")] int maxW, [NativeName(NativeNameType.Param, "max_h")] [NativeName(NativeNameType.Type, "int")] int maxH)
		{
			int ret = SetWindowMaximumSizeNative(window, maxW, maxH);
			return ret;
		}

		/// <summary>
		/// Set the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "max_w")] [NativeName(NativeNameType.Type, "int")] int maxW, [NativeName(NativeNameType.Param, "max_h")] [NativeName(NativeNameType.Type, "int")] int maxH)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowMaximumSizeNative((SDLWindow*)pwindow, maxW, maxH);
				return ret;
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetWindowMaximumSizeNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int*, int*, int>)funcTable[459])(window, w, h);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, nint, nint, int>)funcTable[459])((nint)window, (nint)w, (nint)h);
			#endif
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			int ret = GetWindowMaximumSizeNative(window, w, h);
			return ret;
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = GetWindowMaximumSizeNative((SDLWindow*)pwindow, w, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (int* pw = &w)
			{
				int ret = GetWindowMaximumSizeNative(window, (int*)pw, h);
				return ret;
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] int* h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					int ret = GetWindowMaximumSizeNative((SDLWindow*)pwindow, (int*)pw, h);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* ph = &h)
			{
				int ret = GetWindowMaximumSizeNative(window, w, (int*)ph);
				return ret;
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] int* w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowMaximumSizeNative((SDLWindow*)pwindow, w, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (int* pw = &w)
			{
				fixed (int* ph = &h)
				{
					int ret = GetWindowMaximumSizeNative(window, (int*)pw, (int*)ph);
					return ret;
				}
			}
		}

		/// <summary>
		/// Get the maximum size of a window's client area.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GetWindowMaximumSize")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int GetWindowMaximumSize([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "int *")] ref int w, [NativeName(NativeNameType.Param, "h")] [NativeName(NativeNameType.Type, "int *")] ref int h)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				fixed (int* pw = &w)
				{
					fixed (int* ph = &h)
					{
						int ret = GetWindowMaximumSizeNative((SDLWindow*)pwindow, (int*)pw, (int*)ph);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// Set the border state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add<br/>
		/// or remove the border from the actual window. This is a no-op if the<br/>
		/// window's border already matches the requested state.<br/>
		/// You can't change the border state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowBordered")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowBorderedNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "bordered")] [NativeName(NativeNameType.Type, "SDL_bool")] int bordered)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int>)funcTable[460])(window, bordered);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[460])((nint)window, bordered);
			#endif
		}

		/// <summary>
		/// Set the border state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add<br/>
		/// or remove the border from the actual window. This is a no-op if the<br/>
		/// window's border already matches the requested state.<br/>
		/// You can't change the border state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowBordered")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowBordered([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "bordered")] [NativeName(NativeNameType.Type, "SDL_bool")] int bordered)
		{
			int ret = SetWindowBorderedNative(window, bordered);
			return ret;
		}

		/// <summary>
		/// Set the border state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add<br/>
		/// or remove the border from the actual window. This is a no-op if the<br/>
		/// window's border already matches the requested state.<br/>
		/// You can't change the border state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowBordered")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowBordered([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "bordered")] [NativeName(NativeNameType.Type, "SDL_bool")] int bordered)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowBorderedNative((SDLWindow*)pwindow, bordered);
				return ret;
			}
		}

		/// <summary>
		/// Set the user-resizable state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and<br/>
		/// allow/disallow user resizing of the window. This is a no-op if the window's<br/>
		/// resizable state already matches the requested state.<br/>
		/// You can't change the resizable state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowResizable")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowResizableNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "resizable")] [NativeName(NativeNameType.Type, "SDL_bool")] int resizable)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int>)funcTable[461])(window, resizable);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[461])((nint)window, resizable);
			#endif
		}

		/// <summary>
		/// Set the user-resizable state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and<br/>
		/// allow/disallow user resizing of the window. This is a no-op if the window's<br/>
		/// resizable state already matches the requested state.<br/>
		/// You can't change the resizable state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowResizable")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowResizable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "resizable")] [NativeName(NativeNameType.Type, "SDL_bool")] int resizable)
		{
			int ret = SetWindowResizableNative(window, resizable);
			return ret;
		}

		/// <summary>
		/// Set the user-resizable state of a window.<br/>
		/// This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and<br/>
		/// allow/disallow user resizing of the window. This is a no-op if the window's<br/>
		/// resizable state already matches the requested state.<br/>
		/// You can't change the resizable state of a fullscreen window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowResizable")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowResizable([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "resizable")] [NativeName(NativeNameType.Type, "SDL_bool")] int resizable)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowResizableNative((SDLWindow*)pwindow, resizable);
				return ret;
			}
		}

		/// <summary>
		/// Set the window to always be above the others.<br/>
		/// This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This<br/>
		/// will bring the window to the front and keep the window above the rest.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowAlwaysOnTop")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowAlwaysOnTopNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "on_top")] [NativeName(NativeNameType.Type, "SDL_bool")] int onTop)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int>)funcTable[462])(window, onTop);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[462])((nint)window, onTop);
			#endif
		}

		/// <summary>
		/// Set the window to always be above the others.<br/>
		/// This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This<br/>
		/// will bring the window to the front and keep the window above the rest.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowAlwaysOnTop")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowAlwaysOnTop([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "on_top")] [NativeName(NativeNameType.Type, "SDL_bool")] int onTop)
		{
			int ret = SetWindowAlwaysOnTopNative(window, onTop);
			return ret;
		}

		/// <summary>
		/// Set the window to always be above the others.<br/>
		/// This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This<br/>
		/// will bring the window to the front and keep the window above the rest.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowAlwaysOnTop")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowAlwaysOnTop([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window, [NativeName(NativeNameType.Param, "on_top")] [NativeName(NativeNameType.Type, "SDL_bool")] int onTop)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = SetWindowAlwaysOnTopNative((SDLWindow*)pwindow, onTop);
				return ret;
			}
		}

		/// <summary>
		/// Show a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ShowWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ShowWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)funcTable[463])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[463])((nint)window);
			#endif
		}

		/// <summary>
		/// Show a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ShowWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ShowWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			int ret = ShowWindowNative(window);
			return ret;
		}

		/// <summary>
		/// Show a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_ShowWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int ShowWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = ShowWindowNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Hide a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HideWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HideWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)funcTable[464])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[464])((nint)window);
			#endif
		}

		/// <summary>
		/// Hide a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HideWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int HideWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			int ret = HideWindowNative(window);
			return ret;
		}

		/// <summary>
		/// Hide a window.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_HideWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int HideWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = HideWindowNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Request that a window be raised above other windows and gain the input<br/>
		/// focus.<br/>
		/// The result of this request is subject to desktop window manager policy,<br/>
		/// particularly if raising the requested window would result in stealing focus<br/>
		/// from another application. If the window is successfully raised and gains<br/>
		/// input focus, an SDL_EVENT_WINDOW_FOCUS_GAINED event will be emitted, and<br/>
		/// the window will have the SDL_WINDOW_INPUT_FOCUS flag set.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RaiseWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RaiseWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)funcTable[465])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[465])((nint)window);
			#endif
		}

		/// <summary>
		/// Request that a window be raised above other windows and gain the input<br/>
		/// focus.<br/>
		/// The result of this request is subject to desktop window manager policy,<br/>
		/// particularly if raising the requested window would result in stealing focus<br/>
		/// from another application. If the window is successfully raised and gains<br/>
		/// input focus, an SDL_EVENT_WINDOW_FOCUS_GAINED event will be emitted, and<br/>
		/// the window will have the SDL_WINDOW_INPUT_FOCUS flag set.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RaiseWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RaiseWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			int ret = RaiseWindowNative(window);
			return ret;
		}

		/// <summary>
		/// Request that a window be raised above other windows and gain the input<br/>
		/// focus.<br/>
		/// The result of this request is subject to desktop window manager policy,<br/>
		/// particularly if raising the requested window would result in stealing focus<br/>
		/// from another application. If the window is successfully raised and gains<br/>
		/// input focus, an SDL_EVENT_WINDOW_FOCUS_GAINED event will be emitted, and<br/>
		/// the window will have the SDL_WINDOW_INPUT_FOCUS flag set.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RaiseWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RaiseWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = RaiseWindowNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Request that the window be made as large as possible.<br/>
		/// Non-resizable windows can't be maximized. The window must have the<br/>
		/// SDL_WINDOW_RESIZABLE flag set, or this will have no effect.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_MAXIMIZED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// When maximizing a window, whether the constraints set via<br/>
		/// SDL_SetWindowMaximumSize() are honored depends on the policy of the window<br/>
		/// manager. Win32 and macOS enforce the constraints when maximizing, while X11<br/>
		/// and Wayland window managers may vary.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MaximizeWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int MaximizeWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)funcTable[466])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[466])((nint)window);
			#endif
		}

		/// <summary>
		/// Request that the window be made as large as possible.<br/>
		/// Non-resizable windows can't be maximized. The window must have the<br/>
		/// SDL_WINDOW_RESIZABLE flag set, or this will have no effect.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_MAXIMIZED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// When maximizing a window, whether the constraints set via<br/>
		/// SDL_SetWindowMaximumSize() are honored depends on the policy of the window<br/>
		/// manager. Win32 and macOS enforce the constraints when maximizing, while X11<br/>
		/// and Wayland window managers may vary.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MaximizeWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MaximizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			int ret = MaximizeWindowNative(window);
			return ret;
		}

		/// <summary>
		/// Request that the window be made as large as possible.<br/>
		/// Non-resizable windows can't be maximized. The window must have the<br/>
		/// SDL_WINDOW_RESIZABLE flag set, or this will have no effect.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_MAXIMIZED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// When maximizing a window, whether the constraints set via<br/>
		/// SDL_SetWindowMaximumSize() are honored depends on the policy of the window<br/>
		/// manager. Win32 and macOS enforce the constraints when maximizing, while X11<br/>
		/// and Wayland window managers may vary.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MaximizeWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MaximizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = MaximizeWindowNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Request that the window be minimized to an iconic representation.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_MINIMIZED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MinimizeWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int MinimizeWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)funcTable[467])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[467])((nint)window);
			#endif
		}

		/// <summary>
		/// Request that the window be minimized to an iconic representation.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_MINIMIZED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MinimizeWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MinimizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			int ret = MinimizeWindowNative(window);
			return ret;
		}

		/// <summary>
		/// Request that the window be minimized to an iconic representation.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_MINIMIZED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_MinimizeWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int MinimizeWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = MinimizeWindowNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Request that the size and position of a minimized or maximized window be<br/>
		/// restored.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_RESTORED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RestoreWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RestoreWindowNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int>)funcTable[468])(window);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[468])((nint)window);
			#endif
		}

		/// <summary>
		/// Request that the size and position of a minimized or maximized window be<br/>
		/// restored.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_RESTORED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RestoreWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RestoreWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window)
		{
			int ret = RestoreWindowNative(window);
			return ret;
		}

		/// <summary>
		/// Request that the size and position of a minimized or maximized window be<br/>
		/// restored.<br/>
		/// On some windowing systems this request is asynchronous and the new window<br/>
		/// state may not have have been applied immediately upon the return of this<br/>
		/// function. If an immediate change is required, call SDL_SyncWindow() to<br/>
		/// block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_RESTORED event will be<br/>
		/// emitted. Note that, as this is just a request, the windowing system can<br/>
		/// deny the state change.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_RestoreWindow")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int RestoreWindow([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] ref SDLWindow window)
		{
			fixed (SDLWindow* pwindow = &window)
			{
				int ret = RestoreWindowNative((SDLWindow*)pwindow);
				return ret;
			}
		}

		/// <summary>
		/// Request that the window's fullscreen state be changed.<br/>
		/// By default a window in fullscreen state uses borderless fullscreen desktop<br/>
		/// mode, but a specific exclusive display mode can be set using<br/>
		/// SDL_SetWindowFullscreenMode().<br/>
		/// On some windowing systems this request is asynchronous and the new<br/>
		/// fullscreen state may not have have been applied immediately upon the return<br/>
		/// of this function. If an immediate change is required, call SDL_SyncWindow()<br/>
		/// to block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_ENTER_FULLSCREEN or<br/>
		/// SDL_EVENT_WINDOW_LEAVE_FULLSCREEN event will be emitted. Note that, as this<br/>
		/// is just a request, it can be denied by the windowing system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowFullscreen")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int SetWindowFullscreenNative([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "fullscreen")] [NativeName(NativeNameType.Type, "SDL_bool")] int fullscreen)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<SDLWindow*, int, int>)funcTable[469])(window, fullscreen);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[469])((nint)window, fullscreen);
			#endif
		}

		/// <summary>
		/// Request that the window's fullscreen state be changed.<br/>
		/// By default a window in fullscreen state uses borderless fullscreen desktop<br/>
		/// mode, but a specific exclusive display mode can be set using<br/>
		/// SDL_SetWindowFullscreenMode().<br/>
		/// On some windowing systems this request is asynchronous and the new<br/>
		/// fullscreen state may not have have been applied immediately upon the return<br/>
		/// of this function. If an immediate change is required, call SDL_SyncWindow()<br/>
		/// to block until the changes have taken effect.<br/>
		/// When the window state changes, an SDL_EVENT_WINDOW_ENTER_FULLSCREEN or<br/>
		/// SDL_EVENT_WINDOW_LEAVE_FULLSCREEN event will be emitted. Note that, as this<br/>
		/// is just a request, it can be denied by the windowing system.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_SetWindowFullscreen")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int SetWindowFullscreen([NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* window, [NativeName(NativeNameType.Param, "fullscreen")] [NativeName(NativeNameType.Type, "SDL_bool")] int fullscreen)
		{
			int ret = SetWindowFullscreenNative(window, fullscreen);
			return ret;
		}
	}
}
