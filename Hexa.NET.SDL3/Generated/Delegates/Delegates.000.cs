// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	#if NET5_0_OR_GREATER
	/// <summary>
	/// Return the number of bytes in this SDL_IOStream<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "size")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate long Size([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Return the number of bytes in this SDL_IOStream<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "size")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate long Size([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Seek to `offset` relative to `whence`, one of stdio's whence values:<br/>
	/// SDL_IO_SEEK_SET, SDL_IO_SEEK_CUR, SDL_IO_SEEK_END<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "seek")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate long Seek([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "Sint64")] long offset, [NativeName(NativeNameType.Param, "whence")] [NativeName(NativeNameType.Type, "SDL_IOWhence")] SDLIOWhence whence);

	#else
	/// <summary>
	/// Seek to `offset` relative to `whence`, one of stdio's whence values:<br/>
	/// SDL_IO_SEEK_SET, SDL_IO_SEEK_CUR, SDL_IO_SEEK_END<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "seek")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate long Seek([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "Sint64")] long offset, [NativeName(NativeNameType.Param, "whence")] [NativeName(NativeNameType.Type, "SDL_IOWhence")] SDLIOWhence whence);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Read up to `size` bytes from the data stream to the area pointed<br/>
	/// at by `ptr`.<br/>
	/// On an incomplete read, you should set `*status` to a value from the<br/>
	/// SDL_IOStatus enum. You do not have to explicitly set this on<br/>
	/// a complete, successful read.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "read")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nuint Read([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void *")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "status")] [NativeName(NativeNameType.Type, "SDL_IOStatus *")] SDLIOStatus* status);

	#else
	/// <summary>
	/// Read up to `size` bytes from the data stream to the area pointed<br/>
	/// at by `ptr`.<br/>
	/// On an incomplete read, you should set `*status` to a value from the<br/>
	/// SDL_IOStatus enum. You do not have to explicitly set this on<br/>
	/// a complete, successful read.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "read")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nuint Read([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void *")] nint ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "status")] [NativeName(NativeNameType.Type, "SDL_IOStatus *")] nint status);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Write exactly `size` bytes from the area pointed at by `ptr`<br/>
	/// to data stream.<br/>
	/// On an incomplete write, you should set `*status` to a value from the<br/>
	/// SDL_IOStatus enum. You do not have to explicitly set this on<br/>
	/// a complete, successful write.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "write")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nuint Write([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void const *")] void* ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "status")] [NativeName(NativeNameType.Type, "SDL_IOStatus *")] SDLIOStatus* status);

	#else
	/// <summary>
	/// Write exactly `size` bytes from the area pointed at by `ptr`<br/>
	/// to data stream.<br/>
	/// On an incomplete write, you should set `*status` to a value from the<br/>
	/// SDL_IOStatus enum. You do not have to explicitly set this on<br/>
	/// a complete, successful write.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "write")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nuint Write([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "ptr")] [NativeName(NativeNameType.Type, "void const *")] nint ptr, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size, [NativeName(NativeNameType.Param, "status")] [NativeName(NativeNameType.Type, "SDL_IOStatus *")] nint status);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// If the stream is buffering, make sure the data is written out.<br/>
	/// On failure, you should set `*status` to a value from the<br/>
	/// SDL_IOStatus enum. You do not have to explicitly set this on<br/>
	/// a successful flush.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "flush")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Flush([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "status")] [NativeName(NativeNameType.Type, "SDL_IOStatus *")] SDLIOStatus* status);

	#else
	/// <summary>
	/// If the stream is buffering, make sure the data is written out.<br/>
	/// On failure, you should set `*status` to a value from the<br/>
	/// SDL_IOStatus enum. You do not have to explicitly set this on<br/>
	/// a successful flush.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "flush")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Flush([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "status")] [NativeName(NativeNameType.Type, "SDL_IOStatus *")] nint status);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Close and free any allocated resources.<br/>
	/// This does not guarantee file writes will sync to physical media; they<br/>
	/// can be in the system's file cache, waiting to go to disk.<br/>
	/// The SDL_IOStream is still destroyed even if this fails, so clean up anything<br/>
	/// even if flushing buffers, etc, returns an error.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "close")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Close([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Close and free any allocated resources.<br/>
	/// This does not guarantee file writes will sync to physical media; they<br/>
	/// can be in the system's file cache, waiting to go to disk.<br/>
	/// The SDL_IOStream is still destroyed even if this fails, so clean up anything<br/>
	/// even if flushing buffers, etc, returns an error.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "close")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Close([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Called when the joystick state should be updated <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Update")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Update([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Called when the joystick state should be updated <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Update")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Update([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Called when the player index is set <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetPlayerIndex")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SetPlayerIndex([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex);

	#else
	/// <summary>
	/// Called when the player index is set <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetPlayerIndex")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SetPlayerIndex([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "player_index")] [NativeName(NativeNameType.Type, "int")] int playerIndex);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Implements SDL_RumbleJoystick() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Rumble")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Rumble([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble);

	#else
	/// <summary>
	/// Implements SDL_RumbleJoystick() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Rumble")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Rumble([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "low_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort lowFrequencyRumble, [NativeName(NativeNameType.Param, "high_frequency_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort highFrequencyRumble);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Implements SDL_RumbleJoystickTriggers() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "RumbleTriggers")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte RumbleTriggers([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble);

	#else
	/// <summary>
	/// Implements SDL_RumbleJoystickTriggers() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "RumbleTriggers")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte RumbleTriggers([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "left_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort leftRumble, [NativeName(NativeNameType.Param, "right_rumble")] [NativeName(NativeNameType.Type, "Uint16")] ushort rightRumble);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Implements SDL_SetJoystickLED() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetLED")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SetLED([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue);

	#else
	/// <summary>
	/// Implements SDL_SetJoystickLED() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetLED")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SetLED([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "red")] [NativeName(NativeNameType.Type, "Uint8")] byte red, [NativeName(NativeNameType.Param, "green")] [NativeName(NativeNameType.Type, "Uint8")] byte green, [NativeName(NativeNameType.Param, "blue")] [NativeName(NativeNameType.Type, "Uint8")] byte blue);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Implements SDL_SendJoystickEffect() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SendEffect")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SendEffect([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size);

	#else
	/// <summary>
	/// Implements SDL_SendJoystickEffect() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SendEffect")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SendEffect([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] nint data, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "int")] int size);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Implements SDL_SetGamepadSensorEnabled() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetSensorsEnabled")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SetSensorsEnabled([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] byte enabled);

	#else
	/// <summary>
	/// Implements SDL_SetGamepadSensorEnabled() <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SetSensorsEnabled")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SetSensorsEnabled([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "enabled")] [NativeName(NativeNameType.Type, "bool")] byte enabled);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Cleans up the userdata when the joystick is detached <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Cleanup")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Cleanup([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Cleans up the userdata when the joystick is detached <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "Cleanup")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Cleanup([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Optional, returns whether the storage is currently ready for access <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "ready")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Ready([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Optional, returns whether the storage is currently ready for access <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "ready")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Ready([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Enumerate a directory, optional for write-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "enumerate")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Enumerate([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_EnumerateDirectoryCallback")] delegate*<void*, byte*, byte*, SDLEnumerationResult> callback, [NativeName(NativeNameType.Param, "callback_userdata")] [NativeName(NativeNameType.Type, "void *")] void* callbackUserdata);

	#else
	/// <summary>
	/// Enumerate a directory, optional for write-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "enumerate")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Enumerate([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] nint path, [NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "SDL_EnumerateDirectoryCallback")] nint callback, [NativeName(NativeNameType.Param, "callback_userdata")] [NativeName(NativeNameType.Type, "void *")] nint callbackUserdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Get path information, optional for write-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "info")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Info([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path, [NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "SDL_PathInfo *")] SDLPathInfo* info);

	#else
	/// <summary>
	/// Get path information, optional for write-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "info")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Info([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] nint path, [NativeName(NativeNameType.Param, "info")] [NativeName(NativeNameType.Type, "SDL_PathInfo *")] nint info);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Read a file from storage, optional for write-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "read_file")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte ReadFile([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path, [NativeName(NativeNameType.Param, "destination")] [NativeName(NativeNameType.Type, "void *")] void* destination, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "Uint64")] ulong length);

	#else
	/// <summary>
	/// Read a file from storage, optional for write-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "read_file")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte ReadFile([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] nint path, [NativeName(NativeNameType.Param, "destination")] [NativeName(NativeNameType.Type, "void *")] nint destination, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "Uint64")] ulong length);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Write a file to storage, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "write_file")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte WriteFile([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "void const *")] void* source, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "Uint64")] ulong length);

	#else
	/// <summary>
	/// Write a file to storage, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "write_file")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte WriteFile([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] nint path, [NativeName(NativeNameType.Param, "source")] [NativeName(NativeNameType.Type, "void const *")] nint source, [NativeName(NativeNameType.Param, "length")] [NativeName(NativeNameType.Type, "Uint64")] ulong length);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Create a directory, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "mkdir")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Mkdir([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path);

	#else
	/// <summary>
	/// Create a directory, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "mkdir")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Mkdir([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] nint path);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Remove a file or empty directory, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "remove")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Remove([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] byte* path);

	#else
	/// <summary>
	/// Remove a file or empty directory, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "remove")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Remove([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "path")] [NativeName(NativeNameType.Type, "char const *")] nint path);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Rename a path, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "rename")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Rename([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "oldpath")] [NativeName(NativeNameType.Type, "char const *")] byte* oldpath, [NativeName(NativeNameType.Param, "newpath")] [NativeName(NativeNameType.Type, "char const *")] byte* newpath);

	#else
	/// <summary>
	/// Rename a path, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "rename")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Rename([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "oldpath")] [NativeName(NativeNameType.Type, "char const *")] nint oldpath, [NativeName(NativeNameType.Param, "newpath")] [NativeName(NativeNameType.Type, "char const *")] nint newpath);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Copy a file, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "copy")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Copy([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "oldpath")] [NativeName(NativeNameType.Type, "char const *")] byte* oldpath, [NativeName(NativeNameType.Param, "newpath")] [NativeName(NativeNameType.Type, "char const *")] byte* newpath);

	#else
	/// <summary>
	/// Copy a file, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "copy")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte Copy([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "oldpath")] [NativeName(NativeNameType.Type, "char const *")] nint oldpath, [NativeName(NativeNameType.Param, "newpath")] [NativeName(NativeNameType.Type, "char const *")] nint newpath);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Get the space remaining, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "space_remaining")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong SpaceRemaining([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Get the space remaining, optional for read-only storage <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "space_remaining")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong SpaceRemaining([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Parse an argument. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "parse_arguments")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int ParseArguments([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] void* data, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char * *")] byte** argv, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Parse an argument. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "parse_arguments")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int ParseArguments([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] nint data, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char * *")] nint argv, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Finalize this argument parser. Called once before parsing the first argument. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "finalize")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Finalize([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] void* arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Finalize this argument parser. Called once before parsing the first argument. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "finalize")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Finalize([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] nint arg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Func2Stress <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "testCase")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int TestCase([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] void* arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Func2Stress <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "testCase")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int TestCase([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] nint arg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// The function that is run before each test. NULL skips. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "testSetUp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void TestSetUp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void * *")] void** arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// The function that is run before each test. NULL skips. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "testSetUp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void TestSetUp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void * *")] nint arg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// The function that is run after each test. NULL skips. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "testTearDown")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void TestTearDown([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] void* arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// The function that is run after each test. NULL skips. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "testTearDown")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void TestTearDown([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] nint arg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used to implement SDL_malloc().<br/>
	/// SDL will always ensure that the passed `size` is greater than 0.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_malloc_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* SDLMallocFunc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	#else
	/// <summary>
	/// A callback used to implement SDL_malloc().<br/>
	/// SDL will always ensure that the passed `size` is greater than 0.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_malloc_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint SDLMallocFunc([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used to implement SDL_calloc().<br/>
	/// SDL will always ensure that the passed `nmemb` and `size` are both greater<br/>
	/// than 0.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_calloc_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* SDLCallocFunc([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	#else
	/// <summary>
	/// A callback used to implement SDL_calloc().<br/>
	/// SDL will always ensure that the passed `nmemb` and `size` are both greater<br/>
	/// than 0.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_calloc_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint SDLCallocFunc([NativeName(NativeNameType.Param, "nmemb")] [NativeName(NativeNameType.Type, "size_t")] nuint nmemb, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used to implement SDL_realloc().<br/>
	/// SDL will always ensure that the passed `size` is greater than 0.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_realloc_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* SDLReallocFunc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	#else
	/// <summary>
	/// A callback used to implement SDL_realloc().<br/>
	/// SDL will always ensure that the passed `size` is greater than 0.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_realloc_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint SDLReallocFunc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] nint mem, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t")] nuint size);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used to implement SDL_free().<br/>
	/// SDL will always ensure that the passed `mem` is a non-NULL pointer.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_free_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLFreeFunc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] void* mem);

	#else
	/// <summary>
	/// A callback used to implement SDL_free().<br/>
	/// SDL will always ensure that the passed `mem` is a non-NULL pointer.<br/>
	/// <br/>
	/// <br/>
	/// It should be safe to call this callback from any thread.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_free_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLFreeFunc([NativeName(NativeNameType.Param, "mem")] [NativeName(NativeNameType.Type, "void *")] nint mem);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used with SDL sorting and binary search functions.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_CompareCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLCompareCallback([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "void const *")] void* a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "void const *")] void* b);

	#else
	/// <summary>
	/// A callback used with SDL sorting and binary search functions.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_CompareCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLCompareCallback([NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "void const *")] nint a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "void const *")] nint b);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used with SDL sorting and binary search functions.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_CompareCallback_r")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLCompareCallbackR([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "void const *")] void* a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "void const *")] void* b);

	#else
	/// <summary>
	/// A callback used with SDL sorting and binary search functions.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_CompareCallback_r")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLCompareCallbackR([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "a")] [NativeName(NativeNameType.Type, "void const *")] nint a, [NativeName(NativeNameType.Param, "b")] [NativeName(NativeNameType.Type, "void const *")] nint b);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "SDL_FunctionPointer")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLFunctionPointer();

	#else
	[NativeName(NativeNameType.Delegate, "SDL_FunctionPointer")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLFunctionPointer();

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback that fires when an SDL assertion fails.<br/>
	/// <br/>
	/// <br/>
	/// This callback may be called from any thread that triggers an<br/>
	/// assert at any time.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AssertionHandler")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAssertState SDLAssertionHandler([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "SDL_AssertData const *")] SDLAssertData* data, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// A callback that fires when an SDL assertion fails.<br/>
	/// <br/>
	/// <br/>
	/// This callback may be called from any thread that triggers an<br/>
	/// assert at any time.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AssertionHandler")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAssertState SDLAssertionHandler([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "SDL_AssertData const *")] nint data, [NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used to free resources when a property is deleted.<br/>
	/// This should release any resources associated with `value` that are no<br/>
	/// longer needed.<br/>
	/// This callback is set per-property. Different properties in the same group<br/>
	/// can have different cleanup callbacks.<br/>
	/// This callback will be called _during_ SDL_SetPointerPropertyWithCleanup if<br/>
	/// the function fails for any reason.<br/>
	/// <br/>
	/// <br/>
	/// This callback may fire without any locks held; if this is a<br/>
	/// concern, the app should provide its own locking.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_CleanupPropertyCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLCleanupPropertyCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] void* value);

	#else
	/// <summary>
	/// A callback used to free resources when a property is deleted.<br/>
	/// This should release any resources associated with `value` that are no<br/>
	/// longer needed.<br/>
	/// This callback is set per-property. Different properties in the same group<br/>
	/// can have different cleanup callbacks.<br/>
	/// This callback will be called _during_ SDL_SetPointerPropertyWithCleanup if<br/>
	/// the function fails for any reason.<br/>
	/// <br/>
	/// <br/>
	/// This callback may fire without any locks held; if this is a<br/>
	/// concern, the app should provide its own locking.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_CleanupPropertyCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLCleanupPropertyCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used to enumerate all the properties in a group of properties.<br/>
	/// This callback is called from SDL_EnumerateProperties(), and is called once<br/>
	/// per property in the set.<br/>
	/// <br/>
	/// <br/>
	/// SDL_EnumerateProperties holds a lock on `props` during this<br/>
	/// callback.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EnumeratePropertiesCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLEnumeratePropertiesCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "props")] [NativeName(NativeNameType.Type, "SDL_PropertiesID")] uint props, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name);

	#else
	/// <summary>
	/// A callback used to enumerate all the properties in a group of properties.<br/>
	/// This callback is called from SDL_EnumerateProperties(), and is called once<br/>
	/// per property in the set.<br/>
	/// <br/>
	/// <br/>
	/// SDL_EnumerateProperties holds a lock on `props` during this<br/>
	/// callback.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EnumeratePropertiesCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLEnumeratePropertiesCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "props")] [NativeName(NativeNameType.Type, "SDL_PropertiesID")] uint props, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] nint name);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// The function passed to SDL_CreateThread() as the new thread's entry point.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_ThreadFunction")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLThreadFunction([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] void* data);

	#else
	/// <summary>
	/// The function passed to SDL_CreateThread() as the new thread's entry point.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_ThreadFunction")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLThreadFunction([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] nint data);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// The callback used to cleanup data passed to SDL_SetTLS.<br/>
	/// This is called when a thread exits, to allow an app to free any resources.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_TLSDestructorCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTLSDestructorCallback([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] void* value);

	#else
	/// <summary>
	/// The callback used to cleanup data passed to SDL_SetTLS.<br/>
	/// This is called when a thread exits, to allow an app to free any resources.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_TLSDestructorCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTLSDestructorCallback([NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback that fires when data passes through an SDL_AudioStream.<br/>
	/// Apps can (optionally) register a callback with an audio stream that is<br/>
	/// called when data is added with SDL_PutAudioStreamData, or requested with<br/>
	/// SDL_GetAudioStreamData.<br/>
	/// Two values are offered here: one is the amount of additional data needed to<br/>
	/// satisfy the immediate request (which might be zero if the stream already<br/>
	/// has enough data queued) and the other is the total amount being requested.<br/>
	/// In a Get call triggering a Put callback, these values can be different. In<br/>
	/// a Put call triggering a Get callback, these values are always the same.<br/>
	/// Byte counts might be slightly overestimated due to buffering or resampling,<br/>
	/// and may change from call to call.<br/>
	/// This callback is not required to do anything. Generally this is useful for<br/>
	/// adding/reading data on demand, and the app will often put/get data as<br/>
	/// appropriate, but the system goes on with the data currently available to it<br/>
	/// if this callback does nothing.<br/>
	/// <br/>
	/// <br/>
	/// This callbacks may run from any thread, so if you need to<br/>
	/// protect shared data, you should use SDL_LockAudioStream to<br/>
	/// serialize access; this lock will be held before your callback<br/>
	/// is called, so your callback does not need to manage the lock<br/>
	/// explicitly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AudioStreamCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAudioStreamCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] SDLAudioStream* stream, [NativeName(NativeNameType.Param, "additional_amount")] [NativeName(NativeNameType.Type, "int")] int additionalAmount, [NativeName(NativeNameType.Param, "total_amount")] [NativeName(NativeNameType.Type, "int")] int totalAmount);

	#else
	/// <summary>
	/// A callback that fires when data passes through an SDL_AudioStream.<br/>
	/// Apps can (optionally) register a callback with an audio stream that is<br/>
	/// called when data is added with SDL_PutAudioStreamData, or requested with<br/>
	/// SDL_GetAudioStreamData.<br/>
	/// Two values are offered here: one is the amount of additional data needed to<br/>
	/// satisfy the immediate request (which might be zero if the stream already<br/>
	/// has enough data queued) and the other is the total amount being requested.<br/>
	/// In a Get call triggering a Put callback, these values can be different. In<br/>
	/// a Put call triggering a Get callback, these values are always the same.<br/>
	/// Byte counts might be slightly overestimated due to buffering or resampling,<br/>
	/// and may change from call to call.<br/>
	/// This callback is not required to do anything. Generally this is useful for<br/>
	/// adding/reading data on demand, and the app will often put/get data as<br/>
	/// appropriate, but the system goes on with the data currently available to it<br/>
	/// if this callback does nothing.<br/>
	/// <br/>
	/// <br/>
	/// This callbacks may run from any thread, so if you need to<br/>
	/// protect shared data, you should use SDL_LockAudioStream to<br/>
	/// serialize access; this lock will be held before your callback<br/>
	/// is called, so your callback does not need to manage the lock<br/>
	/// explicitly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AudioStreamCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAudioStreamCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "SDL_AudioStream *")] nint stream, [NativeName(NativeNameType.Param, "additional_amount")] [NativeName(NativeNameType.Type, "int")] int additionalAmount, [NativeName(NativeNameType.Param, "total_amount")] [NativeName(NativeNameType.Type, "int")] int totalAmount);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback that fires when data is about to be fed to an audio device.<br/>
	/// This is useful for accessing the final mix, perhaps for writing a<br/>
	/// visualizer or applying a final effect to the audio data before playback.<br/>
	/// This callback should run as quickly as possible and not block for any<br/>
	/// significant time, as this callback delays submission of data to the audio<br/>
	/// device, which can cause audio playback problems.<br/>
	/// The postmix callback _must_ be able to handle any audio data format<br/>
	/// specified in `spec`, which can change between callbacks if the audio device<br/>
	/// changed. However, this only covers frequency and channel count; data is<br/>
	/// always provided here in SDL_AUDIO_F32 format.<br/>
	/// The postmix callback runs _after_ logical device gain and audiostream gain<br/>
	/// have been applied, which is to say you can make the output data louder at<br/>
	/// this point than the gain settings would suggest.<br/>
	/// <br/>
	/// <br/>
	/// This will run from a background thread owned by SDL. The<br/>
	/// application is responsible for locking resources the callback<br/>
	/// touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AudioPostmixCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAudioPostmixCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] SDLAudioSpec* spec, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "float *")] float* buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "int")] int buflen);

	#else
	/// <summary>
	/// A callback that fires when data is about to be fed to an audio device.<br/>
	/// This is useful for accessing the final mix, perhaps for writing a<br/>
	/// visualizer or applying a final effect to the audio data before playback.<br/>
	/// This callback should run as quickly as possible and not block for any<br/>
	/// significant time, as this callback delays submission of data to the audio<br/>
	/// device, which can cause audio playback problems.<br/>
	/// The postmix callback _must_ be able to handle any audio data format<br/>
	/// specified in `spec`, which can change between callbacks if the audio device<br/>
	/// changed. However, this only covers frequency and channel count; data is<br/>
	/// always provided here in SDL_AUDIO_F32 format.<br/>
	/// The postmix callback runs _after_ logical device gain and audiostream gain<br/>
	/// have been applied, which is to say you can make the output data louder at<br/>
	/// this point than the gain settings would suggest.<br/>
	/// <br/>
	/// <br/>
	/// This will run from a background thread owned by SDL. The<br/>
	/// application is responsible for locking resources the callback<br/>
	/// touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AudioPostmixCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAudioPostmixCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "spec")] [NativeName(NativeNameType.Type, "SDL_AudioSpec const *")] nint spec, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "float *")] nint buffer, [NativeName(NativeNameType.Param, "buflen")] [NativeName(NativeNameType.Type, "int")] int buflen);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Callback function that will be called when data for the specified mime-type<br/>
	/// is requested by the OS.<br/>
	/// The callback function is called with NULL as the mime_type when the<br/>
	/// clipboard is cleared or new data is set. The clipboard is automatically<br/>
	/// cleared in SDL_Quit().<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_ClipboardDataCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void* SDLClipboardDataCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "mime_type")] [NativeName(NativeNameType.Type, "char const *")] byte* mimeType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nuint* size);

	#else
	/// <summary>
	/// Callback function that will be called when data for the specified mime-type<br/>
	/// is requested by the OS.<br/>
	/// The callback function is called with NULL as the mime_type when the<br/>
	/// clipboard is cleared or new data is set. The clipboard is automatically<br/>
	/// cleared in SDL_Quit().<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_ClipboardDataCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint SDLClipboardDataCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "mime_type")] [NativeName(NativeNameType.Type, "char const *")] nint mimeType, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "size_t *")] nint size);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Callback function that will be called when the clipboard is cleared, or new<br/>
	/// data is set.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_ClipboardCleanupCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLClipboardCleanupCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Callback function that will be called when the clipboard is cleared, or new<br/>
	/// data is set.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_ClipboardCleanupCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLClipboardCleanupCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// EGL platform attribute initialization callback.<br/>
	/// This is called when SDL is attempting to create an EGL context, to let the<br/>
	/// app add extra attributes to its eglGetPlatformDisplay() call.<br/>
	/// The callback should return a pointer to an EGL attribute array terminated<br/>
	/// with `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow<br/>
	/// process will fail gracefully.<br/>
	/// The returned pointer should be allocated with SDL_malloc() and will be<br/>
	/// passed to SDL_free().<br/>
	/// The arrays returned by each callback will be appended to the existing<br/>
	/// attribute arrays defined by SDL.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EGLAttribArrayCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint* SDLEGLAttribArrayCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// EGL platform attribute initialization callback.<br/>
	/// This is called when SDL is attempting to create an EGL context, to let the<br/>
	/// app add extra attributes to its eglGetPlatformDisplay() call.<br/>
	/// The callback should return a pointer to an EGL attribute array terminated<br/>
	/// with `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow<br/>
	/// process will fail gracefully.<br/>
	/// The returned pointer should be allocated with SDL_malloc() and will be<br/>
	/// passed to SDL_free().<br/>
	/// The arrays returned by each callback will be appended to the existing<br/>
	/// attribute arrays defined by SDL.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EGLAttribArrayCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint SDLEGLAttribArrayCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// EGL surface/context attribute initialization callback types.<br/>
	/// This is called when SDL is attempting to create an EGL surface, to let the<br/>
	/// app add extra attributes to its eglCreateWindowSurface() or<br/>
	/// eglCreateContext calls.<br/>
	/// For convenience, the EGLDisplay and EGLConfig to use are provided to the<br/>
	/// callback.<br/>
	/// The callback should return a pointer to an EGL attribute array terminated<br/>
	/// with `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow<br/>
	/// process will fail gracefully.<br/>
	/// The returned pointer should be allocated with SDL_malloc() and will be<br/>
	/// passed to SDL_free().<br/>
	/// The arrays returned by each callback will be appended to the existing<br/>
	/// attribute arrays defined by SDL.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EGLIntArrayCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int* SDLEGLIntArrayCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "SDL_EGLDisplay")] SDLEGLDisplay display, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "SDL_EGLConfig")] SDLEGLConfig config);

	#else
	/// <summary>
	/// EGL surface/context attribute initialization callback types.<br/>
	/// This is called when SDL is attempting to create an EGL surface, to let the<br/>
	/// app add extra attributes to its eglCreateWindowSurface() or<br/>
	/// eglCreateContext calls.<br/>
	/// For convenience, the EGLDisplay and EGLConfig to use are provided to the<br/>
	/// callback.<br/>
	/// The callback should return a pointer to an EGL attribute array terminated<br/>
	/// with `EGL_NONE`. If this function returns NULL, the SDL_CreateWindow<br/>
	/// process will fail gracefully.<br/>
	/// The returned pointer should be allocated with SDL_malloc() and will be<br/>
	/// passed to SDL_free().<br/>
	/// The arrays returned by each callback will be appended to the existing<br/>
	/// attribute arrays defined by SDL.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EGLIntArrayCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint SDLEGLIntArrayCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "SDL_EGLDisplay")] SDLEGLDisplay display, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "SDL_EGLConfig")] SDLEGLConfig config);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Callback used for hit-testing.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_HitTest")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLHitTestResult SDLHitTest([NativeName(NativeNameType.Param, "win")] [NativeName(NativeNameType.Type, "SDL_Window *")] SDLWindow* win, [NativeName(NativeNameType.Param, "area")] [NativeName(NativeNameType.Type, "SDL_Point const *")] SDLPoint* area, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] void* data);

	#else
	/// <summary>
	/// Callback used for hit-testing.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_HitTest")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLHitTestResult SDLHitTest([NativeName(NativeNameType.Param, "win")] [NativeName(NativeNameType.Type, "SDL_Window *")] nint win, [NativeName(NativeNameType.Param, "area")] [NativeName(NativeNameType.Type, "SDL_Point const *")] nint area, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] nint data);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Callback used by file dialog functions.<br/>
	/// The specific usage is described in each function.<br/>
	/// If `filelist` is:<br/>
	/// - NULL, an error occurred. Details can be obtained with SDL_GetError().<br/>
	/// - A pointer to NULL, the user either didn't choose any file or canceled the<br/>
	/// dialog.<br/>
	/// - A pointer to non-`NULL`, the user chose one or more files. The argument<br/>
	/// is a null-terminated list of pointers to C strings, each containing a<br/>
	/// path.<br/>
	/// The filelist argument should not be freed; it will automatically be freed<br/>
	/// when the callback returns.<br/>
	/// The filter argument is the index of the filter that was selected, or -1 if<br/>
	/// no filter was selected or if the platform or method doesn't support<br/>
	/// fetching the selected filter.<br/>
	/// In Android, the `filelist` are `content://` URIs. They should be opened<br/>
	/// using SDL_IOFromFile() with appropriate modes. This applies both to open<br/>
	/// and save file dialog.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_DialogFileCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLDialogFileCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "filelist")] [NativeName(NativeNameType.Type, "char const * const *")] byte** filelist, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "int")] int filter);

	#else
	/// <summary>
	/// Callback used by file dialog functions.<br/>
	/// The specific usage is described in each function.<br/>
	/// If `filelist` is:<br/>
	/// - NULL, an error occurred. Details can be obtained with SDL_GetError().<br/>
	/// - A pointer to NULL, the user either didn't choose any file or canceled the<br/>
	/// dialog.<br/>
	/// - A pointer to non-`NULL`, the user chose one or more files. The argument<br/>
	/// is a null-terminated list of pointers to C strings, each containing a<br/>
	/// path.<br/>
	/// The filelist argument should not be freed; it will automatically be freed<br/>
	/// when the callback returns.<br/>
	/// The filter argument is the index of the filter that was selected, or -1 if<br/>
	/// no filter was selected or if the platform or method doesn't support<br/>
	/// fetching the selected filter.<br/>
	/// In Android, the `filelist` are `content://` URIs. They should be opened<br/>
	/// using SDL_IOFromFile() with appropriate modes. This applies both to open<br/>
	/// and save file dialog.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_DialogFileCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLDialogFileCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "filelist")] [NativeName(NativeNameType.Type, "char const * const *")] nint filelist, [NativeName(NativeNameType.Param, "filter")] [NativeName(NativeNameType.Type, "int")] int filter);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A function pointer used for callbacks that watch the event queue.<br/>
	/// <br/>
	/// <br/>
	/// SDL may call this callback at any time from any thread; the<br/>
	/// application is responsible for locking resources the callback<br/>
	/// touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EventFilter")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SDLEventFilter([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "SDL_Event *")] SDLEvent* evnt);

	#else
	/// <summary>
	/// A function pointer used for callbacks that watch the event queue.<br/>
	/// <br/>
	/// <br/>
	/// SDL may call this callback at any time from any thread; the<br/>
	/// application is responsible for locking resources the callback<br/>
	/// touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EventFilter")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SDLEventFilter([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "SDL_Event *")] nint evnt);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Callback for directory enumeration.<br/>
	/// Enumeration of directory entries will continue until either all entries<br/>
	/// have been provided to the callback, or the callback has requested a stop<br/>
	/// through its return value.<br/>
	/// Returning SDL_ENUM_CONTINUE will let enumeration proceed, calling the<br/>
	/// callback with further entries. SDL_ENUM_SUCCESS and SDL_ENUM_FAILURE will<br/>
	/// terminate the enumeration early, and dictate the return value of the<br/>
	/// enumeration function itself.<br/>
	/// `dirname` is guaranteed to end with a path separator ('<br/>
	/// \<br/>
	/// ' on Windows, '/'<br/>
	/// on most other platforms).<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EnumerateDirectoryCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLEnumerationResult SDLEnumerateDirectoryCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "dirname")] [NativeName(NativeNameType.Type, "char const *")] byte* dirname, [NativeName(NativeNameType.Param, "fname")] [NativeName(NativeNameType.Type, "char const *")] byte* fname);

	#else
	/// <summary>
	/// Callback for directory enumeration.<br/>
	/// Enumeration of directory entries will continue until either all entries<br/>
	/// have been provided to the callback, or the callback has requested a stop<br/>
	/// through its return value.<br/>
	/// Returning SDL_ENUM_CONTINUE will let enumeration proceed, calling the<br/>
	/// callback with further entries. SDL_ENUM_SUCCESS and SDL_ENUM_FAILURE will<br/>
	/// terminate the enumeration early, and dictate the return value of the<br/>
	/// enumeration function itself.<br/>
	/// `dirname` is guaranteed to end with a path separator ('<br/>
	/// \<br/>
	/// ' on Windows, '/'<br/>
	/// on most other platforms).<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_EnumerateDirectoryCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLEnumerationResult SDLEnumerateDirectoryCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "dirname")] [NativeName(NativeNameType.Type, "char const *")] nint dirname, [NativeName(NativeNameType.Param, "fname")] [NativeName(NativeNameType.Type, "char const *")] nint fname);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback used to send notifications of hint value changes.<br/>
	/// This is called an initial time during SDL_AddHintCallback with the hint's<br/>
	/// current value, and then again each time the hint's value changes.<br/>
	/// <br/>
	/// <br/>
	/// This callback is fired from whatever thread is setting a new<br/>
	/// hint value. SDL holds a lock on the hint subsystem when<br/>
	/// calling this callback.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_HintCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLHintCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] byte* name, [NativeName(NativeNameType.Param, "oldValue")] [NativeName(NativeNameType.Type, "char const *")] byte* oldValue, [NativeName(NativeNameType.Param, "newValue")] [NativeName(NativeNameType.Type, "char const *")] byte* newValue);

	#else
	/// <summary>
	/// A callback used to send notifications of hint value changes.<br/>
	/// This is called an initial time during SDL_AddHintCallback with the hint's<br/>
	/// current value, and then again each time the hint's value changes.<br/>
	/// <br/>
	/// <br/>
	/// This callback is fired from whatever thread is setting a new<br/>
	/// hint value. SDL holds a lock on the hint subsystem when<br/>
	/// calling this callback.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_HintCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLHintCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "char const *")] nint name, [NativeName(NativeNameType.Param, "oldValue")] [NativeName(NativeNameType.Type, "char const *")] nint oldValue, [NativeName(NativeNameType.Param, "newValue")] [NativeName(NativeNameType.Type, "char const *")] nint newValue);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Function pointer typedef for SDL_AppInit.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppInit directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppInit_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAppResult SDLAppInitFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void * *")] void** appstate, [NativeName(NativeNameType.Param, "argc")] [NativeName(NativeNameType.Type, "int")] int argc, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char *[-1]")] byte** argv);

	#else
	/// <summary>
	/// Function pointer typedef for SDL_AppInit.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppInit directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppInit_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAppResult SDLAppInitFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void * *")] nint appstate, [NativeName(NativeNameType.Param, "argc")] [NativeName(NativeNameType.Type, "int")] int argc, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char *[-1]")] nint argv);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Function pointer typedef for SDL_AppIterate.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppIterate directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppIterate_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAppResult SDLAppIterateFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void *")] void* appstate);

	#else
	/// <summary>
	/// Function pointer typedef for SDL_AppIterate.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppIterate directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppIterate_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAppResult SDLAppIterateFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void *")] nint appstate);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Function pointer typedef for SDL_AppEvent.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppEvent directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppEvent_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAppResult SDLAppEventFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void *")] void* appstate, [NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "SDL_Event *")] SDLEvent* evnt);

	#else
	/// <summary>
	/// Function pointer typedef for SDL_AppEvent.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppEvent directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppEvent_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate SDLAppResult SDLAppEventFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void *")] nint appstate, [NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "SDL_Event *")] nint evnt);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Function pointer typedef for SDL_AppQuit.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppEvent directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppQuit_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAppQuitFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void *")] void* appstate, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_AppResult")] SDLAppResult result);

	#else
	/// <summary>
	/// Function pointer typedef for SDL_AppQuit.<br/>
	/// These are used by SDL_EnterAppMainCallbacks. This mechanism operates behind<br/>
	/// the scenes for apps using the optional main callbacks. Apps that want to<br/>
	/// use this should just implement SDL_AppEvent directly.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_AppQuit_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLAppQuitFunc([NativeName(NativeNameType.Param, "appstate")] [NativeName(NativeNameType.Type, "void *")] nint appstate, [NativeName(NativeNameType.Param, "result")] [NativeName(NativeNameType.Type, "SDL_AppResult")] SDLAppResult result);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Callback run on the main thread.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_MainThreadCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLMainThreadCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata);

	#else
	/// <summary>
	/// Callback run on the main thread.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_MainThreadCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLMainThreadCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// The prototype for the log output callback function.<br/>
	/// This function is called by SDL when there is new text to be logged. A mutex<br/>
	/// is held so that this function is never called by more than one thread at<br/>
	/// once.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_LogOutputFunction")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLLogOutputFunction([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "category")] [NativeName(NativeNameType.Type, "int")] int category, [NativeName(NativeNameType.Param, "priority")] [NativeName(NativeNameType.Type, "SDL_LogPriority")] SDLLogPriority priority, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "char const *")] byte* message);

	#else
	/// <summary>
	/// The prototype for the log output callback function.<br/>
	/// This function is called by SDL when there is new text to be logged. A mutex<br/>
	/// is held so that this function is never called by more than one thread at<br/>
	/// once.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_LogOutputFunction")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLLogOutputFunction([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "category")] [NativeName(NativeNameType.Type, "int")] int category, [NativeName(NativeNameType.Param, "priority")] [NativeName(NativeNameType.Type, "SDL_LogPriority")] SDLLogPriority priority, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "char const *")] nint message);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback to be used with SDL_SetWindowsMessageHook.<br/>
	/// This callback may modify the message, and should return true if the message<br/>
	/// should continue to be processed, or false to prevent further processing.<br/>
	/// As this is processing a message directly from the Windows event loop, this<br/>
	/// callback should do the minimum required work and return quickly.<br/>
	/// <br/>
	/// <br/>
	/// This may only be called (by SDL) from the thread handling the<br/>
	/// Windows event loop.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_WindowsMessageHook")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SDLWindowsMessageHook([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "msg")] [NativeName(NativeNameType.Type, "MSG *")] Msg* msg);

	#else
	/// <summary>
	/// A callback to be used with SDL_SetWindowsMessageHook.<br/>
	/// This callback may modify the message, and should return true if the message<br/>
	/// should continue to be processed, or false to prevent further processing.<br/>
	/// As this is processing a message directly from the Windows event loop, this<br/>
	/// callback should do the minimum required work and return quickly.<br/>
	/// <br/>
	/// <br/>
	/// This may only be called (by SDL) from the thread handling the<br/>
	/// Windows event loop.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_WindowsMessageHook")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SDLWindowsMessageHook([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "msg")] [NativeName(NativeNameType.Type, "MSG *")] nint msg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback to be used with SDL_SetX11EventHook.<br/>
	/// This callback may modify the event, and should return true if the event<br/>
	/// should continue to be processed, or false to prevent further processing.<br/>
	/// As this is processing an event directly from the X11 event loop, this<br/>
	/// callback should do the minimum required work and return quickly.<br/>
	/// <br/>
	/// <br/>
	/// This may only be called (by SDL) from the thread handling the<br/>
	/// X11 event loop.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_X11EventHook")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SDLX11EventHook([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "xevent")] [NativeName(NativeNameType.Type, "XEvent *")] XEvent* xevent);

	#else
	/// <summary>
	/// A callback to be used with SDL_SetX11EventHook.<br/>
	/// This callback may modify the event, and should return true if the event<br/>
	/// should continue to be processed, or false to prevent further processing.<br/>
	/// As this is processing an event directly from the X11 event loop, this<br/>
	/// callback should do the minimum required work and return quickly.<br/>
	/// <br/>
	/// <br/>
	/// This may only be called (by SDL) from the thread handling the<br/>
	/// X11 event loop.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_X11EventHook")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte SDLX11EventHook([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "xevent")] [NativeName(NativeNameType.Type, "XEvent *")] nint xevent);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Function prototype for the millisecond timer callback function.<br/>
	/// The callback function is passed the current timer interval and returns the<br/>
	/// next timer interval, in milliseconds. If the returned value is the same as<br/>
	/// the one passed in, the periodic alarm continues, otherwise a new alarm is<br/>
	/// scheduled. If the callback returns 0, the periodic alarm is canceled and<br/>
	/// will be removed.<br/>
	/// <br/>
	/// <br/>
	/// SDL may call this callback at any time from a background<br/>
	/// thread; the application is responsible for locking resources<br/>
	/// the callback touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_TimerCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint SDLTimerCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "timerID")] [NativeName(NativeNameType.Type, "SDL_TimerID")] int timerID, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "Uint32")] uint interval);

	#else
	/// <summary>
	/// Function prototype for the millisecond timer callback function.<br/>
	/// The callback function is passed the current timer interval and returns the<br/>
	/// next timer interval, in milliseconds. If the returned value is the same as<br/>
	/// the one passed in, the periodic alarm continues, otherwise a new alarm is<br/>
	/// scheduled. If the callback returns 0, the periodic alarm is canceled and<br/>
	/// will be removed.<br/>
	/// <br/>
	/// <br/>
	/// SDL may call this callback at any time from a background<br/>
	/// thread; the application is responsible for locking resources<br/>
	/// the callback touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_TimerCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint SDLTimerCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "timerID")] [NativeName(NativeNameType.Type, "SDL_TimerID")] int timerID, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "Uint32")] uint interval);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// Function prototype for the nanosecond timer callback function.<br/>
	/// The callback function is passed the current timer interval and returns the<br/>
	/// next timer interval, in nanoseconds. If the returned value is the same as<br/>
	/// the one passed in, the periodic alarm continues, otherwise a new alarm is<br/>
	/// scheduled. If the callback returns 0, the periodic alarm is canceled and<br/>
	/// will be removed.<br/>
	/// <br/>
	/// <br/>
	/// SDL may call this callback at any time from a background<br/>
	/// thread; the application is responsible for locking resources<br/>
	/// the callback touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_NSTimerCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong SDLNSTimerCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "timerID")] [NativeName(NativeNameType.Type, "SDL_TimerID")] int timerID, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "Uint64")] ulong interval);

	#else
	/// <summary>
	/// Function prototype for the nanosecond timer callback function.<br/>
	/// The callback function is passed the current timer interval and returns the<br/>
	/// next timer interval, in nanoseconds. If the returned value is the same as<br/>
	/// the one passed in, the periodic alarm continues, otherwise a new alarm is<br/>
	/// scheduled. If the callback returns 0, the periodic alarm is canceled and<br/>
	/// will be removed.<br/>
	/// <br/>
	/// <br/>
	/// SDL may call this callback at any time from a background<br/>
	/// thread; the application is responsible for locking resources<br/>
	/// the callback touches that need to be protected.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_NSTimerCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong SDLNSTimerCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "timerID")] [NativeName(NativeNameType.Type, "SDL_TimerID")] int timerID, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "Uint64")] ulong interval);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// A callback that is invoked when a tray entry is selected.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_TrayCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTrayCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] void* userdata, [NativeName(NativeNameType.Param, "entry")] [NativeName(NativeNameType.Type, "SDL_TrayEntry *")] SDLTrayEntry* entry);

	#else
	/// <summary>
	/// A callback that is invoked when a tray entry is selected.<br/>
	/// <br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_TrayCallback")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTrayCallback([NativeName(NativeNameType.Param, "userdata")] [NativeName(NativeNameType.Type, "void *")] nint userdata, [NativeName(NativeNameType.Param, "entry")] [NativeName(NativeNameType.Type, "SDL_TrayEntry *")] nint entry);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "__eglMustCastToProperFunctionPointerType")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void EglMustCastToProperFunctionPointerType();

	#else
	[NativeName(NativeNameType.Delegate, "__eglMustCastToProperFunctionPointerType")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void EglMustCastToProperFunctionPointerType();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCHOOSECONFIGPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglchooseconfigproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCHOOSECONFIGPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglchooseconfigproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] nint configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] nint numConfig);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOPYBUFFERSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcopybuffersproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLNativePixmapType")] nint target);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOPYBUFFERSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcopybuffersproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLNativePixmapType")] nint target);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATECONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLContext Pfneglcreatecontextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "share_context")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext shareContext, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATECONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLContext Pfneglcreatecontextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "share_context")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext shareContext, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPBUFFERSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepbuffersurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPBUFFERSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepbuffersurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPIXMAPSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepixmapsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLNativePixmapType")] nint pixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPIXMAPSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepixmapsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLNativePixmapType")] nint pixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEWINDOWSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatewindowsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "win")] [NativeName(NativeNameType.Type, "EGLNativeWindowType")] nint win, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEWINDOWSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatewindowsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "win")] [NativeName(NativeNameType.Type, "EGLNativeWindowType")] nint win, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYCONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroycontextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYCONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroycontextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCONFIGATTRIBPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetconfigattribproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCONFIGATTRIBPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetconfigattribproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCONFIGSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetconfigsproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCONFIGSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetconfigsproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] nint configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] nint numConfig);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCURRENTDISPLAYPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetcurrentdisplayproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCURRENTDISPLAYPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetcurrentdisplayproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCURRENTSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglgetcurrentsurfaceproc([NativeName(NativeNameType.Param, "readdraw")] [NativeName(NativeNameType.Type, "EGLint")] int readdraw);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCURRENTSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglgetcurrentsurfaceproc([NativeName(NativeNameType.Param, "readdraw")] [NativeName(NativeNameType.Type, "EGLint")] int readdraw);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETDISPLAYPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetdisplayproc([NativeName(NativeNameType.Param, "display_id")] [NativeName(NativeNameType.Type, "EGLNativeDisplayType")] nint displayId);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETDISPLAYPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetdisplayproc([NativeName(NativeNameType.Param, "display_id")] [NativeName(NativeNameType.Type, "EGLNativeDisplayType")] nint displayId);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETERRORPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglgeterrorproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETERRORPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglgeterrorproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETPROCADDRESSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate delegate*<void> Pfneglgetprocaddressproc([NativeName(NativeNameType.Param, "procname")] [NativeName(NativeNameType.Type, "char const *")] byte* procname);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETPROCADDRESSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglgetprocaddressproc([NativeName(NativeNameType.Param, "procname")] [NativeName(NativeNameType.Type, "char const *")] nint procname);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLINITIALIZEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglinitializeproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "EGLint *")] int* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "EGLint *")] int* minor);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLINITIALIZEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglinitializeproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "EGLint *")] nint major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "EGLint *")] nint minor);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLMAKECURRENTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglmakecurrentproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "draw")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface draw, [NativeName(NativeNameType.Param, "read")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface read, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLMAKECURRENTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglmakecurrentproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "draw")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface draw, [NativeName(NativeNameType.Param, "read")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface read, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYCONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerycontextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYCONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerycontextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTRINGPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte* Pfneglquerystringproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTRINGPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglquerystringproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbuffersproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbuffersproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLTERMINATEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglterminateproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLTERMINATEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglterminateproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITGLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitglproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITGLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitglproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITNATIVEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitnativeproc([NativeName(NativeNameType.Param, "engine")] [NativeName(NativeNameType.Type, "EGLint")] int engine);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITNATIVEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitnativeproc([NativeName(NativeNameType.Param, "engine")] [NativeName(NativeNameType.Type, "EGLint")] int engine);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLBINDTEXIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglbindteximageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLint")] int buffer);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLBINDTEXIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglbindteximageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLint")] int buffer);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLRELEASETEXIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglreleaseteximageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLint")] int buffer);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLRELEASETEXIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglreleaseteximageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLint")] int buffer);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSURFACEATTRIBPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsurfaceattribproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint")] int value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSURFACEATTRIBPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsurfaceattribproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint")] int value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPINTERVALPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapintervalproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "EGLint")] int interval);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPINTERVALPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapintervalproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "EGLint")] int interval);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLBINDAPIPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglbindapiproc([NativeName(NativeNameType.Param, "api")] [NativeName(NativeNameType.Type, "EGLenum")] uint api);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLBINDAPIPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglbindapiproc([NativeName(NativeNameType.Param, "api")] [NativeName(NativeNameType.Type, "EGLenum")] uint api);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYAPIPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglqueryapiproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYAPIPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglqueryapiproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepbufferfromclientbufferproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "buftype")] [NativeName(NativeNameType.Type, "EGLenum")] uint buftype, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepbufferfromclientbufferproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "buftype")] [NativeName(NativeNameType.Type, "EGLenum")] uint buftype, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLRELEASETHREADPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglreleasethreadproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLRELEASETHREADPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglreleasethreadproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITCLIENTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitclientproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITCLIENTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitclientproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCURRENTCONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLContext Pfneglgetcurrentcontextproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCURRENTCONTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLContext Pfneglgetcurrentcontextproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSync Pfneglcreatesyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSync Pfneglcreatesyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTWAITSYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglclientwaitsyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTime")] ulong timeout);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTWAITSYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglclientwaitsyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTime")] ulong timeout);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYNCATTRIBPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetsyncattribproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYNCATTRIBPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetsyncattribproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLImage Pfneglcreateimageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLenum")] uint target, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLImage Pfneglcreateimageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLenum")] uint target, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroyimageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImage")] EGLImage image);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYIMAGEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroyimageproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImage")] EGLImage image);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETPLATFORMDISPLAYPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetplatformdisplayproc([NativeName(NativeNameType.Param, "platform")] [NativeName(NativeNameType.Type, "EGLenum")] uint platform, [NativeName(NativeNameType.Param, "native_display")] [NativeName(NativeNameType.Type, "void *")] void* nativeDisplay, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETPLATFORMDISPLAYPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetplatformdisplayproc([NativeName(NativeNameType.Param, "platform")] [NativeName(NativeNameType.Type, "EGLenum")] uint platform, [NativeName(NativeNameType.Param, "native_display")] [NativeName(NativeNameType.Type, "void *")] nint nativeDisplay, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMWINDOWSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformwindowsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_window")] [NativeName(NativeNameType.Type, "void *")] void* nativeWindow, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMWINDOWSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformwindowsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_window")] [NativeName(NativeNameType.Type, "void *")] nint nativeWindow, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformpixmapsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_pixmap")] [NativeName(NativeNameType.Type, "void *")] void* nativePixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformpixmapsurfaceproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_pixmap")] [NativeName(NativeNameType.Type, "void *")] nint nativePixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITSYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitsyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITSYNCPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglwaitsyncproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESYNC64KHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncKHR Pfneglcreatesync64Khrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttribKHR const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESYNC64KHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncKHR Pfneglcreatesync64Khrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttribKHR const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "EGLDEBUGPROCKHR")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Egldebugprockhr([NativeName(NativeNameType.Param, "error")] [NativeName(NativeNameType.Type, "EGLenum")] uint error, [NativeName(NativeNameType.Param, "command")] [NativeName(NativeNameType.Type, "char const *")] byte* command, [NativeName(NativeNameType.Param, "messageType")] [NativeName(NativeNameType.Type, "EGLint")] int messageType, [NativeName(NativeNameType.Param, "threadLabel")] [NativeName(NativeNameType.Type, "EGLLabelKHR")] EGLLabelKHR threadLabel, [NativeName(NativeNameType.Param, "objectLabel")] [NativeName(NativeNameType.Type, "EGLLabelKHR")] EGLLabelKHR objectLabel, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "char const *")] byte* message);

	#else
	[NativeName(NativeNameType.Delegate, "EGLDEBUGPROCKHR")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Egldebugprockhr([NativeName(NativeNameType.Param, "error")] [NativeName(NativeNameType.Type, "EGLenum")] uint error, [NativeName(NativeNameType.Param, "command")] [NativeName(NativeNameType.Type, "char const *")] nint command, [NativeName(NativeNameType.Param, "messageType")] [NativeName(NativeNameType.Type, "EGLint")] int messageType, [NativeName(NativeNameType.Param, "threadLabel")] [NativeName(NativeNameType.Type, "EGLLabelKHR")] EGLLabelKHR threadLabel, [NativeName(NativeNameType.Param, "objectLabel")] [NativeName(NativeNameType.Type, "EGLLabelKHR")] EGLLabelKHR objectLabel, [NativeName(NativeNameType.Param, "message")] [NativeName(NativeNameType.Type, "char const *")] nint message);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDEBUGMESSAGECONTROLKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfnegldebugmessagecontrolkhrproc([NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "EGLDEBUGPROCKHR")] delegate*<uint, byte*, int, EGLLabelKHR, EGLLabelKHR, byte*, void> callback, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDEBUGMESSAGECONTROLKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfnegldebugmessagecontrolkhrproc([NativeName(NativeNameType.Param, "callback")] [NativeName(NativeNameType.Type, "EGLDEBUGPROCKHR")] nint callback, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEBUGKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydebugkhrproc([NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEBUGKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydebugkhrproc([NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLLABELOBJECTKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfnegllabelobjectkhrproc([NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay display, [NativeName(NativeNameType.Param, "objectType")] [NativeName(NativeNameType.Type, "EGLenum")] uint objectType, [NativeName(NativeNameType.Param, "object")] [NativeName(NativeNameType.Type, "EGLObjectKHR")] EGLObjectKHR @object, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "EGLLabelKHR")] EGLLabelKHR label);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLLABELOBJECTKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfnegllabelobjectkhrproc([NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay display, [NativeName(NativeNameType.Param, "objectType")] [NativeName(NativeNameType.Type, "EGLenum")] uint objectType, [NativeName(NativeNameType.Param, "object")] [NativeName(NativeNameType.Type, "EGLObjectKHR")] EGLObjectKHR @object, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "EGLLabelKHR")] EGLLabelKHR label);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDISPLAYATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydisplayattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDISPLAYATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydisplayattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncKHR Pfneglcreatesynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncKHR Pfneglcreatesynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTWAITSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglclientwaitsynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTimeKHR")] ulong timeout);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTWAITSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglclientwaitsynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTimeKHR")] ulong timeout);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYNCATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetsyncattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYNCATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetsyncattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEIMAGEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLImageKHR Pfneglcreateimagekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLenum")] uint target, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEIMAGEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLImageKHR Pfneglcreateimagekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLenum")] uint target, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYIMAGEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroyimagekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYIMAGEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroyimagekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLLOCKSURFACEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegllocksurfacekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLLOCKSURFACEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegllocksurfacekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLUNLOCKSURFACEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglunlocksurfacekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLUNLOCKSURFACEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglunlocksurfacekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSURFACE64KHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysurface64Khrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttribKHR *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSURFACE64KHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysurface64Khrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttribKHR *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSETDAMAGEREGIONKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsetdamageregionkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint *")] int* rects, [NativeName(NativeNameType.Param, "n_rects")] [NativeName(NativeNameType.Type, "EGLint")] int nRects);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSETDAMAGEREGIONKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsetdamageregionkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint *")] nint rects, [NativeName(NativeNameType.Param, "n_rects")] [NativeName(NativeNameType.Type, "EGLint")] int nRects);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSIGNALSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsignalsynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "EGLenum")] uint mode);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSIGNALSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsignalsynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "EGLenum")] uint mode);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLStreamKHR Pfneglcreatestreamkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLStreamKHR Pfneglcreatestreamkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSTREAMKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroystreamkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSTREAMKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroystreamkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint")] int value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint")] int value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMU64KHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamu64Khrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] ulong* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMU64KHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamu64Khrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLStreamKHR Pfneglcreatestreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLStreamKHR Pfneglcreatestreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSETSTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsetstreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib")] nint value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSETSTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsetstreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumeracquireattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumeracquireattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumerreleaseattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumerreleaseattribkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumergltextureexternalkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumergltextureexternalkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERACQUIREKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumeracquirekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERACQUIREKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumeracquirekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERRELEASEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumerreleasekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERRELEASEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumerreleasekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglgetstreamfiledescriptorkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglgetstreamfiledescriptorkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLStreamKHR Pfneglcreatestreamfromfiledescriptorkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "file_descriptor")] [NativeName(NativeNameType.Type, "EGLNativeFileDescriptorKHR")] int fileDescriptor);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLStreamKHR Pfneglcreatestreamfromfiledescriptorkhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "file_descriptor")] [NativeName(NativeNameType.Type, "EGLNativeFileDescriptorKHR")] int fileDescriptor);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMTIMEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamtimekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLTimeKHR *")] ulong* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMTIMEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreamtimekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLenum")] uint attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLTimeKHR *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatestreamproducersurfacekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatestreamproducersurfacekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbufferswithdamagekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] int* rects, [NativeName(NativeNameType.Param, "n_rects")] [NativeName(NativeNameType.Type, "EGLint")] int nRects);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbufferswithdamagekhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] nint rects, [NativeName(NativeNameType.Param, "n_rects")] [NativeName(NativeNameType.Type, "EGLint")] int nRects);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglwaitsynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLWAITSYNCKHRPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglwaitsynckhrproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "EGLSetBlobFuncANDROID")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void EGLSetBlobFuncANDROID([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "keySize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int keySize, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void const *")] void* value, [NativeName(NativeNameType.Param, "valueSize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int valueSize);

	#else
	[NativeName(NativeNameType.Delegate, "EGLSetBlobFuncANDROID")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void EGLSetBlobFuncANDROID([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] nint key, [NativeName(NativeNameType.Param, "keySize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int keySize, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void const *")] nint value, [NativeName(NativeNameType.Param, "valueSize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int valueSize);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "EGLGetBlobFuncANDROID")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int EGLGetBlobFuncANDROID([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] void* key, [NativeName(NativeNameType.Param, "keySize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int keySize, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] void* value, [NativeName(NativeNameType.Param, "valueSize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int valueSize);

	#else
	[NativeName(NativeNameType.Delegate, "EGLGetBlobFuncANDROID")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int EGLGetBlobFuncANDROID([NativeName(NativeNameType.Param, "key")] [NativeName(NativeNameType.Type, "void const *")] nint key, [NativeName(NativeNameType.Param, "keySize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int keySize, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] nint value, [NativeName(NativeNameType.Param, "valueSize")] [NativeName(NativeNameType.Type, "EGLsizeiANDROID")] int valueSize);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSETBLOBCACHEFUNCSANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Pfneglsetblobcachefuncsandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "EGLSetBlobFuncANDROID")] delegate*<void*, int, void*, int, void> set, [NativeName(NativeNameType.Param, "get")] [NativeName(NativeNameType.Type, "EGLGetBlobFuncANDROID")] delegate*<void*, int, void*, int, int> get);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSETBLOBCACHEFUNCSANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void Pfneglsetblobcachefuncsandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "set")] [NativeName(NativeNameType.Type, "EGLSetBlobFuncANDROID")] nint set, [NativeName(NativeNameType.Param, "get")] [NativeName(NativeNameType.Type, "EGLGetBlobFuncANDROID")] nint get);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLClientBuffer Pfneglcreatenativeclientbufferandroidproc([NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLClientBuffer Pfneglcreatenativeclientbufferandroidproc([NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetcompositortimingsupportedandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetcompositortimingsupportedandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCOMPOSITORTIMINGANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetcompositortimingandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numTimestamps")] [NativeName(NativeNameType.Type, "EGLint")] int numTimestamps, [NativeName(NativeNameType.Param, "names")] [NativeName(NativeNameType.Type, "EGLint const *")] int* names, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "EGLnsecsANDROID *")] long* values);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETCOMPOSITORTIMINGANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetcompositortimingandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numTimestamps")] [NativeName(NativeNameType.Type, "EGLint")] int numTimestamps, [NativeName(NativeNameType.Param, "names")] [NativeName(NativeNameType.Type, "EGLint const *")] nint names, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "EGLnsecsANDROID *")] nint values);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETNEXTFRAMEIDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetnextframeidandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "frameId")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] ulong* frameId);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETNEXTFRAMEIDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetnextframeidandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "frameId")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] nint frameId);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetframetimestampsupportedandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "EGLint")] int timestamp);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetframetimestampsupportedandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "timestamp")] [NativeName(NativeNameType.Type, "EGLint")] int timestamp);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETFRAMETIMESTAMPSANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetframetimestampsandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "frameId")] [NativeName(NativeNameType.Type, "EGLuint64KHR")] ulong frameId, [NativeName(NativeNameType.Param, "numTimestamps")] [NativeName(NativeNameType.Type, "EGLint")] int numTimestamps, [NativeName(NativeNameType.Param, "timestamps")] [NativeName(NativeNameType.Type, "EGLint const *")] int* timestamps, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "EGLnsecsANDROID *")] long* values);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETFRAMETIMESTAMPSANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetframetimestampsandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "frameId")] [NativeName(NativeNameType.Type, "EGLuint64KHR")] ulong frameId, [NativeName(NativeNameType.Param, "numTimestamps")] [NativeName(NativeNameType.Type, "EGLint")] int numTimestamps, [NativeName(NativeNameType.Param, "timestamps")] [NativeName(NativeNameType.Type, "EGLint const *")] nint timestamps, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "EGLnsecsANDROID *")] nint values);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLClientBuffer Pfneglgetnativeclientbufferandroidproc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "AHardwareBuffer const *")] AHardwareBuffer* buffer);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLClientBuffer Pfneglgetnativeclientbufferandroidproc([NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "AHardwareBuffer const *")] nint buffer);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDUPNATIVEFENCEFDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfnegldupnativefencefdandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDUPNATIVEFENCEFDANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfnegldupnativefencefdandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncKHR")] EGLSyncKHR sync);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLPRESENTATIONTIMEANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglpresentationtimeandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "time")] [NativeName(NativeNameType.Type, "EGLnsecsANDROID")] long time);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLPRESENTATIONTIMEANDROIDPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglpresentationtimeandroidproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "time")] [NativeName(NativeNameType.Type, "EGLnsecsANDROID")] long time);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSURFACEPOINTERANGLEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysurfacepointerangleproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void * *")] void** value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSURFACEPOINTERANGLEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysurfacepointerangleproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void * *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETMSCRATEANGLEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetmscrateangleproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numerator")] [NativeName(NativeNameType.Type, "EGLint *")] int* numerator, [NativeName(NativeNameType.Param, "denominator")] [NativeName(NativeNameType.Type, "EGLint *")] int* denominator);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETMSCRATEANGLEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetmscrateangleproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numerator")] [NativeName(NativeNameType.Type, "EGLint *")] nint numerator, [NativeName(NativeNameType.Param, "denominator")] [NativeName(NativeNameType.Type, "EGLint *")] nint denominator);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTSIGNALSYNCEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglclientsignalsyncextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTSIGNALSYNCEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglclientsignalsyncextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetcontextlistextproc([NativeName(NativeNameType.Param, "external_ref_ids")] [NativeName(NativeNameType.Type, "EGLint const *")] int* externalRefIds, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetcontextlistextproc([NativeName(NativeNameType.Param, "external_ref_ids")] [NativeName(NativeNameType.Type, "EGLint const *")] nint externalRefIds, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetcontextattributesextproc([NativeName(NativeNameType.Param, "external_ref_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalRefId, [NativeName(NativeNameType.Param, "context_attributes")] [NativeName(NativeNameType.Type, "EGLint const *")] int* contextAttributes, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetcontextattributesextproc([NativeName(NativeNameType.Param, "external_ref_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalRefId, [NativeName(NativeNameType.Param, "context_attributes")] [NativeName(NativeNameType.Type, "EGLint const *")] nint contextAttributes, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetwindowlistextproc([NativeName(NativeNameType.Param, "external_ref_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalRefId, [NativeName(NativeNameType.Param, "external_win_ids")] [NativeName(NativeNameType.Type, "EGLint const *")] int* externalWinIds, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetwindowlistextproc([NativeName(NativeNameType.Param, "external_ref_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalRefId, [NativeName(NativeNameType.Param, "external_win_ids")] [NativeName(NativeNameType.Type, "EGLint const *")] nint externalWinIds, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetwindowattributesextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId, [NativeName(NativeNameType.Param, "window_attributes")] [NativeName(NativeNameType.Type, "EGLint const *")] int* windowAttributes, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetwindowattributesextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId, [NativeName(NativeNameType.Param, "window_attributes")] [NativeName(NativeNameType.Type, "EGLint const *")] nint windowAttributes, [NativeName(NativeNameType.Param, "num_entries")] [NativeName(NativeNameType.Type, "EGLint")] int numEntries);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorbindtexwindowextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorbindtexwindowextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETSIZEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetsizeextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "EGLint")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "EGLint")] int height);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSETSIZEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorsetsizeextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "EGLint")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "EGLint")] int height);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSWAPPOLICYEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorswappolicyextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "EGLint")] int policy);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCOMPOSITORSWAPPOLICYEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglcompositorswappolicyextproc([NativeName(NativeNameType.Param, "external_win_id")] [NativeName(NativeNameType.Type, "EGLint")] int externalWinId, [NativeName(NativeNameType.Param, "policy")] [NativeName(NativeNameType.Type, "EGLint")] int policy);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICEATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydeviceattribextproc([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "EGLDeviceEXT")] EGLDeviceEXT device, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICEATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydeviceattribextproc([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "EGLDeviceEXT")] EGLDeviceEXT device, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICESTRINGEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte* Pfneglquerydevicestringextproc([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "EGLDeviceEXT")] EGLDeviceEXT device, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICESTRINGEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglquerydevicestringextproc([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "EGLDeviceEXT")] EGLDeviceEXT device, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydevicesextproc([NativeName(NativeNameType.Param, "max_devices")] [NativeName(NativeNameType.Type, "EGLint")] int maxDevices, [NativeName(NativeNameType.Param, "devices")] [NativeName(NativeNameType.Type, "EGLDeviceEXT *")] EGLDeviceEXT* devices, [NativeName(NativeNameType.Param, "num_devices")] [NativeName(NativeNameType.Type, "EGLint *")] int* numDevices);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydevicesextproc([NativeName(NativeNameType.Param, "max_devices")] [NativeName(NativeNameType.Type, "EGLint")] int maxDevices, [NativeName(NativeNameType.Param, "devices")] [NativeName(NativeNameType.Type, "EGLDeviceEXT *")] nint devices, [NativeName(NativeNameType.Param, "num_devices")] [NativeName(NativeNameType.Type, "EGLint *")] nint numDevices);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDISPLAYATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydisplayattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDISPLAYATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydisplayattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICEBINARYEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydevicebinaryextproc([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "EGLDeviceEXT")] EGLDeviceEXT device, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name, [NativeName(NativeNameType.Param, "max_size")] [NativeName(NativeNameType.Type, "EGLint")] int maxSize, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] void* value, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "EGLint *")] int* size);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDEVICEBINARYEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydevicebinaryextproc([NativeName(NativeNameType.Param, "device")] [NativeName(NativeNameType.Type, "EGLDeviceEXT")] EGLDeviceEXT device, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name, [NativeName(NativeNameType.Param, "max_size")] [NativeName(NativeNameType.Type, "EGLint")] int maxSize, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "void *")] nint value, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "EGLint *")] nint size);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDMABUFFORMATSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydmabufformatsextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "max_formats")] [NativeName(NativeNameType.Type, "EGLint")] int maxFormats, [NativeName(NativeNameType.Param, "formats")] [NativeName(NativeNameType.Type, "EGLint *")] int* formats, [NativeName(NativeNameType.Param, "num_formats")] [NativeName(NativeNameType.Type, "EGLint *")] int* numFormats);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDMABUFFORMATSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydmabufformatsextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "max_formats")] [NativeName(NativeNameType.Type, "EGLint")] int maxFormats, [NativeName(NativeNameType.Param, "formats")] [NativeName(NativeNameType.Type, "EGLint *")] nint formats, [NativeName(NativeNameType.Param, "num_formats")] [NativeName(NativeNameType.Type, "EGLint *")] nint numFormats);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDMABUFMODIFIERSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydmabufmodifiersextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "EGLint")] int format, [NativeName(NativeNameType.Param, "max_modifiers")] [NativeName(NativeNameType.Type, "EGLint")] int maxModifiers, [NativeName(NativeNameType.Param, "modifiers")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] ulong* modifiers, [NativeName(NativeNameType.Param, "external_only")] [NativeName(NativeNameType.Type, "EGLBoolean *")] uint* externalOnly, [NativeName(NativeNameType.Param, "num_modifiers")] [NativeName(NativeNameType.Type, "EGLint *")] int* numModifiers);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDMABUFMODIFIERSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydmabufmodifiersextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "EGLint")] int format, [NativeName(NativeNameType.Param, "max_modifiers")] [NativeName(NativeNameType.Type, "EGLint")] int maxModifiers, [NativeName(NativeNameType.Param, "modifiers")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] nint modifiers, [NativeName(NativeNameType.Param, "external_only")] [NativeName(NativeNameType.Type, "EGLBoolean *")] nint externalOnly, [NativeName(NativeNameType.Param, "num_modifiers")] [NativeName(NativeNameType.Type, "EGLint *")] nint numModifiers);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETOUTPUTLAYERSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetoutputlayersextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList, [NativeName(NativeNameType.Param, "layers")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT *")] EGLOutputLayerEXT* layers, [NativeName(NativeNameType.Param, "max_layers")] [NativeName(NativeNameType.Type, "EGLint")] int maxLayers, [NativeName(NativeNameType.Param, "num_layers")] [NativeName(NativeNameType.Type, "EGLint *")] int* numLayers);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETOUTPUTLAYERSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetoutputlayersextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList, [NativeName(NativeNameType.Param, "layers")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT *")] nint layers, [NativeName(NativeNameType.Param, "max_layers")] [NativeName(NativeNameType.Type, "EGLint")] int maxLayers, [NativeName(NativeNameType.Param, "num_layers")] [NativeName(NativeNameType.Type, "EGLint *")] nint numLayers);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETOUTPUTPORTSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetoutputportsextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList, [NativeName(NativeNameType.Param, "ports")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT *")] EGLOutputPortEXT* ports, [NativeName(NativeNameType.Param, "max_ports")] [NativeName(NativeNameType.Type, "EGLint")] int maxPorts, [NativeName(NativeNameType.Param, "num_ports")] [NativeName(NativeNameType.Type, "EGLint *")] int* numPorts);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETOUTPUTPORTSEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetoutputportsextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList, [NativeName(NativeNameType.Param, "ports")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT *")] nint ports, [NativeName(NativeNameType.Param, "max_ports")] [NativeName(NativeNameType.Type, "EGLint")] int maxPorts, [NativeName(NativeNameType.Param, "num_ports")] [NativeName(NativeNameType.Type, "EGLint *")] nint numPorts);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLOUTPUTLAYERATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegloutputlayerattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib")] nint value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLOUTPUTLAYERATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegloutputlayerattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglqueryoutputlayerattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglqueryoutputlayerattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte* Pfneglqueryoutputlayerstringextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglqueryoutputlayerstringextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLOUTPUTPORTATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegloutputportattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT")] EGLOutputPortEXT port, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib")] nint value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLOUTPUTPORTATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegloutputportattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT")] EGLOutputPortEXT port, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglqueryoutputportattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT")] EGLOutputPortEXT port, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglqueryoutputportattribextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT")] EGLOutputPortEXT port, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte* Pfneglqueryoutputportstringextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT")] EGLOutputPortEXT port, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglqueryoutputportstringextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "port")] [NativeName(NativeNameType.Type, "EGLOutputPortEXT")] EGLOutputPortEXT port, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETPLATFORMDISPLAYEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetplatformdisplayextproc([NativeName(NativeNameType.Param, "platform")] [NativeName(NativeNameType.Type, "EGLenum")] uint platform, [NativeName(NativeNameType.Param, "native_display")] [NativeName(NativeNameType.Type, "void *")] void* nativeDisplay, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETPLATFORMDISPLAYEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLDisplay Pfneglgetplatformdisplayextproc([NativeName(NativeNameType.Param, "platform")] [NativeName(NativeNameType.Type, "EGLenum")] uint platform, [NativeName(NativeNameType.Param, "native_display")] [NativeName(NativeNameType.Type, "void *")] nint nativeDisplay, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformwindowsurfaceextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_window")] [NativeName(NativeNameType.Type, "void *")] void* nativeWindow, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformwindowsurfaceextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_window")] [NativeName(NativeNameType.Type, "void *")] nint nativeWindow, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformpixmapsurfaceextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_pixmap")] [NativeName(NativeNameType.Type, "void *")] void* nativePixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreateplatformpixmapsurfaceextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_pixmap")] [NativeName(NativeNameType.Type, "void *")] nint nativePixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMEROUTPUTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumeroutputextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMEROUTPUTEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumeroutputextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "layer")] [NativeName(NativeNameType.Type, "EGLOutputLayerEXT")] EGLOutputLayerEXT layer);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSUPPORTEDCOMPRESSIONRATESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysupportedcompressionratesextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList, [NativeName(NativeNameType.Param, "rates")] [NativeName(NativeNameType.Type, "EGLint *")] int* rates, [NativeName(NativeNameType.Param, "rate_size")] [NativeName(NativeNameType.Type, "EGLint")] int rateSize, [NativeName(NativeNameType.Param, "num_rates")] [NativeName(NativeNameType.Type, "EGLint *")] int* numRates);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSUPPORTEDCOMPRESSIONRATESEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerysupportedcompressionratesextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList, [NativeName(NativeNameType.Param, "rates")] [NativeName(NativeNameType.Type, "EGLint *")] nint rates, [NativeName(NativeNameType.Param, "rate_size")] [NativeName(NativeNameType.Type, "EGLint")] int rateSize, [NativeName(NativeNameType.Param, "num_rates")] [NativeName(NativeNameType.Type, "EGLint *")] nint numRates);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbufferswithdamageextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] int* rects, [NativeName(NativeNameType.Param, "n_rects")] [NativeName(NativeNameType.Type, "EGLint")] int nRects);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbufferswithdamageextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] nint rects, [NativeName(NativeNameType.Param, "n_rects")] [NativeName(NativeNameType.Type, "EGLint")] int nRects);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLUNSIGNALSYNCEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglunsignalsyncextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLUNSIGNALSYNCEXTPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglunsignalsyncextproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPIXMAPSURFACEHIPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepixmapsurfacehiproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLClientPixmapHI *")] EGLClientPixmapHI* pixmap);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEPIXMAPSURFACEHIPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSurface Pfneglcreatepixmapsurfacehiproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLClientPixmapHI *")] nint pixmap);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEDRMIMAGEMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLImageKHR Pfneglcreatedrmimagemesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEDRMIMAGEMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLImageKHR Pfneglcreatedrmimagemesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLEXPORTDRMIMAGEMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglexportdrmimagemesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint *")] int* name, [NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "EGLint *")] int* handle, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "EGLint *")] int* stride);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLEXPORTDRMIMAGEMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglexportdrmimagemesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint *")] nint name, [NativeName(NativeNameType.Param, "handle")] [NativeName(NativeNameType.Type, "EGLint *")] nint handle, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "EGLint *")] nint stride);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglexportdmabufimagequerymesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image, [NativeName(NativeNameType.Param, "fourcc")] [NativeName(NativeNameType.Type, "int *")] int* fourcc, [NativeName(NativeNameType.Param, "num_planes")] [NativeName(NativeNameType.Type, "int *")] int* numPlanes, [NativeName(NativeNameType.Param, "modifiers")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] ulong* modifiers);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglexportdmabufimagequerymesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image, [NativeName(NativeNameType.Param, "fourcc")] [NativeName(NativeNameType.Type, "int *")] nint fourcc, [NativeName(NativeNameType.Param, "num_planes")] [NativeName(NativeNameType.Type, "int *")] nint numPlanes, [NativeName(NativeNameType.Param, "modifiers")] [NativeName(NativeNameType.Type, "EGLuint64KHR *")] nint modifiers);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLEXPORTDMABUFIMAGEMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglexportdmabufimagemesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image, [NativeName(NativeNameType.Param, "fds")] [NativeName(NativeNameType.Type, "int *")] int* fds, [NativeName(NativeNameType.Param, "strides")] [NativeName(NativeNameType.Type, "EGLint *")] int* strides, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "EGLint *")] int* offsets);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLEXPORTDMABUFIMAGEMESAPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglexportdmabufimagemesaproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image, [NativeName(NativeNameType.Param, "fds")] [NativeName(NativeNameType.Type, "int *")] nint fds, [NativeName(NativeNameType.Param, "strides")] [NativeName(NativeNameType.Type, "EGLint *")] nint strides, [NativeName(NativeNameType.Param, "offsets")] [NativeName(NativeNameType.Type, "EGLint *")] nint offsets);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETDISPLAYDRIVERCONFIGPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte* Pfneglgetdisplaydriverconfigproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETDISPLAYDRIVERCONFIGPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglgetdisplaydriverconfigproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETDISPLAYDRIVERNAMEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate byte* Pfneglgetdisplaydrivernameproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETDISPLAYDRIVERNAMEPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglgetdisplaydrivernameproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSREGIONNOKPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbuffersregionnokproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numRects")] [NativeName(NativeNameType.Type, "EGLint")] int numRects, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] int* rects);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSREGIONNOKPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbuffersregionnokproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numRects")] [NativeName(NativeNameType.Type, "EGLint")] int numRects, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] nint rects);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSREGION2NOKPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbuffersregion2Nokproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numRects")] [NativeName(NativeNameType.Type, "EGLint")] int numRects, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] int* rects);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSWAPBUFFERSREGION2NOKPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglswapbuffersregion2Nokproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "numRects")] [NativeName(NativeNameType.Type, "EGLint")] int numRects, [NativeName(NativeNameType.Param, "rects")] [NativeName(NativeNameType.Type, "EGLint const *")] nint rects);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYNATIVEDISPLAYNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerynativedisplaynvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "display_id")] [NativeName(NativeNameType.Type, "EGLNativeDisplayType *")] nint* displayId);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYNATIVEDISPLAYNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerynativedisplaynvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "display_id")] [NativeName(NativeNameType.Type, "EGLNativeDisplayType *")] nint displayId);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYNATIVEWINDOWNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerynativewindownvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surf")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surf, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "EGLNativeWindowType *")] nint* window);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYNATIVEWINDOWNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerynativewindownvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surf")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surf, [NativeName(NativeNameType.Param, "window")] [NativeName(NativeNameType.Type, "EGLNativeWindowType *")] nint window);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYNATIVEPIXMAPNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerynativepixmapnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surf")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surf, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLNativePixmapType *")] nint* pixmap);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYNATIVEPIXMAPNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerynativepixmapnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surf")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surf, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLNativePixmapType *")] nint pixmap);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLPOSTSUBBUFFERNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglpostsubbuffernvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "EGLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "EGLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "EGLint")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "EGLint")] int height);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLPOSTSUBBUFFERNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglpostsubbuffernvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "EGLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "EGLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "EGLint")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "EGLint")] int height);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMIMAGECONSUMERCONNECTNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamimageconsumerconnectnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "num_modifiers")] [NativeName(NativeNameType.Type, "EGLint")] int numModifiers, [NativeName(NativeNameType.Param, "modifiers")] [NativeName(NativeNameType.Type, "EGLuint64KHR const *")] ulong* modifiers, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMIMAGECONSUMERCONNECTNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamimageconsumerconnectnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "num_modifiers")] [NativeName(NativeNameType.Type, "EGLint")] int numModifiers, [NativeName(NativeNameType.Param, "modifiers")] [NativeName(NativeNameType.Type, "EGLuint64KHR const *")] nint modifiers, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMCONSUMEREVENTNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglquerystreamconsumereventnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTime")] ulong timeout, [NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "EGLenum *")] uint* evnt, [NativeName(NativeNameType.Param, "aux")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* aux);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMCONSUMEREVENTNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglquerystreamconsumereventnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTime")] ulong timeout, [NativeName(NativeNameType.Param, "event")] [NativeName(NativeNameType.Type, "EGLenum *")] nint evnt, [NativeName(NativeNameType.Param, "aux")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint aux);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMACQUIREIMAGENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamacquireimagenvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "EGLImage *")] EGLImage* pImage, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMACQUIREIMAGENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamacquireimagenvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "pImage")] [NativeName(NativeNameType.Type, "EGLImage *")] nint pImage, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMRELEASEIMAGENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamreleaseimagenvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImage")] EGLImage image, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMRELEASEIMAGENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamreleaseimagenvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImage")] EGLImage image, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumergltextureexternalattribsnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamconsumergltextureexternalattribsnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMFLUSHNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamflushnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSTREAMFLUSHNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglstreamflushnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDISPLAYATTRIBNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydisplayattribnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYDISPLAYATTRIBNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerydisplayattribnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSETSTREAMMETADATANVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsetstreammetadatanvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "EGLint")] int n, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "EGLint")] int offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "EGLint")] int size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] void* data);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSETSTREAMMETADATANVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsetstreammetadatanvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "EGLint")] int n, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "EGLint")] int offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "EGLint")] int size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void const *")] nint data);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMMETADATANVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreammetadatanvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLenum")] uint name, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "EGLint")] int n, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "EGLint")] int offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "EGLint")] int size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] void* data);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYSTREAMMETADATANVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerystreammetadatanvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLenum")] uint name, [NativeName(NativeNameType.Param, "n")] [NativeName(NativeNameType.Type, "EGLint")] int n, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "EGLint")] int offset, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "EGLint")] int size, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] nint data);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLRESETSTREAMNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglresetstreamnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLRESETSTREAMNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglresetstreamnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncKHR Pfneglcreatestreamsyncnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATESTREAMSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncKHR Pfneglcreatestreamsyncnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "stream")] [NativeName(NativeNameType.Type, "EGLStreamKHR")] EGLStreamKHR stream, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEFENCESYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncNV Pfneglcreatefencesyncnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "condition")] [NativeName(NativeNameType.Type, "EGLenum")] uint condition, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEFENCESYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate EGLSyncNV Pfneglcreatefencesyncnvproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "condition")] [NativeName(NativeNameType.Type, "EGLenum")] uint condition, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] nint attribList);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysyncnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLDESTROYSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfnegldestroysyncnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLFENCENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglfencenvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLFENCENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglfencenvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTWAITSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglclientwaitsyncnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTimeNV")] ulong timeout);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCLIENTWAITSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int Pfneglclientwaitsyncnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTimeNV")] ulong timeout);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLSIGNALSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsignalsyncnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "EGLenum")] uint mode);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLSIGNALSYNCNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglsignalsyncnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync, [NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "EGLenum")] uint mode);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYNCATTRIBNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetsyncattribnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYNCATTRIBNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglgetsyncattribnvproc([NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSyncNV")] EGLSyncNV sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong Pfneglgetsystemtimefrequencynvproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong Pfneglgetsystemtimefrequencynvproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYSTEMTIMENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong Pfneglgetsystemtimenvproc();

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLGETSYSTEMTIMENVPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate ulong Pfneglgetsystemtimenvproc();

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLBINDWAYLANDDISPLAYWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglbindwaylanddisplaywlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "wl_display *")] WlDisplay* display);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLBINDWAYLANDDISPLAYWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglbindwaylanddisplaywlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "wl_display *")] nint display);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLUNBINDWAYLANDDISPLAYWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglunbindwaylanddisplaywlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "wl_display *")] WlDisplay* display);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLUNBINDWAYLANDDISPLAYWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglunbindwaylanddisplaywlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "display")] [NativeName(NativeNameType.Type, "wl_display *")] nint display);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYWAYLANDBUFFERWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerywaylandbufferwlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "wl_resource *")] WlResource* buffer, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLQUERYWAYLANDBUFFERWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate uint Pfneglquerywaylandbufferwlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "wl_resource *")] nint buffer, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] nint value);

	#endif

	#if NET5_0_OR_GREATER
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate WlBuffer* Pfneglcreatewaylandbufferfromimagewlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image);

	#else
	[NativeName(NativeNameType.Delegate, "PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate nint Pfneglcreatewaylandbufferfromimagewlproc([NativeName(NativeNameType.Param, "dpy")] [NativeName(NativeNameType.Type, "EGLDisplay")] EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImageKHR")] EGLImageKHR image);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// The prototype for the application's main() function<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_main_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLMainFunc([NativeName(NativeNameType.Param, "argc")] [NativeName(NativeNameType.Type, "int")] int argc, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char *[-1]")] byte** argv);

	#else
	/// <summary>
	/// The prototype for the application's main() function<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDL_main_func")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLMainFunc([NativeName(NativeNameType.Param, "argc")] [NativeName(NativeNameType.Type, "int")] int argc, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char *[-1]")] nint argv);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer parsing one argument at argv[index], returning the number of parsed arguments,<br/>
	/// or a negative value when the argument is invalid <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_ParseArgumentsFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLTestParseArgumentsFp([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] void* data, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char * *")] byte** argv, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer parsing one argument at argv[index], returning the number of parsed arguments,<br/>
	/// or a negative value when the argument is invalid <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_ParseArgumentsFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLTestParseArgumentsFp([NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void *")] nint data, [NativeName(NativeNameType.Param, "argv")] [NativeName(NativeNameType.Type, "char * *")] nint argv, [NativeName(NativeNameType.Param, "index")] [NativeName(NativeNameType.Type, "int")] int index);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Finalize the argument parser. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_FinalizeArgumentParserFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTestFinalizeArgumentParserFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] void* arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Finalize the argument parser. <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_FinalizeArgumentParserFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTestFinalizeArgumentParserFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] nint arg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer to a test case setup function (run before every test) <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_TestCaseSetUpFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTestTestCaseSetUpFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void * *")] void** arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer to a test case setup function (run before every test) <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_TestCaseSetUpFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTestTestCaseSetUpFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void * *")] nint arg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer to a test case function <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_TestCaseFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLTestTestCaseFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] void* arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer to a test case function <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_TestCaseFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate int SDLTestTestCaseFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] nint arg);

	#endif

	#if NET5_0_OR_GREATER
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer to a test case teardown function (run after every test) <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_TestCaseTearDownFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTestTestCaseTearDownFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] void* arg);

	#else
	/// <summary>
	/// !<br/>
	/// <<br/>
	/// Function pointer to a test case teardown function (run after every test) <br/>
	/// </summary>
	[NativeName(NativeNameType.Delegate, "SDLTest_TestCaseTearDownFp")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public unsafe delegate void SDLTestTestCaseTearDownFp([NativeName(NativeNameType.Param, "arg")] [NativeName(NativeNameType.Type, "void *")] nint arg);

	#endif

}
