// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// The structure for all events in SDL.<br/>
	/// The SDL_Event structure is the core of all event handling in SDL. SDL_Event<br/>
	/// is a union of all event structures used in SDL.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_Event")]
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDLEvent
	{
		/// <summary>
		/// Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "Uint32")]
		[FieldOffset(0)]
		public uint Type;

		/// <summary>
		/// Common event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "common")]
		[NativeName(NativeNameType.Type, "SDL_CommonEvent")]
		[FieldOffset(0)]
		public SDLCommonEvent Common;

		/// <summary>
		/// Display event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "display")]
		[NativeName(NativeNameType.Type, "SDL_DisplayEvent")]
		[FieldOffset(0)]
		public SDLDisplayEvent Display;

		/// <summary>
		/// Window event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "window")]
		[NativeName(NativeNameType.Type, "SDL_WindowEvent")]
		[FieldOffset(0)]
		public SDLWindowEvent Window;

		/// <summary>
		/// Keyboard device change event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "kdevice")]
		[NativeName(NativeNameType.Type, "SDL_KeyboardDeviceEvent")]
		[FieldOffset(0)]
		public SDLKeyboardDeviceEvent Kdevice;

		/// <summary>
		/// Keyboard event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "key")]
		[NativeName(NativeNameType.Type, "SDL_KeyboardEvent")]
		[FieldOffset(0)]
		public SDLKeyboardEvent Key;

		/// <summary>
		/// Text editing event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "edit")]
		[NativeName(NativeNameType.Type, "SDL_TextEditingEvent")]
		[FieldOffset(0)]
		public SDLTextEditingEvent Edit;

		/// <summary>
		/// Text editing candidates event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "edit_candidates")]
		[NativeName(NativeNameType.Type, "SDL_TextEditingCandidatesEvent")]
		[FieldOffset(0)]
		public SDLTextEditingCandidatesEvent EditCandidates;

		/// <summary>
		/// Text input event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "text")]
		[NativeName(NativeNameType.Type, "SDL_TextInputEvent")]
		[FieldOffset(0)]
		public SDLTextInputEvent Text;

		/// <summary>
		/// Mouse device change event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mdevice")]
		[NativeName(NativeNameType.Type, "SDL_MouseDeviceEvent")]
		[FieldOffset(0)]
		public SDLMouseDeviceEvent Mdevice;

		/// <summary>
		/// Mouse motion event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "motion")]
		[NativeName(NativeNameType.Type, "SDL_MouseMotionEvent")]
		[FieldOffset(0)]
		public SDLMouseMotionEvent Motion;

		/// <summary>
		/// Mouse button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "SDL_MouseButtonEvent")]
		[FieldOffset(0)]
		public SDLMouseButtonEvent Button;

		/// <summary>
		/// Mouse wheel event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "wheel")]
		[NativeName(NativeNameType.Type, "SDL_MouseWheelEvent")]
		[FieldOffset(0)]
		public SDLMouseWheelEvent Wheel;

		/// <summary>
		/// Joystick device change event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jdevice")]
		[NativeName(NativeNameType.Type, "SDL_JoyDeviceEvent")]
		[FieldOffset(0)]
		public SDLJoyDeviceEvent Jdevice;

		/// <summary>
		/// Joystick axis event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jaxis")]
		[NativeName(NativeNameType.Type, "SDL_JoyAxisEvent")]
		[FieldOffset(0)]
		public SDLJoyAxisEvent Jaxis;

		/// <summary>
		/// Joystick ball event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jball")]
		[NativeName(NativeNameType.Type, "SDL_JoyBallEvent")]
		[FieldOffset(0)]
		public SDLJoyBallEvent Jball;

		/// <summary>
		/// Joystick hat event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jhat")]
		[NativeName(NativeNameType.Type, "SDL_JoyHatEvent")]
		[FieldOffset(0)]
		public SDLJoyHatEvent Jhat;

		/// <summary>
		/// Joystick button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jbutton")]
		[NativeName(NativeNameType.Type, "SDL_JoyButtonEvent")]
		[FieldOffset(0)]
		public SDLJoyButtonEvent Jbutton;

		/// <summary>
		/// Joystick battery event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "jbattery")]
		[NativeName(NativeNameType.Type, "SDL_JoyBatteryEvent")]
		[FieldOffset(0)]
		public SDLJoyBatteryEvent Jbattery;

		/// <summary>
		/// Gamepad device event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gdevice")]
		[NativeName(NativeNameType.Type, "SDL_GamepadDeviceEvent")]
		[FieldOffset(0)]
		public SDLGamepadDeviceEvent Gdevice;

		/// <summary>
		/// Gamepad axis event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gaxis")]
		[NativeName(NativeNameType.Type, "SDL_GamepadAxisEvent")]
		[FieldOffset(0)]
		public SDLGamepadAxisEvent Gaxis;

		/// <summary>
		/// Gamepad button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gbutton")]
		[NativeName(NativeNameType.Type, "SDL_GamepadButtonEvent")]
		[FieldOffset(0)]
		public SDLGamepadButtonEvent Gbutton;

		/// <summary>
		/// Gamepad touchpad event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gtouchpad")]
		[NativeName(NativeNameType.Type, "SDL_GamepadTouchpadEvent")]
		[FieldOffset(0)]
		public SDLGamepadTouchpadEvent Gtouchpad;

		/// <summary>
		/// Gamepad sensor event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "gsensor")]
		[NativeName(NativeNameType.Type, "SDL_GamepadSensorEvent")]
		[FieldOffset(0)]
		public SDLGamepadSensorEvent Gsensor;

		/// <summary>
		/// Audio device event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "adevice")]
		[NativeName(NativeNameType.Type, "SDL_AudioDeviceEvent")]
		[FieldOffset(0)]
		public SDLAudioDeviceEvent Adevice;

		/// <summary>
		/// Camera device event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cdevice")]
		[NativeName(NativeNameType.Type, "SDL_CameraDeviceEvent")]
		[FieldOffset(0)]
		public SDLCameraDeviceEvent Cdevice;

		/// <summary>
		/// Sensor event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "sensor")]
		[NativeName(NativeNameType.Type, "SDL_SensorEvent")]
		[FieldOffset(0)]
		public SDLSensorEvent Sensor;

		/// <summary>
		/// Quit request event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "quit")]
		[NativeName(NativeNameType.Type, "SDL_QuitEvent")]
		[FieldOffset(0)]
		public SDLQuitEvent Quit;

		/// <summary>
		/// Custom event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "user")]
		[NativeName(NativeNameType.Type, "SDL_UserEvent")]
		[FieldOffset(0)]
		public SDLUserEvent User;

		/// <summary>
		/// Touch finger event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "tfinger")]
		[NativeName(NativeNameType.Type, "SDL_TouchFingerEvent")]
		[FieldOffset(0)]
		public SDLTouchFingerEvent Tfinger;

		/// <summary>
		/// Pen proximity event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pproximity")]
		[NativeName(NativeNameType.Type, "SDL_PenProximityEvent")]
		[FieldOffset(0)]
		public SDLPenProximityEvent Pproximity;

		/// <summary>
		/// Pen tip touching event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "ptouch")]
		[NativeName(NativeNameType.Type, "SDL_PenTouchEvent")]
		[FieldOffset(0)]
		public SDLPenTouchEvent Ptouch;

		/// <summary>
		/// Pen motion event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pmotion")]
		[NativeName(NativeNameType.Type, "SDL_PenMotionEvent")]
		[FieldOffset(0)]
		public SDLPenMotionEvent Pmotion;

		/// <summary>
		/// Pen button event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pbutton")]
		[NativeName(NativeNameType.Type, "SDL_PenButtonEvent")]
		[FieldOffset(0)]
		public SDLPenButtonEvent Pbutton;

		/// <summary>
		/// Pen axis event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "paxis")]
		[NativeName(NativeNameType.Type, "SDL_PenAxisEvent")]
		[FieldOffset(0)]
		public SDLPenAxisEvent Paxis;

		/// <summary>
		/// Render event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "render")]
		[NativeName(NativeNameType.Type, "SDL_RenderEvent")]
		[FieldOffset(0)]
		public SDLRenderEvent Render;

		/// <summary>
		/// Drag and drop event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "drop")]
		[NativeName(NativeNameType.Type, "SDL_DropEvent")]
		[FieldOffset(0)]
		public SDLDropEvent Drop;

		/// <summary>
		/// Clipboard event data <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "clipboard")]
		[NativeName(NativeNameType.Type, "SDL_ClipboardEvent")]
		[FieldOffset(0)]
		public SDLClipboardEvent Clipboard;

		/// <summary>
		/// This is necessary for ABI compatibility between Visual C++ and GCC.<br/>
		/// Visual C++ will respect the push pack pragma and use 52 bytes (size of<br/>
		/// SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit<br/>
		/// architectures) for this union, and GCC will use the alignment of the<br/>
		/// largest datatype within the union, which is 8 bytes on 64-bit<br/>
		/// architectures.<br/>
		/// So... we'll add padding to force the size to be the same for both.<br/>
		/// On architectures where pointers are 16 bytes, this needs rounding up to<br/>
		/// the next multiple of 16, 64, and on architectures where pointers are<br/>
		/// even larger the size of SDL_UserEvent will dominate as being 3 pointers.<br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "padding")]
		[NativeName(NativeNameType.Type, "Uint8[128]")]
		[FieldOffset(0)]
		public byte Padding_0;
		[FieldOffset(128)]
		public byte Padding_1;
		[FieldOffset(256)]
		public byte Padding_2;
		[FieldOffset(384)]
		public byte Padding_3;
		[FieldOffset(512)]
		public byte Padding_4;
		[FieldOffset(640)]
		public byte Padding_5;
		[FieldOffset(768)]
		public byte Padding_6;
		[FieldOffset(896)]
		public byte Padding_7;
		[FieldOffset(1024)]
		public byte Padding_8;
		[FieldOffset(1152)]
		public byte Padding_9;
		[FieldOffset(1280)]
		public byte Padding_10;
		[FieldOffset(1408)]
		public byte Padding_11;
		[FieldOffset(1536)]
		public byte Padding_12;
		[FieldOffset(1664)]
		public byte Padding_13;
		[FieldOffset(1792)]
		public byte Padding_14;
		[FieldOffset(1920)]
		public byte Padding_15;
		[FieldOffset(2048)]
		public byte Padding_16;
		[FieldOffset(2176)]
		public byte Padding_17;
		[FieldOffset(2304)]
		public byte Padding_18;
		[FieldOffset(2432)]
		public byte Padding_19;
		[FieldOffset(2560)]
		public byte Padding_20;
		[FieldOffset(2688)]
		public byte Padding_21;
		[FieldOffset(2816)]
		public byte Padding_22;
		[FieldOffset(2944)]
		public byte Padding_23;
		[FieldOffset(3072)]
		public byte Padding_24;
		[FieldOffset(3200)]
		public byte Padding_25;
		[FieldOffset(3328)]
		public byte Padding_26;
		[FieldOffset(3456)]
		public byte Padding_27;
		[FieldOffset(3584)]
		public byte Padding_28;
		[FieldOffset(3712)]
		public byte Padding_29;
		[FieldOffset(3840)]
		public byte Padding_30;
		[FieldOffset(3968)]
		public byte Padding_31;
		[FieldOffset(4096)]
		public byte Padding_32;
		[FieldOffset(4224)]
		public byte Padding_33;
		[FieldOffset(4352)]
		public byte Padding_34;
		[FieldOffset(4480)]
		public byte Padding_35;
		[FieldOffset(4608)]
		public byte Padding_36;
		[FieldOffset(4736)]
		public byte Padding_37;
		[FieldOffset(4864)]
		public byte Padding_38;
		[FieldOffset(4992)]
		public byte Padding_39;
		[FieldOffset(5120)]
		public byte Padding_40;
		[FieldOffset(5248)]
		public byte Padding_41;
		[FieldOffset(5376)]
		public byte Padding_42;
		[FieldOffset(5504)]
		public byte Padding_43;
		[FieldOffset(5632)]
		public byte Padding_44;
		[FieldOffset(5760)]
		public byte Padding_45;
		[FieldOffset(5888)]
		public byte Padding_46;
		[FieldOffset(6016)]
		public byte Padding_47;
		[FieldOffset(6144)]
		public byte Padding_48;
		[FieldOffset(6272)]
		public byte Padding_49;
		[FieldOffset(6400)]
		public byte Padding_50;
		[FieldOffset(6528)]
		public byte Padding_51;
		[FieldOffset(6656)]
		public byte Padding_52;
		[FieldOffset(6784)]
		public byte Padding_53;
		[FieldOffset(6912)]
		public byte Padding_54;
		[FieldOffset(7040)]
		public byte Padding_55;
		[FieldOffset(7168)]
		public byte Padding_56;
		[FieldOffset(7296)]
		public byte Padding_57;
		[FieldOffset(7424)]
		public byte Padding_58;
		[FieldOffset(7552)]
		public byte Padding_59;
		[FieldOffset(7680)]
		public byte Padding_60;
		[FieldOffset(7808)]
		public byte Padding_61;
		[FieldOffset(7936)]
		public byte Padding_62;
		[FieldOffset(8064)]
		public byte Padding_63;
		[FieldOffset(8192)]
		public byte Padding_64;
		[FieldOffset(8320)]
		public byte Padding_65;
		[FieldOffset(8448)]
		public byte Padding_66;
		[FieldOffset(8576)]
		public byte Padding_67;
		[FieldOffset(8704)]
		public byte Padding_68;
		[FieldOffset(8832)]
		public byte Padding_69;
		[FieldOffset(8960)]
		public byte Padding_70;
		[FieldOffset(9088)]
		public byte Padding_71;
		[FieldOffset(9216)]
		public byte Padding_72;
		[FieldOffset(9344)]
		public byte Padding_73;
		[FieldOffset(9472)]
		public byte Padding_74;
		[FieldOffset(9600)]
		public byte Padding_75;
		[FieldOffset(9728)]
		public byte Padding_76;
		[FieldOffset(9856)]
		public byte Padding_77;
		[FieldOffset(9984)]
		public byte Padding_78;
		[FieldOffset(10112)]
		public byte Padding_79;
		[FieldOffset(10240)]
		public byte Padding_80;
		[FieldOffset(10368)]
		public byte Padding_81;
		[FieldOffset(10496)]
		public byte Padding_82;
		[FieldOffset(10624)]
		public byte Padding_83;
		[FieldOffset(10752)]
		public byte Padding_84;
		[FieldOffset(10880)]
		public byte Padding_85;
		[FieldOffset(11008)]
		public byte Padding_86;
		[FieldOffset(11136)]
		public byte Padding_87;
		[FieldOffset(11264)]
		public byte Padding_88;
		[FieldOffset(11392)]
		public byte Padding_89;
		[FieldOffset(11520)]
		public byte Padding_90;
		[FieldOffset(11648)]
		public byte Padding_91;
		[FieldOffset(11776)]
		public byte Padding_92;
		[FieldOffset(11904)]
		public byte Padding_93;
		[FieldOffset(12032)]
		public byte Padding_94;
		[FieldOffset(12160)]
		public byte Padding_95;
		[FieldOffset(12288)]
		public byte Padding_96;
		[FieldOffset(12416)]
		public byte Padding_97;
		[FieldOffset(12544)]
		public byte Padding_98;
		[FieldOffset(12672)]
		public byte Padding_99;
		[FieldOffset(12800)]
		public byte Padding_100;
		[FieldOffset(12928)]
		public byte Padding_101;
		[FieldOffset(13056)]
		public byte Padding_102;
		[FieldOffset(13184)]
		public byte Padding_103;
		[FieldOffset(13312)]
		public byte Padding_104;
		[FieldOffset(13440)]
		public byte Padding_105;
		[FieldOffset(13568)]
		public byte Padding_106;
		[FieldOffset(13696)]
		public byte Padding_107;
		[FieldOffset(13824)]
		public byte Padding_108;
		[FieldOffset(13952)]
		public byte Padding_109;
		[FieldOffset(14080)]
		public byte Padding_110;
		[FieldOffset(14208)]
		public byte Padding_111;
		[FieldOffset(14336)]
		public byte Padding_112;
		[FieldOffset(14464)]
		public byte Padding_113;
		[FieldOffset(14592)]
		public byte Padding_114;
		[FieldOffset(14720)]
		public byte Padding_115;
		[FieldOffset(14848)]
		public byte Padding_116;
		[FieldOffset(14976)]
		public byte Padding_117;
		[FieldOffset(15104)]
		public byte Padding_118;
		[FieldOffset(15232)]
		public byte Padding_119;
		[FieldOffset(15360)]
		public byte Padding_120;
		[FieldOffset(15488)]
		public byte Padding_121;
		[FieldOffset(15616)]
		public byte Padding_122;
		[FieldOffset(15744)]
		public byte Padding_123;
		[FieldOffset(15872)]
		public byte Padding_124;
		[FieldOffset(16000)]
		public byte Padding_125;
		[FieldOffset(16128)]
		public byte Padding_126;
		[FieldOffset(16256)]
		public byte Padding_127;


		public unsafe SDLEvent(uint type = default, SDLCommonEvent common = default, SDLDisplayEvent display = default, SDLWindowEvent window = default, SDLKeyboardDeviceEvent kdevice = default, SDLKeyboardEvent key = default, SDLTextEditingEvent edit = default, SDLTextEditingCandidatesEvent editCandidates = default, SDLTextInputEvent text = default, SDLMouseDeviceEvent mdevice = default, SDLMouseMotionEvent motion = default, SDLMouseButtonEvent button = default, SDLMouseWheelEvent wheel = default, SDLJoyDeviceEvent jdevice = default, SDLJoyAxisEvent jaxis = default, SDLJoyBallEvent jball = default, SDLJoyHatEvent jhat = default, SDLJoyButtonEvent jbutton = default, SDLJoyBatteryEvent jbattery = default, SDLGamepadDeviceEvent gdevice = default, SDLGamepadAxisEvent gaxis = default, SDLGamepadButtonEvent gbutton = default, SDLGamepadTouchpadEvent gtouchpad = default, SDLGamepadSensorEvent gsensor = default, SDLAudioDeviceEvent adevice = default, SDLCameraDeviceEvent cdevice = default, SDLSensorEvent sensor = default, SDLQuitEvent quit = default, SDLUserEvent user = default, SDLTouchFingerEvent tfinger = default, SDLPenProximityEvent pproximity = default, SDLPenTouchEvent ptouch = default, SDLPenMotionEvent pmotion = default, SDLPenButtonEvent pbutton = default, SDLPenAxisEvent paxis = default, SDLRenderEvent render = default, SDLDropEvent drop = default, SDLClipboardEvent clipboard = default, byte* padding = default)
		{
			Type = type;
			Common = common;
			Display = display;
			Window = window;
			Kdevice = kdevice;
			Key = key;
			Edit = edit;
			EditCandidates = editCandidates;
			Text = text;
			Mdevice = mdevice;
			Motion = motion;
			Button = button;
			Wheel = wheel;
			Jdevice = jdevice;
			Jaxis = jaxis;
			Jball = jball;
			Jhat = jhat;
			Jbutton = jbutton;
			Jbattery = jbattery;
			Gdevice = gdevice;
			Gaxis = gaxis;
			Gbutton = gbutton;
			Gtouchpad = gtouchpad;
			Gsensor = gsensor;
			Adevice = adevice;
			Cdevice = cdevice;
			Sensor = sensor;
			Quit = quit;
			User = user;
			Tfinger = tfinger;
			Pproximity = pproximity;
			Ptouch = ptouch;
			Pmotion = pmotion;
			Pbutton = pbutton;
			Paxis = paxis;
			Render = render;
			Drop = drop;
			Clipboard = clipboard;
			if (padding != default(byte*))
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
				Padding_2 = padding[2];
				Padding_3 = padding[3];
				Padding_4 = padding[4];
				Padding_5 = padding[5];
				Padding_6 = padding[6];
				Padding_7 = padding[7];
				Padding_8 = padding[8];
				Padding_9 = padding[9];
				Padding_10 = padding[10];
				Padding_11 = padding[11];
				Padding_12 = padding[12];
				Padding_13 = padding[13];
				Padding_14 = padding[14];
				Padding_15 = padding[15];
				Padding_16 = padding[16];
				Padding_17 = padding[17];
				Padding_18 = padding[18];
				Padding_19 = padding[19];
				Padding_20 = padding[20];
				Padding_21 = padding[21];
				Padding_22 = padding[22];
				Padding_23 = padding[23];
				Padding_24 = padding[24];
				Padding_25 = padding[25];
				Padding_26 = padding[26];
				Padding_27 = padding[27];
				Padding_28 = padding[28];
				Padding_29 = padding[29];
				Padding_30 = padding[30];
				Padding_31 = padding[31];
				Padding_32 = padding[32];
				Padding_33 = padding[33];
				Padding_34 = padding[34];
				Padding_35 = padding[35];
				Padding_36 = padding[36];
				Padding_37 = padding[37];
				Padding_38 = padding[38];
				Padding_39 = padding[39];
				Padding_40 = padding[40];
				Padding_41 = padding[41];
				Padding_42 = padding[42];
				Padding_43 = padding[43];
				Padding_44 = padding[44];
				Padding_45 = padding[45];
				Padding_46 = padding[46];
				Padding_47 = padding[47];
				Padding_48 = padding[48];
				Padding_49 = padding[49];
				Padding_50 = padding[50];
				Padding_51 = padding[51];
				Padding_52 = padding[52];
				Padding_53 = padding[53];
				Padding_54 = padding[54];
				Padding_55 = padding[55];
				Padding_56 = padding[56];
				Padding_57 = padding[57];
				Padding_58 = padding[58];
				Padding_59 = padding[59];
				Padding_60 = padding[60];
				Padding_61 = padding[61];
				Padding_62 = padding[62];
				Padding_63 = padding[63];
				Padding_64 = padding[64];
				Padding_65 = padding[65];
				Padding_66 = padding[66];
				Padding_67 = padding[67];
				Padding_68 = padding[68];
				Padding_69 = padding[69];
				Padding_70 = padding[70];
				Padding_71 = padding[71];
				Padding_72 = padding[72];
				Padding_73 = padding[73];
				Padding_74 = padding[74];
				Padding_75 = padding[75];
				Padding_76 = padding[76];
				Padding_77 = padding[77];
				Padding_78 = padding[78];
				Padding_79 = padding[79];
				Padding_80 = padding[80];
				Padding_81 = padding[81];
				Padding_82 = padding[82];
				Padding_83 = padding[83];
				Padding_84 = padding[84];
				Padding_85 = padding[85];
				Padding_86 = padding[86];
				Padding_87 = padding[87];
				Padding_88 = padding[88];
				Padding_89 = padding[89];
				Padding_90 = padding[90];
				Padding_91 = padding[91];
				Padding_92 = padding[92];
				Padding_93 = padding[93];
				Padding_94 = padding[94];
				Padding_95 = padding[95];
				Padding_96 = padding[96];
				Padding_97 = padding[97];
				Padding_98 = padding[98];
				Padding_99 = padding[99];
				Padding_100 = padding[100];
				Padding_101 = padding[101];
				Padding_102 = padding[102];
				Padding_103 = padding[103];
				Padding_104 = padding[104];
				Padding_105 = padding[105];
				Padding_106 = padding[106];
				Padding_107 = padding[107];
				Padding_108 = padding[108];
				Padding_109 = padding[109];
				Padding_110 = padding[110];
				Padding_111 = padding[111];
				Padding_112 = padding[112];
				Padding_113 = padding[113];
				Padding_114 = padding[114];
				Padding_115 = padding[115];
				Padding_116 = padding[116];
				Padding_117 = padding[117];
				Padding_118 = padding[118];
				Padding_119 = padding[119];
				Padding_120 = padding[120];
				Padding_121 = padding[121];
				Padding_122 = padding[122];
				Padding_123 = padding[123];
				Padding_124 = padding[124];
				Padding_125 = padding[125];
				Padding_126 = padding[126];
				Padding_127 = padding[127];
			}
		}

		public unsafe SDLEvent(uint type = default, SDLCommonEvent common = default, SDLDisplayEvent display = default, SDLWindowEvent window = default, SDLKeyboardDeviceEvent kdevice = default, SDLKeyboardEvent key = default, SDLTextEditingEvent edit = default, SDLTextEditingCandidatesEvent editCandidates = default, SDLTextInputEvent text = default, SDLMouseDeviceEvent mdevice = default, SDLMouseMotionEvent motion = default, SDLMouseButtonEvent button = default, SDLMouseWheelEvent wheel = default, SDLJoyDeviceEvent jdevice = default, SDLJoyAxisEvent jaxis = default, SDLJoyBallEvent jball = default, SDLJoyHatEvent jhat = default, SDLJoyButtonEvent jbutton = default, SDLJoyBatteryEvent jbattery = default, SDLGamepadDeviceEvent gdevice = default, SDLGamepadAxisEvent gaxis = default, SDLGamepadButtonEvent gbutton = default, SDLGamepadTouchpadEvent gtouchpad = default, SDLGamepadSensorEvent gsensor = default, SDLAudioDeviceEvent adevice = default, SDLCameraDeviceEvent cdevice = default, SDLSensorEvent sensor = default, SDLQuitEvent quit = default, SDLUserEvent user = default, SDLTouchFingerEvent tfinger = default, SDLPenProximityEvent pproximity = default, SDLPenTouchEvent ptouch = default, SDLPenMotionEvent pmotion = default, SDLPenButtonEvent pbutton = default, SDLPenAxisEvent paxis = default, SDLRenderEvent render = default, SDLDropEvent drop = default, SDLClipboardEvent clipboard = default, Span<byte> padding = default)
		{
			Type = type;
			Common = common;
			Display = display;
			Window = window;
			Kdevice = kdevice;
			Key = key;
			Edit = edit;
			EditCandidates = editCandidates;
			Text = text;
			Mdevice = mdevice;
			Motion = motion;
			Button = button;
			Wheel = wheel;
			Jdevice = jdevice;
			Jaxis = jaxis;
			Jball = jball;
			Jhat = jhat;
			Jbutton = jbutton;
			Jbattery = jbattery;
			Gdevice = gdevice;
			Gaxis = gaxis;
			Gbutton = gbutton;
			Gtouchpad = gtouchpad;
			Gsensor = gsensor;
			Adevice = adevice;
			Cdevice = cdevice;
			Sensor = sensor;
			Quit = quit;
			User = user;
			Tfinger = tfinger;
			Pproximity = pproximity;
			Ptouch = ptouch;
			Pmotion = pmotion;
			Pbutton = pbutton;
			Paxis = paxis;
			Render = render;
			Drop = drop;
			Clipboard = clipboard;
			if (padding != default(Span<byte>))
			{
				Padding_0 = padding[0];
				Padding_1 = padding[1];
				Padding_2 = padding[2];
				Padding_3 = padding[3];
				Padding_4 = padding[4];
				Padding_5 = padding[5];
				Padding_6 = padding[6];
				Padding_7 = padding[7];
				Padding_8 = padding[8];
				Padding_9 = padding[9];
				Padding_10 = padding[10];
				Padding_11 = padding[11];
				Padding_12 = padding[12];
				Padding_13 = padding[13];
				Padding_14 = padding[14];
				Padding_15 = padding[15];
				Padding_16 = padding[16];
				Padding_17 = padding[17];
				Padding_18 = padding[18];
				Padding_19 = padding[19];
				Padding_20 = padding[20];
				Padding_21 = padding[21];
				Padding_22 = padding[22];
				Padding_23 = padding[23];
				Padding_24 = padding[24];
				Padding_25 = padding[25];
				Padding_26 = padding[26];
				Padding_27 = padding[27];
				Padding_28 = padding[28];
				Padding_29 = padding[29];
				Padding_30 = padding[30];
				Padding_31 = padding[31];
				Padding_32 = padding[32];
				Padding_33 = padding[33];
				Padding_34 = padding[34];
				Padding_35 = padding[35];
				Padding_36 = padding[36];
				Padding_37 = padding[37];
				Padding_38 = padding[38];
				Padding_39 = padding[39];
				Padding_40 = padding[40];
				Padding_41 = padding[41];
				Padding_42 = padding[42];
				Padding_43 = padding[43];
				Padding_44 = padding[44];
				Padding_45 = padding[45];
				Padding_46 = padding[46];
				Padding_47 = padding[47];
				Padding_48 = padding[48];
				Padding_49 = padding[49];
				Padding_50 = padding[50];
				Padding_51 = padding[51];
				Padding_52 = padding[52];
				Padding_53 = padding[53];
				Padding_54 = padding[54];
				Padding_55 = padding[55];
				Padding_56 = padding[56];
				Padding_57 = padding[57];
				Padding_58 = padding[58];
				Padding_59 = padding[59];
				Padding_60 = padding[60];
				Padding_61 = padding[61];
				Padding_62 = padding[62];
				Padding_63 = padding[63];
				Padding_64 = padding[64];
				Padding_65 = padding[65];
				Padding_66 = padding[66];
				Padding_67 = padding[67];
				Padding_68 = padding[68];
				Padding_69 = padding[69];
				Padding_70 = padding[70];
				Padding_71 = padding[71];
				Padding_72 = padding[72];
				Padding_73 = padding[73];
				Padding_74 = padding[74];
				Padding_75 = padding[75];
				Padding_76 = padding[76];
				Padding_77 = padding[77];
				Padding_78 = padding[78];
				Padding_79 = padding[79];
				Padding_80 = padding[80];
				Padding_81 = padding[81];
				Padding_82 = padding[82];
				Padding_83 = padding[83];
				Padding_84 = padding[84];
				Padding_85 = padding[85];
				Padding_86 = padding[86];
				Padding_87 = padding[87];
				Padding_88 = padding[88];
				Padding_89 = padding[89];
				Padding_90 = padding[90];
				Padding_91 = padding[91];
				Padding_92 = padding[92];
				Padding_93 = padding[93];
				Padding_94 = padding[94];
				Padding_95 = padding[95];
				Padding_96 = padding[96];
				Padding_97 = padding[97];
				Padding_98 = padding[98];
				Padding_99 = padding[99];
				Padding_100 = padding[100];
				Padding_101 = padding[101];
				Padding_102 = padding[102];
				Padding_103 = padding[103];
				Padding_104 = padding[104];
				Padding_105 = padding[105];
				Padding_106 = padding[106];
				Padding_107 = padding[107];
				Padding_108 = padding[108];
				Padding_109 = padding[109];
				Padding_110 = padding[110];
				Padding_111 = padding[111];
				Padding_112 = padding[112];
				Padding_113 = padding[113];
				Padding_114 = padding[114];
				Padding_115 = padding[115];
				Padding_116 = padding[116];
				Padding_117 = padding[117];
				Padding_118 = padding[118];
				Padding_119 = padding[119];
				Padding_120 = padding[120];
				Padding_121 = padding[121];
				Padding_122 = padding[122];
				Padding_123 = padding[123];
				Padding_124 = padding[124];
				Padding_125 = padding[125];
				Padding_126 = padding[126];
				Padding_127 = padding[127];
			}
		}


	}

}
