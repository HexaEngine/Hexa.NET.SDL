// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// A structure specifying the parameters of a color target used by a render<br/>
	/// pass.<br/>
	/// The load_op field determines what is done with the texture at the beginning<br/>
	/// of the render pass.<br/>
	/// - LOAD: Loads the data currently in the texture. Not recommended for<br/>
	/// multisample textures as it requires significant memory bandwidth.<br/>
	/// - CLEAR: Clears the texture to a single color.<br/>
	/// - DONT_CARE: The driver will do whatever it wants with the texture memory.<br/>
	/// This is a good option if you know that every single pixel will be touched<br/>
	/// in the render pass.<br/>
	/// The store_op field determines what is done with the color results of the<br/>
	/// render pass.<br/>
	/// - STORE: Stores the results of the render pass in the texture. Not<br/>
	/// recommended for multisample textures as it requires significant memory<br/>
	/// bandwidth.<br/>
	/// - DONT_CARE: The driver will do whatever it wants with the texture memory.<br/>
	/// This is often a good option for depth/stencil textures.<br/>
	/// - RESOLVE: Resolves a multisample texture into resolve_texture, which must<br/>
	/// have a sample count of 1. Then the driver may discard the multisample<br/>
	/// texture memory. This is the most performant method of resolving a<br/>
	/// multisample target.<br/>
	/// - RESOLVE_AND_STORE: Resolves a multisample texture into the<br/>
	/// resolve_texture, which must have a sample count of 1. Then the driver<br/>
	/// stores the multisample texture's contents. Not recommended as it requires<br/>
	/// significant memory bandwidth.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_GPUColorTargetInfo")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGPUColorTargetInfo
	{
		/// <summary>
		/// The texture that will be used as a color target by a render pass. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "texture")]
		[NativeName(NativeNameType.Type, "SDL_GPUTexture *")]
		public unsafe SDLGPUTexture* Texture;

		/// <summary>
		/// The mip level to use as a color target. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "mip_level")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint MipLevel;

		/// <summary>
		/// The layer index or depth plane to use as a color target. This value is treated as a layer index on 2D array and cube textures, and as a depth plane on 3D textures. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "layer_or_depth_plane")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint LayerOrDepthPlane;

		/// <summary>
		/// The color to clear the color target to at the start of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "clear_color")]
		[NativeName(NativeNameType.Type, "SDL_FColor")]
		public SDLFColor ClearColor;

		/// <summary>
		/// What is done with the contents of the color target at the beginning of the render pass. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "load_op")]
		[NativeName(NativeNameType.Type, "SDL_GPULoadOp")]
		public SDLGPULoadOp LoadOp;

		/// <summary>
		/// What is done with the results of the render pass. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "store_op")]
		[NativeName(NativeNameType.Type, "SDL_GPUStoreOp")]
		public SDLGPUStoreOp StoreOp;

		/// <summary>
		/// The texture that will receive the results of a multisample resolve operation. Ignored if a RESOLVE* store_op is not used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "resolve_texture")]
		[NativeName(NativeNameType.Type, "SDL_GPUTexture *")]
		public unsafe SDLGPUTexture* ResolveTexture;

		/// <summary>
		/// The mip level of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "resolve_mip_level")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint ResolveMipLevel;

		/// <summary>
		/// The layer index of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "resolve_layer")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint ResolveLayer;

		/// <summary>
		/// true cycles the texture if the texture is bound and load_op is not LOAD <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cycle")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Cycle;

		/// <summary>
		/// true cycles the resolve texture if the resolve texture is bound. Ignored if a RESOLVE* store_op is not used. <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "cycle_resolve_texture")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte CycleResolveTexture;

		[NativeName(NativeNameType.Field, "padding1")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding1;
		[NativeName(NativeNameType.Field, "padding2")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Padding2;

		public unsafe SDLGPUColorTargetInfo(SDLGPUTexture* texture = default, uint mipLevel = default, uint layerOrDepthPlane = default, SDLFColor clearColor = default, SDLGPULoadOp loadOp = default, SDLGPUStoreOp storeOp = default, SDLGPUTexture* resolveTexture = default, uint resolveMipLevel = default, uint resolveLayer = default, bool cycle = default, bool cycleResolveTexture = default, byte padding1 = default, byte padding2 = default)
		{
			Texture = texture;
			MipLevel = mipLevel;
			LayerOrDepthPlane = layerOrDepthPlane;
			ClearColor = clearColor;
			LoadOp = loadOp;
			StoreOp = storeOp;
			ResolveTexture = resolveTexture;
			ResolveMipLevel = resolveMipLevel;
			ResolveLayer = resolveLayer;
			Cycle = cycle ? (byte)1 : (byte)0;
			CycleResolveTexture = cycleResolveTexture ? (byte)1 : (byte)0;
			Padding1 = padding1;
			Padding2 = padding2;
		}


	}

}
