// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// An opaque handle representing a command buffer.<br/>
	/// Most state is managed via command buffers. When setting state using a<br/>
	/// command buffer, that state is local to the command buffer.<br/>
	/// Commands only begin execution on the GPU once SDL_SubmitGPUCommandBuffer is<br/>
	/// called. Once the command buffer is submitted, it is no longer valid to use<br/>
	/// it.<br/>
	/// Command buffers are executed in submission order. If you submit command<br/>
	/// buffer A and then command buffer B all commands in A will begin executing<br/>
	/// before any command in B begins executing.<br/>
	/// In multi-threading scenarios, you should acquire and submit a command<br/>
	/// buffer on the same thread. As long as you satisfy this requirement, all<br/>
	/// functionality related to command buffers is thread-safe.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_GPUCommandBuffer")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGPUCommandBuffer
	{


	}

}
