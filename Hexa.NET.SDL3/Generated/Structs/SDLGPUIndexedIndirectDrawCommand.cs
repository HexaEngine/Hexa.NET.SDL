// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// A structure specifying the parameters of an indexed indirect draw command.<br/>
	/// Note that the `first_vertex` and `first_instance` parameters are NOT<br/>
	/// compatible with built-in vertex/instance ID variables in shaders (for<br/>
	/// example, SV_VertexID); GPU APIs and shader languages do not define these<br/>
	/// built-in variables consistently, so if your shader depends on them, the<br/>
	/// only way to keep behavior consistent and portable is to always pass 0 for<br/>
	/// the correlating parameter in the draw calls.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGPUIndexedIndirectDrawCommand
	{
		/// <summary>
		/// The number of indices to draw per instance. <br/>
		/// </summary>
		public uint NumIndices;

		/// <summary>
		/// The number of instances to draw. <br/>
		/// </summary>
		public uint NumInstances;

		/// <summary>
		/// The base index within the index buffer. <br/>
		/// </summary>
		public uint FirstIndex;

		/// <summary>
		/// The value added to the vertex index before indexing into the vertex buffer. <br/>
		/// </summary>
		public int VertexOffset;

		/// <summary>
		/// The ID of the first instance to draw. <br/>
		/// </summary>
		public uint FirstInstance;


		public unsafe SDLGPUIndexedIndirectDrawCommand(uint numIndices = default, uint numInstances = default, uint firstIndex = default, int vertexOffset = default, uint firstInstance = default)
		{
			NumIndices = numIndices;
			NumInstances = numInstances;
			FirstIndex = firstIndex;
			VertexOffset = vertexOffset;
			FirstInstance = firstInstance;
		}


	}

}
