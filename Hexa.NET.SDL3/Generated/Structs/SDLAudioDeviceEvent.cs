// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// Audio device event structure (event.adevice.*)<br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAudioDeviceEvent
	{
		/// <summary>
		/// SDL_EVENT_AUDIO_DEVICE_ADDED, or SDL_EVENT_AUDIO_DEVICE_REMOVED, or SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED <br/>
		/// </summary>
		public SDLEventType Type;

		public uint Reserved;
		/// <summary>
		/// In nanoseconds, populated using SDL_GetTicksNS() <br/>
		/// </summary>
		public ulong Timestamp;

		/// <summary>
		/// SDL_AudioDeviceID for the device being added or removed or changing <br/>
		/// </summary>
		public uint Which;

		/// <summary>
		/// false if a playback device, true if a recording device. <br/>
		/// </summary>
		public byte Recording;

		public byte Padding1;
		public byte Padding2;
		public byte Padding3;

		public unsafe SDLAudioDeviceEvent(SDLEventType type = default, uint reserved = default, ulong timestamp = default, uint which = default, bool recording = default, byte padding1 = default, byte padding2 = default, byte padding3 = default)
		{
			Type = type;
			Reserved = reserved;
			Timestamp = timestamp;
			Which = which;
			Recording = recording ? (byte)1 : (byte)0;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
		}


	}

}
