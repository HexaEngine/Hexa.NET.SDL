// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// Pressure-sensitive pen button event structure (event.pbutton.*)<br/>
	/// This is for buttons on the pen itself that the user might click. The pen<br/>
	/// itself pressing down to draw triggers a SDL_EVENT_PEN_DOWN event instead.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_PenButtonEvent")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLPenButtonEvent
	{
		/// <summary>
		/// SDL_EVENT_PEN_BUTTON_DOWN or SDL_EVENT_PEN_BUTTON_UP <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "type")]
		[NativeName(NativeNameType.Type, "SDL_EventType")]
		public SDLEventType Type;

		[NativeName(NativeNameType.Field, "reserved")]
		[NativeName(NativeNameType.Type, "Uint32")]
		public uint Reserved;
		/// <summary>
		/// In nanoseconds, populated using SDL_GetTicksNS() <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "timestamp")]
		[NativeName(NativeNameType.Type, "Uint64")]
		public ulong Timestamp;

		/// <summary>
		/// The window with mouse focus, if any <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "windowID")]
		[NativeName(NativeNameType.Type, "SDL_WindowID")]
		public uint WindowID;

		/// <summary>
		/// The pen instance id <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "which")]
		[NativeName(NativeNameType.Type, "SDL_PenID")]
		public uint Which;

		/// <summary>
		/// Complete pen input state at time of event <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "pen_state")]
		[NativeName(NativeNameType.Type, "SDL_PenInputFlags")]
		public SDLPenInputFlags PenState;

		/// <summary>
		/// X coordinate, relative to window <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "x")]
		[NativeName(NativeNameType.Type, "float")]
		public float X;

		/// <summary>
		/// Y coordinate, relative to window <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "y")]
		[NativeName(NativeNameType.Type, "float")]
		public float Y;

		/// <summary>
		/// The pen button index (first button is 1). <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "button")]
		[NativeName(NativeNameType.Type, "Uint8")]
		public byte Button;

		/// <summary>
		/// true if the button is pressed <br/>
		/// </summary>
		[NativeName(NativeNameType.Field, "down")]
		[NativeName(NativeNameType.Type, "bool")]
		public byte Down;


		public unsafe SDLPenButtonEvent(SDLEventType type = default, uint reserved = default, ulong timestamp = default, uint windowID = default, uint which = default, SDLPenInputFlags penState = default, float x = default, float y = default, byte button = default, bool down = default)
		{
			Type = type;
			Reserved = reserved;
			Timestamp = timestamp;
			WindowID = windowID;
			Which = which;
			PenState = penState;
			X = x;
			Y = y;
			Button = button;
			Down = down ? (byte)1 : (byte)0;
		}


	}

}
