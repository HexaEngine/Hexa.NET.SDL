// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// A structure used for thread-safe initialization and shutdown.<br/>
	/// Here is an example of using this:<br/>
	/// ```c<br/>
	/// static SDL_AtomicInitState init;<br/>
	/// bool InitSystem(void)<br/>
	/// {<br/>
	/// if (!SDL_ShouldInit(<br/>
	/// &init<br/>
	/// )) {<br/>
	/// // The system is initialized<br/>
	/// return true;<br/>
	/// }<br/>
	/// // At this point, you should not leave this function without calling SDL_SetInitialized()<br/>
	/// bool initialized = DoInitTasks();<br/>
	/// SDL_SetInitialized(<br/>
	/// &init<br/>
	/// , initialized);<br/>
	/// return initialized;<br/>
	/// }<br/>
	/// bool UseSubsystem(void)<br/>
	/// {<br/>
	/// if (SDL_ShouldInit(<br/>
	/// &init<br/>
	/// )) {<br/>
	/// // Error, the subsystem isn't initialized<br/>
	/// SDL_SetInitialized(<br/>
	/// &init<br/>
	/// , false);<br/>
	/// return false;<br/>
	/// }<br/>
	/// // Do work using the initialized subsystem<br/>
	/// return true;<br/>
	/// }<br/>
	/// void QuitSystem(void)<br/>
	/// {<br/>
	/// if (!SDL_ShouldQuit(<br/>
	/// &init<br/>
	/// )) {<br/>
	/// // The system is not initialized<br/>
	/// return;<br/>
	/// }<br/>
	/// // At this point, you should not leave this function without calling SDL_SetInitialized()<br/>
	/// DoQuitTasks();<br/>
	/// SDL_SetInitialized(<br/>
	/// &init<br/>
	/// , false);<br/>
	/// }<br/>
	/// ```<br/>
	/// Note that this doesn't protect any resources created during initialization,<br/>
	/// or guarantee that nobody is using those resources during cleanup. You<br/>
	/// should use other mechanisms to protect those, if that's a concern for your<br/>
	/// code.<br/>
	/// <br/>
	/// </summary>
	[NativeName(NativeNameType.StructOrClass, "SDL_InitState")]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLInitState
	{
		[NativeName(NativeNameType.Field, "status")]
		[NativeName(NativeNameType.Type, "SDL_AtomicInt")]
		public SDLAtomicInt Status;
		[NativeName(NativeNameType.Field, "thread")]
		[NativeName(NativeNameType.Type, "SDL_ThreadID")]
		public ulong Thread;
		[NativeName(NativeNameType.Field, "reserved")]
		[NativeName(NativeNameType.Type, "void *")]
		public unsafe void* Reserved;

		public unsafe SDLInitState(SDLAtomicInt status = default, ulong thread = default, void* reserved = default)
		{
			Status = status;
			Thread = thread;
			Reserved = reserved;
		}


	}

}
