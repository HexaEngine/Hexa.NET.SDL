// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLTestCommonState
	{
		/// <summary>
		/// SDL init flags <br/>
		/// </summary>
		public unsafe byte** Argv;

		public SDLInitFlags Flags;
		public SDLTestVerboseFlags Verbose;
		/// <summary>
		/// Video info <br/>
		/// </summary>
		public unsafe byte* Videodriver;

		public int DisplayIndex;
		public uint DisplayID;
		public unsafe byte* WindowTitle;
		public unsafe byte* WindowIcon;
		public SDLWindowFlags WindowFlags;
		public byte FlashOnFocusLoss;
		public int WindowX;
		public int WindowY;
		public int WindowW;
		public int WindowH;
		public int WindowMinW;
		public int WindowMinH;
		public int WindowMaxW;
		public int WindowMaxH;
		public float WindowMinAspect;
		public float WindowMaxAspect;
		public int LogicalW;
		public int LogicalH;
		public byte AutoScaleContent;
		public SDLRendererLogicalPresentation LogicalPresentation;
		public float Scale;
		public int Depth;
		public float RefreshRate;
		public byte FillUsableBounds;
		public byte FullscreenExclusive;
		public SDLDisplayMode FullscreenMode;
		public int NumWindows;
		public unsafe SDLWindow** Windows;
		public unsafe byte* Gpudriver;
		/// <summary>
		/// Renderer info <br/>
		/// </summary>
		public unsafe byte* Renderdriver;

		public int RenderVsync;
		public byte SkipRenderer;
		public unsafe SDLRenderer** Renderers;
		public unsafe SDLTexture** Targets;
		/// <summary>
		/// Audio info <br/>
		/// </summary>
		public unsafe byte* Audiodriver;

		public SDLAudioFormat AudioFormat;
		public int AudioChannels;
		public int AudioFreq;
		public uint AudioId;
		/// <summary>
		/// GL settings <br/>
		/// </summary>
		public int GlRedSize;

		public int GlGreenSize;
		public int GlBlueSize;
		public int GlAlphaSize;
		public int GlBufferSize;
		public int GlDepthSize;
		public int GlStencilSize;
		public int GlDoubleBuffer;
		public int GlAccumRedSize;
		public int GlAccumGreenSize;
		public int GlAccumBlueSize;
		public int GlAccumAlphaSize;
		public int GlStereo;
		public int GlReleaseBehavior;
		public int GlMultisamplebuffers;
		public int GlMultisamplesamples;
		public int GlRetainedBacking;
		public int GlAccelerated;
		public int GlMajorVersion;
		public int GlMinorVersion;
		public int GlDebug;
		public int GlProfileMask;
		/// <summary>
		/// Mouse info <br/>
		/// </summary>
		public SDLRect Confine;

		public byte HideCursor;
		/// <summary>
		/// Options info <br/>
		/// </summary>
		public SDLTestArgumentParser CommonArgparser;

		public SDLTestArgumentParser VideoArgparser;
		public SDLTestArgumentParser AudioArgparser;
		public unsafe SDLTestArgumentParser* Argparser;

		public unsafe SDLTestCommonState(byte** argv = default, SDLInitFlags flags = default, SDLTestVerboseFlags verbose = default, byte* videodriver = default, int displayIndex = default, uint displayID = default, byte* windowTitle = default, byte* windowIcon = default, SDLWindowFlags windowFlags = default, bool flashOnFocusLoss = default, int windowX = default, int windowY = default, int windowW = default, int windowH = default, int windowMinw = default, int windowMinh = default, int windowMaxw = default, int windowMaxh = default, float windowMinAspect = default, float windowMaxAspect = default, int logicalW = default, int logicalH = default, bool autoScaleContent = default, SDLRendererLogicalPresentation logicalPresentation = default, float scale = default, int depth = default, float refreshRate = default, bool fillUsableBounds = default, bool fullscreenExclusive = default, SDLDisplayMode fullscreenMode = default, int numWindows = default, SDLWindow** windows = default, byte* gpudriver = default, byte* renderdriver = default, int renderVsync = default, bool skipRenderer = default, SDLRenderer** renderers = default, SDLTexture** targets = default, byte* audiodriver = default, SDLAudioFormat audioFormat = default, int audioChannels = default, int audioFreq = default, uint audioId = default, int glRedSize = default, int glGreenSize = default, int glBlueSize = default, int glAlphaSize = default, int glBufferSize = default, int glDepthSize = default, int glStencilSize = default, int glDoubleBuffer = default, int glAccumRedSize = default, int glAccumGreenSize = default, int glAccumBlueSize = default, int glAccumAlphaSize = default, int glStereo = default, int glReleaseBehavior = default, int glMultisamplebuffers = default, int glMultisamplesamples = default, int glRetainedBacking = default, int glAccelerated = default, int glMajorVersion = default, int glMinorVersion = default, int glDebug = default, int glProfileMask = default, SDLRect confine = default, bool hideCursor = default, SDLTestArgumentParser commonArgparser = default, SDLTestArgumentParser videoArgparser = default, SDLTestArgumentParser audioArgparser = default, SDLTestArgumentParser* argparser = default)
		{
			Argv = argv;
			Flags = flags;
			Verbose = verbose;
			Videodriver = videodriver;
			DisplayIndex = displayIndex;
			DisplayID = displayID;
			WindowTitle = windowTitle;
			WindowIcon = windowIcon;
			WindowFlags = windowFlags;
			FlashOnFocusLoss = flashOnFocusLoss ? (byte)1 : (byte)0;
			WindowX = windowX;
			WindowY = windowY;
			WindowW = windowW;
			WindowH = windowH;
			WindowMinW = windowMinw;
			WindowMinH = windowMinh;
			WindowMaxW = windowMaxw;
			WindowMaxH = windowMaxh;
			WindowMinAspect = windowMinAspect;
			WindowMaxAspect = windowMaxAspect;
			LogicalW = logicalW;
			LogicalH = logicalH;
			AutoScaleContent = autoScaleContent ? (byte)1 : (byte)0;
			LogicalPresentation = logicalPresentation;
			Scale = scale;
			Depth = depth;
			RefreshRate = refreshRate;
			FillUsableBounds = fillUsableBounds ? (byte)1 : (byte)0;
			FullscreenExclusive = fullscreenExclusive ? (byte)1 : (byte)0;
			FullscreenMode = fullscreenMode;
			NumWindows = numWindows;
			Windows = windows;
			Gpudriver = gpudriver;
			Renderdriver = renderdriver;
			RenderVsync = renderVsync;
			SkipRenderer = skipRenderer ? (byte)1 : (byte)0;
			Renderers = renderers;
			Targets = targets;
			Audiodriver = audiodriver;
			AudioFormat = audioFormat;
			AudioChannels = audioChannels;
			AudioFreq = audioFreq;
			AudioId = audioId;
			GlRedSize = glRedSize;
			GlGreenSize = glGreenSize;
			GlBlueSize = glBlueSize;
			GlAlphaSize = glAlphaSize;
			GlBufferSize = glBufferSize;
			GlDepthSize = glDepthSize;
			GlStencilSize = glStencilSize;
			GlDoubleBuffer = glDoubleBuffer;
			GlAccumRedSize = glAccumRedSize;
			GlAccumGreenSize = glAccumGreenSize;
			GlAccumBlueSize = glAccumBlueSize;
			GlAccumAlphaSize = glAccumAlphaSize;
			GlStereo = glStereo;
			GlReleaseBehavior = glReleaseBehavior;
			GlMultisamplebuffers = glMultisamplebuffers;
			GlMultisamplesamples = glMultisamplesamples;
			GlRetainedBacking = glRetainedBacking;
			GlAccelerated = glAccelerated;
			GlMajorVersion = glMajorVersion;
			GlMinorVersion = glMinorVersion;
			GlDebug = glDebug;
			GlProfileMask = glProfileMask;
			Confine = confine;
			HideCursor = hideCursor ? (byte)1 : (byte)0;
			CommonArgparser = commonArgparser;
			VideoArgparser = videoArgparser;
			AudioArgparser = audioArgparser;
			Argparser = argparser;
		}


	}

}
