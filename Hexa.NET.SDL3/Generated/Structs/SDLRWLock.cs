// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// A mutex that allows read-only threads to run in parallel.<br/>
	/// A rwlock is roughly the same concept as SDL_Mutex, but allows threads that<br/>
	/// request read-only access to all hold the lock at the same time. If a thread<br/>
	/// requests write access, it will block until all read-only threads have<br/>
	/// released the lock, and no one else can hold the thread (for reading or<br/>
	/// writing) at the same time as the writing thread.<br/>
	/// This can be more efficient in cases where several threads need to access<br/>
	/// data frequently, but changes to that data are rare.<br/>
	/// There are other rules that apply to rwlocks that don't apply to mutexes,<br/>
	/// about how threads are scheduled and when they can be recursively locked.<br/>
	/// These are documented in the other rwlock functions.<br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLRWLock
	{


	}

}
