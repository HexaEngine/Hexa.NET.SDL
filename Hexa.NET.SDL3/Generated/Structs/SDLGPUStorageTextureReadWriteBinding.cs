// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// A structure specifying parameters related to binding textures in a compute<br/>
	/// pass.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGPUStorageTextureReadWriteBinding
	{
		/// <summary>
		/// The texture to bind. Must have been created with SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE or SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE. <br/>
		/// </summary>
		public unsafe SDLGPUTexture* Texture;

		/// <summary>
		/// The mip level index to bind. <br/>
		/// </summary>
		public uint MipLevel;

		/// <summary>
		/// The layer index to bind. <br/>
		/// </summary>
		public uint Layer;

		/// <summary>
		/// true cycles the texture if it is already bound. <br/>
		/// </summary>
		public byte Cycle;

		public byte Padding1;
		public byte Padding2;
		public byte Padding3;

		public unsafe SDLGPUStorageTextureReadWriteBinding(SDLGPUTexture* texture = default, uint mipLevel = default, uint layer = default, bool cycle = default, byte padding1 = default, byte padding2 = default, byte padding3 = default)
		{
			Texture = texture;
			MipLevel = mipLevel;
			Layer = layer;
			Cycle = cycle ? (byte)1 : (byte)0;
			Padding1 = padding1;
			Padding2 = padding2;
			Padding3 = padding3;
		}


	}

}
