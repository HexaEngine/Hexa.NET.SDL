// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// A means to manage access to a resource, by count, between threads.<br/>
	/// Semaphores (specifically, "counting semaphores"), let X number of threads<br/>
	/// request access at the same time, each thread granted access decrementing a<br/>
	/// counter. When the counter reaches zero, future requests block until a prior<br/>
	/// thread releases their request, incrementing the counter again.<br/>
	/// Wikipedia has a thorough explanation of the concept:<br/>
	/// https://en.wikipedia.org/wiki/Semaphore_(programming)<br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLSemaphore
	{


	}

}
