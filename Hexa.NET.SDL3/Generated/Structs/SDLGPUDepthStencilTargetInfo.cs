// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// A structure specifying the parameters of a depth-stencil target used by a<br/>
	/// render pass.<br/>
	/// The load_op field determines what is done with the depth contents of the<br/>
	/// texture at the beginning of the render pass.<br/>
	/// - LOAD: Loads the depth values currently in the texture.<br/>
	/// - CLEAR: Clears the texture to a single depth.<br/>
	/// - DONT_CARE: The driver will do whatever it wants with the memory. This is<br/>
	/// a good option if you know that every single pixel will be touched in the<br/>
	/// render pass.<br/>
	/// The store_op field determines what is done with the depth results of the<br/>
	/// render pass.<br/>
	/// - STORE: Stores the depth results in the texture.<br/>
	/// - DONT_CARE: The driver will do whatever it wants with the depth results.<br/>
	/// This is often a good option for depth/stencil textures that don't need to<br/>
	/// be reused again.<br/>
	/// The stencil_load_op field determines what is done with the stencil contents<br/>
	/// of the texture at the beginning of the render pass.<br/>
	/// - LOAD: Loads the stencil values currently in the texture.<br/>
	/// - CLEAR: Clears the stencil values to a single value.<br/>
	/// - DONT_CARE: The driver will do whatever it wants with the memory. This is<br/>
	/// a good option if you know that every single pixel will be touched in the<br/>
	/// render pass.<br/>
	/// The stencil_store_op field determines what is done with the stencil results<br/>
	/// of the render pass.<br/>
	/// - STORE: Stores the stencil results in the texture.<br/>
	/// - DONT_CARE: The driver will do whatever it wants with the stencil results.<br/>
	/// This is often a good option for depth/stencil textures that don't need to<br/>
	/// be reused again.<br/>
	/// Note that depth/stencil targets do not support multisample resolves.<br/>
	/// <br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLGPUDepthStencilTargetInfo
	{
		/// <summary>
		/// The texture that will be used as the depth stencil target by the render pass. <br/>
		/// </summary>
		public unsafe SDLGPUTexture* Texture;

		/// <summary>
		/// The value to clear the depth component to at the beginning of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. <br/>
		/// </summary>
		public float ClearDepth;

		/// <summary>
		/// What is done with the depth contents at the beginning of the render pass. <br/>
		/// </summary>
		public SDLGPULoadOp LoadOp;

		/// <summary>
		/// What is done with the depth results of the render pass. <br/>
		/// </summary>
		public SDLGPUStoreOp StoreOp;

		/// <summary>
		/// What is done with the stencil contents at the beginning of the render pass. <br/>
		/// </summary>
		public SDLGPULoadOp StencilLoadOp;

		/// <summary>
		/// What is done with the stencil results of the render pass. <br/>
		/// </summary>
		public SDLGPUStoreOp StencilStoreOp;

		/// <summary>
		/// true cycles the texture if the texture is bound and any load ops are not LOAD <br/>
		/// </summary>
		public byte Cycle;

		/// <summary>
		/// The value to clear the stencil component to at the beginning of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. <br/>
		/// </summary>
		public byte ClearStencil;

		public byte Padding1;
		public byte Padding2;

		public unsafe SDLGPUDepthStencilTargetInfo(SDLGPUTexture* texture = default, float clearDepth = default, SDLGPULoadOp loadOp = default, SDLGPUStoreOp storeOp = default, SDLGPULoadOp stencilLoadOp = default, SDLGPUStoreOp stencilStoreOp = default, bool cycle = default, byte clearStencil = default, byte padding1 = default, byte padding2 = default)
		{
			Texture = texture;
			ClearDepth = clearDepth;
			LoadOp = loadOp;
			StoreOp = storeOp;
			StencilLoadOp = stencilLoadOp;
			StencilStoreOp = stencilStoreOp;
			Cycle = cycle ? (byte)1 : (byte)0;
			ClearStencil = clearStencil;
			Padding1 = padding1;
			Padding2 = padding2;
		}


	}

}
