// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	/// <summary>
	/// Information about a completed asynchronous I/O request.<br/>
	/// <br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SDLAsyncIOOutcome
	{
		/// <summary>
		/// what generated this task. This pointer will be invalid if it was closed! <br/>
		/// </summary>
		public unsafe SDLAsyncIO* Asyncio;

		/// <summary>
		/// What sort of task was this? Read, write, etc? <br/>
		/// </summary>
		public SDLAsyncIOTaskType Type;

		/// <summary>
		/// the result of the work (success, failure, cancellation). <br/>
		/// </summary>
		public SDLAsyncIOResult Result;

		/// <summary>
		/// buffer where data was read/written. <br/>
		/// </summary>
		public unsafe void* Buffer;

		/// <summary>
		/// offset in the SDL_AsyncIO where data was read/written. <br/>
		/// </summary>
		public ulong Offset;

		/// <summary>
		/// number of bytes the task was to read/write. <br/>
		/// </summary>
		public ulong BytesRequested;

		/// <summary>
		/// actual number of bytes that were read/written. <br/>
		/// </summary>
		public ulong BytesTransferred;

		/// <summary>
		/// pointer provided by the app when starting the task <br/>
		/// </summary>
		public unsafe void* Userdata;


		public unsafe SDLAsyncIOOutcome(SDLAsyncIO* asyncio = default, SDLAsyncIOTaskType type = default, SDLAsyncIOResult result = default, void* buffer = default, ulong offset = default, ulong bytesRequested = default, ulong bytesTransferred = default, void* userdata = default)
		{
			Asyncio = asyncio;
			Type = type;
			Result = result;
			Buffer = buffer;
			Offset = offset;
			BytesRequested = bytesRequested;
			BytesTransferred = bytesTransferred;
			Userdata = userdata;
		}


	}

}
