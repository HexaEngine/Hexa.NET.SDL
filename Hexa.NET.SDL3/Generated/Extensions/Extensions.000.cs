// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;

namespace Hexa.NET.SDL3
{
	public static unsafe partial class Extensions
	{
		/// <summary>
		/// This function frees a context used for character set conversion.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv_close")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int Close(this SDLIconv cd)
		{
			int ret = SDL.IconvCloseNative(cd);
			return ret;
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, outbuf, outbytesleft);
			return ret;
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, outbuf, outbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, outbuf, outbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, outbuf, outbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			fixed (byte** poutbuf = &outbuf)
			{
				nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, (byte**)poutbuf, outbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, (byte**)poutbuf, outbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, (byte**)poutbuf, outbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (byte** poutbuf = &outbuf)
					{
						nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, (byte**)poutbuf, outbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (nuint* poutbytesleft = &outbytesleft)
			{
				nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, outbuf, (nuint*)poutbytesleft);
				return ret;
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, outbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, outbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] byte** outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, outbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (byte** poutbuf = &outbuf)
			{
				fixed (nuint* poutbytesleft = &outbytesleft)
				{
					nuint ret = SDL.IconvNative(cd, inbuf, inbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
					return ret;
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] nuint* inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, inbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] byte** inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (nuint* pinbytesleft = &inbytesleft)
			{
				fixed (byte** poutbuf = &outbuf)
				{
					fixed (nuint* poutbytesleft = &outbytesleft)
					{
						nuint ret = SDL.IconvNative(cd, inbuf, (nuint*)pinbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
						return ret;
					}
				}
			}
		}

		/// <summary>
		/// This function converts text between encodings, reading from and writing to<br/>
		/// a buffer.<br/>
		/// It returns the number of succesful conversions.<br/>
		/// <br/>
		/// On exit:<br/>
		/// - inbuf will point to the beginning of the next multibyte<br/>
		/// sequence. On error, this is the location of the problematic<br/>
		/// input sequence. On success, this is the end of the input<br/>
		/// sequence. - inbytesleft will be set to the number of bytes left<br/>
		/// to convert, which will be 0 on success. - outbuf will point to<br/>
		/// the location where to store the next output byte. - outbytesleft<br/>
		/// will be set to the number of bytes left in the output buffer.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_iconv")]
		[return: NativeName(NativeNameType.Type, "size_t")]
		public static nuint Iconv(this SDLIconv cd, [NativeName(NativeNameType.Param, "inbuf")] [NativeName(NativeNameType.Type, "char const * *")] ref byte* inbuf, [NativeName(NativeNameType.Param, "inbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint inbytesleft, [NativeName(NativeNameType.Param, "outbuf")] [NativeName(NativeNameType.Type, "char * *")] ref byte* outbuf, [NativeName(NativeNameType.Param, "outbytesleft")] [NativeName(NativeNameType.Type, "size_t *")] ref nuint outbytesleft)
		{
			fixed (byte** pinbuf = &inbuf)
			{
				fixed (nuint* pinbytesleft = &inbytesleft)
				{
					fixed (byte** poutbuf = &outbuf)
					{
						fixed (nuint* poutbytesleft = &outbytesleft)
						{
							nuint ret = SDL.IconvNative(cd, (byte**)pinbuf, (nuint*)pinbytesleft, (byte**)poutbuf, (nuint*)poutbytesleft);
							return ret;
						}
					}
				}
			}
		}

		/// <summary>
		/// Delete an OpenGL context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_GL_DestroyContext")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool DestroyContext(this SDLGLContext context)
		{
			byte ret = SDL.GLDestroyContextNative(context);
			return ret != 0;
		}

		/// <summary>
		/// Destroy an existing SDL_MetalView object.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Metal_CreateView was<br/>
		/// called after SDL_CreateWindow.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Metal_DestroyView")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyView(this SDLMetalView view)
		{
			SDL.MetalDestroyViewNative(view);
		}

		/// <summary>
		/// Get a pointer to the backing CAMetalLayer for the given view.<br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Metal_GetLayer")]
		[return: NativeName(NativeNameType.Type, "void *")]
		public static void* GetLayer(this SDLMetalView view)
		{
			void* ret = SDL.MetalGetLayerNative(view);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig)
		{
			uint ret = SDL.EglChooseConfigNative(dpy, attribList, configs, configSize, numConfig);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, configs, configSize, numConfig);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] ref EGLConfig configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				uint ret = SDL.EglChooseConfigNative(dpy, attribList, (EGLConfig*)pconfigs, configSize, numConfig);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] ref EGLConfig configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				fixed (EGLConfig* pconfigs = &configs)
				{
					uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, (EGLConfig*)pconfigs, configSize, numConfig);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] ref int numConfig)
		{
			fixed (int* pnumConfig = &numConfig)
			{
				uint ret = SDL.EglChooseConfigNative(dpy, attribList, configs, configSize, (int*)pnumConfig);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] ref int numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				fixed (int* pnumConfig = &numConfig)
				{
					uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, configs, configSize, (int*)pnumConfig);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] ref EGLConfig configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] ref int numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				fixed (int* pnumConfig = &numConfig)
				{
					uint ret = SDL.EglChooseConfigNative(dpy, attribList, (EGLConfig*)pconfigs, configSize, (int*)pnumConfig);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "eglChooseConfig")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ChooseConfig(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] ref EGLConfig configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] ref int numConfig)
		{
			fixed (int* pattribList = &attribList)
			{
				fixed (EGLConfig* pconfigs = &configs)
				{
					fixed (int* pnumConfig = &numConfig)
					{
						uint ret = SDL.EglChooseConfigNative(dpy, (int*)pattribList, (EGLConfig*)pconfigs, configSize, (int*)pnumConfig);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "eglCopyBuffers")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint CopyBuffers(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLNativePixmapType")] nint target)
		{
			uint ret = SDL.EglCopyBuffersNative(dpy, surface, target);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreateContext")]
		[return: NativeName(NativeNameType.Type, "EGLContext")]
		public static EGLContext CreateContext(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "share_context")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext shareContext, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList)
		{
			EGLContext ret = SDL.EglCreateContextNative(dpy, config, shareContext, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreateContext")]
		[return: NativeName(NativeNameType.Type, "EGLContext")]
		public static EGLContext CreateContext(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "share_context")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext shareContext, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLContext ret = SDL.EglCreateContextNative(dpy, config, shareContext, (int*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglCreatePbufferSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePbufferSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList)
		{
			EGLSurface ret = SDL.EglCreatePbufferSurfaceNative(dpy, config, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreatePbufferSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePbufferSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePbufferSurfaceNative(dpy, config, (int*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglCreatePixmapSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePixmapSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLNativePixmapType")] nint pixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList)
		{
			EGLSurface ret = SDL.EglCreatePixmapSurfaceNative(dpy, config, pixmap, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreatePixmapSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePixmapSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "pixmap")] [NativeName(NativeNameType.Type, "EGLNativePixmapType")] nint pixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePixmapSurfaceNative(dpy, config, pixmap, (int*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglCreateWindowSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreateWindowSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "win")] [NativeName(NativeNameType.Type, "EGLNativeWindowType")] nint win, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList)
		{
			EGLSurface ret = SDL.EglCreateWindowSurfaceNative(dpy, config, win, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreateWindowSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreateWindowSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "win")] [NativeName(NativeNameType.Type, "EGLNativeWindowType")] nint win, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreateWindowSurfaceNative(dpy, config, win, (int*)pattribList);
				return ret;
			}
		}

		/// <summary>
		/// Delete an OpenGL context.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "eglDestroyContext")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint DestroyContext(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx)
		{
			uint ret = SDL.EglDestroyContextNative(dpy, ctx);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglDestroySurface")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint DestroySurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface)
		{
			uint ret = SDL.EglDestroySurfaceNative(dpy, surface);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglGetConfigAttrib")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetConfigAttrib(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value)
		{
			uint ret = SDL.EglGetConfigAttribNative(dpy, config, attribute, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglGetConfigAttrib")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetConfigAttrib(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] ref int value)
		{
			fixed (int* pvalue = &value)
			{
				uint ret = SDL.EglGetConfigAttribNative(dpy, config, attribute, (int*)pvalue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglGetConfigs")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetConfigs(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig)
		{
			uint ret = SDL.EglGetConfigsNative(dpy, configs, configSize, numConfig);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglGetConfigs")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetConfigs(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] ref EGLConfig configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] int* numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				uint ret = SDL.EglGetConfigsNative(dpy, (EGLConfig*)pconfigs, configSize, numConfig);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglGetConfigs")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetConfigs(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] EGLConfig* configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] ref int numConfig)
		{
			fixed (int* pnumConfig = &numConfig)
			{
				uint ret = SDL.EglGetConfigsNative(dpy, configs, configSize, (int*)pnumConfig);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglGetConfigs")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetConfigs(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "configs")] [NativeName(NativeNameType.Type, "EGLConfig *")] ref EGLConfig configs, [NativeName(NativeNameType.Param, "config_size")] [NativeName(NativeNameType.Type, "EGLint")] int configSize, [NativeName(NativeNameType.Param, "num_config")] [NativeName(NativeNameType.Type, "EGLint *")] ref int numConfig)
		{
			fixed (EGLConfig* pconfigs = &configs)
			{
				fixed (int* pnumConfig = &numConfig)
				{
					uint ret = SDL.EglGetConfigsNative(dpy, (EGLConfig*)pconfigs, configSize, (int*)pnumConfig);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "eglInitialize")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint Initialize(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "EGLint *")] int* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "EGLint *")] int* minor)
		{
			uint ret = SDL.EglInitializeNative(dpy, major, minor);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglInitialize")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint Initialize(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "EGLint *")] ref int major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "EGLint *")] int* minor)
		{
			fixed (int* pmajor = &major)
			{
				uint ret = SDL.EglInitializeNative(dpy, (int*)pmajor, minor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglInitialize")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint Initialize(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "EGLint *")] int* major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "EGLint *")] ref int minor)
		{
			fixed (int* pminor = &minor)
			{
				uint ret = SDL.EglInitializeNative(dpy, major, (int*)pminor);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglInitialize")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint Initialize(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "major")] [NativeName(NativeNameType.Type, "EGLint *")] ref int major, [NativeName(NativeNameType.Param, "minor")] [NativeName(NativeNameType.Type, "EGLint *")] ref int minor)
		{
			fixed (int* pmajor = &major)
			{
				fixed (int* pminor = &minor)
				{
					uint ret = SDL.EglInitializeNative(dpy, (int*)pmajor, (int*)pminor);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "eglMakeCurrent")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint MakeCurrent(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "draw")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface draw, [NativeName(NativeNameType.Param, "read")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface read, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx)
		{
			uint ret = SDL.EglMakeCurrentNative(dpy, draw, read, ctx);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglQueryContext")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint QueryContext(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value)
		{
			uint ret = SDL.EglQueryContextNative(dpy, ctx, attribute, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglQueryContext")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint QueryContext(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] ref int value)
		{
			fixed (int* pvalue = &value)
			{
				uint ret = SDL.EglQueryContextNative(dpy, ctx, attribute, (int*)pvalue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglQueryString")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static byte* QueryString(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name)
		{
			byte* ret = SDL.EglQueryStringNative(dpy, name);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglQueryString")]
		[return: NativeName(NativeNameType.Type, "char const *")]
		public static string QueryStringS(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "EGLint")] int name)
		{
			string ret = Utils.DecodeStringUTF8(SDL.EglQueryStringNative(dpy, name));
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglQuerySurface")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint QuerySurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] int* value)
		{
			uint ret = SDL.EglQuerySurfaceNative(dpy, surface, attribute, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglQuerySurface")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint QuerySurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint *")] ref int value)
		{
			fixed (int* pvalue = &value)
			{
				uint ret = SDL.EglQuerySurfaceNative(dpy, surface, attribute, (int*)pvalue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglSwapBuffers")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint SwapBuffers(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface)
		{
			uint ret = SDL.EglSwapBuffersNative(dpy, surface);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglTerminate")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint Terminate(this EGLDisplay dpy)
		{
			uint ret = SDL.EglTerminateNative(dpy);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglBindTexImage")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint BindTexImage(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLint")] int buffer)
		{
			uint ret = SDL.EglBindTexImageNative(dpy, surface, buffer);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglReleaseTexImage")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint ReleaseTexImage(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLint")] int buffer)
		{
			uint ret = SDL.EglReleaseTexImageNative(dpy, surface, buffer);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglSurfaceAttrib")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint SurfaceAttrib(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "EGLSurface")] EGLSurface surface, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLint")] int value)
		{
			uint ret = SDL.EglSurfaceAttribNative(dpy, surface, attribute, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglSwapInterval")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint SwapInterval(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "interval")] [NativeName(NativeNameType.Type, "EGLint")] int interval)
		{
			uint ret = SDL.EglSwapIntervalNative(dpy, interval);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreatePbufferFromClientBuffer")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePbufferFromClientBuffer(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "buftype")] [NativeName(NativeNameType.Type, "EGLenum")] uint buftype, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] int* attribList)
		{
			EGLSurface ret = SDL.EglCreatePbufferFromClientBufferNative(dpy, buftype, buffer, config, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreatePbufferFromClientBuffer")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePbufferFromClientBuffer(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "buftype")] [NativeName(NativeNameType.Type, "EGLenum")] uint buftype, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLint const *")] ref int attribList)
		{
			fixed (int* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePbufferFromClientBufferNative(dpy, buftype, buffer, config, (int*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglCreateSync")]
		[return: NativeName(NativeNameType.Type, "EGLSync")]
		public static EGLSync CreateSync(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList)
		{
			EGLSync ret = SDL.EglCreateSyncNative(dpy, type, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreateSync")]
		[return: NativeName(NativeNameType.Type, "EGLSync")]
		public static EGLSync CreateSync(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "EGLenum")] uint type, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLSync ret = SDL.EglCreateSyncNative(dpy, type, (nint*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglDestroySync")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint DestroySync(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync)
		{
			uint ret = SDL.EglDestroySyncNative(dpy, sync);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglClientWaitSync")]
		[return: NativeName(NativeNameType.Type, "EGLint")]
		public static int ClientWaitSync(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags, [NativeName(NativeNameType.Param, "timeout")] [NativeName(NativeNameType.Type, "EGLTime")] ulong timeout)
		{
			int ret = SDL.EglClientWaitSyncNative(dpy, sync, flags, timeout);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglGetSyncAttrib")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetSyncAttrib(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] nint* value)
		{
			uint ret = SDL.EglGetSyncAttribNative(dpy, sync, attribute, value);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglGetSyncAttrib")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint GetSyncAttrib(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "attribute")] [NativeName(NativeNameType.Type, "EGLint")] int attribute, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "EGLAttrib *")] ref nint value)
		{
			fixed (nint* pvalue = &value)
			{
				uint ret = SDL.EglGetSyncAttribNative(dpy, sync, attribute, (nint*)pvalue);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglCreateImage")]
		[return: NativeName(NativeNameType.Type, "EGLImage")]
		public static EGLImage CreateImage(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLenum")] uint target, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList)
		{
			EGLImage ret = SDL.EglCreateImageNative(dpy, ctx, target, buffer, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreateImage")]
		[return: NativeName(NativeNameType.Type, "EGLImage")]
		public static EGLImage CreateImage(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "EGLContext")] EGLContext ctx, [NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "EGLenum")] uint target, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "EGLClientBuffer")] EGLClientBuffer buffer, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLImage ret = SDL.EglCreateImageNative(dpy, ctx, target, buffer, (nint*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglDestroyImage")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint DestroyImage(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "image")] [NativeName(NativeNameType.Type, "EGLImage")] EGLImage image)
		{
			uint ret = SDL.EglDestroyImageNative(dpy, image);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreatePlatformWindowSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePlatformWindowSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_window")] [NativeName(NativeNameType.Type, "void *")] void* nativeWindow, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList)
		{
			EGLSurface ret = SDL.EglCreatePlatformWindowSurfaceNative(dpy, config, nativeWindow, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreatePlatformWindowSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePlatformWindowSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_window")] [NativeName(NativeNameType.Type, "void *")] void* nativeWindow, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePlatformWindowSurfaceNative(dpy, config, nativeWindow, (nint*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglCreatePlatformPixmapSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePlatformPixmapSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_pixmap")] [NativeName(NativeNameType.Type, "void *")] void* nativePixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] nint* attribList)
		{
			EGLSurface ret = SDL.EglCreatePlatformPixmapSurfaceNative(dpy, config, nativePixmap, attribList);
			return ret;
		}

		[NativeName(NativeNameType.Func, "eglCreatePlatformPixmapSurface")]
		[return: NativeName(NativeNameType.Type, "EGLSurface")]
		public static EGLSurface CreatePlatformPixmapSurface(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "config")] [NativeName(NativeNameType.Type, "EGLConfig")] EGLConfig config, [NativeName(NativeNameType.Param, "native_pixmap")] [NativeName(NativeNameType.Type, "void *")] void* nativePixmap, [NativeName(NativeNameType.Param, "attrib_list")] [NativeName(NativeNameType.Type, "EGLAttrib const *")] ref nint attribList)
		{
			fixed (nint* pattribList = &attribList)
			{
				EGLSurface ret = SDL.EglCreatePlatformPixmapSurfaceNative(dpy, config, nativePixmap, (nint*)pattribList);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "eglWaitSync")]
		[return: NativeName(NativeNameType.Type, "EGLBoolean")]
		public static uint WaitSync(this EGLDisplay dpy, [NativeName(NativeNameType.Param, "sync")] [NativeName(NativeNameType.Type, "EGLSync")] EGLSync sync, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "EGLint")] int flags)
		{
			uint ret = SDL.EglWaitSyncNative(dpy, sync, flags);
			return ret;
		}

		[NativeName(NativeNameType.Func, "WinMain")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WinMain(this nint hInst, [NativeName(NativeNameType.Param, "hPrev")] [NativeName(NativeNameType.Type, "HINSTANCE")] nint hPrev, [NativeName(NativeNameType.Param, "szCmdLine")] [NativeName(NativeNameType.Type, "LPSTR")] byte* szCmdLine, [NativeName(NativeNameType.Param, "sw")] [NativeName(NativeNameType.Type, "int")] int sw)
		{
			int ret = SDL.WinMainNative(hInst, hPrev, szCmdLine, sw);
			return ret;
		}

		[NativeName(NativeNameType.Func, "WinMain")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WinMain(this nint hInst, [NativeName(NativeNameType.Param, "hPrev")] [NativeName(NativeNameType.Type, "HINSTANCE")] nint hPrev, [NativeName(NativeNameType.Param, "szCmdLine")] [NativeName(NativeNameType.Type, "LPSTR")] ReadOnlySpan<byte> szCmdLine, [NativeName(NativeNameType.Param, "sw")] [NativeName(NativeNameType.Type, "int")] int sw)
		{
			fixed (byte* pszCmdLine = szCmdLine)
			{
				int ret = SDL.WinMainNative(hInst, hPrev, (byte*)pszCmdLine, sw);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "WinMain")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int WinMain(this nint hInst, [NativeName(NativeNameType.Param, "hPrev")] [NativeName(NativeNameType.Type, "HINSTANCE")] nint hPrev, [NativeName(NativeNameType.Param, "szCmdLine")] [NativeName(NativeNameType.Type, "LPSTR")] string szCmdLine, [NativeName(NativeNameType.Param, "sw")] [NativeName(NativeNameType.Type, "int")] int sw)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (szCmdLine != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(szCmdLine);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(szCmdLine, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = SDL.WinMainNative(hInst, hPrev, pStr0, sw);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_DestroySurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VulkanDestroySurface(this VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR")] VkSurfaceKHR surface, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] VkAllocationCallbacks* allocator)
		{
			SDL.VulkanDestroySurfaceNative(instance, surface, allocator);
		}

		/// <summary>
		/// Destroy the Vulkan rendering surface of a window.<br/>
		/// This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface<br/>
		/// was called after SDL_CreateWindow.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been<br/>
		/// created successfully by an SDL_Vulkan_CreateSurface() call.<br/>
		/// If `allocator` is NULL, Vulkan will use the system default allocator. This<br/>
		/// argument is passed directly to Vulkan and isn't used by SDL itself.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_DestroySurface")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VulkanDestroySurface(this VkInstance instance, [NativeName(NativeNameType.Param, "surface")] [NativeName(NativeNameType.Type, "VkSurfaceKHR")] VkSurfaceKHR surface, [NativeName(NativeNameType.Param, "allocator")] [NativeName(NativeNameType.Type, "VkAllocationCallbacks const *")] ref VkAllocationCallbacks allocator)
		{
			fixed (VkAllocationCallbacks* pallocator = &allocator)
			{
				SDL.VulkanDestroySurfaceNative(instance, surface, (VkAllocationCallbacks*)pallocator);
			}
		}

		/// <summary>
		/// Query support for presentation via a given physical device and queue<br/>
		/// family.<br/>
		/// The `instance` must have been created with extensions returned by<br/>
		/// SDL_Vulkan_GetInstanceExtensions() enabled.<br/>
		/// <br/>
		/// <br/>
		/// <br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "SDL_Vulkan_GetPresentationSupport")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool VulkanGetPresentationSupport(this VkInstance instance, [NativeName(NativeNameType.Param, "physicalDevice")] [NativeName(NativeNameType.Type, "VkPhysicalDevice")] VkPhysicalDevice physicalDevice, [NativeName(NativeNameType.Param, "queueFamilyIndex")] [NativeName(NativeNameType.Type, "Uint32")] uint queueFamilyIndex)
		{
			byte ret = SDL.VulkanGetPresentationSupportNative(instance, physicalDevice, queueFamilyIndex);
			return ret != 0;
		}

	}
}
